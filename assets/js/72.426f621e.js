(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{493:function(t,a,s){"use strict";s.r(a);var n=s(56),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_10-1-基础数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-基础数据结构"}},[t._v("#")]),t._v(" 10.1 基础数据结构")]),t._v(" "),s("h3",{attrs:{id:"_10-1-1-数组-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-1-数组-array"}},[t._v("#")]),t._v(" 10.1.1 数组（Array）")]),t._v(" "),s("p",[t._v("数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的\n"),s("img",{attrs:{src:"/jaqi.note/array.png",alt:"array"}})]),t._v(" "),s("h4",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ol",[s("li",[t._v("按照索引查询元素速度快")]),t._v(" "),s("li",[t._v("按照索引遍历数组方便")])]),t._v(" "),s("h4",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ol",[s("li",[t._v("数组的大小固定后就无法扩容了")]),t._v(" "),s("li",[t._v("数组只能存储一种类型的数据")]),t._v(" "),s("li",[t._v("添加，删除的操作慢，因为要移动其他的元素")])]),t._v(" "),s("h4",{attrs:{id:"适用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景：")]),t._v(" "),s("p",[t._v("频繁查询，很少插入或删除的情况，且对存储空间要求不大")]),t._v(" "),s("h3",{attrs:{id:"_10-1-2-链表-linked-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-2-链表-linked-list"}},[t._v("#")]),t._v(" 10.1.2 链表（Linked List）")]),t._v(" "),s("p",[t._v("链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等\n"),s("img",{attrs:{src:"/jaqi.note/linked-list.png",alt:"linked-list"}})]),t._v(" "),s("h4",{attrs:{id:"优点-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ol",[s("li",[t._v("链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素")]),t._v(" "),s("li",[t._v("添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快")])]),t._v(" "),s("h4",{attrs:{id:"缺点-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ol",[s("li",[t._v("因为含有大量的指针域，占用空间较大")]),t._v(" "),s("li",[t._v("查找元素需要遍历链表来查找，非常耗时（使用"),s("code",[t._v("跳表")]),t._v("优化查询速度）")])]),t._v(" "),s("h4",{attrs:{id:"适用场景-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-2"}},[t._v("#")]),t._v(" 适用场景：")]),t._v(" "),s("p",[t._v("频繁插入或删除，很少查询的情况，且对存储空间要求不大")]),t._v(" "),s("h3",{attrs:{id:"_10-1-3-栈-stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-3-栈-stack"}},[t._v("#")]),t._v(" 10.1.3 栈（Stack）")]),t._v(" "),s("p",[t._v("栈，也叫堆栈，是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈\n"),s("img",{attrs:{src:"/jaqi.note/stack.png",alt:"stack"}})]),t._v(" "),s("h4",{attrs:{id:"优点-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点-3"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ol",[s("li",[t._v("提供后进先出的存取方式")])]),t._v(" "),s("h4",{attrs:{id:"缺点-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ol",[s("li",[t._v("存取其他项都很慢")])]),t._v(" "),s("h4",{attrs:{id:"适用场景-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-3"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),s("p",[t._v("递归功能方面的场景，例如斐波那契数列")]),t._v(" "),s("h3",{attrs:{id:"_10-1-4-队列-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-4-队列-queue"}},[t._v("#")]),t._v(" 10.1.4 队列（Queue）")]),t._v(" "),s("p",[t._v("队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队。\n"),s("img",{attrs:{src:"/jaqi.note/queue.png",alt:"queue"}})]),t._v(" "),s("h4",{attrs:{id:"优点-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点-4"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ol",[s("li",[t._v("提供先进先出的存取方式")])]),t._v(" "),s("h4",{attrs:{id:"缺点-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点-4"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ol",[s("li",[t._v("存取其他项都很慢")])]),t._v(" "),s("h4",{attrs:{id:"适用场景-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-4"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),s("p",[t._v("多线程阻塞队列管理")]),t._v(" "),s("h3",{attrs:{id:"_10-1-5-树-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-5-树-tree"}},[t._v("#")]),t._v(" 10.1.5 树（Tree）")]),t._v(" "),s("p",[t._v("树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。")]),t._v(" "),s("ul",[s("li",[t._v("它具有以下的特点：")])]),t._v(" "),s("ol",[s("li",[t._v("每个节点有零个或多个子节点")]),t._v(" "),s("li",[t._v("没有父节点的节点称为根节点")]),t._v(" "),s("li",[t._v("每一个非根节点有且只有一个父节点")]),t._v(" "),s("li",[t._v("除了根节点外，每个子节点可以分为多个不相交的子树")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/jaqi.note/tree.png",alt:"tree"}})]),t._v(" "),s("ul",[s("li",[t._v("二叉树特点：")])]),t._v(" "),s("ol",[s("li",[t._v("每个结点最多有两颗子树，结点的度最大为2")]),t._v(" "),s("li",[t._v("左子树和右子树是有顺序的，次序不能颠倒")]),t._v(" "),s("li",[t._v("即使某结点只有一个子树，也要区分左右子树")])]),t._v(" "),s("ul",[s("li",[t._v("二叉搜索树特点：")])]),t._v(" "),s("ol",[s("li",[t._v("左子树上的所有节点值均小于它的根节点的值")]),t._v(" "),s("li",[t._v("右子树上的所有节点值均大于它的根节点的值")]),t._v(" "),s("li",[t._v("左右子树也分别符合以上两点")])]),t._v(" "),s("h4",{attrs:{id:"优点-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点-5"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ol",[s("li",[t._v("查找，插入，删除都快")]),t._v(" "),s("li",[t._v("既有链表的好处，也有数组的好处")])]),t._v(" "),s("h4",{attrs:{id:"缺点-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点-5"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("h4",{attrs:{id:"适用场景-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-5"}},[t._v("#")]),t._v(" 适用场景：")]),t._v(" "),s("p",[t._v("二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。")]),t._v(" "),s("h3",{attrs:{id:"_10-1-6-哈希表-hash-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-6-哈希表-hash-table"}},[t._v("#")]),t._v(" 10.1.6 哈希表（Hash table）")]),t._v(" "),s("p",[t._v("哈希表，也叫散列表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素(哈希冲突：如果key值重复则通常用链表存储相同key值对应的value)。\n"),s("img",{attrs:{src:"/jaqi.note/hash.png",alt:"hash"}})]),t._v(" "),s("h4",{attrs:{id:"优点-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点-6"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ol",[s("li",[t._v("如果关键字已知则存取速度极快")])]),t._v(" "),s("h4",{attrs:{id:"缺点-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点-6"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ol",[s("li",[t._v("删除慢，如果不知道关键则存取很慢，对存储空间使用不充分")])]),t._v(" "),s("h4",{attrs:{id:"适用场景-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-6"}},[t._v("#")]),t._v(" 适用场景：")]),t._v(" "),s("p",[t._v("Map、Set")]),t._v(" "),s("h3",{attrs:{id:"_10-1-7-堆-heap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-7-堆-heap"}},[t._v("#")]),t._v(" 10.1.7 堆（Heap）")]),t._v(" "),s("p",[t._v("堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象。")]),t._v(" "),s("ul",[s("li",[t._v("具有以下的性质：")])]),t._v(" "),s("ol",[s("li",[t._v("堆中某个节点的值总是不大于或不小于其父节点的值；")]),t._v(" "),s("li",[t._v("堆总是一棵完全二叉树。")]),t._v(" "),s("li",[t._v("将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。")])]),t._v(" "),s("p",[t._v("将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。")]),t._v(" "),s("p",[t._v("堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。\n(ki <= k2i,ki <= k2i+1)或者(ki >= k2i,ki >= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/jaqi.note/heap.png",alt:"heap"}})]),t._v(" "),s("h4",{attrs:{id:"优点-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点-7"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ol",[s("li",[t._v("插入，删除块，对最大数据的项存取很快")])]),t._v(" "),s("h4",{attrs:{id:"缺点-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点-7"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ol",[s("li",[t._v("对其他数据项存取很慢")])]),t._v(" "),s("h4",{attrs:{id:"适用场景-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-7"}},[t._v("#")]),t._v(" 适用场景：")]),t._v(" "),s("p",[t._v("因为堆有序的特点，一般用来做数组中的排序，称为堆排序。")]),t._v(" "),s("h3",{attrs:{id:"_10-1-8-图-graph"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-8-图-graph"}},[t._v("#")]),t._v(" 10.1.8 图（Graph）")]),t._v(" "),s("p",[t._v("图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/jaqi.note/graph.png",alt:"graph"}})]),t._v(" "),s("p",[t._v("图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。")]),t._v(" "),s("h4",{attrs:{id:"优点-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点-8"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("h4",{attrs:{id:"缺点-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点-8"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("h4",{attrs:{id:"适用场景-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-8"}},[t._v("#")]),t._v(" 适用场景：")]),t._v(" "),s("h2",{attrs:{id:"_10-2-时间复杂度与空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-时间复杂度与空间复杂度"}},[t._v("#")]),t._v(" 10.2 时间复杂度与空间复杂度")]),t._v(" "),s("p",[t._v("时间：是指执行当前算法所消耗的时间\n空间：是指执行当前算法需要占用多少内存空间\n负责度：是指算法随着执行次数的增长，所花费的时间、空间的增长趋势")]),t._v(" "),s("h3",{attrs:{id:"_10-2-1-时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-1-时间复杂度"}},[t._v("#")]),t._v(" 10.2.1 时间复杂度")]),t._v(" "),s("h4",{attrs:{id:"公式-t-n-o-f-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公式-t-n-o-f-n"}},[t._v("#")]),t._v(" 公式："),s("code",[t._v("T(n) = O(f(n))")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("f(n)")]),t._v(":表示每行代码执行次数之和\n去掉常数项和系数、只保留复杂度最大项")])]),t._v(" "),s("h4",{attrs:{id:"常见的时间复杂度量级有"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的时间复杂度量级有"}},[t._v("#")]),t._v(" 常见的时间复杂度量级有：")]),t._v(" "),s("ul",[s("li",[t._v("常数阶"),s("code",[t._v("O(1)")]),t._v("\n无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("int i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("对数阶"),s("code",[t._v("O(logN)")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("int i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("线性阶"),s("code",[t._v("O(n)")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("线性对数阶"),s("code",[t._v("O(nlogN)")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("平方阶"),s("code",[t._v("O(n²)")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("立方阶"),s("code",[t._v("O(n³)")])]),t._v(" "),s("li",[t._v("K次方阶"),s("code",[t._v("O(n^k)")])]),t._v(" "),s("li",[t._v("指数阶"),s("code",[t._v("(2^n)")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("时间负责度优化方向")]),t._v(" "),s("p",[t._v("升维、空间换时间")])]),t._v(" "),s("h3",{attrs:{id:"_10-2-2-空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-2-空间复杂度"}},[t._v("#")]),t._v(" 10.2.2 空间复杂度")]),t._v(" "),s("h4",{attrs:{id:"公式-t-n-o-f-n-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公式-t-n-o-f-n-2"}},[t._v("#")]),t._v(" 公式："),s("code",[t._v("T(n) = O(f(n))")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("f(n)")]),t._v(":表示每行代码占用的空间大小之和\n去掉常数项和系数、只保留复杂度最大项")])]),t._v(" "),s("h4",{attrs:{id:"常见的时间复杂度量级有-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的时间复杂度量级有-2"}},[t._v("#")]),t._v(" 常见的时间复杂度量级有：")]),t._v(" "),s("ul",[s("li",[t._v("常数阶"),s("code",[t._v("O(1)")]),t._v("\n只要不会因为算法里的执行，导致额外的空间增长，就算是一万行，空间复杂度也是"),s("code",[t._v("O(1)")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"开始吃糖"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我吃了1颗糖"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我吃了2颗糖"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我吃了10000颗糖"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("线性阶"),s("code",[t._v("O(n)")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("平方阶"),s("code",[t._v("O(n²)")]),t._v("\nO(n²) 这种空间复杂度一般出现在比如二维数组，或是矩阵的情况")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("ul",[s("li",[t._v("阶乘"),s("code",[t._v("O(n!)")])])]),t._v(" "),s("h2",{attrs:{id:"_10-3-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-算法"}},[t._v("#")]),t._v(" 10.3 算法")]),t._v(" "),s("h3",{attrs:{id:"_10-3-1-排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-1-排序"}},[t._v("#")]),t._v(" 10.3.1 排序")]),t._v(" "),s("h3",{attrs:{id:"_10-3-2-暴力枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-2-暴力枚举"}},[t._v("#")]),t._v(" 10.3.2 暴力枚举")]),t._v(" "),s("h3",{attrs:{id:"_10-3-3-图、树、线性表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-3-图、树、线性表"}},[t._v("#")]),t._v(" 10.3.3 图、树、线性表")]),t._v(" "),s("h3",{attrs:{id:"_10-3-4-分治法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-4-分治法"}},[t._v("#")]),t._v(" 10.3.4 分治法")]),t._v(" "),s("h3",{attrs:{id:"_10-3-5-递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-5-递归"}},[t._v("#")]),t._v(" 10.3.5 递归")]),t._v(" "),s("h3",{attrs:{id:"_10-3-6-动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-6-动态规划"}},[t._v("#")]),t._v(" 10.3.6 动态规划")]),t._v(" "),s("h3",{attrs:{id:"_10-3-7-贪心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-7-贪心"}},[t._v("#")]),t._v(" 10.3.7 贪心")])])}),[],!1,null,null,null);a.default=r.exports}}]);