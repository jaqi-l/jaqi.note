(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{490:function(t,s,a){"use strict";a.r(s);var e=a(56),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_3-1-web协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-web协议"}},[t._v("#")]),t._v(" 3.1 Web协议")]),t._v(" "),a("h3",{attrs:{id:"网络协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络协议"}},[t._v("#")]),t._v(" 网络协议")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("分类")]),t._v(" "),a("th",[t._v("协议")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("应用层")]),t._v(" "),a("td",[a("code",[t._v("DHCP")]),t._v(" "),a("code",[t._v("HTTP")]),t._v(" "),a("code",[t._v("HTTPS")]),t._v(" "),a("code",[t._v("RTMP")]),t._v(" "),a("code",[t._v("P2P")]),t._v(" "),a("code",[t._v("DNS")]),t._v(" "),a("code",[t._v("GTP")]),t._v(" "),a("code",[t._v("RPC")])])]),t._v(" "),a("tr",[a("td",[t._v("传输层")]),t._v(" "),a("td",[a("code",[t._v("UDP")]),t._v(" "),a("code",[t._v("TCP")])])]),t._v(" "),a("tr",[a("td",[t._v("网络层")]),t._v(" "),a("td",[a("code",[t._v("ICMP")]),t._v(" "),a("code",[t._v("IP")]),t._v(" "),a("code",[t._v("OSPF")]),t._v(" "),a("code",[t._v("BGP")]),t._v(" "),a("code",[t._v("IPSec")]),t._v(" "),a("code",[t._v("GRE")])])]),t._v(" "),a("tr",[a("td",[t._v("链路层")]),t._v(" "),a("td",[a("code",[t._v("ARP")]),t._v(" "),a("code",[t._v("VLAN")]),t._v(" "),a("code",[t._v("STP")])])]),t._v(" "),a("tr",[a("td",[t._v("物理层")]),t._v(" "),a("td",[a("code",[t._v("网络跳线")])])])])]),t._v(" "),a("h3",{attrs:{id:"osi模型与tcp-ip模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#osi模型与tcp-ip模型"}},[t._v("#")]),t._v(" OSI模型与TCP/IP模型")]),t._v(" "),a("p",[a("img",{attrs:{src:"/jaqi.note/OSI%E6%A8%A1%E5%9E%8B.png",alt:"OSI模型"}})]),t._v(" "),a("ol",[a("li",[t._v("应用层：负责解决业务问题")]),t._v(" "),a("li",[t._v("表示层：负责把网络中的消息转换成应用层可以读取的消息")]),t._v(" "),a("li",[t._v("会话层：负责建立会话、握手、维持连接、关闭")]),t._v(" "),a("li",[t._v("传输层：负责解决进程与进程之间的通信，例如TCP保证报文的可达性和流量的控制")]),t._v(" "),a("li",[t._v("网络层：负责解决广域网（Internet）中主机之间数据的传递")]),t._v(" "),a("li",[t._v("数据链路层：负责局域网中根据MAC地址连接的相应的交换机/路由器进行报文的转发")]),t._v(" "),a("li",[t._v("物理层：物理传输介质")])]),t._v(" "),a("p",[t._v("分层模型的优点在于当前层只需要考虑与其相邻层的对接交互，即每一层只为其之上的层服务，并使用在其之下的层所提供的服务，而不需要考虑其相邻层之外的其他层做了什么。分层模型的缺点在于不同层之间数据交互需要耗费更多的时间，从而影响网络性能。")]),t._v(" "),a("h3",{attrs:{id:"web构架的关键属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web构架的关键属性"}},[t._v("#")]),t._v(" web构架的关键属性：")]),t._v(" "),a("ul",[a("li",[t._v("性能：影响高可用的关键因素")]),t._v(" "),a("li",[t._v("可伸缩性：支持部署可以互相交互的大量组件")]),t._v(" "),a("li",[t._v("简单性：易理解、易实现、易验证")]),t._v(" "),a("li",[t._v("可见性：对两个组件间的交互进行监视或者仲裁的能力。如缓存、分层设计等")]),t._v(" "),a("li",[t._v("可移植性：在不同的环境下运行的能力")]),t._v(" "),a("li",[t._v("可靠性：出现部分故障时对整体的影响程度")]),t._v(" "),a("li",[t._v("可修改性：对系统做出修改的难易程度，由可进化型、可定制性、可扩展性、可配置性、可重用性构成")])]),t._v(" "),a("h3",{attrs:{id:"五种架构风格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五种架构风格"}},[t._v("#")]),t._v(" 五种架构风格：")]),t._v(" "),a("ul",[a("li",[t._v("数据流风格 Data-flow Styles")])]),t._v(" "),a("blockquote",[a("p",[t._v("优点：简单性、可进化性、可扩展性、可配置性、可重用性")])]),t._v(" "),a("ul",[a("li",[t._v("复制风格 Replication Styles")])]),t._v(" "),a("blockquote",[a("p",[t._v("优点：用户可察觉的性能、可伸缩性，网络效率、可靠性也可以得到提升")])]),t._v(" "),a("ul",[a("li",[t._v("分层风格 Hierarchical Styles")])]),t._v(" "),a("blockquote",[a("p",[t._v("优点：简单性、可进化性、可伸缩性")])]),t._v(" "),a("ul",[a("li",[t._v("移动代码风格 Mobile Code Styles")])]),t._v(" "),a("blockquote",[a("p",[t._v("优点：可移植性、可扩展性、网络效率")])]),t._v(" "),a("ul",[a("li",[t._v("点对点风格 Peer-to-Peer Styles")])]),t._v(" "),a("blockquote",[a("p",[t._v("优点：可进化性、可重用性、可扩展性、可配置性")])]),t._v(" "),a("h2",{attrs:{id:"_3-2-http-1-1协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-http-1-1协议"}},[t._v("#")]),t._v(" 3.2 HTTP/1.1协议")]),t._v(" "),a("h3",{attrs:{id:"http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[t._v("#")]),t._v(" http协议")]),t._v(" "),a("p",[t._v("一种无状态的，应用层的，以请求/应答方式运行的协议。建立在TCP协议之上，它可以使用可扩展的语义和自描述消息格式。与基于网络的超文本信息系统灵活互动。（RFC723 2014.6）")]),t._v(" "),a("h4",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点：")]),t._v(" "),a("ul",[a("li",[t._v("传输协议实际是交给TCP协议来完成的")]),t._v(" "),a("li",[t._v("无状态：并不会存储用户的信息；如果连接意外断开，整个会话就会丢失，重新连接之后一般需要从头开始")]),t._v(" "),a("li",[t._v("请求/应答：一次请求对应一次响应")]),t._v(" "),a("li",[t._v("可扩展：可以自定义扩展一些head字段等")]),t._v(" "),a("li",[t._v("自描述： 消息体可以是音频视频、文本、图片等（Content-type）")])]),t._v(" "),a("h3",{attrs:{id:"https协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https协议"}},[t._v("#")]),t._v(" https协议")]),t._v(" "),a("p",[t._v('由于HTTP天生“明文"的特点,整个传输过程完全透明,任何人都能够在链路中截获、修改或者伪造请求/响应报文,数据不具有可信性。因此就诞生了为安全而生的HTTPS协议使用HTTPS时，所有的HTTP请求和响应在发送到网络之前，都要进行加密。')]),t._v(" "),a("p",[t._v("https利用摘要算法、对称加密算法、非对称加密算法来完成的")]),t._v(" "),a("h3",{attrs:{id:"基于abnf语义定义的http消息格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于abnf语义定义的http消息格式"}},[t._v("#")]),t._v(" 基于ABNF语义定义的HTTP消息格式")]),t._v(" "),a("h3",{attrs:{id:"浏览器发起http请求的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器发起http请求的过程"}},[t._v("#")]),t._v(" 浏览器发起http请求的过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"/jaqi.note/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82%E7%9A%84%E8%BF%87%E7%A8%8B.png",alt:"浏览器发起http请求的过程"}})]),t._v(" "),a("h3",{attrs:{id:"使用chrome的network面板分析http报文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用chrome的network面板分析http报文"}},[t._v("#")]),t._v(" 使用Chrome的Network面板分析HTTP报文")]),t._v(" "),a("h4",{attrs:{id:"network面板构成-控制器、过滤器、概览、请求列表、概要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network面板构成-控制器、过滤器、概览、请求列表、概要"}},[t._v("#")]),t._v(" Network面板构成：控制器、过滤器、概览、请求列表、概要")]),t._v(" "),a("ol",[a("li",[t._v("控制器：")])]),t._v(" "),a("blockquote",[a("p",[t._v("抓包/停止抓包、清楚请求、跨页面加载请求（Preserve log）、屏幕截图（Capture screenshots）、重新执行XHR请求、停用浏览器缓存(Diaable cache)、手动清理缓存（cache）、手动清理缓存（cookie）、离线模式、模型网速、")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("过滤器：")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("根据类型过滤：XHR、JS、Img、Media、Font、Doc、WS(WebSocket)、Mainifest、Other")]),t._v(" "),a("li",[t._v("多类型过滤：Ctrl/Command+单击根据多个类型过滤")]),t._v(" "),a("li",[t._v("按照时间过滤：")]),t._v(" "),a("li",[t._v("过滤BASE64的请求：Data URLs")]),t._v(" "),a("li",[t._v("根据属性过滤filter：domain（指定域）、has-response-header（指定响应头）、is:running（websocker）、is:from-cache(缓存)、larger-than（资源大小）、method（请求类型）、mime-type（MIME资源类型）、status-code（状态码）、set-cookoe-name/domain/value（具有set-cookoe标头的域/名称/值）、scheme(具有https保护的)、mixed-content（显示所有混合内容的资源）")])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("概览：")]),t._v(" "),a("li",[t._v("请求列表：")])]),t._v(" "),a("blockquote",[a("p",[t._v("请求列表排序：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("按照活动时间排序Waterfall：Start Time（第一个请求开始的）、Response Time（第一个开始下载的）、End Time（完成的第一个请求）、Total Duration（连接设置时间和请求、相应最快的请求）、Latency（等待最短响应时间的）")]),t._v(" "),a("li",[t._v("请求发起方式Initiator:Parser（html解析器发起的）、Redirect（HTTP重定向发起的）、Script（JS脚步发起的）、Other（用户点击、地址栏输入地址等）")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("预览请求详情:")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("头部Headers:")]),t._v(" "),a("li",[t._v("cookie")]),t._v(" "),a("li",[t._v("预览响应正文Preview")]),t._v(" "),a("li",[t._v("查看响应正文Response")]),t._v(" "),a("li",[t._v("时间详情分布timing:Queueing（请求正在排队）、Stalled（请求被终止）、DNS Lookup（解析地址）、Proxy Negotiation（正在与代理服务器协商请求）、Requst sent（正在发送请求）、ServiceWorker Preparation（浏览器正在启动Service Worker ）、Request to ServiceWorker（浏览器正将请求发送到Service Worker） Waiting（浏览器正在等待响应的第一个字节）、Content Download（浏览器正在接收响应） Receiving Push（浏览器正在通过HTTP/2服务器推送接收此响应的数据）、 Reading Push（浏览器正在读取之前收到的本地数据）")]),t._v(" "),a("li",[t._v("请求的上下游:shift键+鼠标悬停")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("查看请求的上下游:shift+鼠标悬停，红色下游、绿色上游")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("概要：请求总数，总数据量，DOM加载时间，总加载时间：")])]),t._v(" "),a("h3",{attrs:{id:"uri基本格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uri基本格式"}},[t._v("#")]),t._v(" URI基本格式")]),t._v(" "),a("p",[t._v("URL统一资源定位符，URI统一资源标识符，URN统一资源名称。\nURI的组成：scheme-user-informantion-host-port+query-fragment\n为什么要进行URI编码：避免数据编码歧义。")]),t._v(" "),a("h3",{attrs:{id:"http请求行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http请求行"}},[t._v("#")]),t._v(" HTTP请求行")]),t._v(" "),a("p",[t._v("HTTP版本：0.9（只支持get方法）、1.0 （常用代理服务器例如nginx默认配置）1.1（1999年发布）、2.0(2015年发布)\nHTTP常见方法：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("GET")]),t._v("：主要的获取信息方法，幂等方法"),a("br"),t._v(" "),a("code",[t._v("HEAD")]),t._v("：类似于GET，但服务器不发送body，用以获取HEAD元数据，幂等方法"),a("br"),t._v(" "),a("code",[t._v("POST")]),t._v("：常用于表单，和新增资源"),a("br"),t._v(" "),a("code",[t._v("PUT")]),t._v("：常用于更新资源，带条件时是幂等方法"),a("br"),t._v(" "),a("code",[t._v("DELETE")]),t._v("：删除资源，幂等方法"),a("br"),t._v(" "),a("code",[t._v("CONNECT")]),t._v("：建立tunnel隧道"),a("br"),t._v(" "),a("code",[t._v("OPTIONS")]),t._v("：显示服务器对访问资源支持的方法，幂等方法"),a("br"),t._v(" "),a("code",[t._v("TRACE")]),t._v("：回显服务器收到的请求，用于定位问题。有延期风险。（nginx不支持）")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("幂等方法：调用一次和调用多次结果一致。")])]),t._v(" "),a("h3",{attrs:{id:"http包体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http包体"}},[t._v("#")]),t._v(" HTTP包体")]),t._v(" "),a("h3",{attrs:{id:"http响应行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http响应行"}},[t._v("#")]),t._v(" HTTP响应行")]),t._v(" "),a("p",[t._v("HTTP响应码：")]),t._v(" "),a("blockquote",[a("p",[t._v("* 1xx：请求已收到，需要进一步处理")]),t._v(" "),a("blockquote",[a("p",[t._v("100：上传大文件前使用\n 101：协议升级使用\n 102：用于WebDAV请求、服务器已收到，需要很长一段时间完成。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("* 2xx：成功处理的请求")]),t._v(" "),a("blockquote",[a("p",[t._v("200：成功返回响应\n 201：有新资源在服务器端被创建\n 202：服务器接收并开始处理请求，单请求未处理完成。\n 203：告诉客户端代理服务器修改了原服务器的数据。\n 204：成功的执行了请求，但不响应包体。暗示客户端无需更新视图。\n 205：成功的执行了请求，但不响应包体。提示客户端需要更新视图。\n 206：range协议时返回部分响应内容时的响应码。\n 207：WebDev协议中以XML返回多个资源的状态。\n 208：WebDev协议中父集合的响应码")])])]),t._v(" "),a("blockquote",[a("p",[t._v("* 3xx：重定向,次数不超过5次")]),t._v(" "),a("blockquote",[a("p",[t._v("300：告诉客户端自行选择访问方式\n 301：永久重定向\n 302：临时重定向\n 303：重定向到其他资源\n 304：缓存过期\n 307：\n 308：")])])]),t._v(" "),a("blockquote",[a("p",[t._v("* 4xx：客户端出现错误")]),t._v(" "),a("blockquote",[a("p",[t._v("400：服务端认为客户端出现了错误，且不属于以下错误类型。。\n 401：用户认证信息不正确或缺失。\n 407：对需要经由代理的请求，认证信息未通过代理服务器。\n 403：没有权限\n 404：没有找到对应资源\n 410：没有找到对应资源，且知道资源永久性的找不到。\n 405：服务器不支持改请求方法。\n 406：对客户端指定的资源表述不存在。\n 408：服务器接收请求超时。\n 409：资源冲突。\n 411：请求中有包体，未携带Content-length头部，且不属于chunk类请求。\n 412：条件类请求，不满足时\n 413：包体超出最大长度\n 414：请求的URI超长\n 415：上传的文件类型不被服务器支持\n 416：无法提供range请求中指定的那段包体\n 417：对Expect请求头部期待的情况无法满足时的相应码\n 421：服务器认为请求不应该发给它\n 426：服务器拒绝基于http协议提供服务\n 428：用户请求中缺失了条件类头部\n 429：发送请求速率过快\n 431：请求的header头部大小超过限制\n 451：由于法律渊源资源不可以访问")])])]),t._v(" "),a("blockquote",[a("p",[t._v("* 5xx：服务端出现错误")]),t._v(" "),a("blockquote",[a("p",[t._v("500：服务器内部出现错误，且不属于以下错误类型。\n 501：不支持实现请求所需要的功能。\n 502：代理服务器无法获取到合法请求。\n 503：服务器资源尚未准备好处理当前请求。\n 504：代理服务器无法及时的从上游获取相应。\n 505：请求使用的http协议版本不支持。\n 507：服务器没有足够的空间处理请求。\n 508：访问资源时检测到循环\n 511：代理服务器发现客户端需要进行身份验证才能获得网络访问权限。")])])]),t._v(" "),a("h3",{attrs:{id:"响应与请求上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应与请求上下文"}},[t._v("#")]),t._v(" 响应与请求上下文")]),t._v(" "),a("p",[a("code",[t._v("User-Agent")]),t._v(":客户端类型信息"),a("br"),t._v(" "),a("code",[t._v("Referer")]),t._v(":浏览器告诉服务器该网页是从哪个页面链接过来的（常用于处理防盗链、统计分析、缓冲优化等）"),a("br"),t._v(" "),a("code",[t._v("Form")]),t._v(":用于网络爬虫，告诉服务器爬虫信息"),a("br"),t._v(" "),a("code",[t._v("Server")]),t._v(":告诉客户端，服务器上用的软件信息"),a("br"),t._v(" "),a("code",[t._v("Allow")]),t._v(":告诉客户端，服务器支持的请求方法"),a("br"),t._v(" "),a("code",[t._v("Transfer-Encoding")]),t._v(":包体的传输方式"),a("br"),t._v(" "),a("code",[t._v("Connection")]),t._v(":约定服务端返回后是否关闭TCP连接（用于多次HTTP之间重用同一个TCP连接）\n"),a("code",[t._v("Content-Type")]),t._v(":定义网络文件的类型和网页的编码")]),t._v(" "),a("h4",{attrs:{id:"内容协商"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容协商"}},[t._v("#")]),t._v(" 内容协商：")]),t._v(" "),a("ul",[a("li",[t._v("Proactive（主动内容协商）")]),t._v(" "),a("li",[t._v("Reactive（响应式内容协商）"),a("br"),t._v(" "),a("code",[t._v("Accept")]),a("br"),t._v(" "),a("code",[t._v("Accept-Encoding")]),t._v(":压缩算法"),a("br"),t._v(" "),a("code",[t._v("Accept-Language")]),t._v(":语言、质量（质量因子q）")])]),t._v(" "),a("h4",{attrs:{id:"ranges规范-用于断点续传、多线程下载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ranges规范-用于断点续传、多线程下载"}},[t._v("#")]),t._v(" Ranges规范（用于断点续传、多线程下载）：")]),t._v(" "),a("p",[a("code",[t._v("Accept-Ranges")]),t._v(":设置Range头信息\n"),a("code",[t._v("Content-Ranges")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("利用http重定向https可以跳过防盗链")])]),t._v(" "),a("h3",{attrs:{id:"会话跟踪技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#会话跟踪技术"}},[t._v("#")]),t._v(" 会话跟踪技术")]),t._v(" "),a("h4",{attrs:{id:"会话跟踪技术-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#会话跟踪技术-2"}},[t._v("#")]),t._v(" 会话跟踪技术：")]),t._v(" "),a("p",[t._v("会话：从打开页面到关闭页面"),a("br"),t._v("\n跟踪：客户端与服务器多次请求数据，时进行数据共享")]),t._v(" "),a("p",[t._v("目的是解决http协议无状态的问题")]),t._v(" "),a("h4",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" "),a("code",[t._v("Cookie")])]),t._v(" "),a("p",[t._v("通过检查客服端上的“通行证”来确认客户身份。")]),t._v(" "),a("p",[a("code",[t._v("Cookie")]),t._v("的签发流程：客户端首次请求服务器，服务端返回一个"),a("code",[t._v("Cookie")]),t._v("通行证，当客户端携带"),a("code",[t._v("Cookie")]),t._v("通行证并再一次发送请求时，服务端检查"),a("code",[t._v("Cookie")]),t._v("来确认客户身份。")]),t._v(" "),a("p",[a("code",[t._v("set-cookie")]),t._v("\nset-cookie:value [;expires=date][;domain=domain][;path=path][;secure][;HttpOnly]")]),t._v(" "),a("blockquote",[a("p",[t._v("expires过期时间、domain域名、path路径、secure必须是https、HttpOnly不允许修改")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/admin secure HttpOnly"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Set-Cookie"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"timeout=30; Path=/admin; secure HttpOnly"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[t._v("#")]),t._v(" "),a("code",[t._v("Session")])]),t._v(" "),a("p",[t._v("通过检查服务端上的“客户表”来确认客户身份。\n"),a("code",[t._v("Session")]),t._v("的签发流程：客户端首次请求服务器，服务端会生成一个客户记录，当客户端再一次发送请求时，服务端检查当前客户是否在客户表中，来确认客户身份。")]),t._v(" "),a("h4",{attrs:{id:"token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" "),a("code",[t._v("Token")])]),t._v(" "),a("p",[a("code",[t._v("Token")]),t._v("是无状态的，是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个"),a("code",[t._v("Token")]),t._v("并返回给客户端，以后客户端只需带上这个"),a("code",[t._v("Token")]),t._v("前来请求数据即可，无需再次带上用户名和密码。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("`Cookie`和`Session`的区别")]),t._v(" "),a("ol",[a("li",[t._v("存储位置："),a("code",[t._v("Cookie")]),t._v("存在客户端，"),a("code",[t._v("Session")]),t._v("存在服务端。")]),t._v(" "),a("li",[t._v("存储容量："),a("code",[t._v("Cookie")]),t._v("最大4KB且一个域名最多20个，"),a("code",[t._v("Session")]),t._v("没有上限。")]),t._v(" "),a("li",[t._v("存储方式："),a("code",[t._v("Cookie")]),t._v("中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。"),a("code",[t._v("Session")]),t._v("能存储任何类型的数据。")]),t._v(" "),a("li",[t._v("隐私策略："),a("code",[t._v("Cookie")]),t._v("对客户端是可见的，因此不安全。")]),t._v(" "),a("li",[t._v("效期："),a("code",[t._v("Cookie")]),t._v("可以长期有效，"),a("code",[t._v("Session")]),t._v("关闭窗口即失效。")]),t._v(" "),a("li",[t._v("浏览器："),a("code",[t._v("Cookie")]),t._v("依赖浏览器的支持。")]),t._v(" "),a("li",[t._v("跨域："),a("code",[t._v("Cookie")]),t._v("支持跨域名访问（但是不能跨域操作），"),a("code",[t._v("Session")]),t._v("不支持跨域名")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("`Session`和`Token`的区别")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Session")]),t._v("需要存储每个客户端"),a("code",[t._v("cookie")]),t._v("里的数据、"),a("code",[t._v("Token")]),t._v("只需要存一段加密代码即可")])])]),t._v(" "),a("h3",{attrs:{id:"同源策略与跨域访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略与跨域访问"}},[t._v("#")]),t._v(" 同源策略与跨域访问")]),t._v(" "),a("p",[t._v("限制不同源的对象或js脚本互相影响")]),t._v(" "),a("p",[t._v("同源："),a("code",[t._v("“协议+子域名+主域名+端口号+请求资源地址”")]),t._v("完全一致")]),t._v(" "),a("p",[a("code",[t._v("CORS")]),t._v("跨域资源共享")]),t._v(" "),a("ul",[a("li",[t._v("简单请求")])]),t._v(" "),a("ol",[a("li",[t._v("请求方法："),a("code",[t._v("HEAD")]),t._v("、"),a("code",[t._v("GET")]),t._v("、"),a("code",[t._v("POST")]),t._v("、")]),t._v(" "),a("li",[t._v("HTTP的头信息不超出以下几种字段："),a("code",[t._v("Accept")]),t._v("、"),a("code",[t._v("Accept-Language")]),t._v("、"),a("code",[t._v("Content-Language")]),t._v("、"),a("code",[t._v("Last-Event-ID")]),t._v("、\n"),a("code",[t._v("Content-Type（application/x-www-form-urlencoded、multipart/form-data、text/plain）")])])]),t._v(" "),a("ul",[a("li",[t._v("非简单请求\n凡是不同时满足上面简单请求，就属于非简单请求")])]),t._v(" "),a("h4",{attrs:{id:"简单请求跨域访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单请求跨域访问"}},[t._v("#")]),t._v(" 简单请求跨域访问：")]),t._v(" "),a("p",[t._v("设置Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）\n如果Origin指定的域名在许可范围内，服务器会返回一下信息:")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Access-Control-Allow-Origin")]),t._v(":返回请求时Origin字段的值，或者是*，表示接受任意域名的请求\n"),a("code",[t._v("Access-Control-Allow-Credentials")]),t._v(": 返回是否允许发送Cookie\n"),a("code",[t._v("Access-Control-Expose-Headers")]),t._v(": 返回")])]),t._v(" "),a("h4",{attrs:{id:"非简单请求跨域访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求跨域访问"}},[t._v("#")]),t._v(" 非简单请求跨域访问：")]),t._v(" "),a("ul",[a("li",[t._v("预检请求")]),t._v(" "),a("li",[t._v("预检请求的回应")])]),t._v(" "),a("h2",{attrs:{id:"_3-3-websocket协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-websocket协议"}},[t._v("#")]),t._v(" 3.3 WebSocket协议")]),t._v(" "),a("p",[t._v("HTTP协议有只能由客户端发起，如果想获取连续的状态变化，只能通过轮询的方式（轮询的效率低，非常浪费资源）")]),t._v(" "),a("p",[t._v("WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了\n它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种")]),t._v(" "),a("h4",{attrs:{id:"特点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ol",[a("li",[t._v("建立在 TCP 协议之上，服务器端的实现比较容易")]),t._v(" "),a("li",[t._v("与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器")]),t._v(" "),a("li",[t._v("数据格式比较轻量，性能开销小，通信高效")]),t._v(" "),a("li",[t._v("可以发送文本，也可以发送二进制数据")]),t._v(" "),a("li",[t._v("没有同源限制，客户端可以与任意服务器通信")]),t._v(" "),a("li",[t._v("协议标识符是ws（如果加密，则为wss），服务器网址就是 URL")])]),t._v(" "),a("h4",{attrs:{id:"方法与属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法与属性"}},[t._v("#")]),t._v(" 方法与属性")]),t._v(" "),a("p",[a("code",[t._v("readyState")]),t._v("：返回webSocket状态"),a("br"),t._v(" "),a("code",[t._v("onopen")]),t._v("连接成功后的回调"),a("br"),t._v(" "),a("code",[t._v("send")]),t._v("向服务器发送数据"),a("br"),t._v(" "),a("code",[t._v("onmessage")]),t._v("收到数据后的回调"),a("br"),t._v(" "),a("code",[t._v("onclose")]),t._v("连接关闭后的回调"),a("br"),t._v(" "),a("code",[t._v("bufferedAmount")]),t._v("返回为啥送的字节，用来判断是否发送结束"),a("br"),t._v(" "),a("code",[t._v("onerror")]),t._v("报错回调")]),t._v(" "),a("h4",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ws "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wss://echo.websocket.org"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接成功后的回调函数")]),t._v("\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onopen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello WebSockets!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 收到服务器数据后的回调函数")]),t._v("\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接关闭后的回调函数")]),t._v("\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclose")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection closed."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),a("ul",[a("li",[t._v("批量监听")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello Server!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"close"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reason "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" wasClean "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wasClean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle close event")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"websocket的几种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket的几种状态"}},[t._v("#")]),t._v(" WebSocket的几种状态")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("CONNECTING")]),t._v("：0，表示正在连接")]),t._v(" "),a("li",[a("code",[t._v("OPEN")]),t._v("：1，表示连接成功，可以通信了")]),t._v(" "),a("li",[a("code",[t._v("CLOSING")]),t._v("：2，表示连接正在关闭")]),t._v(" "),a("li",[a("code",[t._v("CLOSED")]),t._v("：3，表示连接已经关闭，或者打开连接失败")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" WebSocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONNECTING")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" WebSocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPEN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" WebSocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CLOSING")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" WebSocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CLOSED")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this never happens")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-4-http-2协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-http-2协议"}},[t._v("#")]),t._v(" 3.4 HTTP/2协议")]),t._v(" "),a("p",[t._v("HRRP2(RFC7540,2015.5)\n未改变HTTP/1.1的语义\n基于TCP，仅修改应用层\n在应用层上修改，基于并充分挖掘TCP协议性能\n客户端向server发送request的基本模型不变")]),t._v(" "),a("ul",[a("li",[t._v("特性：")])]),t._v(" "),a("blockquote",[a("p",[t._v("传输数据量大幅减少")]),t._v(" "),a("blockquote",[a("p",[t._v("以二进制方式传输"),a("br"),t._v("\n表头压缩")])])]),t._v(" "),a("blockquote",[a("p",[t._v("多路复用及相关功能")]),t._v(" "),a("blockquote",[a("p",[t._v("消息优先级")])])]),t._v(" "),a("blockquote",[a("p",[t._v("服务器消息推送")]),t._v(" "),a("blockquote",[a("p",[t._v("并行推送")])])]),t._v(" "),a("ul",[a("li",[t._v("核心概念：")])]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("连接Connection：一个TCP连接包含多个Stream"),a("br"),t._v("\n数据流(Stream)：一个双向通讯数据流，包含一条或多条Message"),a("br"),t._v("\n消息(Message)：对应THHP/1中的请求或响应，包含一条或多条Frame"),a("br"),t._v("\n数据帧(Frame)：最小单位，以二进制压缩格式存放HTTP/1中的内容")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("帧(Frame)、消息(Message)、流(Stream)的关系")])]),t._v(" "),a("h2",{attrs:{id:"_3-5-tls-ssl协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-tls-ssl协议"}},[t._v("#")]),t._v(" 3.5 TLS/SSL协议")]),t._v(" "),a("h2",{attrs:{id:"_3-6-tcp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-tcp协议"}},[t._v("#")]),t._v(" 3.6 TCP协议")]),t._v(" "),a("p",[t._v("传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议")]),t._v(" "),a("h3",{attrs:{id:"特点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点-3"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("基于链接的：传输数据之前需要建立链接")]),t._v(" "),a("li",[t._v("全双工：双向传输（请求响应）")]),t._v(" "),a("li",[t._v("字节流：不限制请求大小，打包成报文段，保证有序接受，重复报文自动丢弃")]),t._v(" "),a("li",[t._v("流量缓存：解决双方处理能力的不匹配")]),t._v(" "),a("li",[t._v("可靠的传输服务：保证可达，丢包时通过重发机制实现可靠")]),t._v(" "),a("li",[t._v("拥塞控制：防止网络出现恶性拥塞")])]),t._v(" "),a("h3",{attrs:{id:"报文格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#报文格式"}},[t._v("#")]),t._v(" 报文格式")]),t._v(" "),a("p",[a("img",{attrs:{src:"/jaqi.note/tcp%E6%8A%A5%E6%96%87.png",alt:"tcp报文"}})]),t._v(" "),a("ol",[a("li",[t._v("端口号：用来标识同一台计算机的不同的应用进程")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("源端口：源端口和IP地址的作用是标识报文的返回地址")])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("目的端口：端口指明接收方计算机上的应用程序接口")])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("序号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。如：（一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性）")])]),t._v(" "),a("li",[a("p",[t._v("确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。如：（建立连接时，SYN报文的ACK标志位为0）")])]),t._v(" "),a("li",[a("p",[t._v("数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值")])]),t._v(" "),a("li",[a("p",[t._v("保留：为将来定义新的用途保留，现在一般置0")])]),t._v(" "),a("li",[a("p",[t._v("控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能")])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针")]),t._v(" "),a("li",[t._v("ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段")]),t._v(" "),a("li",[t._v("PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队")]),t._v(" "),a("li",[t._v("RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求")]),t._v(" "),a("li",[t._v("SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1")]),t._v(" "),a("li",[t._v("FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流")])])]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("p",[t._v("窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535")])]),t._v(" "),a("li",[a("p",[t._v("校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证")])]),t._v(" "),a("li",[a("p",[t._v("紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式")])]),t._v(" "),a("li",[a("p",[t._v("选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍")])]),t._v(" "),a("li",[a("p",[t._v("数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段")])])]),t._v(" "),a("h3",{attrs:{id:"连接创建与断开的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接创建与断开的过程"}},[t._v("#")]),t._v(" 连接创建与断开的过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"/jaqi.note/TCP%E4%B8%89%E6%8F%A1%E5%9B%9B%E6%8C%A5.png",alt:"TCP三握四挥"}})]),t._v(" "),a("h4",{attrs:{id:"创建链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建链接"}},[t._v("#")]),t._v(" 创建链接：")]),t._v(" "),a("ol",[a("li",[t._v("第一次握手：客户端给服务端发一个"),a("code",[t._v("SYN")]),t._v("报文，并指明客户端的初始化序列号"),a("code",[t._v("ISN")]),t._v("。此时客户端处于"),a("code",[t._v("SYN_SENT")]),t._v("状态")])]),t._v(" "),a("blockquote",[a("p",[t._v("首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("第二次握手：服务器收到客户端的"),a("code",[t._v("SYN")]),t._v("报文之后，会以自己的"),a("code",[t._v("SYN")]),t._v("报文作为应答，并且也是指定了自己的初始化序列号"),a("code",[t._v("ISN(s)")]),t._v("。同时会把客户端的"),a("code",[t._v("ISN + 1")]),t._v("作为ACK的值，表示自己已经收到了客户端的"),a("code",[t._v("SYN")]),t._v("，此时服务器处于"),a("code",[t._v("SYN_RCVD")]),t._v("的状态。")])]),t._v(" "),a("blockquote",[a("p",[t._v("在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("第三次握手：客户端收到"),a("code",[t._v("SYN")]),t._v("报文之后，会发送一个"),a("code",[t._v("ACK")]),t._v("报文，当然，也是一样把服务器的"),a("code",[t._v("ISN + 1")]),t._v("作为"),a("code",[t._v("ACK")]),t._v("的值，表示已经收到了服务端的"),a("code",[t._v("SYN")]),t._v("报文，此时客户端处于"),a("code",[t._v("ESTABLISHED")]),t._v("状态。服务器收到"),a("code",[t._v("ACK")]),t._v("报文之后，也处于"),a("code",[t._v("ESTABLISHED")]),t._v("状态，此时，双方已建立起了连接。")])]),t._v(" "),a("blockquote",[a("p",[t._v("确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ol",[a("li",[t._v("为什么需要三次握手，两次不行吗？")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果是用两次握手,会出现因为请求滞留导致，客户端与服务端状态不一致。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("什么是半连接队列？")])]),t._v(" "),a("blockquote",[a("p",[t._v("服务器第一次收到客户端的"),a("code",[t._v("SYN")]),t._v("之后，就会处于"),a("code",[t._v("SYN_RCVD")]),t._v("状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("ISN(Initial Sequence Number)是固定的吗?")])]),t._v(" "),a("blockquote",[a("p",[t._v("当一端为建立连接而发送它的"),a("code",[t._v("SYN")]),t._v("时，它为连接选择一个初始序号。"),a("code",[t._v("ISN")]),t._v("随时间而变化，因此每个连接都将具有不同的"),a("code",[t._v("ISN")]),t._v("。"),a("code",[t._v("ISN")]),t._v("可以看作是一个32比特的计数器，每4ms加1。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("三次握手过程中可以携带数据吗？")])]),t._v(" "),a("blockquote",[a("p",[t._v("第三次握手的时候，是可以携带数据的。但是，第一次、第二次握手不可以携带数据")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("SYN攻击是什么？")])]),t._v(" "),a("blockquote",[a("p",[t._v("服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击。"),a("code",[t._v("SYN")]),t._v("攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送"),a("code",[t._v("SYN")]),t._v("包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的"),a("code",[t._v("SYN")]),t._v("包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。"),a("code",[t._v("SYN")]),t._v("攻击是一种典型的DoS/DDoS 攻击")])])]),t._v(" "),a("h4",{attrs:{id:"关闭链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭链接"}},[t._v("#")]),t._v(" 关闭链接：")]),t._v(" "),a("ol",[a("li",[t._v("第一次挥手：客户端发送一个"),a("code",[t._v("FIN")]),t._v("报文，报文中会指定一个序列号。此时客户端处于"),a("code",[t._v("FIN_WAIT1")]),t._v("状态")])]),t._v(" "),a("blockquote",[a("p",[t._v("即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("第二次挥手：服务端收到"),a("code",[t._v("FIN")]),t._v("之后，会发送"),a("code",[t._v("ACK")]),t._v("报文，且把客户端的序列号值"),a("code",[t._v("u + 1")]),t._v("作为"),a("code",[t._v("ACK")]),t._v("报文的序列号值，表明已经收到客户端的报文了，此时服务端处于"),a("code",[t._v("CLOSE_WAIT")]),t._v("状态")])]),t._v(" "),a("blockquote",[a("p",[t._v("即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给"),a("code",[t._v("FIN")]),t._v("报文，且指定一个序列号。此时服务端处于"),a("code",[t._v("LAST_ACK")]),t._v("的状态")])]),t._v(" "),a("blockquote",[a("p",[t._v("即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("第四次挥手：客户端收到"),a("code",[t._v("FIN")]),t._v("之后，一样发送一个"),a("code",[t._v("ACK")]),t._v("报文作为应答，且把服务端的序列号值"),a("code",[t._v("u + 1")]),t._v("作为自己"),a("code",[t._v("ACK")]),t._v("报文的序列号值，此时客户端处于"),a("code",[t._v("TIME_WAIT")]),t._v("状态。需要过一阵子以确保服务端收到自己的"),a("code",[t._v("ACK")]),t._v("报文之后才会进入"),a("code",[t._v("CLOSED")]),t._v("状态，服务端收到"),a("code",[t._v("ACK")]),t._v("报文之后，就处于关闭连接了，处于"),a("code",[t._v("CLOSED")]),t._v("状态。")])]),t._v(" "),a("blockquote",[a("p",[t._v("即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ol",[a("li",[t._v("挥手为什么需要四次？")])]),t._v(" "),a("blockquote",[a("p",[t._v("当服务端收到"),a("code",[t._v("FIN")]),t._v("报文时，很可能还有数据未发完，所以不能立即关闭连接，只能先回复一个报文，告诉客户端,我收到了"),a("code",[t._v("FIN")])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("MSL、等待2MSL的意义？")])]),t._v(" "),a("blockquote",[a("p",[t._v("报文段最大生存时间MSL（Maximum Segment Lifetime）\n保证客户端发送的最后一个ACK报文段能够到达服务端、防止“已失效的连接请求报文段”出现在本连接中")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("ISN(Initial Sequence Number)是固定的吗?")])]),t._v(" "),a("blockquote",[a("p",[t._v("当一端为建立连接而发送它的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每个连接都将具有不同的ISN。ISN可以看作是一个32比特的计数器，每4ms加1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("三次握手过程中可以携带数据吗？")])]),t._v(" "),a("blockquote",[a("p",[t._v("第三次握手的时候，是可以携带数据的。但是，第一次、第二次握手不可以携带数据")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("SYN攻击是什么？")])]),t._v(" "),a("blockquote",[a("p",[t._v("服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("SYN攻击是什么？")])]),t._v(" "),a("blockquote",[a("p",[t._v("服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击")])])]),t._v(" "),a("h2",{attrs:{id:"_3-7-udp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-udp协议"}},[t._v("#")]),t._v(" 3.7 UDP协议")]),t._v(" "),a("p",[t._v("用户数据报协议（UDP，User Data Protocol）是一种非面向连接的、不可靠的传输层通信协议")]),t._v(" "),a("h4",{attrs:{id:"特点-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点-4"}},[t._v("#")]),t._v(" 特点：")]),t._v(" "),a("ul",[a("li",[t._v("非链接协议：传输数据之前不需要建立链接")]),t._v(" "),a("li",[t._v("不可靠的传输服务")]),t._v(" "),a("li",[t._v("不提供拥塞控制和流量控制机制")])]),t._v(" "),a("h2",{attrs:{id:"_3-8-ip协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-ip协议"}},[t._v("#")]),t._v(" 3.8 IP协议")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("抓包工具：Wireshark、Fiddler、Charles、Proxyman")])])])}),[],!1,null,null,null);s.default=v.exports}}]);