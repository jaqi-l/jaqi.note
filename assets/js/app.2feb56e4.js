(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,i,l=e[0],s=e[1],c=e[2],d=0,p=[];d<l.length;d++)i=l[d],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&p.push(o[i][0]),o[i]=0;for(r in s)Object.prototype.hasOwnProperty.call(s,r)&&(n[r]=s[r]);for(u&&u(e);p.length;)p.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],r=!0,l=1;l<t.length;l++){var s=t[l];0!==o[s]&&(r=!1)}r&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},o={1:0},a=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var a,l=document.createElement("script");l.charset="utf-8",l.timeout=120,i.nc&&l.setAttribute("nonce",i.nc),l.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"cf0a2c66",3:"b1112b9c",4:"cc27441e",5:"573cc974",6:"c04646c9",7:"85822b87",8:"bc86fa50",9:"17875bd8",10:"bbb7f5b9",11:"0777787e",12:"324b68a8",13:"25969066",14:"24634d09",15:"2f709246",16:"2d513b30",17:"0b7190b8",18:"5ee79291",19:"13863cb8",20:"af731f74",21:"486a10a5",22:"99b8fe60",23:"d9f1d02b",24:"0ce77f67",25:"d2874685",26:"6b1a7a12",27:"5205440e",28:"4a0ecf0b",29:"75f81631",30:"9f4eb4b3",31:"b5f463e4",32:"bff16e8e",33:"f4259706",34:"fdf7e104",35:"06d12526",36:"69d33875",37:"dc856357",38:"401a813c",39:"e16351b2",40:"747bfc8f",41:"f81f1388",42:"8b53911f",43:"2e34dffd",44:"774b02bc",45:"263144fc",46:"06a4bb65",47:"56662806",48:"4f786d3a",49:"630b68a6",50:"8c769a7a",51:"a9f3fa86",52:"a2830407",53:"b74a4de1",54:"554fc743",55:"d978130d",56:"1d48a02e",57:"53ae226b",58:"32493eac",59:"257171c0",60:"e52620bf",61:"d36beb58",62:"453c8585",63:"04762880",64:"41a31cd0",65:"4599f43c",66:"8923dfa6",67:"b5c6809d",68:"474fdf87",69:"44bb4540",70:"64564e12",71:"84799590",72:"886b34bd",73:"0c778a8d",74:"8606f137",75:"b8b63410",76:"9ca8be9d",77:"42b1585f",78:"17ffe736",79:"da943937",80:"f5b75df6",81:"af0855f6",82:"5a64f737",83:"396602cf"}[n]+".js"}(n);var s=new Error;a=function(e){l.onerror=l.onload=null,clearTimeout(c);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;s.message="Loading chunk "+n+" failed.\n("+r+": "+a+")",s.name="ChunkLoadError",s.type=r,s.request=a,t[1](s)}o[n]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:l})}),12e4);l.onerror=l.onload=a,document.head.appendChild(l)}return Promise.all(e)},i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/jaqi.note/",i.oe=function(n){throw console.error(n),n};var l=window.webpackJsonp=window.webpackJsonp||[],s=l.push.bind(l);l.push=e,l=l.slice();for(var c=0;c<l.length;c++)e(l[c]);var u=s;a.push([189,0]),t()}([function(n,e,t){var r=t(3),o=t(26).f,a=t(12),i=t(18),l=t(73),s=t(117),c=t(104);n.exports=function(n,e){var t,u,d,p,m,f=n.target,h=n.global,v=n.stat;if(t=h?r:v?r[f]||l(f,{}):(r[f]||{}).prototype)for(u in e){if(p=e[u],d=n.noTargetGet?(m=o(t,u))&&m.value:t[u],!c(h?u:f+(v?".":"#")+u,n.forced)&&void 0!==d){if(typeof p==typeof d)continue;s(p,d)}(n.sham||d&&d.sham)&&a(p,"sham",!0),i(t,u,p,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(3),o=t(50),a=t(7),i=t(52),l=t(75),s=t(112),c=o("wks"),u=r.Symbol,d=s?u:u&&u.withoutSetter||i;n.exports=function(n){return a(c,n)&&(l||"string"==typeof c[n])||(l&&a(u,n)?c[n]=u[n]:c[n]=d("Symbol."+n)),c[n]}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e){n.exports=function(n){return"object"==typeof n?null!==n:"function"==typeof n}},function(n,e,t){var r=t(4);n.exports=function(n){if(!r(n))throw TypeError(String(n)+" is not an object");return n}},function(n,e,t){var r=t(1);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(10),o={}.hasOwnProperty;n.exports=Object.hasOwn||function(n,e){return o.call(r(n),e)}},function(n,e,t){var r=t(6),o=t(110),a=t(5),i=t(51),l=Object.defineProperty;e.f=r?l:function(n,e,t){if(a(n),e=i(e,!0),a(t),o)try{return l(n,e,t)}catch(n){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(83),o=t(18),a=t(201);r||o(Object.prototype,"toString",a,{unsafe:!0})},function(n,e,t){var r=t(23);n.exports=function(n){return Object(r(n))}},function(n,e,t){"use strict";var r=t(107).charAt,o=t(24),a=t(116),i=o.set,l=o.getterFor("String Iterator");a(String,"String",(function(n){i(this,{type:"String Iterator",string:String(n),index:0})}),(function(){var n,e=l(this),t=e.string,o=e.index;return o>=t.length?{value:void 0,done:!0}:(n=r(t,o),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){var r=t(6),o=t(8),a=t(32);n.exports=r?function(n,e,t){return o.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(46),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,e,t){var r=t(36),o=t(23);n.exports=function(n){return r(o(n))}},function(n,e,t){var r=t(3),o=t(129),a=t(102),i=t(12),l=t(2),s=l("iterator"),c=l("toStringTag"),u=a.values;for(var d in o){var p=r[d],m=p&&p.prototype;if(m){if(m[s]!==u)try{i(m,s,u)}catch(n){m[s]=u}if(m[c]||i(m,c,d),o[d])for(var f in a)if(m[f]!==a[f])try{i(m,f,a[f])}catch(n){m[f]=a[f]}}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(140),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();n.exports=a},function(n,e,t){var r=t(3),o=t(12),a=t(7),i=t(73),l=t(79),s=t(24),c=s.get,u=s.enforce,d=String(String).split("String");(n.exports=function(n,e,t,l){var s,c=!!l&&!!l.unsafe,p=!!l&&!!l.enumerable,m=!!l&&!!l.noTargetGet;"function"==typeof t&&("string"!=typeof e||a(t,"name")||o(t,"name",e),(s=u(t)).source||(s.source=d.join("string"==typeof e?e:""))),n!==r?(c?!m&&n[e]&&(p=!0):delete n[e],p?n[e]=t:o(n,e,t)):p?n[e]=t:i(e,t)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l(this)}))},function(n,e,t){var r=t(111),o=t(3),a=function(n){return"function"==typeof n?n:void 0};n.exports=function(n,e){return arguments.length<2?a(r[n])||a(o[n]):r[n]&&r[n][e]||o[n]&&o[n][e]}},function(n,e){n.exports=!1},function(n,e){n.exports=function(n){if("function"!=typeof n)throw TypeError(String(n)+" is not a function");return n}},function(n,e,t){var r=t(228),o=t(231);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e){n.exports=function(n){if(null==n)throw TypeError("Can't call method on "+n);return n}},function(n,e,t){var r,o,a,i=t(190),l=t(3),s=t(4),c=t(12),u=t(7),d=t(72),p=t(54),m=t(38),f=l.WeakMap;if(i||d.state){var h=d.state||(d.state=new f),v=h.get,g=h.has,b=h.set;r=function(n,e){if(g.call(h,n))throw new TypeError("Object already initialized");return e.facade=n,b.call(h,n,e),e},o=function(n){return v.call(h,n)||{}},a=function(n){return g.call(h,n)}}else{var x=p("state");m[x]=!0,r=function(n,e){if(u(n,x))throw new TypeError("Object already initialized");return e.facade=n,c(n,x,e),e},o=function(n){return u(n,x)?n[x]:{}},a=function(n){return u(n,x)}}n.exports={set:r,get:o,has:a,enforce:function(n){return a(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!s(e)||(t=o(e)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r,o=t(5),a=t(169),i=t(78),l=t(38),s=t(115),c=t(74),u=t(54),d=u("IE_PROTO"),p=function(){},m=function(n){return"<script>"+n+"<\/script>"},f=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(n){}var n,e;f=r?function(n){n.write(m("")),n.close();var e=n.parentWindow.Object;return n=null,e}(r):((e=c("iframe")).style.display="none",s.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(m("document.F=Object")),n.close(),n.F);for(var t=i.length;t--;)delete f.prototype[i[t]];return f()};l[d]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(p.prototype=o(n),t=new p,p.prototype=null,t[d]=n):t=f(),void 0===e?t:a(t,e)}},function(n,e,t){var r=t(6),o=t(80),a=t(32),i=t(14),l=t(51),s=t(7),c=t(110),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(n,e){if(n=i(n),e=l(e,!0),c)try{return u(n,e)}catch(n){}if(s(n,e))return a(!o.f.call(n,e),n[e])}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e){var t={}.toString;n.exports=function(n){return t.call(n).slice(8,-1)}},function(n,e,t){"use strict";var r=t(0),o=t(30).filter;r({target:"Array",proto:!0,forced:!t(58)("filter")},{filter:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(48),o=t(36),a=t(10),i=t(13),l=t(108),s=[].push,c=function(n){var e=1==n,t=2==n,c=3==n,u=4==n,d=6==n,p=7==n,m=5==n||d;return function(f,h,v,g){for(var b,x,y=a(f),w=o(y),k=r(h,v,3),j=i(w.length),_=0,T=g||l,S=e?T(f,j):t||p?T(f,0):void 0;j>_;_++)if((m||_ in w)&&(x=k(b=w[_],_,y),n))if(e)S[_]=x;else if(x)switch(n){case 3:return!0;case 5:return b;case 6:return _;case 2:s.call(S,b)}else switch(n){case 4:return!1;case 7:s.call(S,b)}return d?-1:c||u?u:S}};n.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(n,e,t){"use strict";var r=t(1);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){throw 1},1)}))}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(28);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){"use strict";var r=t(0),o=t(3),a=t(19),i=t(20),l=t(6),s=t(75),c=t(112),u=t(1),d=t(7),p=t(33),m=t(4),f=t(5),h=t(10),v=t(14),g=t(51),b=t(32),x=t(25),y=t(53),w=t(69),k=t(207),j=t(81),_=t(26),T=t(8),S=t(80),I=t(12),z=t(18),E=t(50),C=t(54),$=t(38),O=t(52),P=t(2),A=t(135),q=t(136),D=t(47),M=t(24),L=t(30).forEach,N=C("hidden"),R=P("toPrimitive"),V=M.set,H=M.getterFor("Symbol"),B=Object.prototype,U=o.Symbol,F=a("JSON","stringify"),W=_.f,G=T.f,J=k.f,X=S.f,K=E("symbols"),Q=E("op-symbols"),Y=E("string-to-symbol-registry"),Z=E("symbol-to-string-registry"),nn=E("wks"),en=o.QObject,tn=!en||!en.prototype||!en.prototype.findChild,rn=l&&u((function(){return 7!=x(G({},"a",{get:function(){return G(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=W(B,e);r&&delete B[e],G(n,e,t),r&&n!==B&&G(B,e,r)}:G,on=function(n,e){var t=K[n]=x(U.prototype);return V(t,{type:"Symbol",tag:n,description:e}),l||(t.description=e),t},an=c?function(n){return"symbol"==typeof n}:function(n){return Object(n)instanceof U},ln=function(n,e,t){n===B&&ln(Q,e,t),f(n);var r=g(e,!0);return f(t),d(K,r)?(t.enumerable?(d(n,N)&&n[N][r]&&(n[N][r]=!1),t=x(t,{enumerable:b(0,!1)})):(d(n,N)||G(n,N,b(1,{})),n[N][r]=!0),rn(n,r,t)):G(n,r,t)},sn=function(n,e){f(n);var t=v(e),r=y(t).concat(pn(t));return L(r,(function(e){l&&!cn.call(t,e)||ln(n,e,t[e])})),n},cn=function(n){var e=g(n,!0),t=X.call(this,e);return!(this===B&&d(K,e)&&!d(Q,e))&&(!(t||!d(this,e)||!d(K,e)||d(this,N)&&this[N][e])||t)},un=function(n,e){var t=v(n),r=g(e,!0);if(t!==B||!d(K,r)||d(Q,r)){var o=W(t,r);return!o||!d(K,r)||d(t,N)&&t[N][r]||(o.enumerable=!0),o}},dn=function(n){var e=J(v(n)),t=[];return L(e,(function(n){d(K,n)||d($,n)||t.push(n)})),t},pn=function(n){var e=n===B,t=J(e?Q:v(n)),r=[];return L(t,(function(n){!d(K,n)||e&&!d(B,n)||r.push(K[n])})),r};(s||(z((U=function(){if(this instanceof U)throw TypeError("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=O(n),t=function(n){this===B&&t.call(Q,n),d(this,N)&&d(this[N],e)&&(this[N][e]=!1),rn(this,e,b(1,n))};return l&&tn&&rn(B,e,{configurable:!0,set:t}),on(e,n)}).prototype,"toString",(function(){return H(this).tag})),z(U,"withoutSetter",(function(n){return on(O(n),n)})),S.f=cn,T.f=ln,_.f=un,w.f=k.f=dn,j.f=pn,A.f=function(n){return on(P(n),n)},l&&(G(U.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),i||z(B,"propertyIsEnumerable",cn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:U}),L(y(nn),(function(n){q(n)})),r({target:"Symbol",stat:!0,forced:!s},{for:function(n){var e=String(n);if(d(Y,e))return Y[e];var t=U(e);return Y[e]=t,Z[t]=e,t},keyFor:function(n){if(!an(n))throw TypeError(n+" is not a symbol");if(d(Z,n))return Z[n]},useSetter:function(){tn=!0},useSimple:function(){tn=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!l},{create:function(n,e){return void 0===e?x(n):sn(x(n),e)},defineProperty:ln,defineProperties:sn,getOwnPropertyDescriptor:un}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:dn,getOwnPropertySymbols:pn}),r({target:"Object",stat:!0,forced:u((function(){j.f(1)}))},{getOwnPropertySymbols:function(n){return j.f(h(n))}}),F)&&r({target:"JSON",stat:!0,forced:!s||u((function(){var n=U();return"[null]"!=F([n])||"{}"!=F({a:n})||"{}"!=F(Object(n))}))},{stringify:function(n,e,t){for(var r,o=[n],a=1;arguments.length>a;)o.push(arguments[a++]);if(r=e,(m(e)||void 0!==n)&&!an(n))return p(e)||(e=function(n,e){if("function"==typeof r&&(e=r.call(this,n,e)),!an(e))return e}),o[1]=e,F.apply(null,o)}});U.prototype[R]||I(U.prototype,R,U.prototype.valueOf),D(U,"Symbol"),$[N]=!0},function(n,e,t){var r=t(41),o=t(213),a=t(214),i=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?o(n):a(n)}},function(n,e,t){var r=t(1),o=t(28),a="".split;n.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(n){return"String"==o(n)?a.call(n,""):Object(n)}:Object},function(n,e,t){var r,o,a=t(3),i=t(76),l=a.process,s=l&&l.versions,c=s&&s.v8;c?o=(r=c.split("."))[0]<4?1:r[0]+r[1]:i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(o=r[1]),n.exports=o&&+o},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){"use strict";var r=t(0),o=t(6),a=t(3),i=t(7),l=t(4),s=t(8).f,c=t(117),u=a.Symbol;if(o&&"function"==typeof u&&(!("description"in u.prototype)||void 0!==u().description)){var d={},p=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof p?new u(n):void 0===n?u():u(n);return""===n&&(d[e]=!0),e};c(p,u);var m=p.prototype=u.prototype;m.constructor=p;var f=m.toString,h="Symbol(test)"==String(u("test")),v=/^Symbol\((.*)\)[^)]+$/;s(m,"description",{configurable:!0,get:function(){var n=l(this)?this.valueOf():this,e=f.call(n);if(i(d,n))return"";var t=h?e.slice(7,-1):e.replace(v,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:p})}},function(n,e,t){var r=t(17).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(101);var r=t(43);t(34),t(40),t(9),t(59),t(11),t(15),t(137);var o=t(65);function a(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(o.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e,t,r,o,a,i,l){var s,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(s=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},c._ssrRegister=s):o&&(s=l?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),s)if(c.functional){c._injectStyles=s;var u=c.render;c.render=function(n,e){return s.call(e),u(n,e)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,s):[s]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(0),o=t(71);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){return isNaN(n=+n)?0:(n>0?r:t)(n)}},function(n,e,t){var r=t(8).f,o=t(7),a=t(2)("toStringTag");n.exports=function(n,e,t){n&&!o(n=t?n:n.prototype,a)&&r(n,a,{configurable:!0,value:e})}},function(n,e,t){var r=t(21);n.exports=function(n,e,t){if(r(n),void 0===e)return n;switch(t){case 0:return function(){return n.call(e)};case 1:return function(t){return n.call(e,t)};case 2:return function(t,r){return n.call(e,t,r)};case 3:return function(t,r,o){return n.call(e,t,r,o)}}return function(){return n.apply(e,arguments)}}},function(n,e,t){"use strict";var r=t(0),o=t(4),a=t(33),i=t(114),l=t(13),s=t(14),c=t(57),u=t(2),d=t(58)("slice"),p=u("species"),m=[].slice,f=Math.max;r({target:"Array",proto:!0,forced:!d},{slice:function(n,e){var t,r,u,d=s(this),h=l(d.length),v=i(n,h),g=i(void 0===e?h:e,h);if(a(d)&&("function"!=typeof(t=d.constructor)||t!==Array&&!a(t.prototype)?o(t)&&null===(t=t[p])&&(t=void 0):t=void 0,t===Array||void 0===t))return m.call(d,v,g);for(r=new(void 0===t?Array:t)(f(g-v,0)),u=0;v<g;v++,u++)v in d&&c(r,u,d[v]);return r.length=u,r}})},function(n,e,t){var r=t(20),o=t(72);(n.exports=function(n,e){return o[n]||(o[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.15.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(n,e,t){var r=t(4);n.exports=function(n,e){if(!r(n))return n;var t,o;if(e&&"function"==typeof(t=n.toString)&&!r(o=t.call(n)))return o;if("function"==typeof(t=n.valueOf)&&!r(o=t.call(n)))return o;if(!e&&"function"==typeof(t=n.toString)&&!r(o=t.call(n)))return o;throw TypeError("Can't convert object to primitive value")}},function(n,e){var t=0,r=Math.random();n.exports=function(n){return"Symbol("+String(void 0===n?"":n)+")_"+(++t+r).toString(36)}},function(n,e,t){var r=t(113),o=t(78);n.exports=Object.keys||function(n){return r(n,o)}},function(n,e,t){var r=t(50),o=t(52),a=r("keys");n.exports=function(n){return a[n]||(a[n]=o(n))}},function(n,e,t){var r=t(28),o=t(3);n.exports="process"==r(o.process)},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(9);function r(n,e,t,r,o,a,i){try{var l=n[a](i),s=l.value}catch(n){return void t(n)}l.done?e(s):Promise.resolve(s).then(r,o)}function o(n){return function(){var e=this,t=arguments;return new Promise((function(o,a){var i=n.apply(e,t);function l(n){r(i,o,a,l,s,"next",n)}function s(n){r(i,o,a,l,s,"throw",n)}l(void 0)}))}}},function(n,e,t){"use strict";var r=t(51),o=t(8),a=t(32);n.exports=function(n,e,t){var i=r(e);i in n?o.f(n,i,a(0,t)):n[i]=t}},function(n,e,t){var r=t(1),o=t(2),a=t(37),i=o("species");n.exports=function(n){return a>=51||!r((function(){var e=[];return(e.constructor={})[i]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){t(136)("iterator")},function(n,e,t){var r=t(218),o=t(219),a=t(220),i=t(221),l=t(222);function s(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=i,s.prototype.set=l,n.exports=s},function(n,e,t){var r=t(142);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(22)(Object,"create");n.exports=r},function(n,e,t){var r=t(240);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(92);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(49),t(9),t(84),t(137),t(11);var r=t(43);function o(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var s=t.render(!e),c=s.querySelector(r.barSelector),u=r.speed,d=r.easing;return s.offsetWidth,i((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),l(c,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,o}(n,u,d)),1===n?(l(s,{transition:"none",opacity:1}),s.offsetWidth,setTimeout((function(){l(s,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,i=e.querySelector(r.barSelector),s=n?"-100":a(t.status||0),u=document.querySelector(r.parent);return l(i,{transition:"all 0 linear",transform:"translate3d("+s+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&p(o),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),l=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+a)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,a=arguments;if(2==a.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,a[1],a[2])}}();function s(n,e){return("string"==typeof n?n:d(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=d(n),r=t+e;s(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=d(n);s(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function d(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){"use strict";var r=t(0),o=t(30).map;r({target:"Array",proto:!0,forced:!t(58)("map")},{map:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(166),o=t(1),a=t(5),i=t(13),l=t(46),s=t(23),c=t(174),u=t(209),d=t(167),p=t(2)("replace"),m=Math.max,f=Math.min,h="$0"==="a".replace(/./,"$0"),v=!!/./[p]&&""===/./[p]("a","$0");r("replace",(function(n,e,t){var r=v?"$":"$0";return[function(n,t){var r=s(this),o=null==n?void 0:n[p];return void 0!==o?o.call(n,r,t):e.call(String(r),n,t)},function(n,o){if("string"==typeof o&&-1===o.indexOf(r)&&-1===o.indexOf("$<")){var s=t(e,this,n,o);if(s.done)return s.value}var p=a(this),h=String(n),v="function"==typeof o;v||(o=String(o));var g=p.global;if(g){var b=p.unicode;p.lastIndex=0}for(var x=[];;){var y=d(p,h);if(null===y)break;if(x.push(y),!g)break;""===String(y[0])&&(p.lastIndex=c(h,i(p.lastIndex),b))}for(var w,k="",j=0,_=0;_<x.length;_++){y=x[_];for(var T=String(y[0]),S=m(f(l(y.index),h.length),0),I=[],z=1;z<y.length;z++)I.push(void 0===(w=y[z])?w:String(w));var E=y.groups;if(v){var C=[T].concat(I,S,h);void 0!==E&&C.push(E);var $=String(o.apply(void 0,C))}else $=u(T,h,S,I,E,o);S>=j&&(k+=h.slice(j,S)+$,j=S+T.length)}return k+h.slice(j)}]}),!!o((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!h||v)},function(n,e,t){var r=t(113),o=t(78).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){var r=t(5),o=t(191);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),e=t instanceof Array}catch(n){}return function(t,a){return r(t),o(a),e?n.call(t,a):t.__proto__=a,t}}():void 0)},function(n,e,t){"use strict";var r,o,a=t(172),i=t(173),l=t(50),s=t(25),c=t(24).get,u=t(184),d=t(185),p=RegExp.prototype.exec,m=l("native-string-replace",String.prototype.replace),f=p,h=(r=/a/,o=/b*/g,p.call(r,"a"),p.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),v=i.UNSUPPORTED_Y||i.BROKEN_CARET,g=void 0!==/()??/.exec("")[1];(h||g||v||u||d)&&(f=function(n){var e,t,r,o,i,l,u,d=this,b=c(d),x=b.raw;if(x)return x.lastIndex=d.lastIndex,e=f.call(x,n),d.lastIndex=x.lastIndex,e;var y=b.groups,w=v&&d.sticky,k=a.call(d),j=d.source,_=0,T=n;if(w&&(-1===(k=k.replace("y","")).indexOf("g")&&(k+="g"),T=String(n).slice(d.lastIndex),d.lastIndex>0&&(!d.multiline||d.multiline&&"\n"!==n[d.lastIndex-1])&&(j="(?: "+j+")",T=" "+T,_++),t=new RegExp("^(?:"+j+")",k)),g&&(t=new RegExp("^"+j+"$(?!\\s)",k)),h&&(r=d.lastIndex),o=p.call(w?t:d,T),w?o?(o.input=o.input.slice(_),o[0]=o[0].slice(_),o.index=d.lastIndex,d.lastIndex+=o[0].length):d.lastIndex=0:h&&o&&(d.lastIndex=d.global?o.index+o[0].length:r),g&&o&&o.length>1&&m.call(o[0],t,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&y)for(o.groups=l=s(null),i=0;i<y.length;i++)l[(u=y[i])[0]]=o[u[1]];return o}),n.exports=f},function(n,e,t){var r=t(3),o=t(73),a=r["__core-js_shared__"]||o("__core-js_shared__",{});n.exports=a},function(n,e,t){var r=t(3),o=t(12);n.exports=function(n,e){try{o(r,n,e)}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(3),o=t(4),a=r.document,i=o(a)&&o(a.createElement);n.exports=function(n){return i?a.createElement(n):{}}},function(n,e,t){var r=t(37),o=t(1);n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(19);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(14),o=t(13),a=t(114),i=function(n){return function(e,t,i){var l,s=r(e),c=o(s.length),u=a(i,c);if(n&&t!=t){for(;c>u;)if((l=s[u++])!=l)return!0}else for(;c>u;u++)if((n||u in s)&&s[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(72),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(n){return o.call(n)}),n.exports=r.inspectSource},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!r.call({1:2},1);e.f=a?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(7),o=t(10),a=t(54),i=t(120),l=a("IE_PROTO"),s=Object.prototype;n.exports=i?Object.getPrototypeOf:function(n){return n=o(n),r(n,l)?n[l]:"function"==typeof n.constructor&&n instanceof n.constructor?n.constructor.prototype:n instanceof Object?s:null}},function(n,e,t){var r={};r[t(2)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(6),o=t(8).f,a=Function.prototype,i=a.toString,l=/^\s*function ([^ (]*)/;r&&!("name"in a)&&o(a,"name",{configurable:!0,get:function(){try{return i.call(this).match(l)[1]}catch(n){return""}}})},function(n,e,t){var r=t(212),o=t(27),a=Object.prototype,i=a.hasOwnProperty,l=a.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(n){return o(n)&&i.call(n,"callee")&&!l.call(n,"callee")};n.exports=s},function(n,e,t){var r=t(22)(t(17),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(232),o=t(239),a=t(241),i=t(242),l=t(243);function s(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=i,s.prototype.set=l,n.exports=s},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(16),o=t(92),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(i.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(35),o=t(27);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(101);t(34),t(40),t(9),t(59),t(11),t(15);var r=t(65);function o(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,a=[],i=!0,l=!1;try{for(t=t.call(n);!(i=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==t.return||t.return()}finally{if(l)throw o}}return a}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(0),o=t(30).some;r({target:"Array",proto:!0,forced:!t(31)("some")},{some:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),o=t(10),a=t(53);r({target:"Object",stat:!0,forced:t(1)((function(){a(1)}))},{keys:function(n){return a(o(n))}})},function(n,e,t){"use strict";var r=t(0),o=t(133);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(n,e,t){var r=t(3),o=t(129),a=t(133),i=t(12);for(var l in o){var s=r[l],c=s&&s.prototype;if(c&&c.forEach!==a)try{i(c,"forEach",a)}catch(n){c.forEach=a}}},function(n,e,t){var r=t(105),o=t(39),a=t(2)("iterator");n.exports=function(n){if(null!=n)return n[a]||n["@@iterator"]||o[r(n)]}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function l(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{l({},"")}catch(n){l=function(n,e,t){return n[e]=t}}function s(n,e,t,r){var o=e&&e.prototype instanceof d?e:d,a=Object.create(o.prototype),i=new j(r||[]);return a._invoke=function(n,e,t){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return T()}for(t.method=o,t.arg=a;;){var i=t.delegate;if(i){var l=y(i,t);if(l){if(l===u)continue;return l}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var s=c(n,e,t);if("normal"===s.type){if(r=t.done?"completed":"suspendedYield",s.arg===u)continue;return{value:s.arg,done:t.done}}"throw"===s.type&&(r="completed",t.method="throw",t.arg=s.arg)}}}(n,t,i),a}function c(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=s;var u={};function d(){}function p(){}function m(){}var f={};f[o]=function(){return this};var h=Object.getPrototypeOf,v=h&&h(h(_([])));v&&v!==e&&t.call(v,o)&&(f=v);var g=m.prototype=d.prototype=Object.create(f);function b(n){["next","throw","return"].forEach((function(e){l(n,e,(function(n){return this._invoke(e,n)}))}))}function x(n,e){var r;this._invoke=function(o,a){function i(){return new e((function(r,i){!function r(o,a,i,l){var s=c(n[o],n,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&t.call(d,"__await")?e.resolve(d.__await).then((function(n){r("next",n,i,l)}),(function(n){r("throw",n,i,l)})):e.resolve(d).then((function(n){u.value=n,i(u)}),(function(n){return r("throw",n,i,l)}))}l(s.arg)}(o,a,r,i)}))}return r=r?r.then(i,i):i()}}function y(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,y(n,e),"throw"===e.method))return u;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=c(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var o=r.arg;return o?o.done?(e[n.resultName]=o.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function w(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function k(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function j(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(w,this),this.reset(!0)}function _(n){if(n){var e=n[o];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,a=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return a.next=a}}return{next:T}}function T(){return{value:void 0,done:!0}}return p.prototype=g.constructor=m,m.constructor=p,p.displayName=l(m,i,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,m):(n.__proto__=m,l(n,i,"GeneratorFunction")),n.prototype=Object.create(g),n},n.awrap=function(n){return{__await:n}},b(x.prototype),x.prototype[a]=function(){return this},n.AsyncIterator=x,n.async=function(e,t,r,o,a){void 0===a&&(a=Promise);var i=new x(s(e,t,r,o),a);return n.isGeneratorFunction(t)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},b(g),l(g,i,"Generator"),g[o]=function(){return this},g.toString=function(){return"[object Generator]"},n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=_,j.prototype={constructor:j,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return i.type="throw",i.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=t.call(a,"catchLoc"),s=t.call(a,"finallyLoc");if(l&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,u):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),u},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),u}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var o=r.arg;k(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:_(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),u}},n}(n.exports);try{regeneratorRuntime=r}catch(n){Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){t(0)({target:"Array",stat:!0},{isArray:t(33)})},function(n,e,t){"use strict";var r=t(14),o=t(103),a=t(39),i=t(24),l=t(116),s=i.set,c=i.getterFor("Array Iterator");n.exports=l(Array,"Array",(function(n,e){s(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=c(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},function(n,e,t){var r=t(2),o=t(25),a=t(8),i=r("unscopables"),l=Array.prototype;null==l[i]&&a.f(l,i,{configurable:!0,value:o(null)}),n.exports=function(n){l[i][n]=!0}},function(n,e,t){var r=t(1),o=/#|\.prototype\./,a=function(n,e){var t=l[i(n)];return t==c||t!=s&&("function"==typeof e?r(e):!!e)},i=a.normalize=function(n){return String(n).replace(o,".").toLowerCase()},l=a.data={},s=a.NATIVE="N",c=a.POLYFILL="P";n.exports=a},function(n,e,t){var r=t(83),o=t(28),a=t(2)("toStringTag"),i="Arguments"==o(function(){return arguments}());n.exports=r?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=Object(n),a))?t:i?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(n,e,t){var r=t(5),o=t(21),a=t(2)("species");n.exports=function(n,e){var t,i=r(n).constructor;return void 0===i||null==(t=r(i)[a])?e:o(t)}},function(n,e,t){var r=t(46),o=t(23),a=function(n){return function(e,t){var a,i,l=String(o(e)),s=r(t),c=l.length;return s<0||s>=c?n?"":void 0:(a=l.charCodeAt(s))<55296||a>56319||s+1===c||(i=l.charCodeAt(s+1))<56320||i>57343?n?l.charAt(s):a:n?l.slice(s,s+2):i-56320+(a-55296<<10)+65536}};n.exports={codeAt:a(!1),charAt:a(!0)}},function(n,e,t){var r=t(4),o=t(33),a=t(2)("species");n.exports=function(n,e){var t;return o(n)&&("function"!=typeof(t=n.constructor)||t!==Array&&!o(t.prototype)?r(t)&&null===(t=t[a])&&(t=void 0):t=void 0),new(void 0===t?Array:t)(0===e?0:e)}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e,t){var r=t(6),o=t(1),a=t(74);n.exports=!r&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(3);n.exports=r},function(n,e,t){var r=t(75);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(7),o=t(14),a=t(77).indexOf,i=t(38);n.exports=function(n,e){var t,l=o(n),s=0,c=[];for(t in l)!r(i,t)&&r(l,t)&&c.push(t);for(;e.length>s;)r(l,t=e[s++])&&(~a(c,t)||c.push(t));return c}},function(n,e,t){var r=t(46),o=Math.max,a=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):a(t,e)}},function(n,e,t){var r=t(19);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(0),o=t(178),a=t(82),i=t(70),l=t(47),s=t(12),c=t(18),u=t(2),d=t(20),p=t(39),m=t(119),f=m.IteratorPrototype,h=m.BUGGY_SAFARI_ITERATORS,v=u("iterator"),g=function(){return this};n.exports=function(n,e,t,u,m,b,x){o(t,e,u);var y,w,k,j=function(n){if(n===m&&z)return z;if(!h&&n in S)return S[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},_=e+" Iterator",T=!1,S=n.prototype,I=S[v]||S["@@iterator"]||m&&S[m],z=!h&&I||j(m),E="Array"==e&&S.entries||I;if(E&&(y=a(E.call(new n)),f!==Object.prototype&&y.next&&(d||a(y)===f||(i?i(y,f):"function"!=typeof y[v]&&s(y,v,g)),l(y,_,!0,!0),d&&(p[_]=g))),"values"==m&&I&&"values"!==I.name&&(T=!0,z=function(){return I.call(this)}),d&&!x||S[v]===z||s(S,v,z),p[e]=z,m)if(w={values:j("values"),keys:b?z:j("keys"),entries:j("entries")},x)for(k in w)(h||T||!(k in S))&&c(S,k,w[k]);else r({target:e,proto:!0,forced:h||T},w);return w}},function(n,e,t){var r=t(7),o=t(118),a=t(26),i=t(8);n.exports=function(n,e){for(var t=o(e),l=i.f,s=a.f,c=0;c<t.length;c++){var u=t[c];r(n,u)||l(n,u,s(e,u))}}},function(n,e,t){var r=t(19),o=t(69),a=t(81),i=t(5);n.exports=r("Reflect","ownKeys")||function(n){var e=o.f(i(n)),t=a.f;return t?e.concat(t(n)):e}},function(n,e,t){"use strict";var r,o,a,i=t(1),l=t(82),s=t(12),c=t(7),u=t(2),d=t(20),p=u("iterator"),m=!1;[].keys&&("next"in(a=[].keys())?(o=l(l(a)))!==Object.prototype&&(r=o):m=!0);var f=null==r||i((function(){var n={};return r[p].call(n)!==n}));f&&(r={}),d&&!f||c(r,p)||s(r,p,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},function(n,e,t){var r=t(1);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(3);n.exports=r.Promise},function(n,e,t){var r=t(2),o=t(39),a=r("iterator"),i=Array.prototype;n.exports=function(n){return void 0!==n&&(o.Array===n||i[a]===n)}},function(n,e,t){var r=t(5);n.exports=function(n){var e=n.return;if(void 0!==e)return r(e.call(n)).value}},function(n,e,t){var r=t(2)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[r]=function(){return this},Array.from(i,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!o)return!1;var t=!1;try{var a={};a[r]=function(){return{next:function(){return{done:t=!0}}}},n(a)}catch(n){}return t}},function(n,e,t){var r,o,a,i=t(3),l=t(1),s=t(48),c=t(115),u=t(74),d=t(126),p=t(55),m=i.location,f=i.setImmediate,h=i.clearImmediate,v=i.process,g=i.MessageChannel,b=i.Dispatch,x=0,y={},w=function(n){if(y.hasOwnProperty(n)){var e=y[n];delete y[n],e()}},k=function(n){return function(){w(n)}},j=function(n){w(n.data)},_=function(n){i.postMessage(n+"",m.protocol+"//"+m.host)};f&&h||(f=function(n){for(var e=[],t=1;arguments.length>t;)e.push(arguments[t++]);return y[++x]=function(){("function"==typeof n?n:Function(n)).apply(void 0,e)},r(x),x},h=function(n){delete y[n]},p?r=function(n){v.nextTick(k(n))}:b&&b.now?r=function(n){b.now(k(n))}:g&&!d?(a=(o=new g).port2,o.port1.onmessage=j,r=s(a.postMessage,a,1)):i.addEventListener&&"function"==typeof postMessage&&!i.importScripts&&m&&"file:"!==m.protocol&&!l(_)?(r=_,i.addEventListener("message",j,!1)):r="onreadystatechange"in u("script")?function(n){c.appendChild(u("script")).onreadystatechange=function(){c.removeChild(this),w(n)}}:function(n){setTimeout(k(n),0)}),n.exports={set:f,clear:h}},function(n,e,t){var r=t(76);n.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(r)},function(n,e,t){var r=t(5),o=t(4),a=t(128);n.exports=function(n,e){if(r(n),o(e)&&e.constructor===n)return e;var t=a.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(21),o=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new o(n)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(0),o=t(1),a=t(10),i=t(82),l=t(120);r({target:"Object",stat:!0,forced:o((function(){i(1)})),sham:!l},{getPrototypeOf:function(n){return i(a(n))}})},function(n,e,t){var r=t(171);n.exports=function(n){if(r(n))throw TypeError("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(2)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var r=t(30).forEach,o=t(31)("forEach");n.exports=o?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(1);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(2);e.f=r},function(n,e,t){var r=t(111),o=t(7),a=t(135),i=t(8).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});o(e,n)||i(e,n,{value:a.f(n)})}},function(n,e,t){var r=t(0),o=t(183);r({target:"Array",stat:!0,forced:!t(124)((function(n){Array.from(n)}))},{from:o})},function(n,e,t){t(0)({target:"Object",stat:!0,sham:!t(6)},{create:t(25)})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(60),o=t(223),a=t(224),i=t(225),l=t(226),s=t(227);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=l,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(35),o=t(87);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(244),o=t(27);n.exports=function n(e,t,a,i,l){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,a,i,n,l))}},function(n,e,t){var r=t(147),o=t(247),a=t(148);n.exports=function(n,e,t,i,l,s){var c=1&t,u=n.length,d=e.length;if(u!=d&&!(c&&d>u))return!1;var p=s.get(n),m=s.get(e);if(p&&m)return p==e&&m==n;var f=-1,h=!0,v=2&t?new r:void 0;for(s.set(n,e),s.set(e,n);++f<u;){var g=n[f],b=e[f];if(i)var x=c?i(b,g,f,e,n,s):i(g,b,f,n,e,s);if(void 0!==x){if(x)continue;h=!1;break}if(v){if(!o(e,(function(n,e){if(!a(v,e)&&(g===n||l(g,n,t,i,s)))return v.push(e)}))){h=!1;break}}else if(g!==b&&!l(g,b,t,i,s)){h=!1;break}}return s.delete(n),s.delete(e),h}},function(n,e,t){var r=t(88),o=t(245),a=t(246);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(257),o=t(263),a=t(153);n.exports=function(n){return a(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(17),o=t(259),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,l=i&&i.exports===a?r.Buffer:void 0,s=(l?l.isBuffer:void 0)||o;n.exports=s}).call(this,t(109)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(260),o=t(261),a=t(262),i=a&&a.isTypedArray,l=i?o(i):r;n.exports=l},function(n,e,t){var r=t(143),o=t(90);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(22)(t(17),"Set");n.exports=r},function(n,e,t){var r=t(87);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(158),o=t(64);n.exports=function(n,e){for(var t=0,a=(e=r(e,n)).length;null!=n&&t<a;)n=n[o(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var r=t(16),o=t(91),a=t(274),i=t(277);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:a(i(n))}},function(n,e,t){t(0)({target:"Object",stat:!0},{setPrototypeOf:t(70)})},function(n,e,t){var r=t(0),o=t(19),a=t(21),i=t(5),l=t(4),s=t(25),c=t(306),u=t(1),d=o("Reflect","construct"),p=u((function(){function n(){}return!(d((function(){}),[],n)instanceof n)})),m=!u((function(){d((function(){}))})),f=p||m;r({target:"Reflect",stat:!0,forced:f,sham:f},{construct:function(n,e){a(n),i(e);var t=arguments.length<3?n:a(arguments[2]);if(m&&!p)return d(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(n,r))}var o=t.prototype,u=s(l(o)?o:Object.prototype),f=Function.apply.call(n,u,e);return l(f)?f:u}})},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(210),o=t(215),a=t(286),i=t(294),l=t(303),s=t(188),c=a((function(n){var e=s(n);return l(e)&&(e=void 0),i(r(n,1,l,!0),o(e,2))}));n.exports=c},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,l="object"==typeof global&&global&&global.Object===Object&&global,s="object"==typeof self&&self&&self.Object===Object&&self,c=l||s||Function("return this")(),u=Object.prototype.toString,d=Math.max,p=Math.min,m=function(){return c.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var l=o.test(n);return l||a.test(n)?i(n.slice(2),l?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,a,i,l,s,c=0,u=!1,v=!1,g=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,a=o;return r=o=void 0,c=e,i=n.apply(a,t)}function x(n){return c=n,l=setTimeout(w,e),u?b(n):i}function y(n){var t=n-s;return void 0===s||t>=e||t<0||v&&n-c>=a}function w(){var n=m();if(y(n))return k(n);l=setTimeout(w,function(n){var t=e-(n-s);return v?p(t,a-(n-c)):t}(n))}function k(n){return l=void 0,g&&r?b(n):(r=o=void 0,i)}function j(){var n=m(),t=y(n);if(r=arguments,o=this,s=n,t){if(void 0===l)return x(s);if(v)return l=setTimeout(w,e),b(s)}return void 0===l&&(l=setTimeout(w,e)),i}return e=h(e)||0,f(t)&&(u=!!t.leading,a=(v="maxWait"in t)?d(h(t.maxWait)||0,e):a,g="trailing"in t?!!t.trailing:g),j.cancel=function(){void 0!==l&&clearTimeout(l),c=0,r=s=o=l=void 0},j.flush=function(){return void 0===l?i:k(m())},j}},function(n,e,t){function r(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(n.exports=r=function(n){return typeof n},n.exports.default=n.exports,n.exports.__esModule=!0):(n.exports=r=function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},n.exports.default=n.exports,n.exports.__esModule=!0),r(e)}t(34),t(40),t(9),t(59),t(11),t(15),n.exports=r,n.exports.default=n.exports,n.exports.__esModule=!0},function(n,e,t){"use strict";t(45);var r=t(18),o=t(71),a=t(1),i=t(2),l=t(12),s=i("species"),c=RegExp.prototype;n.exports=function(n,e,t,u){var d=i(n),p=!a((function(){var e={};return e[d]=function(){return 7},7!=""[n](e)})),m=p&&!a((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[s]=function(){return t},t.flags="",t[d]=/./[d]),t.exec=function(){return e=!0,null},t[d](""),!e}));if(!p||!m||t){var f=/./[d],h=e(d,""[n],(function(n,e,t,r,a){var i=e.exec;return i===o||i===c.exec?p&&!a?{done:!0,value:f.call(e,t,r)}:{done:!0,value:n.call(t,e,r)}:{done:!1}}));r(String.prototype,n,h[0]),r(c,d,h[1])}u&&l(c[d],"sham",!0)}},function(n,e,t){var r=t(28),o=t(71);n.exports=function(n,e){var t=n.exec;if("function"==typeof t){var a=t.call(n,e);if("object"!=typeof a)throw TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==r(n))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(n,e)}},function(n,e,t){"use strict";var r=t(0),o=t(77).indexOf,a=t(31),i=[].indexOf,l=!!i&&1/[1].indexOf(1,-0)<0,s=a("indexOf");r({target:"Array",proto:!0,forced:l||!s},{indexOf:function(n){return l?i.apply(this,arguments)||0:o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(6),o=t(8),a=t(5),i=t(53);n.exports=r?Object.defineProperties:function(n,e){a(n);for(var t,r=i(e),l=r.length,s=0;l>s;)o.f(n,t=r[s++],e[t]);return n}},function(n,e){n.exports=function(n,e,t){if(!(n instanceof e))throw TypeError("Incorrect "+(t?t+" ":"")+"invocation");return n}},function(n,e,t){var r=t(4),o=t(28),a=t(2)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[a])?!!e:"RegExp"==o(n))}},function(n,e,t){"use strict";var r=t(5);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(1),o=function(n,e){return RegExp(n,e)};e.UNSUPPORTED_Y=r((function(){var n=o("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),e.BROKEN_CARET=r((function(){var n=o("^r","gy");return n.lastIndex=2,null!=n.exec("str")}))},function(n,e,t){"use strict";var r=t(107).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){"use strict";var r=t(0),o=t(36),a=t(14),i=t(31),l=[].join,s=o!=Object,c=i("join",",");r({target:"Array",proto:!0,forced:s||!c},{join:function(n){return l.call(a(this),void 0===n?",":n)}})},function(n,e,t){"use strict";var r=t(0),o=t(1),a=t(33),i=t(4),l=t(10),s=t(13),c=t(57),u=t(108),d=t(58),p=t(2),m=t(37),f=p("isConcatSpreadable"),h=m>=51||!o((function(){var n=[];return n[f]=!1,n.concat()[0]!==n})),v=d("concat"),g=function(n){if(!i(n))return!1;var e=n[f];return void 0!==e?!!e:a(n)};r({target:"Array",proto:!0,forced:!h||!v},{concat:function(n){var e,t,r,o,a,i=l(this),d=u(i,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(g(a=-1===e?i:arguments[e])){if(p+(o=s(a.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(t=0;t<o;t++,p++)t in a&&c(d,p,a[t])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");c(d,p++,a)}return d.length=p,d}})},function(n,e,t){var r=t(0),o=t(6);r({target:"Object",stat:!0,forced:!o,sham:!o},{defineProperty:t(8).f})},function(n,e,t){"use strict";var r=t(119).IteratorPrototype,o=t(25),a=t(32),i=t(47),l=t(39),s=function(){return this};n.exports=function(n,e,t){var c=e+" Iterator";return n.prototype=o(r,{next:a(1,t)}),i(n,c,!1,!0),l[c]=s,n}},function(n,e,t){var r=t(18);n.exports=function(n,e,t){for(var o in e)r(n,o,e[o],t);return n}},function(n,e,t){"use strict";var r=t(19),o=t(8),a=t(2),i=t(6),l=a("species");n.exports=function(n){var e=r(n),t=o.f;i&&e&&!e[l]&&t(e,l,{configurable:!0,get:function(){return this}})}},function(n,e,t){"use strict";var r=t(6),o=t(1),a=t(53),i=t(81),l=t(80),s=t(10),c=t(36),u=Object.assign,d=Object.defineProperty;n.exports=!u||o((function(){if(r&&1!==u({b:1},u(d({},"a",{enumerable:!0,get:function(){d(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=u({},n)[t]||"abcdefghijklmnopqrst"!=a(u({},e)).join("")}))?function(n,e){for(var t=s(n),o=arguments.length,u=1,d=i.f,p=l.f;o>u;)for(var m,f=c(arguments[u++]),h=d?a(f).concat(d(f)):a(f),v=h.length,g=0;v>g;)m=h[g++],r&&!p.call(f,m)||(t[m]=f[m]);return t}:u},function(n,e,t){var r=t(0),o=t(6),a=t(118),i=t(14),l=t(26),s=t(57);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(n){for(var e,t,r=i(n),o=l.f,c=a(r),u={},d=0;c.length>d;)void 0!==(t=o(r,e=c[d++]))&&s(u,e,t);return u}})},function(n,e,t){"use strict";var r=t(48),o=t(10),a=t(208),i=t(122),l=t(13),s=t(57),c=t(99);n.exports=function(n){var e,t,u,d,p,m,f=o(n),h="function"==typeof this?this:Array,v=arguments.length,g=v>1?arguments[1]:void 0,b=void 0!==g,x=c(f),y=0;if(b&&(g=r(g,v>2?arguments[2]:void 0,2)),null==x||h==Array&&i(x))for(t=new h(e=l(f.length));e>y;y++)m=b?g(f[y],y):f[y],s(t,y,m);else for(p=(d=x.call(f)).next,t=new h;!(u=p.call(d)).done;y++)m=b?a(d,g,[u.value,y],!0):u.value,s(t,y,m);return t.length=y,t}},function(n,e,t){var r=t(1);n.exports=r((function(){var n=RegExp(".","string".charAt(0));return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var r=t(1);n.exports=r((function(){var n=RegExp("(?<a>b)","string".charAt(5));return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){"use strict";var r=t(0),o=t(77).includes,a=t(103);r({target:"Array",proto:!0},{includes:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),a("includes")},function(n,e,t){"use strict";var r=t(0),o=t(131),a=t(23);r({target:"String",proto:!0,forced:!t(132)("includes")},{includes:function(n){return!!~String(a(this)).indexOf(o(n),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(309)},function(n,e,t){var r=t(3),o=t(79),a=r.WeakMap;n.exports="function"==typeof a&&/native code/.test(o(a))},function(n,e,t){var r=t(4);n.exports=function(n){if(!r(n)&&null!==n)throw TypeError("Can't set "+String(n)+" as a prototype");return n}},function(n,e,t){"use strict";var r,o,a,i,l=t(0),s=t(20),c=t(3),u=t(19),d=t(121),p=t(18),m=t(179),f=t(70),h=t(47),v=t(180),g=t(4),b=t(21),x=t(170),y=t(79),w=t(193),k=t(124),j=t(106),_=t(125).set,T=t(194),S=t(127),I=t(196),z=t(128),E=t(197),C=t(24),$=t(104),O=t(2),P=t(198),A=t(55),q=t(37),D=O("species"),M="Promise",L=C.get,N=C.set,R=C.getterFor(M),V=d&&d.prototype,H=d,B=V,U=c.TypeError,F=c.document,W=c.process,G=z.f,J=G,X=!!(F&&F.createEvent&&c.dispatchEvent),K="function"==typeof PromiseRejectionEvent,Q=!1,Y=$(M,(function(){var n=y(H)!==String(H);if(!n&&66===q)return!0;if(s&&!B.finally)return!0;if(q>=51&&/native code/.test(H))return!1;var e=new H((function(n){n(1)})),t=function(n){n((function(){}),(function(){}))};return(e.constructor={})[D]=t,!(Q=e.then((function(){}))instanceof t)||!n&&P&&!K})),Z=Y||!k((function(n){H.all(n).catch((function(){}))})),nn=function(n){var e;return!(!g(n)||"function"!=typeof(e=n.then))&&e},en=function(n,e){if(!n.notified){n.notified=!0;var t=n.reactions;T((function(){for(var r=n.value,o=1==n.state,a=0;t.length>a;){var i,l,s,c=t[a++],u=o?c.ok:c.fail,d=c.resolve,p=c.reject,m=c.domain;try{u?(o||(2===n.rejection&&an(n),n.rejection=1),!0===u?i=r:(m&&m.enter(),i=u(r),m&&(m.exit(),s=!0)),i===c.promise?p(U("Promise-chain cycle")):(l=nn(i))?l.call(i,d,p):d(i)):p(r)}catch(n){m&&!s&&m.exit(),p(n)}}n.reactions=[],n.notified=!1,e&&!n.rejection&&rn(n)}))}},tn=function(n,e,t){var r,o;X?((r=F.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:t},!K&&(o=c["on"+n])?o(r):"unhandledrejection"===n&&I("Unhandled promise rejection",t)},rn=function(n){_.call(c,(function(){var e,t=n.facade,r=n.value;if(on(n)&&(e=E((function(){A?W.emit("unhandledRejection",r,t):tn("unhandledrejection",t,r)})),n.rejection=A||on(n)?2:1,e.error))throw e.value}))},on=function(n){return 1!==n.rejection&&!n.parent},an=function(n){_.call(c,(function(){var e=n.facade;A?W.emit("rejectionHandled",e):tn("rejectionhandled",e,n.value)}))},ln=function(n,e,t){return function(r){n(e,r,t)}},sn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,en(n,!0))},cn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw U("Promise can't be resolved itself");var r=nn(e);r?T((function(){var t={done:!1};try{r.call(e,ln(cn,t,n),ln(sn,t,n))}catch(e){sn(t,e,n)}})):(n.value=e,n.state=1,en(n,!1))}catch(e){sn({done:!1},e,n)}}};if(Y&&(B=(H=function(n){x(this,H,M),b(n),r.call(this);var e=L(this);try{n(ln(cn,e),ln(sn,e))}catch(n){sn(e,n)}}).prototype,(r=function(n){N(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=m(B,{then:function(n,e){var t=R(this),r=G(j(this,H));return r.ok="function"!=typeof n||n,r.fail="function"==typeof e&&e,r.domain=A?W.domain:void 0,t.parent=!0,t.reactions.push(r),0!=t.state&&en(t,!1),r.promise},catch:function(n){return this.then(void 0,n)}}),o=function(){var n=new r,e=L(n);this.promise=n,this.resolve=ln(cn,e),this.reject=ln(sn,e)},z.f=G=function(n){return n===H||n===a?new o(n):J(n)},!s&&"function"==typeof d&&V!==Object.prototype)){i=V.then,Q||(p(V,"then",(function(n,e){var t=this;return new H((function(n,e){i.call(t,n,e)})).then(n,e)}),{unsafe:!0}),p(V,"catch",B.catch,{unsafe:!0}));try{delete V.constructor}catch(n){}f&&f(V,B)}l({global:!0,wrap:!0,forced:Y},{Promise:H}),h(H,M,!1,!0),v(M),a=u(M),l({target:M,stat:!0,forced:Y},{reject:function(n){var e=G(this);return e.reject.call(void 0,n),e.promise}}),l({target:M,stat:!0,forced:s||Y},{resolve:function(n){return S(s&&this===a?H:this,n)}}),l({target:M,stat:!0,forced:Z},{all:function(n){var e=this,t=G(e),r=t.resolve,o=t.reject,a=E((function(){var t=b(e.resolve),a=[],i=0,l=1;w(n,(function(n){var s=i++,c=!1;a.push(void 0),l++,t.call(e,n).then((function(n){c||(c=!0,a[s]=n,--l||r(a))}),o)})),--l||r(a)}));return a.error&&o(a.value),t.promise},race:function(n){var e=this,t=G(e),r=t.reject,o=E((function(){var o=b(e.resolve);w(n,(function(n){o.call(e,n).then(t.resolve,r)}))}));return o.error&&r(o.value),t.promise}})},function(n,e,t){var r=t(5),o=t(122),a=t(13),i=t(48),l=t(99),s=t(123),c=function(n,e){this.stopped=n,this.result=e};n.exports=function(n,e,t){var u,d,p,m,f,h,v,g=t&&t.that,b=!(!t||!t.AS_ENTRIES),x=!(!t||!t.IS_ITERATOR),y=!(!t||!t.INTERRUPTED),w=i(e,g,1+b+y),k=function(n){return u&&s(u),new c(!0,n)},j=function(n){return b?(r(n),y?w(n[0],n[1],k):w(n[0],n[1])):y?w(n,k):w(n)};if(x)u=n;else{if("function"!=typeof(d=l(n)))throw TypeError("Target is not iterable");if(o(d)){for(p=0,m=a(n.length);m>p;p++)if((f=j(n[p]))&&f instanceof c)return f;return new c(!1)}u=d.call(n)}for(h=u.next;!(v=h.call(u)).done;){try{f=j(v.value)}catch(n){throw s(u),n}if("object"==typeof f&&f&&f instanceof c)return f}return new c(!1)}},function(n,e,t){var r,o,a,i,l,s,c,u,d=t(3),p=t(26).f,m=t(125).set,f=t(126),h=t(195),v=t(55),g=d.MutationObserver||d.WebKitMutationObserver,b=d.document,x=d.process,y=d.Promise,w=p(d,"queueMicrotask"),k=w&&w.value;k||(r=function(){var n,e;for(v&&(n=x.domain)&&n.exit();o;){e=o.fn,o=o.next;try{e()}catch(n){throw o?i():a=void 0,n}}a=void 0,n&&n.enter()},f||v||h||!g||!b?y&&y.resolve?((c=y.resolve(void 0)).constructor=y,u=c.then,i=function(){u.call(c,r)}):i=v?function(){x.nextTick(r)}:function(){m.call(d,r)}:(l=!0,s=b.createTextNode(""),new g(r).observe(s,{characterData:!0}),i=function(){s.data=l=!l})),n.exports=k||function(n){var e={fn:n,next:void 0};a&&(a.next=e),o||(o=e,i()),a=e}},function(n,e,t){var r=t(76);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(3);n.exports=function(n,e){var t=r.console;t&&t.error&&(1===arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(0),o=t(181);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},function(n,e,t){"use strict";var r=t(0),o=t(20),a=t(121),i=t(1),l=t(19),s=t(106),c=t(127),u=t(18);if(r({target:"Promise",proto:!0,real:!0,forced:!!a&&i((function(){a.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=s(this,l("Promise")),t="function"==typeof n;return this.then(t?function(t){return c(e,n()).then((function(){return t}))}:n,t?function(t){return c(e,n()).then((function(){throw t}))}:n)}}),!o&&"function"==typeof a){var d=l("Promise").prototype.finally;a.prototype.finally!==d&&u(a.prototype,"finally",d,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(83),o=t(105);n.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(n,e,t){"use strict";var r=t(0),o=t(203).left,a=t(31),i=t(37),l=t(55);r({target:"Array",proto:!0,forced:!a("reduce")||!l&&i>79&&i<83},{reduce:function(n){return o(this,n,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(21),o=t(10),a=t(36),i=t(13),l=function(n){return function(e,t,l,s){r(t);var c=o(e),u=a(c),d=i(c.length),p=n?d-1:0,m=n?-1:1;if(l<2)for(;;){if(p in u){s=u[p],p+=m;break}if(p+=m,n?p<0:d<=p)throw TypeError("Reduce of empty array with no initial value")}for(;n?p>=0:d>p;p+=m)p in u&&(s=t(s,u[p],p,c));return s}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r,o=t(0),a=t(26).f,i=t(13),l=t(131),s=t(23),c=t(132),u=t(20),d="".startsWith,p=Math.min,m=c("startsWith");o({target:"String",proto:!0,forced:!!(u||m||(r=a(String.prototype,"startsWith"),!r||r.writable))&&!m},{startsWith:function(n){var e=String(s(this));l(n);var t=i(p(arguments.length>1?arguments[1]:void 0,e.length)),r=String(n);return d?d.call(e,r,t):e.slice(t,t+r.length)===r}})},function(n,e,t){var r=t(0),o=t(134),a=t(1),i=t(4),l=t(206).onFreeze,s=Object.freeze;r({target:"Object",stat:!0,forced:a((function(){s(1)})),sham:!o},{freeze:function(n){return s&&i(n)?s(l(n)):n}})},function(n,e,t){var r=t(38),o=t(4),a=t(7),i=t(8).f,l=t(52),s=t(134),c=l("meta"),u=0,d=Object.isExtensible||function(){return!0},p=function(n){i(n,c,{value:{objectID:"O"+ ++u,weakData:{}}})},m=n.exports={REQUIRED:!1,fastKey:function(n,e){if(!o(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!a(n,c)){if(!d(n))return"F";if(!e)return"E";p(n)}return n[c].objectID},getWeakData:function(n,e){if(!a(n,c)){if(!d(n))return!0;if(!e)return!1;p(n)}return n[c].weakData},onFreeze:function(n){return s&&m.REQUIRED&&d(n)&&!a(n,c)&&p(n),n}};r[c]=!0},function(n,e,t){var r=t(14),o=t(69).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return i&&"[object Window]"==a.call(n)?function(n){try{return o(n)}catch(n){return i.slice()}}(n):o(r(n))}},function(n,e,t){var r=t(5),o=t(123);n.exports=function(n,e,t,a){try{return a?e(r(t)[0],t[1]):e(t)}catch(e){throw o(n),e}}},function(n,e,t){var r=t(10),o=Math.floor,a="".replace,i=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,l=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,s,c,u){var d=t+n.length,p=s.length,m=l;return void 0!==c&&(c=r(c),m=i),a.call(u,m,(function(r,a){var i;switch(a.charAt(0)){case"$":return"$";case"&":return n;case"`":return e.slice(0,t);case"'":return e.slice(d);case"<":i=c[a.slice(1,-1)];break;default:var l=+a;if(0===l)return r;if(l>p){var u=o(l/10);return 0===u?r:u<=p?void 0===s[u-1]?a.charAt(1):s[u-1]+a.charAt(1):r}i=s[l-1]}return void 0===i?"":i}))}},function(n,e,t){var r=t(139),o=t(211);n.exports=function n(e,t,a,i,l){var s=-1,c=e.length;for(a||(a=o),l||(l=[]);++s<c;){var u=e[s];t>0&&a(u)?t>1?n(u,t-1,a,i,l):r(l,u):i||(l[l.length]=u)}return l}},function(n,e,t){var r=t(41),o=t(85),a=t(16),i=r?r.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||o(n)||!!(i&&n&&n[i])}},function(n,e,t){var r=t(35),o=t(27);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(41),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,l=r?r.toStringTag:void 0;n.exports=function(n){var e=a.call(n,l),t=n[l];try{n[l]=void 0;var r=!0}catch(n){}var o=i.call(n);return r&&(e?n[l]=t:delete n[l]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(216),o=t(272),a=t(93),i=t(16),l=t(283);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?i(n)?o(n[0],n[1]):r(n):l(n)}},function(n,e,t){var r=t(217),o=t(271),a=t(156);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(141),o=t(145);n.exports=function(n,e,t,a){var i=t.length,l=i,s=!a;if(null==n)return!l;for(n=Object(n);i--;){var c=t[i];if(s&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++i<l;){var u=(c=t[i])[0],d=n[u],p=c[1];if(s&&c[2]){if(void 0===d&&!(u in n))return!1}else{var m=new r;if(a)var f=a(d,p,u,n,e,m);if(!(void 0===f?o(p,d,3,a,m):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(61),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(61);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(61);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(61);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(60);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(60),o=t(86),a=t(88);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var i=t.__data__;if(!o||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(143),o=t(229),a=t(87),i=t(144),l=/^\[object .+?Constructor\]$/,s=Function.prototype,c=Object.prototype,u=s.toString,d=c.hasOwnProperty,p=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||o(n))&&(r(n)?p:l).test(i(n))}},function(n,e,t){var r,o=t(230),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var r=t(17)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(233),o=t(60),a=t(86);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(n,e,t){var r=t(234),o=t(235),a=t(236),i=t(237),l=t(238);function s(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=i,s.prototype.set=l,n.exports=s},function(n,e,t){var r=t(62);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(62),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(62),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(62);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(63);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(63);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(63);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(63);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(141),o=t(146),a=t(248),i=t(251),l=t(267),s=t(16),c=t(150),u=t(152),d="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,f,h){var v=s(n),g=s(e),b=v?"[object Array]":l(n),x=g?"[object Array]":l(e),y=(b="[object Arguments]"==b?d:b)==d,w=(x="[object Arguments]"==x?d:x)==d,k=b==x;if(k&&c(n)){if(!c(e))return!1;v=!0,y=!1}if(k&&!y)return h||(h=new r),v||u(n)?o(n,e,t,m,f,h):a(n,e,b,t,m,f,h);if(!(1&t)){var j=y&&p.call(n,"__wrapped__"),_=w&&p.call(e,"__wrapped__");if(j||_){var T=j?n.value():n,S=_?e.value():e;return h||(h=new r),f(T,S,t,m,h)}}return!!k&&(h||(h=new r),i(n,e,t,m,f,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(41),o=t(249),a=t(142),i=t(146),l=t(250),s=t(89),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,d,p){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!d(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=l;case"[object Set]":var f=1&r;if(m||(m=s),n.size!=e.size&&!f)return!1;var h=p.get(n);if(h)return h==e;r|=2,p.set(n,e);var v=i(m(n),m(e),r,c,d,p);return p.delete(n),v;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(17).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(252),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,i,l){var s=1&t,c=r(n),u=c.length;if(u!=r(e).length&&!s)return!1;for(var d=u;d--;){var p=c[d];if(!(s?p in e:o.call(e,p)))return!1}var m=l.get(n),f=l.get(e);if(m&&f)return m==e&&f==n;var h=!0;l.set(n,e),l.set(e,n);for(var v=s;++d<u;){var g=n[p=c[d]],b=e[p];if(a)var x=s?a(b,g,p,e,n,l):a(g,b,p,n,e,l);if(!(void 0===x?g===b||i(g,b,t,a,l):x)){h=!1;break}v||(v="constructor"==p)}if(h&&!v){var y=n.constructor,w=e.constructor;y==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof w&&w instanceof w||(h=!1)}return l.delete(n),l.delete(e),h}},function(n,e,t){var r=t(253),o=t(254),a=t(149);n.exports=function(n){return r(n,a,o)}},function(n,e,t){var r=t(139),o=t(16);n.exports=function(n,e,t){var a=e(n);return o(n)?a:r(a,t(n))}},function(n,e,t){var r=t(255),o=t(256),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,l=i?function(n){return null==n?[]:(n=Object(n),r(i(n),(function(e){return a.call(n,e)})))}:o;n.exports=l},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,a=[];++t<r;){var i=n[t];e(i,t,n)&&(a[o++]=i)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(258),o=t(85),a=t(16),i=t(150),l=t(151),s=t(152),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),u=!t&&o(n),d=!t&&!u&&i(n),p=!t&&!u&&!d&&s(n),m=t||u||d||p,f=m?r(n.length,String):[],h=f.length;for(var v in n)!e&&!c.call(n,v)||m&&("length"==v||d&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||l(v,h))||f.push(v);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(35),o=t(90),a=t(27),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&o(n.length)&&!!i[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(140),o=e&&!e.nodeType&&e,a=o&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===o&&r.process,l=function(){try{var n=a&&a.require&&a.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=l}).call(this,t(109)(n))},function(n,e,t){var r=t(264),o=t(265),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(266)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(268),o=t(86),a=t(269),i=t(154),l=t(270),s=t(35),c=t(144),u=c(r),d=c(o),p=c(a),m=c(i),f=c(l),h=s;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=h(new o)||a&&"[object Promise]"!=h(a.resolve())||i&&"[object Set]"!=h(new i)||l&&"[object WeakMap]"!=h(new l))&&(h=function(n){var e=s(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case u:return"[object DataView]";case d:return"[object Map]";case p:return"[object Promise]";case m:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(22)(t(17),"DataView");n.exports=r},function(n,e,t){var r=t(22)(t(17),"Promise");n.exports=r},function(n,e,t){var r=t(22)(t(17),"WeakMap");n.exports=r},function(n,e,t){var r=t(155),o=t(149);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var a=e[t],i=n[a];e[t]=[a,i,r(i)]}return e}},function(n,e,t){var r=t(145),o=t(273),a=t(280),i=t(91),l=t(155),s=t(156),c=t(64);n.exports=function(n,e){return i(n)&&l(e)?s(c(n),e):function(t){var i=o(t,n);return void 0===i&&i===e?a(t,n):r(e,i,3)}}},function(n,e,t){var r=t(157);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(275),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(a,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var r=t(276);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(88);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],a=t.cache;if(a.has(o))return a.get(o);var i=n.apply(this,r);return t.cache=a.set(o,i)||a,i};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(278);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(41),o=t(279),a=t(16),i=t(92),l=r?r.prototype:void 0,s=l?l.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return o(e,n)+"";if(i(e))return s?s.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(281),o=t(282);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(158),o=t(85),a=t(16),i=t(151),l=t(90),s=t(64);n.exports=function(n,e,t){for(var c=-1,u=(e=r(e,n)).length,d=!1;++c<u;){var p=s(e[c]);if(!(d=null!=n&&t(n,p)))break;n=n[p]}return d||++c!=u?d:!!(u=null==n?0:n.length)&&l(u)&&i(p,u)&&(a(n)||o(n))}},function(n,e,t){var r=t(284),o=t(285),a=t(91),i=t(64);n.exports=function(n){return a(n)?r(i(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(157);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(93),o=t(287),a=t(289);n.exports=function(n,e){return a(o(n,e,r),n+"")}},function(n,e,t){var r=t(288),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var a=arguments,i=-1,l=o(a.length-e,0),s=Array(l);++i<l;)s[i]=a[e+i];i=-1;for(var c=Array(e+1);++i<e;)c[i]=a[i];return c[e]=t(s),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(290),o=t(293)(r);n.exports=o},function(n,e,t){var r=t(291),o=t(292),a=t(93),i=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:a;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(22),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),a=16-(o-r);if(r=o,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(147),o=t(295),a=t(300),i=t(148),l=t(301),s=t(89);n.exports=function(n,e,t){var c=-1,u=o,d=n.length,p=!0,m=[],f=m;if(t)p=!1,u=a;else if(d>=200){var h=e?null:l(n);if(h)return s(h);p=!1,u=i,f=new r}else f=e?[]:m;n:for(;++c<d;){var v=n[c],g=e?e(v):v;if(v=t||0!==v?v:0,p&&g==g){for(var b=f.length;b--;)if(f[b]===g)continue n;e&&f.push(g),m.push(v)}else u(f,g,t)||(f!==m&&f.push(g),m.push(v))}return m}},function(n,e,t){var r=t(296);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(297),o=t(298),a=t(299);n.exports=function(n,e,t){return e==e?a(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,a=t+(r?1:-1);r?a--:++a<o;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(154),o=t(302),a=t(89),i=r&&1/a(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(153),o=t(27);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";var r=t(21),o=t(4),a=[].slice,i={},l=function(n,e,t){if(!(e in i)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";i[e]=Function("C,a","return new C("+r.join(",")+")")}return i[e](n,t)};n.exports=Function.bind||function(n){var e=r(this),t=a.call(arguments,1),i=function(){var r=t.concat(a.call(arguments));return this instanceof i?l(e,r.length,r):e.apply(n,r)};return o(e.prototype)&&(i.prototype=e.prototype),i}},function(n,e,t){"use strict";t(161)},function(n,e,t){"use strict";t(162)},function(n,e,t){"use strict";t.r(e);t(102),t(192),t(199),t(200);var r=t(56),o=(t(100),t(49),t(9),t(11),t(15),t(67),t(29),Object.freeze({}));function a(n){return null==n}function i(n){return null!=n}function l(n){return!0===n}function s(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function d(n){return"[object Object]"===u.call(n)}function p(n){return"[object RegExp]"===u.call(n)}function m(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function f(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function h(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===u?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function g(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}g("slot,component",!0);var b=g("key,ref,slot,slot-scope,is");function x(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var y=Object.prototype.hasOwnProperty;function w(n,e){return y.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var j=/-(\w)/g,_=k((function(n){return n.replace(j,(function(n,e){return e?e.toUpperCase():""}))})),T=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),S=/\B([A-Z])/g,I=k((function(n){return n.replace(S,"-$1").toLowerCase()}));var z=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function E(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function C(n,e){for(var t in e)n[t]=e[t];return n}function $(n){for(var e={},t=0;t<n.length;t++)n[t]&&C(e,n[t]);return e}function O(n,e,t){}var P=function(n,e,t){return!1},A=function(n){return n};function q(n,e){if(n===e)return!0;var t=c(n),r=c(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),a=Array.isArray(e);if(o&&a)return n.length===e.length&&n.every((function(n,t){return q(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||a)return!1;var i=Object.keys(n),l=Object.keys(e);return i.length===l.length&&i.every((function(t){return q(n[t],e[t])}))}catch(n){return!1}}function D(n,e){for(var t=0;t<n.length;t++)if(q(n[t],e))return t;return-1}function M(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var L=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],R={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:O,parsePlatformTagName:A,mustUseProp:P,async:!0,_lifecycleHooks:N},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var B=new RegExp("[^"+V.source+".$_\\d]");var U,F="__proto__"in{},W="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,J=G&&WXEnvironment.platform.toLowerCase(),X=W&&window.navigator.userAgent.toLowerCase(),K=X&&/msie|trident/.test(X),Q=X&&X.indexOf("msie 9.0")>0,Y=X&&X.indexOf("edge/")>0,Z=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===J),nn=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(W)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var on=function(){return void 0===U&&(U=!W&&!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),U},an=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var sn,cn="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);sn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var un=O,dn=0,pn=function(){this.id=dn++,this.subs=[]};pn.prototype.addSub=function(n){this.subs.push(n)},pn.prototype.removeSub=function(n){x(this.subs,n)},pn.prototype.depend=function(){pn.target&&pn.target.addDep(this)},pn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},pn.target=null;var mn=[];function fn(n){mn.push(n),pn.target=n}function hn(){mn.pop(),pn.target=mn[mn.length-1]}var vn=function(n,e,t,r,o,a,i,l){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=l,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},gn={child:{configurable:!0}};gn.child.get=function(){return this.componentInstance},Object.defineProperties(vn.prototype,gn);var bn=function(n){void 0===n&&(n="");var e=new vn;return e.text=n,e.isComment=!0,e};function xn(n){return new vn(void 0,void 0,void 0,String(n))}function yn(n){var e=new vn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var wn=Array.prototype,kn=Object.create(wn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=wn[n];H(kn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var o,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var jn=Object.getOwnPropertyNames(kn),_n=!0;function Tn(n){_n=n}var Sn=function(n){this.value=n,this.dep=new pn,this.vmCount=0,H(n,"__ob__",this),Array.isArray(n)?(F?function(n,e){n.__proto__=e}(n,kn):function(n,e,t){for(var r=0,o=t.length;r<o;r++){var a=t[r];H(n,a,e[a])}}(n,kn,jn),this.observeArray(n)):this.walk(n)};function In(n,e){var t;if(c(n)&&!(n instanceof vn))return w(n,"__ob__")&&n.__ob__ instanceof Sn?t=n.__ob__:_n&&!on()&&(Array.isArray(n)||d(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Sn(n)),e&&t&&t.vmCount++,t}function zn(n,e,t,r,o){var a=new pn,i=Object.getOwnPropertyDescriptor(n,e);if(!i||!1!==i.configurable){var l=i&&i.get,s=i&&i.set;l&&!s||2!==arguments.length||(t=n[e]);var c=!o&&In(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=l?l.call(n):t;return pn.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(e)&&$n(e))),e},set:function(e){var r=l?l.call(n):t;e===r||e!=e&&r!=r||l&&!s||(s?s.call(n,e):t=e,c=!o&&In(e),a.notify())}})}}function En(n,e,t){if(Array.isArray(n)&&m(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(zn(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function Cn(n,e){if(Array.isArray(n)&&m(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||w(n,e)&&(delete n[e],t&&t.dep.notify())}}function $n(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&$n(e)}Sn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)zn(n,e[t])},Sn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)In(n[e])};var On=R.optionMergeStrategies;function Pn(n,e){if(!e)return n;for(var t,r,o,a=cn?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++)"__ob__"!==(t=a[i])&&(r=n[t],o=e[t],w(n,t)?r!==o&&d(r)&&d(o)&&Pn(r,o):En(n,t,o));return n}function An(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,o="function"==typeof n?n.call(t,t):n;return r?Pn(r,o):o}:e?n?function(){return Pn("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function qn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Dn(n,e,t,r){var o=Object.create(n||null);return e?C(o,e):o}On.data=function(n,e,t){return t?An(n,e,t):e&&"function"!=typeof e?n:An(n,e)},N.forEach((function(n){On[n]=qn})),L.forEach((function(n){On[n+"s"]=Dn})),On.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var a in C(o,n),e){var i=o[a],l=e[a];i&&!Array.isArray(i)&&(i=[i]),o[a]=i?i.concat(l):Array.isArray(l)?l:[l]}return o},On.props=On.methods=On.inject=On.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return C(o,n),e&&C(o,e),o},On.provide=An;var Mn=function(n,e){return void 0===e?n:e};function Ln(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,a={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(a[_(o)]={type:null});else if(d(t))for(var i in t)o=t[i],a[_(i)]=d(o)?o:{type:o};else 0;n.props=a}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(d(t))for(var a in t){var i=t[a];r[a]=d(i)?C({from:a},i):{from:i}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Ln(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=Ln(n,e.mixins[r],t);var a,i={};for(a in n)l(a);for(a in e)w(n,a)||l(a);function l(r){var o=On[r]||Mn;i[r]=o(n[r],e[r],t,r)}return i}function Nn(n,e,t,r){if("string"==typeof t){var o=n[e];if(w(o,t))return o[t];var a=_(t);if(w(o,a))return o[a];var i=T(a);return w(o,i)?o[i]:o[t]||o[a]||o[i]}}function Rn(n,e,t,r){var o=e[n],a=!w(t,n),i=t[n],l=Un(Boolean,o.type);if(l>-1)if(a&&!w(o,"default"))i=!1;else if(""===i||i===I(n)){var s=Un(String,o.type);(s<0||l<s)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!w(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Hn(e.type)?r.call(n):r}(r,o,n);var c=_n;Tn(!0),In(i),Tn(c)}return i}var Vn=/^\s*function (\w+)/;function Hn(n){var e=n&&n.toString().match(Vn);return e?e[1]:""}function Bn(n,e){return Hn(n)===Hn(e)}function Un(n,e){if(!Array.isArray(e))return Bn(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Bn(e[t],n))return t;return-1}function Fn(n,e,t){fn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,n,e,t))return}catch(n){Gn(n,r,"errorCaptured hook")}}Gn(n,e,t)}finally{hn()}}function Wn(n,e,t,r,o){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(n){return Fn(n,r,o+" (Promise/async)")})),a._handled=!0)}catch(n){Fn(n,r,o)}return a}function Gn(n,e,t){if(R.errorHandler)try{return R.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Jn(e,null,"config.errorHandler")}Jn(n,e,t)}function Jn(n,e,t){if(!W&&!G||"undefined"==typeof console)throw n;console.error(n)}var Xn,Kn=!1,Qn=[],Yn=!1;function Zn(){Yn=!1;var n=Qn.slice(0);Qn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var ne=Promise.resolve();Xn=function(){ne.then(Zn),Z&&setTimeout(O)},Kn=!0}else if(K||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Xn="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var ee=1,te=new MutationObserver(Zn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Xn=function(){ee=(ee+1)%2,re.data=String(ee)},Kn=!0}function oe(n,e){var t;if(Qn.push((function(){if(n)try{n.call(e)}catch(n){Fn(n,e,"nextTick")}else t&&t(e)})),Yn||(Yn=!0,Xn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var ae=new sn;function ie(n){!function n(e,t){var r,o,a=Array.isArray(e);if(!a&&!c(e)||Object.isFrozen(e)||e instanceof vn)return;if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(a)for(r=e.length;r--;)n(e[r],t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,ae),ae.clear()}var le=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function se(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Wn(r,null,arguments,e,"v-on handler");for(var o=r.slice(),a=0;a<o.length;a++)Wn(o[a],null,n,e,"v-on handler")}return t.fns=n,t}function ce(n,e,t,r,o,i){var s,c,u,d;for(s in n)c=n[s],u=e[s],d=le(s),a(c)||(a(u)?(a(c.fns)&&(c=n[s]=se(c,i)),l(d.once)&&(c=n[s]=o(d.name,c,d.capture)),t(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,n[s]=u));for(s in e)a(n[s])&&r((d=le(s)).name,e[s],d.capture)}function ue(n,e,t){var r;n instanceof vn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function s(){t.apply(this,arguments),x(r.fns,s)}a(o)?r=se([s]):i(o.fns)&&l(o.merged)?(r=o).fns.push(s):r=se([o,s]),r.merged=!0,n[e]=r}function de(n,e,t,r,o){if(i(e)){if(w(e,t))return n[t]=e[t],o||delete e[t],!0;if(w(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function pe(n){return s(n)?[xn(n)]:Array.isArray(n)?function n(e,t){var r,o,c,u,d=[];for(r=0;r<e.length;r++)a(o=e[r])||"boolean"==typeof o||(c=d.length-1,u=d[c],Array.isArray(o)?o.length>0&&(me((o=n(o,(t||"")+"_"+r))[0])&&me(u)&&(d[c]=xn(u.text+o[0].text),o.shift()),d.push.apply(d,o)):s(o)?me(u)?d[c]=xn(u.text+o):""!==o&&d.push(xn(o)):me(o)&&me(u)?d[c]=xn(u.text+o.text):(l(e._isVList)&&i(o.tag)&&a(o.key)&&i(t)&&(o.key="__vlist"+t+"_"+r+"__"),d.push(o)));return d}(n):void 0}function me(n){return i(n)&&i(n.text)&&!1===n.isComment}function fe(n,e){if(n){for(var t=Object.create(null),r=cn?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){for(var i=n[a].from,l=e;l;){if(l._provided&&w(l._provided,i)){t[a]=l._provided[i];break}l=l.$parent}if(!l)if("default"in n[a]){var s=n[a].default;t[a]="function"==typeof s?s.call(e):s}else 0}}return t}}function he(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var a=n[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var l=i.slot,s=t[l]||(t[l]=[]);"template"===a.tag?s.push.apply(s,a.children||[]):s.push(a)}}for(var c in t)t[c].every(ve)&&delete t[c];return t}function ve(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function be(n,e,t){var r,a=Object.keys(e).length>0,i=n?!!n.$stable:!a,l=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(i&&t&&t!==o&&l===t.$key&&!a&&!t.$hasNormal)return t;for(var s in r={},n)n[s]&&"$"!==s[0]&&(r[s]=xe(e,s,n[s]))}else r={};for(var c in e)c in r||(r[c]=ye(e,c));return n&&Object.isExtensible(n)&&(n._normalized=r),H(r,"$stable",i),H(r,"$key",l),H(r,"$hasNormal",a),r}function xe(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:pe(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ge(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function ye(n,e){return function(){return n[e]}}function we(n,e){var t,r,o,a,l;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,o=n.length;r<o;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(c(n))if(cn&&n[Symbol.iterator]){t=[];for(var s=n[Symbol.iterator](),u=s.next();!u.done;)t.push(e(u.value,t.length)),u=s.next()}else for(a=Object.keys(n),t=new Array(a.length),r=0,o=a.length;r<o;r++)l=a[r],t[r]=e(n[l],l,r);return i(t)||(t=[]),t._isVList=!0,t}function ke(n,e,t,r){var o,a=this.$scopedSlots[n];a?(t=t||{},r&&(t=C(C({},r),t)),o=a(t)||("function"==typeof e?e():e)):o=this.$slots[n]||("function"==typeof e?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},o):o}function je(n){return Nn(this.$options,"filters",n)||A}function _e(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Te(n,e,t,r,o){var a=R.keyCodes[e]||t;return o&&r&&!R.keyCodes[e]?_e(o,r):a?_e(a,n):r?I(r)!==e:void 0===n}function Se(n,e,t,r,o){if(t)if(c(t)){var a;Array.isArray(t)&&(t=$(t));var i=function(i){if("class"===i||"style"===i||b(i))a=n;else{var l=n.attrs&&n.attrs.type;a=r||R.mustUseProp(e,l,i)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var s=_(i),c=I(i);s in a||c in a||(a[i]=t[i],o&&((n.on||(n.on={}))["update:"+i]=function(n){t[i]=n}))};for(var l in t)i(l)}else;return n}function Ie(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||Ee(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function ze(n,e,t){return Ee(n,"__once__"+e+(t?"_"+t:""),!0),n}function Ee(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Ce(n[r],e+"_"+r,t);else Ce(n,e,t)}function Ce(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function $e(n,e){if(e)if(d(e)){var t=n.on=n.on?C({},n.on):{};for(var r in e){var o=t[r],a=e[r];t[r]=o?[].concat(o,a):a}}else;return n}function Oe(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var a=n[o];Array.isArray(a)?Oe(a,e,t):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return r&&(e.$key=r),e}function Pe(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Ae(n,e){return"string"==typeof n?e+n:n}function qe(n){n._o=ze,n._n=v,n._s=h,n._l=we,n._t=ke,n._q=q,n._i=D,n._m=Ie,n._f=je,n._k=Te,n._b=Se,n._v=xn,n._e=bn,n._u=Oe,n._g=$e,n._d=Pe,n._p=Ae}function De(n,e,t,r,a){var i,s=this,c=a.options;w(r,"_uid")?(i=Object.create(r))._original=r:(i=r,r=r._original);var u=l(c._compiled),d=!u;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||o,this.injections=fe(c.inject,r),this.slots=function(){return s.$slots||be(n.scopedSlots,s.$slots=he(t,r)),s.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return be(n.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=be(n.scopedSlots,this.$slots)),c._scopeId?this._c=function(n,e,t,o){var a=Be(i,n,e,t,o,d);return a&&!Array.isArray(a)&&(a.fnScopeId=c._scopeId,a.fnContext=r),a}:this._c=function(n,e,t,r){return Be(i,n,e,t,r,d)}}function Me(n,e,t,r,o){var a=yn(n);return a.fnContext=t,a.fnOptions=r,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function Le(n,e){for(var t in e)n[_(t)]=e[t]}qe(De.prototype);var Ne={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Ne.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;i(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ye)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,a){0;var i=r.data.scopedSlots,l=n.$scopedSlots,s=!!(i&&!i.$stable||l!==o&&!l.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),c=!!(a||n.$options._renderChildren||s);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=a,n.$attrs=r.data.attrs||o,n.$listeners=t||o,e&&n.$options.props){Tn(!1);for(var u=n._props,d=n.$options._propKeys||[],p=0;p<d.length;p++){var m=d[p],f=n.$options.props;u[m]=Rn(m,f,e,n)}Tn(!0),n.$options.propsData=e}t=t||o;var h=n.$options._parentListeners;n.$options._parentListeners=t,Qe(n,t,h),c&&(n.$slots=he(a,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,ot.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},Re=Object.keys(Ne);function Ve(n,e,t,r,s){if(!a(n)){var u=t.$options._base;if(c(n)&&(n=u.extend(n)),"function"==typeof n){var d;if(a(n.cid)&&void 0===(n=function(n,e){if(l(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=Fe;t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(l(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var r=n.owners=[t],o=!0,s=null,u=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var d=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==s&&(clearTimeout(s),s=null),null!==u&&(clearTimeout(u),u=null))},p=M((function(t){n.resolved=We(t,e),o?r.length=0:d(!0)})),m=M((function(e){i(n.errorComp)&&(n.error=!0,d(!0))})),h=n(p,m);return c(h)&&(f(h)?a(n.resolved)&&h.then(p,m):f(h.component)&&(h.component.then(p,m),i(h.error)&&(n.errorComp=We(h.error,e)),i(h.loading)&&(n.loadingComp=We(h.loading,e),0===h.delay?n.loading=!0:s=setTimeout((function(){s=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,d(!1))}),h.delay||200)),i(h.timeout)&&(u=setTimeout((function(){u=null,a(n.resolved)&&m(null)}),h.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(d=n,u)))return function(n,e,t,r,o){var a=bn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:r,tag:o},a}(d,e,t,r,s);e=e||{},_t(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),a=o[r],l=e.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(l):a!==l)&&(o[r]=[l].concat(a)):o[r]=l}(n.options,e);var p=function(n,e,t){var r=e.options.props;if(!a(r)){var o={},l=n.attrs,s=n.props;if(i(l)||i(s))for(var c in r){var u=I(c);de(o,s,c,u,!0)||de(o,l,c,u,!1)}return o}}(e,n);if(l(n.options.functional))return function(n,e,t,r,a){var l=n.options,s={},c=l.props;if(i(c))for(var u in c)s[u]=Rn(u,c,e||o);else i(t.attrs)&&Le(s,t.attrs),i(t.props)&&Le(s,t.props);var d=new De(t,s,a,r,n),p=l.render.call(null,d._c,d);if(p instanceof vn)return Me(p,t,d.parent,l,d);if(Array.isArray(p)){for(var m=pe(p)||[],f=new Array(m.length),h=0;h<m.length;h++)f[h]=Me(m[h],t,d.parent,l,d);return f}}(n,p,e,t,r);var m=e.on;if(e.on=e.nativeOn,l(n.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Re.length;t++){var r=Re[t],o=e[r],a=Ne[r];o===a||o&&o._merged||(e[r]=o?He(a,o):a)}}(e);var v=n.options.name||s;return new vn("vue-component-"+n.cid+(v?"-"+v:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:p,listeners:m,tag:s,children:r},d)}}}function He(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Be(n,e,t,r,o,u){return(Array.isArray(t)||s(t))&&(o=r,r=t,t=void 0),l(u)&&(o=2),function(n,e,t,r,o){if(i(t)&&i(t.__ob__))return bn();i(t)&&i(t.is)&&(e=t.is);if(!e)return bn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===o?r=pe(r):1===o&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var s,u;if("string"==typeof e){var d;u=n.$vnode&&n.$vnode.ns||R.getTagNamespace(e),s=R.isReservedTag(e)?new vn(R.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!i(d=Nn(n.$options,"components",e))?new vn(e,t,r,void 0,void 0,n):Ve(d,t,n,r,e)}else s=Ve(e,t,n,r);return Array.isArray(s)?s:i(s)?(i(u)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(i(e.children))for(var o=0,s=e.children.length;o<s;o++){var c=e.children[o];i(c.tag)&&(a(c.ns)||l(r)&&"svg"!==c.tag)&&n(c,t,r)}}(s,u),i(t)&&function(n){c(n.style)&&ie(n.style);c(n.class)&&ie(n.class)}(t),s):bn()}(n,e,t,r,o)}var Ue,Fe=null;function We(n,e){return(n.__esModule||cn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),c(n)?e.extend(n):n}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||ge(t)))return t}}function Je(n,e){Ue.$on(n,e)}function Xe(n,e){Ue.$off(n,e)}function Ke(n,e){var t=Ue;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Qe(n,e,t){Ue=n,ce(e,t||{},Je,Xe,Ke,n),Ue=void 0}var Ye=null;function Ze(n){var e=Ye;return Ye=n,function(){Ye=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){fn();var t=n.$options[e],r=e+" hook";if(t)for(var o=0,a=t.length;o<a;o++)Wn(t[o],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),hn()}var rt=[],ot=[],at={},it=!1,lt=!1,st=0;var ct=0,ut=Date.now;if(W&&!K){var dt=window.performance;dt&&"function"==typeof dt.now&&ut()>document.createEvent("Event").timeStamp&&(ut=function(){return dt.now()})}function pt(){var n,e;for(ct=ut(),lt=!0,rt.sort((function(n,e){return n.id-e.id})),st=0;st<rt.length;st++)(n=rt[st]).before&&n.before(),e=n.id,at[e]=null,n.run();var t=ot.slice(),r=rt.slice();st=rt.length=ot.length=0,at={},it=lt=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),an&&R.devtools&&an.emit("flush")}var mt=0,ft=function(n,e,t,r,o){this.vm=n,o&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++mt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new sn,this.newDepIds=new sn,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!B.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=O)),this.value=this.lazy?void 0:this.get()};ft.prototype.get=function(){var n;fn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Fn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ie(n),hn(),this.cleanupDeps()}return n},ft.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},ft.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},ft.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==at[e]){if(at[e]=!0,lt){for(var t=rt.length-1;t>st&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);it||(it=!0,oe(pt))}}(this)},ft.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||c(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Wn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},ft.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},ft.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},ft.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||x(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ht={enumerable:!0,configurable:!0,get:O,set:O};function vt(n,e,t){ht.get=function(){return this[e][t]},ht.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ht)}function gt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},o=n.$options._propKeys=[];n.$parent&&Tn(!1);var a=function(a){o.push(a);var i=Rn(a,e,t,n);zn(r,a,i),a in n||vt(n,"_props",a)};for(var i in e)a(i);Tn(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?O:z(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;d(e=n._data="function"==typeof e?function(n,e){fn();try{return n.call(e,e)}catch(n){return Fn(n,e,"data()"),{}}finally{hn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var a=t[o];0,r&&w(r,a)||(i=void 0,36!==(i=(a+"").charCodeAt(0))&&95!==i&&vt(n,"_data",a))}var i;In(e,!0)}(n):In(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=on();for(var o in e){var a=e[o],i="function"==typeof a?a:a.get;0,r||(t[o]=new ft(n,i||O,O,bt)),o in n||xt(n,o,a)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var o=0;o<r.length;o++)kt(n,t,r[o]);else kt(n,t,r)}}(n,e.watch)}var bt={lazy:!0};function xt(n,e,t){var r=!on();"function"==typeof t?(ht.get=r?yt(e):wt(t),ht.set=O):(ht.get=t.get?r&&!1!==t.cache?yt(e):wt(t.get):O,ht.set=t.set||O),Object.defineProperty(n,e,ht)}function yt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),pn.target&&e.depend(),e.value}}function wt(n){return function(){return n.call(this,this)}}function kt(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var jt=0;function _t(n){var e=n.options;if(n.super){var t=_t(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&C(n.extendOptions,r),(e=n.options=Ln(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Tt(n){this._init(n)}function St(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var a=n.name||t.options.name;var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=Ln(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)vt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)xt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,L.forEach((function(n){i[n]=t[n]})),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=C({},i.options),o[r]=i,i}}function It(n){return n&&(n.Ctor.options.name||n.tag)}function zt(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!p(n)&&n.test(e)}function Et(n,e){var t=n.cache,r=n.keys,o=n._vnode;for(var a in t){var i=t[a];if(i){var l=i.name;l&&!e(l)&&Ct(t,a,r,o)}}}function Ct(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,x(t,e)}Tt.prototype._init=function(n){var e=this;e._uid=jt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Ln(_t(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Qe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=he(e._renderChildren,r),n.$scopedSlots=o,n._c=function(e,t,r,o){return Be(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Be(n,e,t,r,o,!0)};var a=t&&t.data;zn(n,"$attrs",a&&a.attrs||o,null,!0),zn(n,"$listeners",e._parentListeners||o,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=fe(n.$options.inject,n);e&&(Tn(!1),Object.keys(e).forEach((function(t){zn(n,t,e[t])})),Tn(!0))}(e),gt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=En,n.prototype.$delete=Cn,n.prototype.$watch=function(n,e,t){if(d(e))return kt(this,n,e,t);(t=t||{}).user=!0;var r=new ft(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'+r.expression+'"';fn(),Wn(e,this,[r.value],this,o),hn()}return function(){r.teardown()}}}(Tt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var o=0,a=n.length;o<a;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var a,i=t._events[n];if(!i)return t;if(!e)return t._events[n]=null,t;for(var l=i.length;l--;)if((a=i[l])===e||a.fn===e){i.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?E(t):t;for(var r=E(arguments,1),o='event handler for "'+n+'"',a=0,i=t.length;a<i;a++)Wn(t[a],e,r,e,o)}return e}}(Tt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,a=Ze(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),a(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Tt),function(n){qe(n.prototype),n.prototype.$nextTick=function(n){return oe(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,o=t._parentVnode;o&&(e.$scopedSlots=be(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{Fe=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Fn(t,e,"render"),n=e._vnode}finally{Fe=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof vn||(n=bn()),n.parent=o,n}}(Tt);var $t=[String,RegExp,Array],Ot={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:$t,exclude:$t,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,a=t.componentInstance,i=t.componentOptions;n[r]={name:It(i),tag:o,componentInstance:a},e.push(r),this.max&&e.length>parseInt(this.max)&&Ct(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Ct(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Et(n,(function(n){return zt(e,n)}))})),this.$watch("exclude",(function(e){Et(n,(function(n){return!zt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var r=It(t),o=this.include,a=this.exclude;if(o&&(!r||!zt(o,r))||a&&r&&zt(a,r))return e;var i=this.cache,l=this.keys,s=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;i[s]?(e.componentInstance=i[s].componentInstance,x(l,s),l.push(s)):(this.vnodeToCache=e,this.keyToCache=s),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return R}};Object.defineProperty(n,"config",e),n.util={warn:un,extend:C,mergeOptions:Ln,defineReactive:zn},n.set=En,n.delete=Cn,n.nextTick=oe,n.observable=function(n){return In(n),n},n.options=Object.create(null),L.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,C(n.options.components,Ot),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=E(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Ln(this.options,n),this}}(n),St(n),function(n){L.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Tt),Object.defineProperty(Tt.prototype,"$isServer",{get:on}),Object.defineProperty(Tt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Tt,"FunctionalRenderContext",{value:De}),Tt.version="2.6.14";var Pt=g("style,class"),At=g("input,textarea,option,select,progress"),qt=g("contenteditable,draggable,spellcheck"),Dt=g("events,caret,typing,plaintext-only"),Mt=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Lt="http://www.w3.org/1999/xlink",Nt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Rt=function(n){return Nt(n)?n.slice(6,n.length):""},Vt=function(n){return null==n||!1===n};function Ht(n){for(var e=n.data,t=n,r=n;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Bt(r.data,e));for(;i(t=t.parent);)t&&t.data&&(e=Bt(e,t.data));return function(n,e){if(i(n)||i(e))return Ut(n,Ft(e));return""}(e.staticClass,e.class)}function Bt(n,e){return{staticClass:Ut(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function Ut(n,e){return n?e?n+" "+e:n:e||""}function Ft(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)i(e=Ft(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):c(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Wt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gt=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Jt=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Xt=function(n){return Gt(n)||Jt(n)};var Kt=Object.create(null);var Qt=g("text,number,password,search,email,tel,url");var Yt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Wt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Zt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(i(t)){var r=n.context,o=n.componentInstance||n.elm,a=r.$refs;e?Array.isArray(a[t])?x(a[t],o):a[t]===o&&(a[t]=void 0):n.data.refInFor?Array.isArray(a[t])?a[t].indexOf(o)<0&&a[t].push(o):a[t]=[o]:a[t]=o}}var er=new vn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=i(t=n.data)&&i(t=t.attrs)&&t.type,o=i(t=e.data)&&i(t=t.attrs)&&t.type;return r===o||Qt(r)&&Qt(o)}(n,e)||l(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function or(n,e,t){var r,o,a={};for(r=e;r<=t;++r)i(o=n[r].key)&&(a[o]=r);return a}var ar={create:ir,update:ir,destroy:function(n){ir(n,er)}};function ir(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,a=n===er,i=e===er,l=sr(n.data.directives,n.context),s=sr(e.data.directives,e.context),c=[],u=[];for(t in s)r=l[t],o=s[t],r?(o.oldValue=r.value,o.oldArg=r.arg,ur(o,"update",e,n),o.def&&o.def.componentUpdated&&u.push(o)):(ur(o,"bind",e,n),o.def&&o.def.inserted&&c.push(o));if(c.length){var d=function(){for(var t=0;t<c.length;t++)ur(c[t],"inserted",e,n)};a?ue(e,"insert",d):d()}u.length&&ue(e,"postpatch",(function(){for(var t=0;t<u.length;t++)ur(u[t],"componentUpdated",e,n)}));if(!a)for(t in l)s[t]||ur(l[t],"unbind",n,n,i)}(n,e)}var lr=Object.create(null);function sr(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=lr),o[cr(r)]=r,r.def=Nn(e.$options,"directives",r.name);return o}function cr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function ur(n,e,t,r,o){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,r,o)}catch(r){Fn(r,t.context,"directive "+n.name+" "+e+" hook")}}var dr=[Zt,ar];function pr(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var r,o,l=e.elm,s=n.data.attrs||{},c=e.data.attrs||{};for(r in i(c.__ob__)&&(c=e.data.attrs=C({},c)),c)o=c[r],s[r]!==o&&mr(l,r,o,e.data.pre);for(r in(K||Y)&&c.value!==s.value&&mr(l,"value",c.value),s)a(c[r])&&(Nt(r)?l.removeAttributeNS(Lt,Rt(r)):qt(r)||l.removeAttribute(r))}}function mr(n,e,t,r){r||n.tagName.indexOf("-")>-1?fr(n,e,t):Mt(e)?Vt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):qt(e)?n.setAttribute(e,function(n,e){return Vt(e)||"false"===e?"false":"contenteditable"===n&&Dt(e)?e:"true"}(e,t)):Nt(e)?Vt(t)?n.removeAttributeNS(Lt,Rt(e)):n.setAttributeNS(Lt,e,t):fr(n,e,t)}function fr(n,e,t){if(Vt(t))n.removeAttribute(e);else{if(K&&!Q&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var hr={create:pr,update:pr};function vr(n,e){var t=e.elm,r=e.data,o=n.data;if(!(a(r.staticClass)&&a(r.class)&&(a(o)||a(o.staticClass)&&a(o.class)))){var l=Ht(e),s=t._transitionClasses;i(s)&&(l=Ut(l,Ft(s))),l!==t._prevClass&&(t.setAttribute("class",l),t._prevClass=l)}}var gr,br={create:vr,update:vr};function xr(n,e,t){var r=gr;return function o(){var a=e.apply(null,arguments);null!==a&&kr(n,o,t,r)}}var yr=Kn&&!(nn&&Number(nn[1])<=53);function wr(n,e,t,r){if(yr){var o=ct,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}gr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function kr(n,e,t,r){(r||gr).removeEventListener(n,e._wrapper||e,t)}function jr(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},r=n.data.on||{};gr=e.elm,function(n){if(i(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),ce(t,r,wr,kr,xr,e.context),gr=void 0}}var _r,Tr={create:jr,update:jr};function Sr(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,r,o=e.elm,l=n.data.domProps||{},s=e.data.domProps||{};for(t in i(s.__ob__)&&(s=e.data.domProps=C({},s)),l)t in s||(o[t]="");for(t in s){if(r=s[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var c=a(r)?"":String(r);Ir(o,c)&&(o.value=c)}else if("innerHTML"===t&&Jt(o.tagName)&&a(o.innerHTML)){(_r=_r||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=_r.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;u.firstChild;)o.appendChild(u.firstChild)}else if(r!==l[t])try{o[t]=r}catch(n){}}}}function Ir(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(i(r)){if(r.number)return v(t)!==v(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var zr={create:Sr,update:Sr},Er=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Cr(n){var e=$r(n.style);return n.staticStyle?C(n.staticStyle,e):e}function $r(n){return Array.isArray(n)?$(n):"string"==typeof n?Er(n):n}var Or,Pr=/^--/,Ar=/\s*!important$/,qr=function(n,e,t){if(Pr.test(e))n.style.setProperty(e,t);else if(Ar.test(t))n.style.setProperty(I(e),t.replace(Ar,""),"important");else{var r=Mr(e);if(Array.isArray(t))for(var o=0,a=t.length;o<a;o++)n.style[r]=t[o];else n.style[r]=t}},Dr=["Webkit","Moz","ms"],Mr=k((function(n){if(Or=Or||document.createElement("div").style,"filter"!==(n=_(n))&&n in Or)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Dr.length;t++){var r=Dr[t]+e;if(r in Or)return r}}));function Lr(n,e){var t=e.data,r=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(r.staticStyle)&&a(r.style))){var o,l,s=e.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},d=c||u,p=$r(e.data.style)||{};e.data.normalizedStyle=i(p.__ob__)?C({},p):p;var m=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Cr(o.data))&&C(r,t);(t=Cr(n.data))&&C(r,t);for(var a=n;a=a.parent;)a.data&&(t=Cr(a.data))&&C(r,t);return r}(e,!0);for(l in d)a(m[l])&&qr(s,l,"");for(l in m)(o=m[l])!==d[l]&&qr(s,l,null==o?"":o)}}var Nr={create:Lr,update:Lr},Rr=/\s+/;function Vr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Rr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Hr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Rr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Br(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&C(e,Ur(n.name||"v")),C(e,n),e}return"string"==typeof n?Ur(n):void 0}}var Ur=k((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Fr=W&&!Q,Wr="transition",Gr="transitionend",Jr="animation",Xr="animationend";Fr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Wr="WebkitTransition",Gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Jr="WebkitAnimation",Xr="webkitAnimationEnd"));var Kr=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Qr(n){Kr((function(){Kr(n)}))}function Yr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Vr(n,e))}function Zr(n,e){n._transitionClasses&&x(n._transitionClasses,e),Hr(n,e)}function no(n,e,t){var r=to(n,e),o=r.type,a=r.timeout,i=r.propCount;if(!o)return t();var l="transition"===o?Gr:Xr,s=0,c=function(){n.removeEventListener(l,u),t()},u=function(e){e.target===n&&++s>=i&&c()};setTimeout((function(){s<i&&c()}),a+1),n.addEventListener(l,u)}var eo=/\b(transform|all)(,|$)/;function to(n,e){var t,r=window.getComputedStyle(n),o=(r[Wr+"Delay"]||"").split(", "),a=(r[Wr+"Duration"]||"").split(", "),i=ro(o,a),l=(r[Jr+"Delay"]||"").split(", "),s=(r[Jr+"Duration"]||"").split(", "),c=ro(l,s),u=0,d=0;return"transition"===e?i>0&&(t="transition",u=i,d=a.length):"animation"===e?c>0&&(t="animation",u=c,d=s.length):d=(t=(u=Math.max(i,c))>0?i>c?"transition":"animation":null)?"transition"===t?a.length:s.length:0,{type:t,timeout:u,propCount:d,hasTransform:"transition"===t&&eo.test(r[Wr+"Property"])}}function ro(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return oo(e)+oo(n[t])})))}function oo(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ao(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Br(n.data.transition);if(!a(r)&&!i(t._enterCb)&&1===t.nodeType){for(var o=r.css,l=r.type,s=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,p=r.appearClass,m=r.appearToClass,f=r.appearActiveClass,h=r.beforeEnter,g=r.enter,b=r.afterEnter,x=r.enterCancelled,y=r.beforeAppear,w=r.appear,k=r.afterAppear,j=r.appearCancelled,_=r.duration,T=Ye,S=Ye.$vnode;S&&S.parent;)T=S.context,S=S.parent;var I=!T._isMounted||!n.isRootInsert;if(!I||w||""===w){var z=I&&p?p:s,E=I&&f?f:d,C=I&&m?m:u,$=I&&y||h,O=I&&"function"==typeof w?w:g,P=I&&k||b,A=I&&j||x,q=v(c(_)?_.enter:_);0;var D=!1!==o&&!Q,L=so(O),N=t._enterCb=M((function(){D&&(Zr(t,C),Zr(t,E)),N.cancelled?(D&&Zr(t,z),A&&A(t)):P&&P(t),t._enterCb=null}));n.data.show||ue(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),O&&O(t,N)})),$&&$(t),D&&(Yr(t,z),Yr(t,E),Qr((function(){Zr(t,z),N.cancelled||(Yr(t,C),L||(lo(q)?setTimeout(N,q):no(t,l,N)))}))),n.data.show&&(e&&e(),O&&O(t,N)),D||L||N()}}}function io(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Br(n.data.transition);if(a(r)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var o=r.css,l=r.type,s=r.leaveClass,u=r.leaveToClass,d=r.leaveActiveClass,p=r.beforeLeave,m=r.leave,f=r.afterLeave,h=r.leaveCancelled,g=r.delayLeave,b=r.duration,x=!1!==o&&!Q,y=so(m),w=v(c(b)?b.leave:b);0;var k=t._leaveCb=M((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),x&&(Zr(t,u),Zr(t,d)),k.cancelled?(x&&Zr(t,s),h&&h(t)):(e(),f&&f(t)),t._leaveCb=null}));g?g(j):j()}function j(){k.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),p&&p(t),x&&(Yr(t,s),Yr(t,d),Qr((function(){Zr(t,s),k.cancelled||(Yr(t,u),y||(lo(w)?setTimeout(k,w):no(t,l,k)))}))),m&&m(t,k),x||y||k())}}function lo(n){return"number"==typeof n&&!isNaN(n)}function so(n){if(a(n))return!1;var e=n.fns;return i(e)?so(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function co(n,e){!0!==e.data.show&&ao(e)}var uo=function(n){var e,t,r={},o=n.modules,c=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<o.length;++t)i(o[t][tr[e]])&&r[tr[e]].push(o[t][tr[e]]);function u(n){var e=c.parentNode(n);i(e)&&c.removeChild(e,n)}function d(n,e,t,o,a,s,u){if(i(n.elm)&&i(s)&&(n=s[u]=yn(n)),n.isRootInsert=!a,!function(n,e,t,o){var a=n.data;if(i(a)){var s=i(n.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(n,!1),i(n.componentInstance))return p(n,e),m(t,n.elm,o),l(s)&&function(n,e,t,o){var a,l=n;for(;l.componentInstance;)if(l=l.componentInstance._vnode,i(a=l.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](er,l);e.push(l);break}m(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var d=n.data,h=n.children,g=n.tag;i(g)?(n.elm=n.ns?c.createElementNS(n.ns,g):c.createElement(g,n),b(n),f(n,h,e),i(d)&&v(n,e),m(t,n.elm,o)):l(n.isComment)?(n.elm=c.createComment(n.text),m(t,n.elm,o)):(n.elm=c.createTextNode(n.text),m(t,n.elm,o))}}function p(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(v(n,e),b(n)):(nr(n),e.push(n))}function m(n,e,t){i(n)&&(i(t)?c.parentNode(t)===n&&c.insertBefore(n,e,t):c.appendChild(n,e))}function f(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else s(n.text)&&c.appendChild(n.elm,c.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function v(n,t){for(var o=0;o<r.create.length;++o)r.create[o](er,n);i(e=n.data.hook)&&(i(e.create)&&e.create(er,n),i(e.insert)&&t.push(n))}function b(n){var e;if(i(e=n.fnScopeId))c.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e),t=t.parent;i(e=Ye)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e)}function x(n,e,t,r,o,a){for(;r<=o;++r)d(t[r],a,n,e,!1,t,r)}function y(n){var e,t,o=n.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)y(n.children[t])}function w(n,e,t){for(;e<=t;++e){var r=n[e];i(r)&&(i(r.tag)?(k(r),y(r)):u(r.elm))}}function k(n,e){if(i(e)||i(n.data)){var t,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,o),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else u(n.elm)}function j(n,e,t,r){for(var o=t;o<r;o++){var a=e[o];if(i(a)&&rr(n,a))return o}}function _(n,e,t,o,s,u){if(n!==e){i(e.elm)&&i(o)&&(e=o[s]=yn(e));var p=e.elm=n.elm;if(l(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?I(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(l(e.isStatic)&&l(n.isStatic)&&e.key===n.key&&(l(e.isCloned)||l(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,f=e.data;i(f)&&i(m=f.hook)&&i(m=m.prepatch)&&m(n,e);var v=n.children,g=e.children;if(i(f)&&h(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);i(m=f.hook)&&i(m=m.update)&&m(n,e)}a(e.text)?i(v)&&i(g)?v!==g&&function(n,e,t,r,o){var l,s,u,p=0,m=0,f=e.length-1,h=e[0],v=e[f],g=t.length-1,b=t[0],y=t[g],k=!o;for(0;p<=f&&m<=g;)a(h)?h=e[++p]:a(v)?v=e[--f]:rr(h,b)?(_(h,b,r,t,m),h=e[++p],b=t[++m]):rr(v,y)?(_(v,y,r,t,g),v=e[--f],y=t[--g]):rr(h,y)?(_(h,y,r,t,g),k&&c.insertBefore(n,h.elm,c.nextSibling(v.elm)),h=e[++p],y=t[--g]):rr(v,b)?(_(v,b,r,t,m),k&&c.insertBefore(n,v.elm,h.elm),v=e[--f],b=t[++m]):(a(l)&&(l=or(e,p,f)),a(s=i(b.key)?l[b.key]:j(b,e,p,f))?d(b,r,n,h.elm,!1,t,m):rr(u=e[s],b)?(_(u,b,r,t,m),e[s]=void 0,k&&c.insertBefore(n,u.elm,h.elm)):d(b,r,n,h.elm,!1,t,m),b=t[++m]);p>f?x(n,a(t[g+1])?null:t[g+1].elm,t,m,g,r):m>g&&w(e,p,f)}(p,v,g,t,u):i(g)?(i(n.text)&&c.setTextContent(p,""),x(p,null,g,0,g.length-1,t)):i(v)?w(v,0,v.length-1):i(n.text)&&c.setTextContent(p,""):n.text!==e.text&&c.setTextContent(p,e.text),i(f)&&i(m=f.hook)&&i(m=m.postpatch)&&m(n,e)}}}function T(n,e,t){if(l(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var S=g("attrs,class,staticClass,staticStyle,key");function I(n,e,t,r){var o,a=e.tag,s=e.data,c=e.children;if(r=r||s&&s.pre,e.elm=n,l(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(s)&&(i(o=s.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return p(e,t),!0;if(i(a)){if(i(c))if(n.hasChildNodes())if(i(o=s)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var u=!0,d=n.firstChild,m=0;m<c.length;m++){if(!d||!I(d,c[m],t,r)){u=!1;break}d=d.nextSibling}if(!u||d)return!1}else f(e,c,t);if(i(s)){var h=!1;for(var g in s)if(!S(g)){h=!0,v(e,t);break}!h&&s.class&&ie(s.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!a(e)){var s,u=!1,p=[];if(a(n))u=!0,d(e,p);else{var m=i(n.nodeType);if(!m&&rr(n,e))_(n,e,p,null,null,o);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),l(t)&&I(n,e,p))return T(e,p,!0),n;s=n,n=new vn(c.tagName(s).toLowerCase(),{},[],void 0,s)}var f=n.elm,v=c.parentNode(f);if(d(e,p,f._leaveCb?null:v,c.nextSibling(f)),i(e.parent))for(var g=e.parent,b=h(e);g;){for(var x=0;x<r.destroy.length;++x)r.destroy[x](g);if(g.elm=e.elm,b){for(var k=0;k<r.create.length;++k)r.create[k](er,g);var j=g.data.hook.insert;if(j.merged)for(var S=1;S<j.fns.length;S++)j.fns[S]()}else nr(g);g=g.parent}i(v)?w([n],0,0):i(n.tag)&&y(n)}}return T(e,p,u),e.elm}i(n)&&y(n)}}({nodeOps:Yt,modules:[hr,br,Tr,zr,Nr,W?{create:co,activate:co,remove:function(n,e){!0!==n.data.show?io(n,e):e()}}:{}].concat(dr)});Q&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&xo(n,"input")}));var po={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?ue(t,"postpatch",(function(){po.componentUpdated(n,e,t)})):mo(n,e,t.context),n._vOptions=[].map.call(n.options,vo)):("textarea"===t.tag||Qt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",go),n.addEventListener("compositionend",bo),n.addEventListener("change",bo),Q&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){mo(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,vo);if(o.some((function(n,e){return!q(n,r[e])})))(n.multiple?e.value.some((function(n){return ho(n,o)})):e.value!==e.oldValue&&ho(e.value,o))&&xo(n,"change")}}};function mo(n,e,t){fo(n,e,t),(K||Y)&&setTimeout((function(){fo(n,e,t)}),0)}function fo(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var a,i,l=0,s=n.options.length;l<s;l++)if(i=n.options[l],o)a=D(r,vo(i))>-1,i.selected!==a&&(i.selected=a);else if(q(vo(i),r))return void(n.selectedIndex!==l&&(n.selectedIndex=l));o||(n.selectedIndex=-1)}}function ho(n,e){return e.every((function(e){return!q(e,n)}))}function vo(n){return"_value"in n?n._value:n.value}function go(n){n.target.composing=!0}function bo(n){n.target.composing&&(n.target.composing=!1,xo(n.target,"input"))}function xo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function yo(n){return!n.componentInstance||n.data&&n.data.transition?n:yo(n.componentInstance._vnode)}var wo={model:po,show:{bind:function(n,e,t){var r=e.value,o=(t=yo(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,ao(t,(function(){n.style.display=a}))):n.style.display=r?a:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=yo(t)).data&&t.data.transition?(t.data.show=!0,r?ao(t,(function(){n.style.display=n.__vOriginalDisplay})):io(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},ko={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function jo(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?jo(Ge(e.children)):n}function _o(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var a in o)e[_(a)]=o[a];return e}function To(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var So=function(n){return n.tag||ge(n)},Io=function(n){return"show"===n.name},zo={name:"transition",props:ko,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(So)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var a=jo(o);if(!a)return o;if(this._leaving)return To(n,o);var i="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?i+"comment":i+a.tag:s(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var l=(a.data||(a.data={})).transition=_o(this),c=this._vnode,u=jo(c);if(a.data.directives&&a.data.directives.some(Io)&&(a.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,u)&&!ge(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=C({},l);if("out-in"===r)return this._leaving=!0,ue(d,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),To(n,o);if("in-out"===r){if(ge(a))return c;var p,m=function(){p()};ue(l,"afterEnter",m),ue(l,"enterCancelled",m),ue(d,"delayLeave",(function(n){p=n}))}}return o}}},Eo=C({tag:String,moveClass:String},ko);function Co(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function $o(n){n.data.newPos=n.elm.getBoundingClientRect()}function Oo(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+o+"px)",a.transitionDuration="0s"}}delete Eo.mode;var Po={Transition:zo,TransitionGroup:{props:Eo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=_o(this),l=0;l<o.length;l++){var s=o[l];if(s.tag)if(null!=s.key&&0!==String(s.key).indexOf("__vlist"))a.push(s),t[s.key]=s,(s.data||(s.data={})).transition=i;else;}if(r){for(var c=[],u=[],d=0;d<r.length;d++){var p=r[d];p.data.transition=i,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?c.push(p):u.push(p)}this.kept=n(e,null,c),this.removed=u}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Co),n.forEach($o),n.forEach(Oo),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Yr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Gr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Gr,n),t._moveCb=null,Zr(t,e))})}})))},methods:{hasMove:function(n,e){if(!Fr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Hr(t,n)})),Vr(t,e),t.style.display="none",this.$el.appendChild(t);var r=to(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};Tt.config.mustUseProp=function(n,e,t){return"value"===t&&At(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Tt.config.isReservedTag=Xt,Tt.config.isReservedAttr=Pt,Tt.config.getTagNamespace=function(n){return Jt(n)?"svg":"math"===n?"math":void 0},Tt.config.isUnknownElement=function(n){if(!W)return!0;if(Xt(n))return!1;if(n=n.toLowerCase(),null!=Kt[n])return Kt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Kt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Kt[n]=/HTMLUnknownElement/.test(e.toString())},C(Tt.options.directives,wo),C(Tt.options.components,Po),Tt.prototype.__patch__=W?uo:O,Tt.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=bn),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new ft(n,r,O,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&W?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},W&&setTimeout((function(){R.devtools&&an&&an.emit("init",Tt)}),0);var Ao=Tt;
/*!
  * vue-router v3.5.2
  * (c) 2021 Evan You
  * @license MIT
  */function qo(n,e){for(var t in e)n[t]=e[t];return n}var Do=/[!'()*]/g,Mo=function(n){return"%"+n.charCodeAt(0).toString(16)},Lo=/%2C/g,No=function(n){return encodeURIComponent(n).replace(Do,Mo).replace(Lo,",")};function Ro(n){try{return decodeURIComponent(n)}catch(n){0}return n}var Vo=function(n){return null==n||"object"==typeof n?n:String(n)};function Ho(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=Ro(t.shift()),o=t.length>0?Ro(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function Bo(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return No(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(No(e)):r.push(No(e)+"="+No(n)))})),r.join("&")}return No(e)+"="+No(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Uo=/\/?$/;function Fo(n,e,t,r){var o=r&&r.options.stringifyQuery,a=e.query||{};try{a=Wo(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:Xo(e,o),matched:n?Jo(n):[]};return t&&(i.redirectedFrom=Xo(t,o)),Object.freeze(i)}function Wo(n){if(Array.isArray(n))return n.map(Wo);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Wo(n[t]);return e}return n}var Go=Fo(null,{path:"/"});function Jo(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Xo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||Bo)(r)+o}function Ko(n,e,t){return e===Go?n===e:!!e&&(n.path&&e.path?n.path.replace(Uo,"")===e.path.replace(Uo,"")&&(t||n.hash===e.hash&&Qo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Qo(n.query,e.query)&&Qo(n.params,e.params))))}function Qo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var a=n[t];if(r[o]!==t)return!1;var i=e[t];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?Qo(a,i):String(a)===String(i)}))}function Yo(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],a=t.enteredCbs[r];if(o&&a){delete t.enteredCbs[r];for(var i=0;i<a.length;i++)o._isBeingDestroyed||a[i](o)}}}}var Zo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,a=e.data;a.routerView=!0;for(var i=o.$createElement,l=t.name,s=o.$route,c=o._routerViewCache||(o._routerViewCache={}),u=0,d=!1;o&&o._routerRoot!==o;){var p=o.$vnode?o.$vnode.data:{};p.routerView&&u++,p.keepAlive&&o._directInactive&&o._inactive&&(d=!0),o=o.$parent}if(a.routerViewDepth=u,d){var m=c[l],f=m&&m.component;return f?(m.configProps&&na(f,a,m.route,m.configProps),i(f,a,r)):i()}var h=s.matched[u],v=h&&h.components[l];if(!h||!v)return c[l]=null,i();c[l]={component:v},a.registerRouteInstance=function(n,e){var t=h.instances[l];(e&&t!==n||!e&&t===n)&&(h.instances[l]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){h.instances[l]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[l]&&(h.instances[l]=n.componentInstance),Yo(s)};var g=h.props&&h.props[l];return g&&(qo(c[l],{route:s,configProps:g}),na(v,a,s,g)),i(v,a,r)}};function na(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=qo({},o);var a=e.attrs=e.attrs||{};for(var i in o)n.props&&i in n.props||(a[i]=o[i],delete o[i])}}function ea(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var l=a[i];".."===l?o.pop():"."!==l&&o.push(l)}return""!==o[0]&&o.unshift(""),o.join("/")}function ta(n){return n.replace(/\/\//g,"/")}var ra=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},oa=ba,aa=ua,ia=function(n,e){return pa(ua(n,e),e)},la=pa,sa=ga,ca=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ua(n,e){for(var t,r=[],o=0,a=0,i="",l=e&&e.delimiter||"/";null!=(t=ca.exec(n));){var s=t[0],c=t[1],u=t.index;if(i+=n.slice(a,u),a=u+s.length,c)i+=c[1];else{var d=n[a],p=t[2],m=t[3],f=t[4],h=t[5],v=t[6],g=t[7];i&&(r.push(i),i="");var b=null!=p&&null!=d&&d!==p,x="+"===v||"*"===v,y="?"===v||"*"===v,w=t[2]||l,k=f||h;r.push({name:m||o++,prefix:p||"",delimiter:w,optional:y,repeat:x,partial:b,asterisk:!!g,pattern:k?fa(k):g?".*":"[^"+ma(w)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&r.push(i),r}function da(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function pa(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",va(e)));return function(e,r){for(var o="",a=e||{},i=(r||{}).pretty?da:encodeURIComponent,l=0;l<n.length;l++){var s=n[l];if("string"!=typeof s){var c,u=a[s.name];if(null==u){if(s.optional){s.partial&&(o+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(ra(u)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<u.length;d++){if(c=i(u[d]),!t[l].test(c))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===d?s.prefix:s.delimiter)+c}}else{if(c=s.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(u),!t[l].test(c))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+c+'"');o+=s.prefix+c}}else o+=s}return o}}function ma(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function fa(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function ha(n,e){return n.keys=e,n}function va(n){return n&&n.sensitive?"":"i"}function ga(n,e,t){ra(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,a="",i=0;i<n.length;i++){var l=n[i];if("string"==typeof l)a+=ma(l);else{var s=ma(l.prefix),c="(?:"+l.pattern+")";e.push(l),l.repeat&&(c+="(?:"+s+c+")*"),a+=c=l.optional?l.partial?s+"("+c+")?":"(?:"+s+"("+c+"))?":s+"("+c+")"}}var u=ma(t.delimiter||"/"),d=a.slice(-u.length)===u;return r||(a=(d?a.slice(0,-u.length):a)+"(?:"+u+"(?=$))?"),a+=o?"$":r&&d?"":"(?="+u+"|$)",ha(new RegExp("^"+a,va(t)),e)}function ba(n,e,t){return ra(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return ha(n,e)}(n,e):ra(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(ba(n[o],e,t).source);return ha(new RegExp("(?:"+r.join("|")+")",va(t)),e)}(n,e,t):function(n,e,t){return ga(ua(n,t),e,t)}(n,e,t)}oa.parse=aa,oa.compile=ia,oa.tokensToFunction=la,oa.tokensToRegExp=sa;var xa=Object.create(null);function ya(n,e,t){e=e||{};try{var r=xa[n]||(xa[n]=oa.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function wa(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var a=(o=qo({},n)).params;return a&&"object"==typeof a&&(o.params=qo({},a)),o}if(!o.path&&o.params&&e){(o=qo({},o))._normalized=!0;var i=qo(qo({},e.params),o.params);if(e.name)o.name=e.name,o.params=i;else if(e.matched.length){var l=e.matched[e.matched.length-1].path;o.path=ya(l,i,e.path)}else 0;return o}var s=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),c=e&&e.path||"/",u=s.path?ea(s.path,c,t||o.append):c,d=function(n,e,t){void 0===e&&(e={});var r,o=t||Ho;try{r=o(n||"")}catch(n){r={}}for(var a in e){var i=e[a];r[a]=Array.isArray(i)?i.map(Vo):Vo(i)}return r}(s.query,o.query,r&&r.options.parseQuery),p=o.hash||s.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:u,query:d,hash:p}}var ka,ja=function(){},_a={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),a=o.location,i=o.route,l=o.href,s={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,d=null==c?"router-link-active":c,p=null==u?"router-link-exact-active":u,m=null==this.activeClass?d:this.activeClass,f=null==this.exactActiveClass?p:this.exactActiveClass,h=i.redirectedFrom?Fo(null,wa(i.redirectedFrom),null,t):i;s[f]=Ko(r,h,this.exactPath),s[m]=this.exact||this.exactPath?s[f]:function(n,e){return 0===n.path.replace(Uo,"/").indexOf(e.path.replace(Uo,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,h);var v=s[f]?this.ariaCurrentValue:null,g=function(n){Ta(n)&&(e.replace?t.replace(a,ja):t.push(a,ja))},b={click:Ta};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=g})):b[this.event]=g;var x={class:s},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:l,route:i,navigate:g,isActive:s[m],isExactActive:s[f]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?n():n("span",{},y)}if("a"===this.tag)x.on=b,x.attrs={href:l,"aria-current":v};else{var w=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var k=w.data=qo({},w.data);for(var j in k.on=k.on||{},k.on){var _=k.on[j];j in b&&(k.on[j]=Array.isArray(_)?_:[_])}for(var T in b)T in k.on?k.on[T].push(b[T]):k.on[T]=g;var S=w.data.attrs=qo({},w.data.attrs);S.href=l,S["aria-current"]=v}else x.on=b}return n(this.tag,x,this.$slots.default)}};function Ta(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Sa="undefined"!=typeof window;function Ia(n,e,t,r,o){var a=e||[],i=t||Object.create(null),l=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,a,i){var l=o.path,s=o.name;0;var c=o.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ta(e.path+"/"+n)}(l,a,c.strict);"boolean"==typeof o.caseSensitive&&(c.sensitive=o.caseSensitive);var d={path:u,regex:za(u,c),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:s,parent:a,matchAs:i,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var a=i?ta(i+"/"+o.path):void 0;n(e,t,r,o,d,a)}));t[d.path]||(e.push(d.path),t[d.path]=d);if(void 0!==o.alias)for(var p=Array.isArray(o.alias)?o.alias:[o.alias],m=0;m<p.length;++m){0;var f={path:p[m],children:o.children};n(e,t,r,f,a,d.path||"/")}s&&(r[s]||(r[s]=d))}(a,i,l,n,o)}));for(var s=0,c=a.length;s<c;s++)"*"===a[s]&&(a.push(a.splice(s,1)[0]),c--,s--);return{pathList:a,pathMap:i,nameMap:l}}function za(n,e){return oa(n,[],e)}function Ea(n,e){var t=Ia(n),r=t.pathList,o=t.pathMap,a=t.nameMap;function i(n,t,i){var l=wa(n,t,!1,e),c=l.name;if(c){var u=a[c];if(!u)return s(null,l);var d=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof l.params&&(l.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in l.params)&&d.indexOf(p)>-1&&(l.params[p]=t.params[p]);return l.path=ya(u.path,l.params),s(u,l,i)}if(l.path){l.params={};for(var m=0;m<r.length;m++){var f=r[m],h=o[f];if(Ca(h.regex,l.path,l.params))return s(h,l,i)}}return s(null,l)}function l(n,t){var r=n.redirect,o="function"==typeof r?r(Fo(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return s(null,t);var l=o,c=l.name,u=l.path,d=t.query,p=t.hash,m=t.params;if(d=l.hasOwnProperty("query")?l.query:d,p=l.hasOwnProperty("hash")?l.hash:p,m=l.hasOwnProperty("params")?l.params:m,c){a[c];return i({_normalized:!0,name:c,query:d,hash:p,params:m},void 0,t)}if(u){var f=function(n,e){return ea(n,e.parent?e.parent.path:"/",!0)}(u,n);return i({_normalized:!0,path:ya(f,m),query:d,hash:p},void 0,t)}return s(null,t)}function s(n,t,r){return n&&n.redirect?l(n,r||t):n&&n.matchAs?function(n,e,t){var r=i({_normalized:!0,path:ya(t,e.params)});if(r){var o=r.matched,a=o[o.length-1];return e.params=r.params,s(a,e)}return s(null,e)}(0,t,n.matchAs):Fo(n,t,r,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Ia([e||n],r,o,a,t),t&&t.alias.length&&Ia(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,a,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){Ia(n,r,o,a)}}}function Ca(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,a=r.length;o<a;++o){var i=n.keys[o-1];i&&(t[i.name||"pathMatch"]="string"==typeof r[o]?Ro(r[o]):r[o])}return!0}var $a=Sa&&window.performance&&window.performance.now?window.performance:Date;function Oa(){return $a.now().toFixed(3)}var Pa=Oa();function Aa(){return Pa}function qa(n){return Pa=n}var Da=Object.create(null);function Ma(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=qo({},window.history.state);return t.key=Aa(),window.history.replaceState(t,"",e),window.addEventListener("popstate",Ra),function(){window.removeEventListener("popstate",Ra)}}function La(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var a=function(){var n=Aa();if(n)return Da[n]}(),i=o.call(n,e,t,r?a:null);i&&("function"==typeof i.then?i.then((function(n){Fa(n,a)})).catch((function(n){0})):Fa(i,a))}))}}function Na(){var n=Aa();n&&(Da[n]={x:window.pageXOffset,y:window.pageYOffset})}function Ra(n){Na(),n.state&&n.state.key&&qa(n.state.key)}function Va(n){return Ba(n.x)||Ba(n.y)}function Ha(n){return{x:Ba(n.x)?n.x:window.pageXOffset,y:Ba(n.y)?n.y:window.pageYOffset}}function Ba(n){return"number"==typeof n}var Ua=/^#\d/;function Fa(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=Ua.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,a={x:Ba((t=a).x)?t.x:0,y:Ba(t.y)?t.y:0})}else Va(n)&&(e=Ha(n))}else r&&Va(n)&&(e=Ha(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Wa,Ga=Sa&&((-1===(Wa=window.navigator.userAgent).indexOf("Android 2.")&&-1===Wa.indexOf("Android 4.0")||-1===Wa.indexOf("Mobile Safari")||-1!==Wa.indexOf("Chrome")||-1!==Wa.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Ja(n,e){Na();var t=window.history;try{if(e){var r=qo({},t.state);r.key=Aa(),t.replaceState(r,"",n)}else t.pushState({key:qa(Oa())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Xa(n){Ja(n,!0)}function Ka(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}var Qa={redirected:2,aborted:4,cancelled:8,duplicated:16};function Ya(n,e){return ni(n,e,Qa.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return ei.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Za(n,e){return ni(n,e,Qa.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function ni(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var ei=["params","query","hash"];function ti(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ri(n,e){return ti(n)&&n._isRouter&&(null==e||n.type===e)}function oi(n){return function(e,t,r){var o=!1,a=0,i=null;ai(n,(function(n,e,t,l){if("function"==typeof n&&void 0===n.cid){o=!0,a++;var s,c=si((function(e){var o;((o=e).__esModule||li&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:ka.extend(e),t.components[l]=e,--a<=0&&r()})),u=si((function(n){var e="Failed to resolve async component "+l+": "+n;i||(i=ti(n)?n:new Error(e),r(i))}));try{s=n(c,u)}catch(n){u(n)}if(s)if("function"==typeof s.then)s.then(c,u);else{var d=s.component;d&&"function"==typeof d.then&&d.then(c,u)}}})),o||r()}}function ai(n,e){return ii(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function ii(n){return Array.prototype.concat.apply([],n)}var li="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function si(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var ci=function(n,e){this.router=n,this.base=function(n){if(!n)if(Sa){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Go,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function ui(n,e,t,r){var o=ai(n,(function(n,r,o,a){var i=function(n,e){"function"!=typeof n&&(n=ka.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,r,o,a)})):t(i,r,o,a)}));return ii(r?o.reverse():o)}function di(n,e){if(e)return function(){return n.apply(e,arguments)}}ci.prototype.listen=function(n){this.cb=n},ci.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},ci.prototype.onError=function(n){this.errorCbs.push(n)},ci.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,a)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(ri(n,Qa.redirected)&&a===Go||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},ci.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var a,i,l=function(n){!ri(n)&&ti(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},s=n.matched.length-1,c=o.matched.length-1;if(Ko(n,o)&&s===c&&n.matched[s]===o.matched[c])return this.ensureURL(),l(((i=ni(a=o,n,Qa.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),d=u.updated,p=u.deactivated,m=u.activated,f=[].concat(function(n){return ui(n,"beforeRouteLeave",di,!0)}(p),this.router.beforeHooks,function(n){return ui(n,"beforeRouteUpdate",di)}(d),m.map((function(n){return n.beforeEnter})),oi(m)),h=function(e,t){if(r.pending!==n)return l(Za(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),l(function(n,e){return ni(n,e,Qa.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):ti(e)?(r.ensureURL(!0),l(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(l(Ya(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){l(n)}};Ka(f,h,(function(){Ka(function(n){return ui(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,a){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,r)}))}(m).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return l(Za(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Yo(n)}))}))}))},ci.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},ci.prototype.setupListeners=function(){},ci.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Go,this.pending=null};var pi=function(n){function e(e,t){n.call(this,e,t),this._startLocation=mi(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Ga&&t;r&&this.listeners.push(Ma());var o=function(){var t=n.current,o=mi(n.base);n.current===Go&&o===n._startLocation||n.transitionTo(o,(function(n){r&&La(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Ja(ta(r.base+n.fullPath)),La(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Xa(ta(r.base+n.fullPath)),La(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(mi(this.base)!==this.current.fullPath){var e=ta(this.base+this.current.fullPath);n?Ja(e):Xa(e)}},e.prototype.getCurrentLocation=function(){return mi(this.base)},e}(ci);function mi(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ta(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var fi=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=mi(n);if(!/^\/#/.test(e))return window.location.replace(ta(n+"/#"+e)),!0}(this.base)||hi()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Ga&&e;t&&this.listeners.push(Ma());var r=function(){var e=n.current;hi()&&n.transitionTo(vi(),(function(r){t&&La(n.router,r,e,!0),Ga||xi(r.fullPath)}))},o=Ga?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){bi(n.fullPath),La(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){xi(n.fullPath),La(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;vi()!==e&&(n?bi(e):xi(e))},e.prototype.getCurrentLocation=function(){return vi()},e}(ci);function hi(){var n=vi();return"/"===n.charAt(0)||(xi("/"+n),!1)}function vi(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function gi(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function bi(n){Ga?Ja(gi(n)):window.location.hash=n}function xi(n){Ga?Xa(gi(n)):window.location.replace(gi(n))}var yi=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ri(n,Qa.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(ci),wi=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ea(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Ga&&!1!==n.fallback,this.fallback&&(e="hash"),Sa||(e="abstract"),this.mode=e,e){case"history":this.history=new pi(this,n.base);break;case"hash":this.history=new fi(this,n.base,this.fallback);break;case"abstract":this.history=new yi(this,n.base);break;default:0}},ki={currentRoute:{configurable:!0}};function ji(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}wi.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},ki.currentRoute.get=function(){return this.history&&this.history.current},wi.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof pi||t instanceof fi){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;Ga&&o&&"fullPath"in n&&La(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},wi.prototype.beforeEach=function(n){return ji(this.beforeHooks,n)},wi.prototype.beforeResolve=function(n){return ji(this.resolveHooks,n)},wi.prototype.afterEach=function(n){return ji(this.afterHooks,n)},wi.prototype.onReady=function(n,e){this.history.onReady(n,e)},wi.prototype.onError=function(n){this.history.onError(n)},wi.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},wi.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},wi.prototype.go=function(n){this.history.go(n)},wi.prototype.back=function(){this.go(-1)},wi.prototype.forward=function(){this.go(1)},wi.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},wi.prototype.resolve=function(n,e,t){var r=wa(n,e=e||this.history.current,t,this),o=this.match(r,e),a=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ta(n+"/"+r):r}(this.history.base,a,this.mode),normalizedTo:r,resolved:o}},wi.prototype.getRoutes=function(){return this.matcher.getRoutes()},wi.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Go&&this.history.transitionTo(this.history.getCurrentLocation())},wi.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Go&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(wi.prototype,ki),wi.install=function n(e){if(!n.installed||ka!==e){n.installed=!0,ka=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Zo),e.component("RouterLink",_a);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},wi.version="3.5.2",wi.isNavigationFailure=ri,wi.NavigationFailureType=Qa,wi.START_LOCATION=Go,Sa&&window.Vue&&window.Vue.use(wi);var _i=wi;t(182),t(130),t(202),t(96),t(204),t(97),t(98),t(205);function Ti(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(34),t(40),t(59);var Si=t(42),Ii=(t(138),t(45),t(68),t(186),t(187),{NotFound:function(){return t.e(6).then(t.bind(null,380))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,379))}}),zi={"v-5e75564c":function(){return t.e(7).then(t.bind(null,383))},"v-9186c9d8":function(){return t.e(9).then(t.bind(null,384))},"v-2e96347d":function(){return t.e(8).then(t.bind(null,385))},"v-9e35647a":function(){return t.e(11).then(t.bind(null,386))},"v-77f52205":function(){return t.e(15).then(t.bind(null,387))},"v-041ce99e":function(){return t.e(10).then(t.bind(null,388))},"v-eb7c69b6":function(){return t.e(16).then(t.bind(null,389))},"v-461f2189":function(){return t.e(14).then(t.bind(null,390))},"v-3afc15e2":function(){return t.e(17).then(t.bind(null,391))},"v-76f9c94a":function(){return t.e(20).then(t.bind(null,392))},"v-70307f3b":function(){return t.e(18).then(t.bind(null,393))},"v-88b51a4a":function(){return t.e(21).then(t.bind(null,394))},"v-8908393a":function(){return t.e(13).then(t.bind(null,395))},"v-2ea121de":function(){return t.e(22).then(t.bind(null,396))},"v-5489448a":function(){return t.e(24).then(t.bind(null,397))},"v-90970822":function(){return t.e(19).then(t.bind(null,398))},"v-0987790a":function(){return t.e(23).then(t.bind(null,399))},"v-36b00bc0":function(){return t.e(26).then(t.bind(null,400))},"v-da3632ec":function(){return t.e(25).then(t.bind(null,401))},"v-b6352a7a":function(){return t.e(12).then(t.bind(null,402))},"v-b15b0d6c":function(){return t.e(27).then(t.bind(null,403))},"v-0b9e0c4a":function(){return t.e(29).then(t.bind(null,404))},"v-ee8690c4":function(){return t.e(30).then(t.bind(null,405))},"v-3ccff98a":function(){return t.e(31).then(t.bind(null,406))},"v-6f688a2c":function(){return t.e(33).then(t.bind(null,407))},"v-46ff92ca":function(){return t.e(28).then(t.bind(null,408))},"v-477469ca":function(){return t.e(32).then(t.bind(null,409))},"v-cffb7706":function(){return t.e(35).then(t.bind(null,410))},"v-76991ebd":function(){return t.e(34).then(t.bind(null,411))},"v-39eada8f":function(){return t.e(36).then(t.bind(null,412))},"v-06de06ea":function(){return t.e(37).then(t.bind(null,413))},"v-4d2f95dd":function(){return t.e(39).then(t.bind(null,414))},"v-e176d6d6":function(){return t.e(40).then(t.bind(null,415))},"v-18513586":function(){return t.e(41).then(t.bind(null,416))},"v-42b112dd":function(){return t.e(38).then(t.bind(null,417))},"v-5317d5fd":function(){return t.e(42).then(t.bind(null,418))},"v-86caa34a":function(){return t.e(43).then(t.bind(null,419))},"v-a1b70ea2":function(){return t.e(47).then(t.bind(null,420))},"v-c2c8c786":function(){return t.e(45).then(t.bind(null,421))},"v-492b269d":function(){return t.e(46).then(t.bind(null,422))},"v-0f5372b2":function(){return t.e(48).then(t.bind(null,423))},"v-5d20935d":function(){return t.e(49).then(t.bind(null,424))},"v-13ae9fbd":function(){return t.e(44).then(t.bind(null,425))},"v-266de6fd":function(){return t.e(50).then(t.bind(null,426))},"v-846e62aa":function(){return t.e(51).then(t.bind(null,427))},"v-2dba9b01":function(){return t.e(52).then(t.bind(null,428))},"v-a51ce83c":function(){return t.e(53).then(t.bind(null,429))},"v-503b66f0":function(){return t.e(54).then(t.bind(null,430))},"v-7db95ea3":function(){return t.e(55).then(t.bind(null,431))},"v-29ca1f63":function(){return t.e(56).then(t.bind(null,432))},"v-54e92d23":function(){return t.e(57).then(t.bind(null,433))},"v-56dbb37a":function(){return t.e(58).then(t.bind(null,434))},"v-4b5f59fa":function(){return t.e(59).then(t.bind(null,435))},"v-eb0d6762":function(){return t.e(60).then(t.bind(null,436))},"v-7325490b":function(){return t.e(61).then(t.bind(null,437))},"v-8e3aceba":function(){return t.e(62).then(t.bind(null,438))},"v-e512ecba":function(){return t.e(63).then(t.bind(null,439))},"v-52f7f4ad":function(){return t.e(64).then(t.bind(null,440))},"v-d99cd77a":function(){return t.e(65).then(t.bind(null,441))},"v-05838123":function(){return t.e(66).then(t.bind(null,442))},"v-08341bdb":function(){return t.e(68).then(t.bind(null,443))},"v-628b5f8b":function(){return t.e(67).then(t.bind(null,444))},"v-9879566c":function(){return t.e(70).then(t.bind(null,445))},"v-5d165376":function(){return t.e(71).then(t.bind(null,446))},"v-00233e96":function(){return t.e(72).then(t.bind(null,447))},"v-2c0726ea":function(){return t.e(73).then(t.bind(null,448))},"v-c2bd2420":function(){return t.e(69).then(t.bind(null,449))},"v-deccdda8":function(){return t.e(75).then(t.bind(null,450))},"v-5df6bd8a":function(){return t.e(74).then(t.bind(null,451))},"v-0f2ec1a8":function(){return t.e(76).then(t.bind(null,452))},"v-4a2dd348":function(){return t.e(77).then(t.bind(null,453))},"v-2828c47d":function(){return t.e(80).then(t.bind(null,454))},"v-06eb3a7d":function(){return t.e(78).then(t.bind(null,455))},"v-b58ef68a":function(){return t.e(81).then(t.bind(null,456))},"v-63591186":function(){return t.e(82).then(t.bind(null,457))},"v-f519bb64":function(){return t.e(83).then(t.bind(null,458))},"v-b8a28a96":function(){return t.e(79).then(t.bind(null,459))}};function Ei(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var Ci=/-(\w)/g,$i=Ei((function(n){return n.replace(Ci,(function(n,e){return e?e.toUpperCase():""}))})),Oi=/\B([A-Z])/g,Pi=Ei((function(n){return n.replace(Oi,"-$1").toLowerCase()})),Ai=Ei((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function qi(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Ai($i(e))):n(Ai(e))||n(Pi(e))}var Di=Object.assign({},Ii,zi),Mi=function(n){return Di[n]},Li=function(n){return zi[n]},Ni=function(n){return Ii[n]},Ri=function(n){return Ao.component(n)};function Vi(n){return qi(Li,n)}function Hi(n){return qi(Ni,n)}function Bi(n){return qi(Mi,n)}function Ui(n){return qi(Ri,n)}function Fi(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Ui(e)||!Bi(e)){n.next=5;break}return n.next=3,Bi(e)();case 3:t=n.sent,Ao.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Wi(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Gi=t(94),Ji=(t(175),t(176),t(163)),Xi=t.n(Ji),Ki={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Gi.a)(n,1)[0]})).map((function(n){var e=Object(Gi.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(n[t],'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=Yi(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Si.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=Zi(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Xi()([{name:"description",content:this.$description}],n,this.siteMeta,nl)},updateCanonicalLink:function(){Qi(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",Yi(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){Zi(null,this.currentMetaTags),Qi()}};function Qi(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function Yi(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function Zi(n,e){if(e&&Object(Si.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function nl(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(95);var el=t(164),tl={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(el)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+r,i=0;i<t.length;i++){var l=t[i],s=t[i+1],c=0===i&&0===r||r>=l.parentElement.offsetTop+10&&(!s||r<s.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(c&&u!==decodeURIComponent(l.hash)){var d=l;if(a===o)for(var p=i+1;p<t.length;p++)if(u===decodeURIComponent(t[p].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(d.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},rl=(t(84),t(66)),ol=t.n(rl),al=[Ki,tl,{mounted:function(){var n=this;ol.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||Ao.component(n.name)||ol.a.start(),t()})),this.$router.afterEach((function(){ol.a.done(),n.isSidebarOpen=!1}))}}],il={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Wi("layout",n),Ao.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},ll=t(44),sl=Object(ll.a)(il,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(Si.a)(t));break;default:throw new Error("Unknown option name.")}}(sl,"mixins",al);var cl=[{name:"v-5e75564c",path:"/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-5e75564c").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-9186c9d8",path:"/frontend/TypeScript/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-9186c9d8").then(t)}},{path:"/frontend/TypeScript/index.html",redirect:"/frontend/TypeScript/"},{name:"v-2e96347d",path:"/frontend/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-2e96347d").then(t)}},{path:"/frontend/index.html",redirect:"/frontend/"},{name:"v-9e35647a",path:"/frontend/css/animation/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-9e35647a").then(t)}},{path:"/frontend/css/animation/index.html",redirect:"/frontend/css/animation/"},{name:"v-77f52205",path:"/frontend/css/introduction/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-77f52205").then(t)}},{path:"/frontend/css/introduction/index.html",redirect:"/frontend/css/introduction/"},{name:"v-041ce99e",path:"/frontend/ajax/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-041ce99e").then(t)}},{path:"/frontend/ajax/index.html",redirect:"/frontend/ajax/"},{name:"v-eb7c69b6",path:"/frontend/css/layout/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-eb7c69b6").then(t)}},{path:"/frontend/css/layout/index.html",redirect:"/frontend/css/layout/"},{name:"v-461f2189",path:"/frontend/css/function/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-461f2189").then(t)}},{path:"/frontend/css/function/index.html",redirect:"/frontend/css/function/"},{name:"v-3afc15e2",path:"/frontend/css/location/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-3afc15e2").then(t)}},{path:"/frontend/css/location/index.html",redirect:"/frontend/css/location/"},{name:"v-76f9c94a",path:"/frontend/html/attribute/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-76f9c94a").then(t)}},{path:"/frontend/html/attribute/index.html",redirect:"/frontend/html/attribute/"},{name:"v-70307f3b",path:"/frontend/css/selector/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-70307f3b").then(t)}},{path:"/frontend/css/selector/index.html",redirect:"/frontend/css/selector/"},{name:"v-88b51a4a",path:"/frontend/html/element/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-88b51a4a").then(t)}},{path:"/frontend/html/element/index.html",redirect:"/frontend/html/element/"},{name:"v-8908393a",path:"/frontend/css/box/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-8908393a").then(t)}},{path:"/frontend/css/box/index.html",redirect:"/frontend/css/box/"},{name:"v-2ea121de",path:"/frontend/html/element/SVG/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-2ea121de").then(t)}},{path:"/frontend/html/element/SVG/index.html",redirect:"/frontend/html/element/SVG/"},{name:"v-5489448a",path:"/frontend/html/element/form/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-5489448a").then(t)}},{path:"/frontend/html/element/form/index.html",redirect:"/frontend/html/element/form/"},{name:"v-90970822",path:"/frontend/css/sprite/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-90970822").then(t)}},{path:"/frontend/css/sprite/index.html",redirect:"/frontend/css/sprite/"},{name:"v-0987790a",path:"/frontend/html/element/canvas/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-0987790a").then(t)}},{path:"/frontend/html/element/canvas/index.html",redirect:"/frontend/html/element/canvas/"},{name:"v-36b00bc0",path:"/frontend/html/element/img/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-36b00bc0").then(t)}},{path:"/frontend/html/element/img/index.html",redirect:"/frontend/html/element/img/"},{name:"v-da3632ec",path:"/frontend/html/element/iframe/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-da3632ec").then(t)}},{path:"/frontend/html/element/iframe/index.html",redirect:"/frontend/html/element/iframe/"},{name:"v-b6352a7a",path:"/frontend/css/attribute/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-b6352a7a").then(t)}},{path:"/frontend/css/attribute/index.html",redirect:"/frontend/css/attribute/"},{name:"v-b15b0d6c",path:"/frontend/html/element/layout/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-b15b0d6c").then(t)}},{path:"/frontend/html/element/layout/index.html",redirect:"/frontend/html/element/layout/"},{name:"v-0b9e0c4a",path:"/frontend/html/element/list/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-0b9e0c4a").then(t)}},{path:"/frontend/html/element/list/index.html",redirect:"/frontend/html/element/list/"},{name:"v-ee8690c4",path:"/frontend/html/element/media/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-ee8690c4").then(t)}},{path:"/frontend/html/element/media/index.html",redirect:"/frontend/html/element/media/"},{name:"v-3ccff98a",path:"/frontend/html/element/select/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-3ccff98a").then(t)}},{path:"/frontend/html/element/select/index.html",redirect:"/frontend/html/element/select/"},{name:"v-6f688a2c",path:"/frontend/html/element/text/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-6f688a2c").then(t)}},{path:"/frontend/html/element/text/index.html",redirect:"/frontend/html/element/text/"},{name:"v-46ff92ca",path:"/frontend/html/element/link/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-46ff92ca").then(t)}},{path:"/frontend/html/element/link/index.html",redirect:"/frontend/html/element/link/"},{name:"v-477469ca",path:"/frontend/html/element/table/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-477469ca").then(t)}},{path:"/frontend/html/element/table/index.html",redirect:"/frontend/html/element/table/"},{name:"v-cffb7706",path:"/frontend/html/outliner/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-cffb7706").then(t)}},{path:"/frontend/html/outliner/index.html",redirect:"/frontend/html/outliner/"},{name:"v-76991ebd",path:"/frontend/html/introduction/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-76991ebd").then(t)}},{path:"/frontend/html/introduction/index.html",redirect:"/frontend/html/introduction/"},{name:"v-39eada8f",path:"/frontend/javascript/BOM/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-39eada8f").then(t)}},{path:"/frontend/javascript/BOM/index.html",redirect:"/frontend/javascript/BOM/"},{name:"v-06de06ea",path:"/frontend/javascript/DOM/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-06de06ea").then(t)}},{path:"/frontend/javascript/DOM/index.html",redirect:"/frontend/javascript/DOM/"},{name:"v-4d2f95dd",path:"/frontend/javascript/TypeScript/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-4d2f95dd").then(t)}},{path:"/frontend/javascript/TypeScript/index.html",redirect:"/frontend/javascript/TypeScript/"},{name:"v-e176d6d6",path:"/frontend/javascript/control/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-e176d6d6").then(t)}},{path:"/frontend/javascript/control/index.html",redirect:"/frontend/javascript/control/"},{name:"v-18513586",path:"/frontend/javascript/datatype/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-18513586").then(t)}},{path:"/frontend/javascript/datatype/index.html",redirect:"/frontend/javascript/datatype/"},{name:"v-42b112dd",path:"/frontend/javascript/ECMAScript/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-42b112dd").then(t)}},{path:"/frontend/javascript/ECMAScript/index.html",redirect:"/frontend/javascript/ECMAScript/"},{name:"v-5317d5fd",path:"/frontend/javascript/date/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-5317d5fd").then(t)}},{path:"/frontend/javascript/date/index.html",redirect:"/frontend/javascript/date/"},{name:"v-86caa34a",path:"/frontend/javascript/event/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-86caa34a").then(t)}},{path:"/frontend/javascript/event/index.html",redirect:"/frontend/javascript/event/"},{name:"v-a1b70ea2",path:"/frontend/javascript/oop/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-a1b70ea2").then(t)}},{path:"/frontend/javascript/oop/index.html",redirect:"/frontend/javascript/oop/"},{name:"v-c2c8c786",path:"/frontend/javascript/math/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-c2c8c786").then(t)}},{path:"/frontend/javascript/math/index.html",redirect:"/frontend/javascript/math/"},{name:"v-492b269d",path:"/frontend/javascript/object/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-492b269d").then(t)}},{path:"/frontend/javascript/object/index.html",redirect:"/frontend/javascript/object/"},{name:"v-0f5372b2",path:"/frontend/javascript/reg/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-0f5372b2").then(t)}},{path:"/frontend/javascript/reg/index.html",redirect:"/frontend/javascript/reg/"},{name:"v-5d20935d",path:"/frontend/javascript/string/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-5d20935d").then(t)}},{path:"/frontend/javascript/string/index.html",redirect:"/frontend/javascript/string/"},{name:"v-13ae9fbd",path:"/frontend/javascript/function/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-13ae9fbd").then(t)}},{path:"/frontend/javascript/function/index.html",redirect:"/frontend/javascript/function/"},{name:"v-266de6fd",path:"/frontend/javascript/symbol/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-266de6fd").then(t)}},{path:"/frontend/javascript/symbol/index.html",redirect:"/frontend/javascript/symbol/"},{name:"v-846e62aa",path:"/frontend/javascript/sync&asyn/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-846e62aa").then(t)}},{path:"/frontend/javascript/sync&asyn/index.html",redirect:"/frontend/javascript/sync&asyn/"},{name:"v-2dba9b01",path:"/frontend/javascript/var/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-2dba9b01").then(t)}},{path:"/frontend/javascript/var/index.html",redirect:"/frontend/javascript/var/"},{name:"v-a51ce83c",path:"/frontend/jquery/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-a51ce83c").then(t)}},{path:"/frontend/jquery/index.html",redirect:"/frontend/jquery/"},{name:"v-503b66f0",path:"/frontend/miniprogram/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-503b66f0").then(t)}},{path:"/frontend/miniprogram/index.html",redirect:"/frontend/miniprogram/"},{name:"v-7db95ea3",path:"/frontend/vue/api/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-7db95ea3").then(t)}},{path:"/frontend/vue/api/index.html",redirect:"/frontend/vue/api/"},{name:"v-29ca1f63",path:"/frontend/vue/async/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-29ca1f63").then(t)}},{path:"/frontend/vue/async/index.html",redirect:"/frontend/vue/async/"},{name:"v-54e92d23",path:"/frontend/vue/axios/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-54e92d23").then(t)}},{path:"/frontend/vue/axios/index.html",redirect:"/frontend/vue/axios/"},{name:"v-56dbb37a",path:"/frontend/vue/component/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-56dbb37a").then(t)}},{path:"/frontend/vue/component/index.html",redirect:"/frontend/vue/component/"},{name:"v-4b5f59fa",path:"/frontend/vue/control/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-4b5f59fa").then(t)}},{path:"/frontend/vue/control/index.html",redirect:"/frontend/vue/control/"},{name:"v-eb0d6762",path:"/frontend/vue/filter/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-eb0d6762").then(t)}},{path:"/frontend/vue/filter/index.html",redirect:"/frontend/vue/filter/"},{name:"v-7325490b",path:"/frontend/vue/introduction/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-7325490b").then(t)}},{path:"/frontend/vue/introduction/index.html",redirect:"/frontend/vue/introduction/"},{name:"v-8e3aceba",path:"/frontend/vue/lifecycle/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-8e3aceba").then(t)}},{path:"/frontend/vue/lifecycle/index.html",redirect:"/frontend/vue/lifecycle/"},{name:"v-e512ecba",path:"/frontend/vue/methods/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-e512ecba").then(t)}},{path:"/frontend/vue/methods/index.html",redirect:"/frontend/vue/methods/"},{name:"v-52f7f4ad",path:"/frontend/vue/router/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-52f7f4ad").then(t)}},{path:"/frontend/vue/router/index.html",redirect:"/frontend/vue/router/"},{name:"v-d99cd77a",path:"/frontend/vue/slot/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-d99cd77a").then(t)}},{path:"/frontend/vue/slot/index.html",redirect:"/frontend/vue/slot/"},{name:"v-05838123",path:"/frontend/vue/transitions/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-05838123").then(t)}},{path:"/frontend/vue/transitions/index.html",redirect:"/frontend/vue/transitions/"},{name:"v-08341bdb",path:"/frontend/vue/vuex/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-08341bdb").then(t)}},{path:"/frontend/vue/vuex/index.html",redirect:"/frontend/vue/vuex/"},{name:"v-628b5f8b",path:"/frontend/vue/vuecli/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-628b5f8b").then(t)}},{path:"/frontend/vue/vuecli/index.html",redirect:"/frontend/vue/vuecli/"},{name:"v-9879566c",path:"/other/FreeMarker/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-9879566c").then(t)}},{path:"/other/FreeMarker/index.html",redirect:"/other/FreeMarker/"},{name:"v-5d165376",path:"/other/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-5d165376").then(t)}},{path:"/other/index.html",redirect:"/other/"},{name:"v-00233e96",path:"/other/SEO/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-00233e96").then(t)}},{path:"/other/SEO/index.html",redirect:"/other/SEO/"},{name:"v-2c0726ea",path:"/other/database/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-2c0726ea").then(t)}},{path:"/other/database/index.html",redirect:"/other/database/"},{name:"v-c2bd2420",path:"/frontend/webpack/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-c2bd2420").then(t)}},{path:"/frontend/webpack/index.html",redirect:"/frontend/webpack/"},{name:"v-deccdda8",path:"/other/git/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-deccdda8").then(t)}},{path:"/other/git/index.html",redirect:"/other/git/"},{name:"v-5df6bd8a",path:"/other/docker/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-5df6bd8a").then(t)}},{path:"/other/docker/index.html",redirect:"/other/docker/"},{name:"v-0f2ec1a8",path:"/other/linux/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-0f2ec1a8").then(t)}},{path:"/other/linux/index.html",redirect:"/other/linux/"},{name:"v-4a2dd348",path:"/other/nginx/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-4a2dd348").then(t)}},{path:"/other/nginx/index.html",redirect:"/other/nginx/"},{name:"v-2828c47d",path:"/other/node/modules/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-2828c47d").then(t)}},{path:"/other/node/modules/index.html",redirect:"/other/node/modules/"},{name:"v-06eb3a7d",path:"/other/node/frame/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-06eb3a7d").then(t)}},{path:"/other/node/frame/index.html",redirect:"/other/node/frame/"},{name:"v-b58ef68a",path:"/other/node/otherModules/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-b58ef68a").then(t)}},{path:"/other/node/otherModules/index.html",redirect:"/other/node/otherModules/"},{name:"v-63591186",path:"/other/node/tools/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-63591186").then(t)}},{path:"/other/node/tools/index.html",redirect:"/other/node/tools/"},{name:"v-f519bb64",path:"/other/tcp/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-f519bb64").then(t)}},{path:"/other/tcp/index.html",redirect:"/other/tcp/"},{name:"v-b8a28a96",path:"/other/node/introduction/",component:sl,beforeEnter:function(n,e,t){Fi("Layout","v-b8a28a96").then(t)}},{path:"/other/node/introduction/index.html",redirect:"/other/node/introduction/"},{path:"*",component:sl}],ul={title:"jaqi.note",description:"字典，是惟一把成功放在工作之前的地方！",base:"/jaqi.note/",headTags:[["link",{rel:"icon",href:"/jaqi.note/logo.jpg"}],["script",{},'\n                var _hmt = _hmt || [];\n                (function() {\n                    var hm = document.createElement("script");\n                    hm.src = "https://hm.baidu.com/hm.js?b7303024b1d1000570507a8af21071bd";\n                    var s = document.getElementsByTagName("script")[0];\n                    s.parentNode.insertBefore(hm, s);\n                })();\n           ']],pages:[{title:"Home",frontmatter:{home:!0,heroImage:"/logo.jpg",heroText:"jaqi.note",tagline:"字典，是惟一把成功放在工作之前的地方！",actionText:"开发文档 →",actionLink:"/frontend/",features:[{title:"前端",details:"HTML/CSS/JS/VUE"},{title:"后端",details:"Node.js/Python"},{title:"其他",details:"Linux/Nginx/Web协议..."}],footer:"jaqi.note © jaqi.l @22.01.05.1"},regularPath:"/",relativePath:"README.md",key:"v-5e75564c",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"9.1TypeScript",frontmatter:{},regularPath:"/frontend/TypeScript/",relativePath:"frontend/TypeScript/README.md",key:"v-9186c9d8",path:"/frontend/TypeScript/",headers:[{level:2,title:"9.1TypeScript",slug:"_9-1typescript",normalizedTitle:"9.1typescript",charIndex:2}],headersStr:"9.1TypeScript",content:"# 9.1TypeScript",normalizedContent:"# 9.1typescript",charsets:{}},{title:"前端文档",frontmatter:{},regularPath:"/frontend/",relativePath:"frontend/README.md",key:"v-2e96347d",path:"/frontend/",headersStr:null,content:"# 前端文档\n\n * 更新日志：\n\n>  * 第二章CSS 概述 样式私有化，行内块元素的特殊问题\n>  * 第三章Javascript BOM 缓存对象及其他缓存技术\n>  * 第三章Javascript ES6 调整结构完善内容\n>  * 第三章Javascript ES6 Module 按条件加载模块\n>  * 第三章Javascript 闭包 作用域链\n>  * 第三章CSS3 其他常用属性\n>  * 第三章CSS3 定位-粘性定位",normalizedContent:"# 前端文档\n\n * 更新日志：\n\n>  * 第二章css 概述 样式私有化，行内块元素的特殊问题\n>  * 第三章javascript bom 缓存对象及其他缓存技术\n>  * 第三章javascript es6 调整结构完善内容\n>  * 第三章javascript es6 module 按条件加载模块\n>  * 第三章javascript 闭包 作用域链\n>  * 第三章css3 其他常用属性\n>  * 第三章css3 定位-粘性定位",charsets:{cjk:!0}},{title:"2.7.1变形",frontmatter:{},regularPath:"/frontend/css/animation/",relativePath:"frontend/css/animation/README.md",key:"v-9e35647a",path:"/frontend/css/animation/",headers:[{level:2,title:"2.7.1变形",slug:"_2-7-1变形",normalizedTitle:"2.7.1变形",charIndex:2},{level:3,title:"transform：2D变形：",slug:"transform-2d变形",normalizedTitle:"transform：2d变形：",charIndex:14},{level:3,title:"transform：3D变形",slug:"transform-3d变形",normalizedTitle:"transform：3d变形",charIndex:415},{level:3,title:"其他属性：",slug:"其他属性",normalizedTitle:"其他属性：",charIndex:840},{level:2,title:"2.6.2过渡",slug:"_2-6-2过渡",normalizedTitle:"2.6.2过渡",charIndex:1110},{level:2,title:"2.7.3关键帧动画",slug:"_2-7-3关键帧动画",normalizedTitle:"2.7.3关键帧动画",charIndex:1873}],headersStr:"2.7.1变形 transform：2D变形： transform：3D变形 其他属性： 2.6.2过渡 2.7.3关键帧动画",content:'# 2.7.1变形\n\n\n# transform：2D变形：\n\n * 移动：\n\ntranslate(x,y)X,Y轴移动。\ntranslateX(x)X轴移动。\ntranslateY(y)Y轴移动。\n\n * 缩放：\n\nscale(x,y)X,Y轴缩放。\nscaleX(x)X轴缩放。\nscaleY(y)Y轴缩放。\n\n * 转动：\n\nrotate(angle)转动角度。\nskew(x-angle,y-angle)定义沿着 X 和 Y 轴的 2D 倾斜转换。\nkewX(angle)沿着X轴的转动。\nskewY(angle)沿着Y轴的转动。\nmatrix(n,n,n,n,n,n)定义2D转换，使用六个值的矩阵。\n\nTIP\n\n * 转动单位可以设置角度edg/弧度rad\n * 长度单位可以设置像素px像素/百分比%\n * X轴可以设置left/right/center\n * Y轴可以设置top/bottom/center\n\n\n# transform：3D变形\n\ntransform：3D变形可以近似理解为沿着Z轴移动元素，使得元素更加靠近或者远离你，从而使元素看起来变得更大或更小。\n\n * 移动：\n\ntranslate3d(x,y,z)X,Y,Z轴移动。\ntranslateX(x)X轴移动。\ntranslateY(y)Y轴移动。\ntranslateZ(z)z轴移动。\n\n * 缩放：\n\nscale3d(x,y,z)X,Y,Z轴3D缩放。\nscaleX(x)X轴缩放。\nscaleY(y)Y轴缩放。\nscaleZ(z)Z轴缩放。\n\n * 转动：\n\nrotate3d(x,y,z,angle)3D旋转。\nrotateX(angle)沿着X轴转动。\nrotateY(angle)沿着Y轴转动。\nrotateZ(angle)沿着Z轴转动。 matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)定义 3D 转换，使用 16 个值的 4x4 矩阵。\n\n\n# 其他属性：\n\ntransform-origin改变元素变形的基准点。\n\nperspective(n)为3D转换元素定义透视视图，视距大，透视变形越小，反之。\n\nperspective-origin规定 3D 元素的底部位置。目前浏览器都不支持。\n\nbackface-visibility定义元素在不面对屏幕时是否可见。反转时正显，背隐。浏览器支持度不好。\n\ntransform-style规定被嵌套元素如何在 3D 空间中显示。\n\n> flat子元素将不保留其 3D 位置。\n> preserve-3d子元素将保留其 3D 位置。\n\n\n# 2.6.2过渡\n\n通过 CSS3，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。 CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。要实现这一点，必须规定两项内容：把效果添加到哪个 CSS 属性上/规定效果的时长\n\n * 过渡动画的属性：\n\ntransition 简写属性，用于在一个属性中设置四个过渡属性。\n\ntransition-property 规定应用过渡的 CSS 属性的名称。\n\n> none没有属性会获得过渡效果。\n> all所有属性都将获得过渡效果。\n> 属性名称\n\ntransition-duration定义过渡效果花费的时间。默认是 0。单位是秒或毫秒\n\ntransition-timing-function规定过渡效果的时间曲线。默认是 "ease"。\n\n> linear规定以相同速度开始至结束的过渡效果（等于cubic-bezier(0,0,1,1)）。\n> ease规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。\n> ease-in规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。\n> ease-out规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。\n> ease-in-out规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。\n> cubic-bezier(n,n,n,n)在cubic-bezier函数中定义自己的值。可能的值是 0 至 1 之间的数值。\n\ntransition-delay规定过渡效果何时开始。默认是 0。\n\n\n# 2.7.3关键帧动画\n\n通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。\n\n@keyframes 设定动画规则。可以近似理解为动画的剧本。\n\n> name必需。定义动画的名称。\n> 0-100%/from...to...动画时长的百分比。\n> 需要变化的CSS样式属性。\n\nanimation 所有动画属性的简写属性，用于设置六个动画属性：\n\n> animation-name\n> animation-duration\n> animation-timing-function\n> animation-delay\n> animation-iteration-count\n> animation-direction\n\nanimation-name属性为 @keyframes 动画规定名称。若设置为none则覆盖已有的动画效果。\n\nanimation-duration 规定动画完成一个周期所花费的秒或毫秒。默认是 0。\n\nanimation-timing-function 规定动画的速度曲线：\n\n> linear规定以相同速度开始至结束的过渡效果（等于cubic-bezier(0,0,1,1)）。\n> ease（默认值）规定慢速开始，然后变快，然后慢速结束的过渡效果（等于cubic-bezier(0.25,0.1,0.25,1)）。\n> ease-in规定以慢速开始的过渡效果（等于cubic-bezier(0.42,0,1,1)）。\n> ease-out规定以慢速结束的过渡效果（等于cubic-bezier(0,0,0.58,1)）。\n> ease-in-out规定以慢速开始和结束的过渡效果（等于cubic-bezier(0.42,0,0.58,1)）。\n> cubic-bezier(n,n,n,n)在cubic-bezier函数中定义自己的值。可能的值是 0 至 1 之间的数值。\n\nanimation-delay 规定动画何时开始。默认是 0。\n\nanimation-iteration-count 规定动画被播放的次数。默认是 1。infinite为无限次播放。\n\nanimation-direction 规定动画是否在下一周期逆向地播放。\n\n> normal（默认值）顺向播放"\n> alternate动画应该轮流反向播放。\n\nanimation-play-state 规定动画是否正在运行或暂停。\n\n> running（默认值）正在播放。\n> paused动画暂停。\n\nanimation-fill-mode 规定对象动画时间之外的状态。\n\n> none不改变默认行为。\n> forwards当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。\n> backwards在animation-delay所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。\n> both向前和向后填充模式都被应用。',normalizedContent:'# 2.7.1变形\n\n\n# transform：2d变形：\n\n * 移动：\n\ntranslate(x,y)x,y轴移动。\ntranslatex(x)x轴移动。\ntranslatey(y)y轴移动。\n\n * 缩放：\n\nscale(x,y)x,y轴缩放。\nscalex(x)x轴缩放。\nscaley(y)y轴缩放。\n\n * 转动：\n\nrotate(angle)转动角度。\nskew(x-angle,y-angle)定义沿着 x 和 y 轴的 2d 倾斜转换。\nkewx(angle)沿着x轴的转动。\nskewy(angle)沿着y轴的转动。\nmatrix(n,n,n,n,n,n)定义2d转换，使用六个值的矩阵。\n\ntip\n\n * 转动单位可以设置角度edg/弧度rad\n * 长度单位可以设置像素px像素/百分比%\n * x轴可以设置left/right/center\n * y轴可以设置top/bottom/center\n\n\n# transform：3d变形\n\ntransform：3d变形可以近似理解为沿着z轴移动元素，使得元素更加靠近或者远离你，从而使元素看起来变得更大或更小。\n\n * 移动：\n\ntranslate3d(x,y,z)x,y,z轴移动。\ntranslatex(x)x轴移动。\ntranslatey(y)y轴移动。\ntranslatez(z)z轴移动。\n\n * 缩放：\n\nscale3d(x,y,z)x,y,z轴3d缩放。\nscalex(x)x轴缩放。\nscaley(y)y轴缩放。\nscalez(z)z轴缩放。\n\n * 转动：\n\nrotate3d(x,y,z,angle)3d旋转。\nrotatex(angle)沿着x轴转动。\nrotatey(angle)沿着y轴转动。\nrotatez(angle)沿着z轴转动。 matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)定义 3d 转换，使用 16 个值的 4x4 矩阵。\n\n\n# 其他属性：\n\ntransform-origin改变元素变形的基准点。\n\nperspective(n)为3d转换元素定义透视视图，视距大，透视变形越小，反之。\n\nperspective-origin规定 3d 元素的底部位置。目前浏览器都不支持。\n\nbackface-visibility定义元素在不面对屏幕时是否可见。反转时正显，背隐。浏览器支持度不好。\n\ntransform-style规定被嵌套元素如何在 3d 空间中显示。\n\n> flat子元素将不保留其 3d 位置。\n> preserve-3d子元素将保留其 3d 位置。\n\n\n# 2.6.2过渡\n\n通过 css3，我们可以在不使用 flash 动画或 javascript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。 css3 过渡是元素从一种样式逐渐改变为另一种的效果。要实现这一点，必须规定两项内容：把效果添加到哪个 css 属性上/规定效果的时长\n\n * 过渡动画的属性：\n\ntransition 简写属性，用于在一个属性中设置四个过渡属性。\n\ntransition-property 规定应用过渡的 css 属性的名称。\n\n> none没有属性会获得过渡效果。\n> all所有属性都将获得过渡效果。\n> 属性名称\n\ntransition-duration定义过渡效果花费的时间。默认是 0。单位是秒或毫秒\n\ntransition-timing-function规定过渡效果的时间曲线。默认是 "ease"。\n\n> linear规定以相同速度开始至结束的过渡效果（等于cubic-bezier(0,0,1,1)）。\n> ease规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。\n> ease-in规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。\n> ease-out规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。\n> ease-in-out规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。\n> cubic-bezier(n,n,n,n)在cubic-bezier函数中定义自己的值。可能的值是 0 至 1 之间的数值。\n\ntransition-delay规定过渡效果何时开始。默认是 0。\n\n\n# 2.7.3关键帧动画\n\n通过 css3，我们能够创建动画，这可以在许多网页中取代动画图片、flash 动画以及 javascript。\n\n@keyframes 设定动画规则。可以近似理解为动画的剧本。\n\n> name必需。定义动画的名称。\n> 0-100%/from...to...动画时长的百分比。\n> 需要变化的css样式属性。\n\nanimation 所有动画属性的简写属性，用于设置六个动画属性：\n\n> animation-name\n> animation-duration\n> animation-timing-function\n> animation-delay\n> animation-iteration-count\n> animation-direction\n\nanimation-name属性为 @keyframes 动画规定名称。若设置为none则覆盖已有的动画效果。\n\nanimation-duration 规定动画完成一个周期所花费的秒或毫秒。默认是 0。\n\nanimation-timing-function 规定动画的速度曲线：\n\n> linear规定以相同速度开始至结束的过渡效果（等于cubic-bezier(0,0,1,1)）。\n> ease（默认值）规定慢速开始，然后变快，然后慢速结束的过渡效果（等于cubic-bezier(0.25,0.1,0.25,1)）。\n> ease-in规定以慢速开始的过渡效果（等于cubic-bezier(0.42,0,1,1)）。\n> ease-out规定以慢速结束的过渡效果（等于cubic-bezier(0,0,0.58,1)）。\n> ease-in-out规定以慢速开始和结束的过渡效果（等于cubic-bezier(0.42,0,0.58,1)）。\n> cubic-bezier(n,n,n,n)在cubic-bezier函数中定义自己的值。可能的值是 0 至 1 之间的数值。\n\nanimation-delay 规定动画何时开始。默认是 0。\n\nanimation-iteration-count 规定动画被播放的次数。默认是 1。infinite为无限次播放。\n\nanimation-direction 规定动画是否在下一周期逆向地播放。\n\n> normal（默认值）顺向播放"\n> alternate动画应该轮流反向播放。\n\nanimation-play-state 规定动画是否正在运行或暂停。\n\n> running（默认值）正在播放。\n> paused动画暂停。\n\nanimation-fill-mode 规定对象动画时间之外的状态。\n\n> none不改变默认行为。\n> forwards当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。\n> backwards在animation-delay所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。\n> both向前和向后填充模式都被应用。',charsets:{cjk:!0}},{title:"什么是CSS3",frontmatter:{},regularPath:"/frontend/css/introduction/",relativePath:"frontend/css/introduction/README.md",key:"v-77f52205",path:"/frontend/css/introduction/",headers:[{level:2,title:"什么是CSS3",slug:"什么是css3",normalizedTitle:"什么是css3",charIndex:2},{level:2,title:"插入样式的三种方法",slug:"插入样式的三种方法",normalizedTitle:"插入样式的三种方法",charIndex:119},{level:2,title:"语法",slug:"语法",normalizedTitle:"语法",charIndex:305},{level:3,title:"优先级的判断",slug:"优先级的判断",normalizedTitle:"优先级的判断",charIndex:563},{level:2,title:"样式私有化",slug:"样式私有化",normalizedTitle:"样式私有化",charIndex:749},{level:3,title:"样式穿透",slug:"样式穿透",normalizedTitle:"样式穿透",charIndex:1206},{level:3,title:"深度选择器",slug:"深度选择器",normalizedTitle:"深度选择器",charIndex:1568}],headersStr:"什么是CSS3 插入样式的三种方法 语法 优先级的判断 样式私有化 样式穿透 深度选择器",content:'# 什么是CSS3\n\nCSS3是CSS（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等模块\n\n\n# 插入样式的三种方法\n\n 1. 外部样式表：通过link元素引入外部样式表\n\n<link rel="stylesheet" type="text/css" href="">\n\n\n 1. 内部样式表（style中）\n\n<style type="text/css"></style>\n\n\n 1. 内联样式表（行内）\n\n<p type="color:red"></p>\n\n\n\n# 语法\n\n 1. 单一元素的多个属性之间用分号隔开；若只有一个可以省略\n\n 2. 多个元素之间用逗号隔开\n\n 3. 如果值为若干单词，则要给值加引号;除了这种情况外其他时候不可以加引号\n\n 4. 样式的优先顺序:\n\n>  * 设计者设计的样式>浏览器用户自定义的样式>浏览器自设的样式\n>  * 行内（内联）样式>内部样式：style中的>外部样式\n>  * 强制优先级：!important\n\n 5. 层叠、继承、冲突\n\n外观样式--比如字体、颜色可以继承;而布局有关的样式不可以继承，比如边框等\n\n层叠性\n\n\n# 优先级的判断\n\n\n\n * 权重的计算公式：\n\n> 行内样式：1000\n> id选择器：0100\n> 类选择器：0010 伪类选择器：0010 属性选择器：0010 伪元素选择器：0010\n> 标签选择器：0001\n\n * 结构就近原则：最后加载的会覆盖前面加载的样式；\n\n * 书写就近原则：{color:red;color:blue;}后写的会覆盖先写的属性；\n\n\n# 样式私有化\n\n在单页面应用中每一个打开过的样式都会加载到全局样式里。 通过<style>标签的scoped属性可以规定样式的私有作用域比较样式污染。\n\n<style type="text/css" scoped>\n</style>\n\n\n * Vue下样式私有化原理\n\n 1. 在Vue项目中使用scoped时，Vue会在渲染DOM时为每一个设置了私有化样式的DOM增加一个data-v-id的自定义属性作为全局标识。\n\n<div class="list">\n    <div data-v-3b648845="" class="tagtree"></div>\n</div>\n\n\n 2. 在设置了私有化样式scoped时，Vue会自动给最后一个选择器后面追加一个属性选择器，实现与绑定了data-v-id的DOM一一对应\n\n/* vue自动给`.tagtree`追加属性选择器而不是`.list` */\n.list .tagtree[data-v-3b648845] {\n    color:red;\n}\n\n\n\n# 样式穿透\n\n当我们使用第三方组件库且使用私有化样式scoped时，此时在修改第三方组件样式时会出现以下问题:\n\nVue在构建时(有时只会给<el-input>增加data-v-id标识)不会给内部的<input>标签增加data-v-id\n\n<div class="list" data-v-3b648845="">\n    <el-input data-v-3b648845="" class="myTxt">\n        <input type="text">\n    </el-input>\n</div>\n\n\n但是此时会在<input>选择器后面增加一个data-v-id属性选择器，此时样式就不会生效。\n\n.list input[data-v-3b648845] {\n    color:red;\n}\n\n\n\n# 深度选择器\n\n本质就是修改data-v-id属性选择器在CSS选择其中的位置\n\n * >>>写法：\n\n.list >>> input {\n    color:red;\n}\n\n\n * ::v-deep写法：\n\n.list ::v-deep input {\n    color:red;\n}\n\n\n * /deep/写法：\n\n.list /deep/ input {\n    color:red;\n}\n\n\n * :deep()写法：\n\n:deep(.list)  input {\n    color:red;\n}\n\n\n渲染后的样式，此时他会放在使用了深度选择器的位置\n\n.list[data-v-3b648845] input {\n    color:red;\n}\n\n\n各深度选择器的区别\n\n名称         适用场景\n>>>        原生CSS\n::v-deep   预处理器（vue-cli3以上不支持）\n/deep/     预处理器（Vue3不支持）\n:deep()    预处理器（支持Vue3）',normalizedContent:'# 什么是css3\n\ncss3是css（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日w3c完成了css3的工作草案，主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等模块\n\n\n# 插入样式的三种方法\n\n 1. 外部样式表：通过link元素引入外部样式表\n\n<link rel="stylesheet" type="text/css" href="">\n\n\n 1. 内部样式表（style中）\n\n<style type="text/css"></style>\n\n\n 1. 内联样式表（行内）\n\n<p type="color:red"></p>\n\n\n\n# 语法\n\n 1. 单一元素的多个属性之间用分号隔开；若只有一个可以省略\n\n 2. 多个元素之间用逗号隔开\n\n 3. 如果值为若干单词，则要给值加引号;除了这种情况外其他时候不可以加引号\n\n 4. 样式的优先顺序:\n\n>  * 设计者设计的样式>浏览器用户自定义的样式>浏览器自设的样式\n>  * 行内（内联）样式>内部样式：style中的>外部样式\n>  * 强制优先级：!important\n\n 5. 层叠、继承、冲突\n\n外观样式--比如字体、颜色可以继承;而布局有关的样式不可以继承，比如边框等\n\n层叠性\n\n\n# 优先级的判断\n\n\n\n * 权重的计算公式：\n\n> 行内样式：1000\n> id选择器：0100\n> 类选择器：0010 伪类选择器：0010 属性选择器：0010 伪元素选择器：0010\n> 标签选择器：0001\n\n * 结构就近原则：最后加载的会覆盖前面加载的样式；\n\n * 书写就近原则：{color:red;color:blue;}后写的会覆盖先写的属性；\n\n\n# 样式私有化\n\n在单页面应用中每一个打开过的样式都会加载到全局样式里。 通过<style>标签的scoped属性可以规定样式的私有作用域比较样式污染。\n\n<style type="text/css" scoped>\n</style>\n\n\n * vue下样式私有化原理\n\n 1. 在vue项目中使用scoped时，vue会在渲染dom时为每一个设置了私有化样式的dom增加一个data-v-id的自定义属性作为全局标识。\n\n<div class="list">\n    <div data-v-3b648845="" class="tagtree"></div>\n</div>\n\n\n 2. 在设置了私有化样式scoped时，vue会自动给最后一个选择器后面追加一个属性选择器，实现与绑定了data-v-id的dom一一对应\n\n/* vue自动给`.tagtree`追加属性选择器而不是`.list` */\n.list .tagtree[data-v-3b648845] {\n    color:red;\n}\n\n\n\n# 样式穿透\n\n当我们使用第三方组件库且使用私有化样式scoped时，此时在修改第三方组件样式时会出现以下问题:\n\nvue在构建时(有时只会给<el-input>增加data-v-id标识)不会给内部的<input>标签增加data-v-id\n\n<div class="list" data-v-3b648845="">\n    <el-input data-v-3b648845="" class="mytxt">\n        <input type="text">\n    </el-input>\n</div>\n\n\n但是此时会在<input>选择器后面增加一个data-v-id属性选择器，此时样式就不会生效。\n\n.list input[data-v-3b648845] {\n    color:red;\n}\n\n\n\n# 深度选择器\n\n本质就是修改data-v-id属性选择器在css选择其中的位置\n\n * >>>写法：\n\n.list >>> input {\n    color:red;\n}\n\n\n * ::v-deep写法：\n\n.list ::v-deep input {\n    color:red;\n}\n\n\n * /deep/写法：\n\n.list /deep/ input {\n    color:red;\n}\n\n\n * :deep()写法：\n\n:deep(.list)  input {\n    color:red;\n}\n\n\n渲染后的样式，此时他会放在使用了深度选择器的位置\n\n.list[data-v-3b648845] input {\n    color:red;\n}\n\n\n各深度选择器的区别\n\n名称         适用场景\n>>>        原生css\n::v-deep   预处理器（vue-cli3以上不支持）\n/deep/     预处理器（vue3不支持）\n:deep()    预处理器（支持vue3）',charsets:{cjk:!0}},{title:"5.1 Ajax概述",frontmatter:{},regularPath:"/frontend/ajax/",relativePath:"frontend/ajax/README.md",key:"v-041ce99e",path:"/frontend/ajax/",headers:[{level:2,title:"5.1 Ajax概述",slug:"_5-1-ajax概述",normalizedTitle:"5.1 ajax概述",charIndex:2},{level:2,title:"5.2 异步数据交互方法",slug:"_5-2-异步数据交互方法",normalizedTitle:"5.2 异步数据交互方法",charIndex:79},{level:3,title:"5.2.1 xhr(XMLHttpRequest)",slug:"_5-2-1-xhr-xmlhttprequest",normalizedTitle:"5.2.1 xhr(xmlhttprequest)",charIndex:96},{level:3,title:"5.2.2 jQuery下的Ajax",slug:"_5-2-2-jquery下的ajax",normalizedTitle:"5.2.2 jquery下的ajax",charIndex:1064},{level:3,title:"5.2.3 jsonp",slug:"_5-2-3-jsonp",normalizedTitle:"5.2.3 jsonp",charIndex:1252},{level:3,title:"5.2.4 fetch",slug:"_5-2-4-fetch",normalizedTitle:"5.2.4 fetch",charIndex:1487},{level:3,title:"5.2.5 axios",slug:"_5-2-5-axios",normalizedTitle:"5.2.5 axios",charIndex:1720},{level:2,title:"5.3 HTTP请求常用方法",slug:"_5-3-http请求常用方法",normalizedTitle:"5.3 http请求常用方法",charIndex:2303},{level:2,title:"5.4 常见问题",slug:"_5-4-常见问题",normalizedTitle:"5.4 常见问题",charIndex:3155},{level:3,title:"缓存问题：",slug:"缓存问题",normalizedTitle:"缓存问题：",charIndex:3168},{level:3,title:"跨域问题：",slug:"跨域问题",normalizedTitle:"跨域问题：",charIndex:3339},{level:3,title:"中文乱码：",slug:"中文乱码",normalizedTitle:"中文乱码：",charIndex:3707},{level:3,title:"文件流转url：",slug:"文件流转url",normalizedTitle:"文件流转url：",charIndex:3816},{level:3,title:"formData表单序列化：",slug:"formdata表单序列化",normalizedTitle:"formdata表单序列化：",charIndex:3868}],headersStr:"5.1 Ajax概述 5.2 异步数据交互方法 5.2.1 xhr(XMLHttpRequest) 5.2.2 jQuery下的Ajax 5.2.3 jsonp 5.2.4 fetch 5.2.5 axios 5.3 HTTP请求常用方法 5.4 常见问题 缓存问题： 跨域问题： 中文乱码： 文件流转url： formData表单序列化：",content:'# 5.1 Ajax概述\n\nAjax(Asynchronous JavaScript + XML)：JavaScript和XML的异步数据交互方式。\n\n\n# 5.2 异步数据交互方法\n\n\n# 5.2.1 xhr(XMLHttpRequest)\n\n 1. 创建一个xhr对象\n\nif (window.XMLHttpRequest) {\n  xhr = new XMLHttpRequest(); // 高级浏览器\n}else{\n  xhr = new ActiveXObject("Microsoft.XMLHTTP");// IE6\n} \n\n\n 2. 发送请求参数\n\n * 发送GET请求：\n\n/*  \n设置请求参数：\n第一个参数请求类型get/post\n第二个参数请求路径（带参数的写法"php/do2.php?yhm="+yhm）\n第三个参数是否使用异步\n*/  \nxhr.open("get","php/1.txt",true);\n\n// 发送请求，get写null\nxhr.send(null); \n\n}\n\n\n * 发送POST请求：\n\n\n/* \n设置请求参数：\n第一个参数请求类型get/post\n第二个参数请求路径\n第三个参数是否使用异步\n*/  \nxhr.open("post","php/do2.php",true);\n\n// 设置请求头信息，post必填\nxhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");\n\n// 发送请求(带参数写法"k=v&k=v")\nxhr.send("xingming=along&age=30");\n\n}\n\n\n\n 3. 监听返回 readyState返回值：\n\n> 0→open()没有被调用\n> 1→open()被调用\n> 2→头部被服务器接收到\n> 3→开始接收服务器返回的数据\n> 4→完成\n\nxhr.onreadystatechange = function(){\n  if (xhr.readyState == 4) {\n    if(xhr.status>=200 &&xhr.status<300 || xhr.status ==304 ){\n      content.innerHTML = xhr.responseText;\n    }else{\n      content.innerHTML = "服务器内部错误，稍后再试";\n    }\n  }\n}\n\n\n\n# 5.2.2 jQuery下的Ajax\n\n$.ajax(1.txt,{\n"type":"get",//请求路径、请求类型\n"data":{"k":v }, //传到服务器的数据\n"success":function(data){},//回调函数\n"error":function(xhr,textStatus,errorThrown){}//错误时的回调\n},{})\n\n\n\n# 5.2.3 jsonp\n\nJsonp(JSON with Padding) 是json的一种"使用模式"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。 它只支持GET请求，安全性差。\n\nreq({\n  a:10,\n  b:20\n})\n\n\n<script src=\'api/1.json\'><\/script>\n<script>\nfunction req(data){\n  console.log(data.a,data.b)\n}\n<\/script>\n\n\n\n# 5.2.4 fetch\n\nfetch(url,{\n        method:\'POST\',\n        headers:{\n            \'Content-type\':\'application/json\'// 设置请求头数据类型\n        },\n        body:data\n      })\n      .then(res=>res.json())\n      .then(data=>console.log(data))\n\n\n\n# 5.2.5 axios\n\n * GET请求\n\naxios.get(\'/user?ID=12345\')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n// 上面的请求也可以这样做\naxios.get(\'/user\', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n * POST请求\n\naxios.post(\'/user\', {\n    firstName: \'Fred\',\n    lastName: \'Flintstone\'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n\n# 5.3 HTTP请求常用方法\n\n# GET请求\n\nhttp://localhost/api/index?userName=123456&psw=123456\n\n * 优势：便于分享网址\n\n * 不足：性能不高、数据内容不能太大，一般2000字符\n\n# POST请求\n\n * 属性：\n\n> 1.enctype 规定如何对表单数据进行编码。\n> \n> > application/x-www-from-urlencoded\n> > multipart/form-data：既可以上传键值对，也可以上传文件。\n> > application/json：可以上传任意格式的文本，可以上传text、json、xml、html等。\n> > binary：只可以上传二进制数据。\n\n * 优势：安全、内容不限量\n\n * 不足：地址不可以分享\n\n# 其他方法\n\n * HEAD请求\n   与GET方法相同，但没有响应体，仅传输状态行和标题部分\n * PUT请求\n   PUT方法用于将数据发送到服务器以创建或更新资源，它可以用上传的内容替换目标资源中的所有当前内容。 它会将包含的元素放在所提供的URI下，如果URI指示的是当前资源，则会被改变。如果URI未指示当前资源，则服务器可以使用该URI创建资源。\n * DELETE请求\n   DELETE方法用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容。\n * CONNECT请求\n   CONNECT方法用来建立到给定URI标识的服务器的隧道；它通过简单的TCP / IP隧道更改请求连接，通常实使用解码的HTTP代理来进行SSL编码的通信（HTTPS）。\n * OPTIONS请求\n   OPTIONS方法用来描述了目标资源的通信选项，会返回服务器支持预定义URL的HTTP策略。\n * TRACE请求\n   TRACE方法用于沿着目标资源的路径执行消息环回测试；它回应收到的请求，以便客户可以看到中间服务器进行了哪些（假设任何）进度或增量。\n\n\n# 5.4 常见问题\n\n\n# 缓存问题：\n\n两次get、post请求同一个url携带的参数也一样，即使服务器返回状态码是200 也会被当做304那也缓存，这样会导致后台文件修改，前台内容没有变化\n\n * 解决方案：\n\n 1. 加随机数："php/do2.php?x="+Math.random()\n\n 2. 时间挫：Date.parse(new.Date());\n\n\n# 跨域问题：\n\n# 域名的组成：\n\n协议+子域名+主域名+端口号+请求资源地址。http://www.abc.com:8080/script/jquert.js\n\n# 同源策略\n\n当协议、子域名、主域名、端口号中任意一个不同时，都算作跨域，\n\n# 解决方案：\n\n * jsonp：只支持GET请求，原理是利用script标签请求不会触发同源策略，缺点是不安全XSS,\n * cors：需要后台配合进行相关的设置\n * postMessage：配合使用iframe，需要兼容IE6-9\n * document.domain：仅限于同一域名下的子域\n * websocket：需要后台配合修改协议，不兼容，需要使用http://socket.io\n * proxy：使用代理去避开跨域请求，需要修改nginx、apache 等的配置\n\n\n# 中文乱码：\n\n 1. encodeURIComponent编码decodeURIComponent解码\n 2. encodeURI编码、decodeURI解码 URIComponent比URI编码的范围更大。\n\n\n# 文件流转url：\n\nlet url = URL.createObjectURL(blob);\n\n\n\n# formData表单序列化：\n\n  var formdata = new FormData()\n  formdata.append(key,value)\n',normalizedContent:'# 5.1 ajax概述\n\najax(asynchronous javascript + xml)：javascript和xml的异步数据交互方式。\n\n\n# 5.2 异步数据交互方法\n\n\n# 5.2.1 xhr(xmlhttprequest)\n\n 1. 创建一个xhr对象\n\nif (window.xmlhttprequest) {\n  xhr = new xmlhttprequest(); // 高级浏览器\n}else{\n  xhr = new activexobject("microsoft.xmlhttp");// ie6\n} \n\n\n 2. 发送请求参数\n\n * 发送get请求：\n\n/*  \n设置请求参数：\n第一个参数请求类型get/post\n第二个参数请求路径（带参数的写法"php/do2.php?yhm="+yhm）\n第三个参数是否使用异步\n*/  \nxhr.open("get","php/1.txt",true);\n\n// 发送请求，get写null\nxhr.send(null); \n\n}\n\n\n * 发送post请求：\n\n\n/* \n设置请求参数：\n第一个参数请求类型get/post\n第二个参数请求路径\n第三个参数是否使用异步\n*/  \nxhr.open("post","php/do2.php",true);\n\n// 设置请求头信息，post必填\nxhr.setrequestheader("content-type","application/x-www-form-urlencoded");\n\n// 发送请求(带参数写法"k=v&k=v")\nxhr.send("xingming=along&age=30");\n\n}\n\n\n\n 3. 监听返回 readystate返回值：\n\n> 0→open()没有被调用\n> 1→open()被调用\n> 2→头部被服务器接收到\n> 3→开始接收服务器返回的数据\n> 4→完成\n\nxhr.onreadystatechange = function(){\n  if (xhr.readystate == 4) {\n    if(xhr.status>=200 &&xhr.status<300 || xhr.status ==304 ){\n      content.innerhtml = xhr.responsetext;\n    }else{\n      content.innerhtml = "服务器内部错误，稍后再试";\n    }\n  }\n}\n\n\n\n# 5.2.2 jquery下的ajax\n\n$.ajax(1.txt,{\n"type":"get",//请求路径、请求类型\n"data":{"k":v }, //传到服务器的数据\n"success":function(data){},//回调函数\n"error":function(xhr,textstatus,errorthrown){}//错误时的回调\n},{})\n\n\n\n# 5.2.3 jsonp\n\njsonp(json with padding) 是json的一种"使用模式"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。 它只支持get请求，安全性差。\n\nreq({\n  a:10,\n  b:20\n})\n\n\n<script src=\'api/1.json\'><\/script>\n<script>\nfunction req(data){\n  console.log(data.a,data.b)\n}\n<\/script>\n\n\n\n# 5.2.4 fetch\n\nfetch(url,{\n        method:\'post\',\n        headers:{\n            \'content-type\':\'application/json\'// 设置请求头数据类型\n        },\n        body:data\n      })\n      .then(res=>res.json())\n      .then(data=>console.log(data))\n\n\n\n# 5.2.5 axios\n\n * get请求\n\naxios.get(\'/user?id=12345\')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n// 上面的请求也可以这样做\naxios.get(\'/user\', {\n    params: {\n      id: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n * post请求\n\naxios.post(\'/user\', {\n    firstname: \'fred\',\n    lastname: \'flintstone\'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n\n# 5.3 http请求常用方法\n\n# get请求\n\nhttp://localhost/api/index?username=123456&psw=123456\n\n * 优势：便于分享网址\n\n * 不足：性能不高、数据内容不能太大，一般2000字符\n\n# post请求\n\n * 属性：\n\n> 1.enctype 规定如何对表单数据进行编码。\n> \n> > application/x-www-from-urlencoded\n> > multipart/form-data：既可以上传键值对，也可以上传文件。\n> > application/json：可以上传任意格式的文本，可以上传text、json、xml、html等。\n> > binary：只可以上传二进制数据。\n\n * 优势：安全、内容不限量\n\n * 不足：地址不可以分享\n\n# 其他方法\n\n * head请求\n   与get方法相同，但没有响应体，仅传输状态行和标题部分\n * put请求\n   put方法用于将数据发送到服务器以创建或更新资源，它可以用上传的内容替换目标资源中的所有当前内容。 它会将包含的元素放在所提供的uri下，如果uri指示的是当前资源，则会被改变。如果uri未指示当前资源，则服务器可以使用该uri创建资源。\n * delete请求\n   delete方法用来删除指定的资源，它会删除uri给出的目标资源的所有当前内容。\n * connect请求\n   connect方法用来建立到给定uri标识的服务器的隧道；它通过简单的tcp / ip隧道更改请求连接，通常实使用解码的http代理来进行ssl编码的通信（https）。\n * options请求\n   options方法用来描述了目标资源的通信选项，会返回服务器支持预定义url的http策略。\n * trace请求\n   trace方法用于沿着目标资源的路径执行消息环回测试；它回应收到的请求，以便客户可以看到中间服务器进行了哪些（假设任何）进度或增量。\n\n\n# 5.4 常见问题\n\n\n# 缓存问题：\n\n两次get、post请求同一个url携带的参数也一样，即使服务器返回状态码是200 也会被当做304那也缓存，这样会导致后台文件修改，前台内容没有变化\n\n * 解决方案：\n\n 1. 加随机数："php/do2.php?x="+math.random()\n\n 2. 时间挫：date.parse(new.date());\n\n\n# 跨域问题：\n\n# 域名的组成：\n\n协议+子域名+主域名+端口号+请求资源地址。http://www.abc.com:8080/script/jquert.js\n\n# 同源策略\n\n当协议、子域名、主域名、端口号中任意一个不同时，都算作跨域，\n\n# 解决方案：\n\n * jsonp：只支持get请求，原理是利用script标签请求不会触发同源策略，缺点是不安全xss,\n * cors：需要后台配合进行相关的设置\n * postmessage：配合使用iframe，需要兼容ie6-9\n * document.domain：仅限于同一域名下的子域\n * websocket：需要后台配合修改协议，不兼容，需要使用http://socket.io\n * proxy：使用代理去避开跨域请求，需要修改nginx、apache 等的配置\n\n\n# 中文乱码：\n\n 1. encodeuricomponent编码decodeuricomponent解码\n 2. encodeuri编码、decodeuri解码 uricomponent比uri编码的范围更大。\n\n\n# 文件流转url：\n\nlet url = url.createobjecturl(blob);\n\n\n\n# formdata表单序列化：\n\n  var formdata = new formdata()\n  formdata.append(key,value)\n',charsets:{cjk:!0}},{title:"2.6.1 固定布局",frontmatter:{},regularPath:"/frontend/css/layout/",relativePath:"frontend/css/layout/README.md",key:"v-eb7c69b6",path:"/frontend/css/layout/",headers:[{level:2,title:"2.6.1 固定布局",slug:"_2-6-1-固定布局",normalizedTitle:"2.6.1 固定布局",charIndex:2},{level:2,title:"2.6.2 流体布局",slug:"_2-6-2-流体布局",normalizedTitle:"2.6.2 流体布局",charIndex:332},{level:2,title:"2.6.3 浮动布局",slug:"_2-6-3-浮动布局",normalizedTitle:"2.6.3 浮动布局",charIndex:549},{level:2,title:"2.6.4 定位布局",slug:"_2-6-4-定位布局",normalizedTitle:"2.6.4 定位布局",charIndex:601},{level:2,title:"2.6.5 多列布局",slug:"_2-6-5-多列布局",normalizedTitle:"2.6.5 多列布局",charIndex:716},{level:2,title:"2.6.6 弹性布局(弹性伸缩布局)",slug:"_2-6-6-弹性布局-弹性伸缩布局",normalizedTitle:"2.6.6 弹性布局(弹性伸缩布局)",charIndex:1155},{level:2,title:"2.6.7 Grid 网格布局",slug:"_2-6-7-grid-网格布局",normalizedTitle:"2.6.7 grid 网格布局",charIndex:3788}],headersStr:"2.6.1 固定布局 2.6.2 流体布局 2.6.3 浮动布局 2.6.4 定位布局 2.6.5 多列布局 2.6.6 弹性布局(弹性伸缩布局) 2.6.7 Grid 网格布局",content:"# 2.6.1 固定布局\n\n# 优点：\n\n * 固定宽度布局更容易使用，在设计方面更容易定制。\n\n * 在所有浏览器中宽度一样,不设置min-width和max-width，来防止内容缩放引起的布局混乱。\n\n# 缺点：\n\n * 对于使用高分辨率的用户，固定宽度布局会留下很大的空白。\n\n * 屏幕分辨率过小时需要垂直滚动条。\n\nWARNING\n\n 1. 设置了固定宽度的外包裹，里面的各个模块也是固定宽度而非百分比。\n 2. 大多数设计者选择960或760px的固定宽度。960px最适合1024×768或者更高的分辨率，有一点空间设置margin。如果设计者想让布局适应800×600分辨率的用户，可以使 用760px的宽度，它仍然适用于更大的分辨率。\n\n\n# 2.6.2 流体布局\n\n流体布局，主体部分都是用了百分比宽度，因此可以自适应用户的分辨率。\n\n# 优点：\n\n * 流动布局页面对用户更友好，因为它能自适应用户的设置。\n\n * 页面周围的空白区域在所有分辨率和浏览器下都是相同的，在视觉上更美观。\n\n# 缺点：\n\n * 设计者更难控制用户所见，并可能忽略掉一些错误，因为在特定的分辨率下看起来好的。\n\n * 视频以及其他设置了宽度的内容可能需要多种宽度以适应不同分辨率的用户。\n\n\n# 2.6.3 浮动布局\n\n根据内容是固定尺寸还是百分比有可以划分为：流体浮动布局、固定浮动布局。\n\n\n# 2.6.4 定位布局\n\n根据内容是固定尺寸还是百分比有可以划分为：流体定位布局、固定定位布局。\n\n参照基准点：将父元素设为相对定位，且不设置坐标，如果父元素设置了相对定位，子元素的绝对定位将以父元素的基准点为参照基准点。\n\n\n# 2.6.5 多列布局\n\n多列属性（CSS3新增）:\n\ncolumns设置 column-width 和 column-count 的简写属性。\n\ncolumn-width规定列的宽度。(该宽度为缩放时的最小宽度，默认为auto)\n\ncolumn-count规定元素应该被分隔的列数。默认为auto\n\ncolumn-rule设置所有 column-rule-* 属性的简写属性。\n\ncolumn-rule-color规定列之间规则的颜色。\n\ncolumn-rule-style规定列之间规则的样式。\n\ncolumn-rule-width规定列之间规则的宽度。\n\ncolumn-span规定元素应该横跨的列数。默认值为1，可以设置为all\n\ncolumn-gap规定列之间的间隔。\n\ncolumn-fill规定如何填充列。 主流浏览器都不支持 column-fill 属性。\n\nTIP\n\n传统布局实现多列（3列及以上）布局的问题：实现起来麻烦，很不方便、后期维护更改困难。\n\n\n# 2.6.6 弹性布局(弹性伸缩布局)\n\n事实上它是一种新类型的盒子模型，也称作弹性伸缩盒布局。\n比较新的布局方式：旨在提供一个更加有效的方式来布置，对齐和分布在容器之间的各项内容，即使它们的大小是未知或者动态变化的。\n弹性布局的主要思想是让容器有能力来改变项目的宽度和高度，以填满可用空间（主要是为了容纳所有类型的显示设备和屏幕尺寸）的能力。\n\n# 优点：\n\n应用恰当的弹性布局对用户十分友好。页面中所有元素可以随着用户的偏好缩放。\n\n对于同时喜欢流动和定宽布局的设计师来说，弹性布局是完美的，因为前两种布局的优点在弹性布局中都能找到。\n\n# 缺点：\n\n需要花更多时间理解和测试，让布局适合所有用户。\n\n这种布局类型相对于其他两个更难制作\n\n# flex弹性布局属性(对父元素设置)\n\n最新版：\n\n> display：flex将对象作为弹性伸缩盒显示。\n> display：inline-flex将对象作为内联块级弹性伸缩盒显示。\n> \n> TIP\n> \n>  * 过渡版写法：flexbox，inline-flexbox\n>  * 老版本写法：box，inline-box\n> \n> WARNING\n> \n>  * float, clear and vertical-align 在flex项目中不起作用\n>  * css 多列（CSS columns）在弹性盒子中不起作用\n\n# flex-direction(用于父元素):设置子元素在父元素中的排列方式。\n\n> row（默认值）横向从左到右排列。\n> row-reverse反转横向从右到左排列。\n> column纵向排列。\n> column-reverse反转纵向排列，从后往前排，最后一项排在最上面。\n\n\n\n# flex-wrap(用于父元素) 设置子元素超出父元素后是否换行。\n\n> nowrap当子元素溢出父容器时不换行。\n> wrap当子元素溢出父容器时自动换行。\n> wrap-reverse当子元素溢出父容器时自动换行,方向同 wrap反转排列。\n\n\n\n# *flex-flow(用于父元素)复合属性: 可以同时设置 flex-direction/flex-wrap\n\n# justify-content(用于父元素) 设置子元素的水平对齐方式。\n\n> flex-start（默认值）弹性盒子元素将向行起始位置对齐。\n> flex-end弹性盒子元素将向行结束位置对齐。\n> center弹性盒子元素将向行中间位置对齐。\n> space-between弹性盒子元素会平均地分布在行里。\n> space-around弹性盒子元素会平均地分布在行里，两端保留子元素与子元素之间间距大小的一半。1:2:2:1\n\n\n\n# align-items(用于父元素) 设置子元素的垂直对齐方式（适用于子元素单行分布）。\n\n> flex-start弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。\n> flex-end弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。\n> center弹性盒子元素在该行的侧轴（纵轴）上居中放置。\n> baseline如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。\n> stretch（默认值）如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。\n\n\n\n# align-self:(用于子元素)设置子元素自身在侧轴方向上的对齐方式。\n\n> auto如果'align-self'的值为'auto'，则其计算值为元素的父元素的'align-items'值，如果其没有父元素，则计算值为 stretch。\n> flex-start弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。\n> flex-end弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。\n> center弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。\n> baseline如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。\n> stretch如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸。\n\n\n\n# align-content:(用于父元素) 设置子元素的垂直对齐方式（适用于子元素多行分布）。\n\n> flex-start各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行。\n> flex-end各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行。\n> center各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第最后一行之间的距离相等。\n> space-between各行在弹性盒容器中平均分布。\n> space-around各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。\n> stretch（默认值）各行将会伸展以占用剩余的空间。\n\n\n\n# order(适用于弹性盒模型容器子元素) 用整数值来定义排列顺序，数值小的排在前面。可以为负值。\n\n\n\n# flex(适用于弹性盒模型子元素) 复合属性。设置或检索伸缩盒对象的子元素如何分配空间。\n\n>  * none：none关键字的计算值为: 0 0 auto（默认）\n\n# flex-grow(适用于弹性盒模型容器子元素) 根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间。\n\n\n\n# flex-shrink(适用于弹性盒模型容器子元素) 设置或检索弹性盒伸缩基准值，所设置的收缩因子作为比率来收缩空间。）\n\n\n\n# flex-basis(适用于弹性盒模型容器子元素)\n\n> auto无特定宽度值，取决于其它属性值\n> 用长度值/百分比来定义宽度。不允许负值\n\n\n# 2.6.7 Grid 网格布局\n\n阮一峰CSS Grid 网格布局教程\n\nTIP\n\n注：主轴与侧轴的概念\n\n主轴就是弹性盒子子元素沿着排列的轴；与主轴垂直的轴称为侧轴。\n\nrow ,则主轴是水平方向，侧轴是垂直方向。\n\ncolumn,则主轴是垂直方向，侧轴是水平方向。\n\n注：基线、底线、定线、中线\n\n",normalizedContent:"# 2.6.1 固定布局\n\n# 优点：\n\n * 固定宽度布局更容易使用，在设计方面更容易定制。\n\n * 在所有浏览器中宽度一样,不设置min-width和max-width，来防止内容缩放引起的布局混乱。\n\n# 缺点：\n\n * 对于使用高分辨率的用户，固定宽度布局会留下很大的空白。\n\n * 屏幕分辨率过小时需要垂直滚动条。\n\nwarning\n\n 1. 设置了固定宽度的外包裹，里面的各个模块也是固定宽度而非百分比。\n 2. 大多数设计者选择960或760px的固定宽度。960px最适合1024×768或者更高的分辨率，有一点空间设置margin。如果设计者想让布局适应800×600分辨率的用户，可以使 用760px的宽度，它仍然适用于更大的分辨率。\n\n\n# 2.6.2 流体布局\n\n流体布局，主体部分都是用了百分比宽度，因此可以自适应用户的分辨率。\n\n# 优点：\n\n * 流动布局页面对用户更友好，因为它能自适应用户的设置。\n\n * 页面周围的空白区域在所有分辨率和浏览器下都是相同的，在视觉上更美观。\n\n# 缺点：\n\n * 设计者更难控制用户所见，并可能忽略掉一些错误，因为在特定的分辨率下看起来好的。\n\n * 视频以及其他设置了宽度的内容可能需要多种宽度以适应不同分辨率的用户。\n\n\n# 2.6.3 浮动布局\n\n根据内容是固定尺寸还是百分比有可以划分为：流体浮动布局、固定浮动布局。\n\n\n# 2.6.4 定位布局\n\n根据内容是固定尺寸还是百分比有可以划分为：流体定位布局、固定定位布局。\n\n参照基准点：将父元素设为相对定位，且不设置坐标，如果父元素设置了相对定位，子元素的绝对定位将以父元素的基准点为参照基准点。\n\n\n# 2.6.5 多列布局\n\n多列属性（css3新增）:\n\ncolumns设置 column-width 和 column-count 的简写属性。\n\ncolumn-width规定列的宽度。(该宽度为缩放时的最小宽度，默认为auto)\n\ncolumn-count规定元素应该被分隔的列数。默认为auto\n\ncolumn-rule设置所有 column-rule-* 属性的简写属性。\n\ncolumn-rule-color规定列之间规则的颜色。\n\ncolumn-rule-style规定列之间规则的样式。\n\ncolumn-rule-width规定列之间规则的宽度。\n\ncolumn-span规定元素应该横跨的列数。默认值为1，可以设置为all\n\ncolumn-gap规定列之间的间隔。\n\ncolumn-fill规定如何填充列。 主流浏览器都不支持 column-fill 属性。\n\ntip\n\n传统布局实现多列（3列及以上）布局的问题：实现起来麻烦，很不方便、后期维护更改困难。\n\n\n# 2.6.6 弹性布局(弹性伸缩布局)\n\n事实上它是一种新类型的盒子模型，也称作弹性伸缩盒布局。\n比较新的布局方式：旨在提供一个更加有效的方式来布置，对齐和分布在容器之间的各项内容，即使它们的大小是未知或者动态变化的。\n弹性布局的主要思想是让容器有能力来改变项目的宽度和高度，以填满可用空间（主要是为了容纳所有类型的显示设备和屏幕尺寸）的能力。\n\n# 优点：\n\n应用恰当的弹性布局对用户十分友好。页面中所有元素可以随着用户的偏好缩放。\n\n对于同时喜欢流动和定宽布局的设计师来说，弹性布局是完美的，因为前两种布局的优点在弹性布局中都能找到。\n\n# 缺点：\n\n需要花更多时间理解和测试，让布局适合所有用户。\n\n这种布局类型相对于其他两个更难制作\n\n# flex弹性布局属性(对父元素设置)\n\n最新版：\n\n> display：flex将对象作为弹性伸缩盒显示。\n> display：inline-flex将对象作为内联块级弹性伸缩盒显示。\n> \n> tip\n> \n>  * 过渡版写法：flexbox，inline-flexbox\n>  * 老版本写法：box，inline-box\n> \n> warning\n> \n>  * float, clear and vertical-align 在flex项目中不起作用\n>  * css 多列（css columns）在弹性盒子中不起作用\n\n# flex-direction(用于父元素):设置子元素在父元素中的排列方式。\n\n> row（默认值）横向从左到右排列。\n> row-reverse反转横向从右到左排列。\n> column纵向排列。\n> column-reverse反转纵向排列，从后往前排，最后一项排在最上面。\n\n\n\n# flex-wrap(用于父元素) 设置子元素超出父元素后是否换行。\n\n> nowrap当子元素溢出父容器时不换行。\n> wrap当子元素溢出父容器时自动换行。\n> wrap-reverse当子元素溢出父容器时自动换行,方向同 wrap反转排列。\n\n\n\n# *flex-flow(用于父元素)复合属性: 可以同时设置 flex-direction/flex-wrap\n\n# justify-content(用于父元素) 设置子元素的水平对齐方式。\n\n> flex-start（默认值）弹性盒子元素将向行起始位置对齐。\n> flex-end弹性盒子元素将向行结束位置对齐。\n> center弹性盒子元素将向行中间位置对齐。\n> space-between弹性盒子元素会平均地分布在行里。\n> space-around弹性盒子元素会平均地分布在行里，两端保留子元素与子元素之间间距大小的一半。1:2:2:1\n\n\n\n# align-items(用于父元素) 设置子元素的垂直对齐方式（适用于子元素单行分布）。\n\n> flex-start弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。\n> flex-end弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。\n> center弹性盒子元素在该行的侧轴（纵轴）上居中放置。\n> baseline如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。\n> stretch（默认值）如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。\n\n\n\n# align-self:(用于子元素)设置子元素自身在侧轴方向上的对齐方式。\n\n> auto如果'align-self'的值为'auto'，则其计算值为元素的父元素的'align-items'值，如果其没有父元素，则计算值为 stretch。\n> flex-start弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。\n> flex-end弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。\n> center弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。\n> baseline如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。\n> stretch如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸。\n\n\n\n# align-content:(用于父元素) 设置子元素的垂直对齐方式（适用于子元素多行分布）。\n\n> flex-start各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行。\n> flex-end各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行。\n> center各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第最后一行之间的距离相等。\n> space-between各行在弹性盒容器中平均分布。\n> space-around各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。\n> stretch（默认值）各行将会伸展以占用剩余的空间。\n\n\n\n# order(适用于弹性盒模型容器子元素) 用整数值来定义排列顺序，数值小的排在前面。可以为负值。\n\n\n\n# flex(适用于弹性盒模型子元素) 复合属性。设置或检索伸缩盒对象的子元素如何分配空间。\n\n>  * none：none关键字的计算值为: 0 0 auto（默认）\n\n# flex-grow(适用于弹性盒模型容器子元素) 根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间。\n\n\n\n# flex-shrink(适用于弹性盒模型容器子元素) 设置或检索弹性盒伸缩基准值，所设置的收缩因子作为比率来收缩空间。）\n\n\n\n# flex-basis(适用于弹性盒模型容器子元素)\n\n> auto无特定宽度值，取决于其它属性值\n> 用长度值/百分比来定义宽度。不允许负值\n\n\n# 2.6.7 grid 网格布局\n\n阮一峰css grid 网格布局教程\n\ntip\n\n注：主轴与侧轴的概念\n\n主轴就是弹性盒子子元素沿着排列的轴；与主轴垂直的轴称为侧轴。\n\nrow ,则主轴是水平方向，侧轴是垂直方向。\n\ncolumn,则主轴是垂直方向，侧轴是水平方向。\n\n注：基线、底线、定线、中线\n\n",charsets:{cjk:!0}},{title:"CSS函数",frontmatter:{},regularPath:"/frontend/css/function/",relativePath:"frontend/css/function/README.md",key:"v-461f2189",path:"/frontend/css/function/",headers:[{level:2,title:"CSS函数",slug:"css函数",normalizedTitle:"css函数",charIndex:2},{level:2,title:"LESS",slug:"less",normalizedTitle:"less",charIndex:540},{level:2,title:"SCSS(SASS)",slug:"scss-sass",normalizedTitle:"scss(sass)",charIndex:1865}],headersStr:"CSS函数 LESS SCSS(SASS)",content:'# CSS函数\n\n# attr\n\nattr返回选择元素的属性值。\n\na:after {content: " (" attr(href) ")";}\n\n\n# calc\n\ncalc动态计算属性值。支持 +、-、*、/运算符,采用标准数学运算优先级规则\n\ndiv {\n    width: calc(100% - 100px);\n    width: calc(100vh/3 - 100px);\n}\n\n\nWARNING\n\n需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；\n\n# var\n\nvar插入自定义的属性值。属性名必须以--开头\n\n:root {\n  --main-bg-color: coral;\n}\n \n#div1 {\n  background-color: var(--main-bg-color);\n}\n \n#div2 {\n  background-color: var(--main-bg-color);\n}\n\n\n# rgb\n\nrgb使用rgb模式设置颜色\n\n# rgba\n\nrgba使用rgba模式设置颜色\n\n# hsl\n\nhsl使用HSL模式设置颜色\n\n# hsla\n\nhsla使用HSLA模式设置颜色\n\n\n# LESS\n\n# 导入\n\n@import "library.less";\n\n\n# 变量\n\n@width: 10px;\n@height: @width + 10px;\n\n#header {\n  width: @width;\n  height: @height;\n}\n\n\n# 混入\n\n.public {\n  border-top: dotted 1px black;\n  border-bottom: solid 2px black;\n  button{\n     background-color: grey;\n  }\n}\n\n#menu a {\n  color: #111;\n  .public();\n}\n\n#nav a {\n  color: red;\n  .public().button(); /* 还可以写成 .public > .button() */\n}\n\n\n# 映射\n\n#colors() {\n  primary: blue;\n  secondary: green;\n}\n\n.button {\n  color: #colors[primary];\n  border: 1px solid #colors[secondary];\n}\n\n\n# 嵌套\n\n#header {\n  color: black;\n  .logo {\n    width: 300px;\n  }\n  &:after {\n    content: "";\n  }\n}\n\n\n# 规则嵌套和冒泡\n\n外层规则会放在前面\n\n.component {\n  width: 300px;\n  @media (min-width: 768px) {\n    width: 600px;\n    @media  (min-resolution: 192dpi) {\n      background-image: url(/img/retina2x.png);\n    }\n  }\n  @media (min-width: 1280px) {\n    width: 800px;\n  }\n}\n\n\n# 运算\n\n@base: calc(~"100vh - 50px");\n\n@var: 50vh/2;\ndiv {\n    width: calc(@var ~\'- 5px\'); /* less语法下calc的特殊清空 */\n}\n\n\n\nWARNING\n\nless语法在加减运算时会进行单位转换。因此在使用calc属性时需要使用转义~进行特殊处理。\n\n# 函数\n\n * percentage:\n\n@base: #f04615;\n@width: 0.5;\n\n.class {\n  width: percentage(@width); // 0.5转换城50%\n  color: saturate(@base, 5%); // 饱和度增加5%\n}\n\n\n# 作用域\n\n如果当前作用域找不到，则从父级查找，同时支持预编译可以先引用后定义。\n\n@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}\n\n\n\n# SCSS(SASS)\n\n# 导入\n\n@import "library.scss";\n\n\n# 变量\n\n$width: 10px;\n$height: @width + 10px;\n\n#header {\n  width: $width;\n  height: $height;\n}\n\n$side : left;\n// 字符串嵌套 #{}\n.rounded {\n    border-#{$side}-radius: 5px;\n}\n\n\n# 嵌套与属性嵌套\n\n#header {\n  color: black;\n  .logo {\n    width: 300px;\n  }\n  &:after {\n    content: "";\n  }\n//  属性的嵌套\n  border: {\n    color: red;\n  }\n}\n\n\n# 运算\n\n\n@var: 50vh/2;\nbody {\n    margin: (14px/2);\n    top: 50px + 100px;\n    right: $var * 10%;\n}\n\n\n# 继承@extend\n\n.class1 {\n    border: 1px solid #ddd;\n}\n.class2 {\n    @extend .class1;\n    font-size:120%;\n}\n\n\n# 混入@mixin\n\n@mixin left {\n    float: left;\n    margin-left: 10px;\n}\n\ndiv {\n  @include left;\n}\n\n\n * 指定参数和缺省值\n\n@mixin left($value: 10px) {\n    float: left;\n    margin-right: $value;\n}\n\ndiv {\n    @include left(20px);\n}\n\n\n# 颜色函数\n\n  lighten(#cc3, 10%) // #d6d65c\n  darken(#cc3, 10%) // #a3a329\n  grayscale(#cc3) // #808080\n  complement(#cc3) // #33c\n\n\n# 控制语句\n\n * @if\n\n@if lightness($color) > 30% {\n  background-color: #000;\n} @else {\n  background-color: #fff;\n}\n\n\n * @for\n\n@for $i from 1 to 10 {\n  .border-#{$i} {\n    border: #{$i}px solid blue;\n  }\n}\n\n\n * @while\n\n$i: 6;\n\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n\n\n * @each\n\n@each $member in a, b, c, d {\n  .#{$member} {\n    background-image: url("/image/#{$member}.jpg");\n  }\n}\n\n\n# 自定义函数\n\n@function double($n) {\n  @return $n * 2;\n}\n#sidebar {\n    width: double(5px);\n}\n',normalizedContent:'# css函数\n\n# attr\n\nattr返回选择元素的属性值。\n\na:after {content: " (" attr(href) ")";}\n\n\n# calc\n\ncalc动态计算属性值。支持 +、-、*、/运算符,采用标准数学运算优先级规则\n\ndiv {\n    width: calc(100% - 100px);\n    width: calc(100vh/3 - 100px);\n}\n\n\nwarning\n\n需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；\n\n# var\n\nvar插入自定义的属性值。属性名必须以--开头\n\n:root {\n  --main-bg-color: coral;\n}\n \n#div1 {\n  background-color: var(--main-bg-color);\n}\n \n#div2 {\n  background-color: var(--main-bg-color);\n}\n\n\n# rgb\n\nrgb使用rgb模式设置颜色\n\n# rgba\n\nrgba使用rgba模式设置颜色\n\n# hsl\n\nhsl使用hsl模式设置颜色\n\n# hsla\n\nhsla使用hsla模式设置颜色\n\n\n# less\n\n# 导入\n\n@import "library.less";\n\n\n# 变量\n\n@width: 10px;\n@height: @width + 10px;\n\n#header {\n  width: @width;\n  height: @height;\n}\n\n\n# 混入\n\n.public {\n  border-top: dotted 1px black;\n  border-bottom: solid 2px black;\n  button{\n     background-color: grey;\n  }\n}\n\n#menu a {\n  color: #111;\n  .public();\n}\n\n#nav a {\n  color: red;\n  .public().button(); /* 还可以写成 .public > .button() */\n}\n\n\n# 映射\n\n#colors() {\n  primary: blue;\n  secondary: green;\n}\n\n.button {\n  color: #colors[primary];\n  border: 1px solid #colors[secondary];\n}\n\n\n# 嵌套\n\n#header {\n  color: black;\n  .logo {\n    width: 300px;\n  }\n  &:after {\n    content: "";\n  }\n}\n\n\n# 规则嵌套和冒泡\n\n外层规则会放在前面\n\n.component {\n  width: 300px;\n  @media (min-width: 768px) {\n    width: 600px;\n    @media  (min-resolution: 192dpi) {\n      background-image: url(/img/retina2x.png);\n    }\n  }\n  @media (min-width: 1280px) {\n    width: 800px;\n  }\n}\n\n\n# 运算\n\n@base: calc(~"100vh - 50px");\n\n@var: 50vh/2;\ndiv {\n    width: calc(@var ~\'- 5px\'); /* less语法下calc的特殊清空 */\n}\n\n\n\nwarning\n\nless语法在加减运算时会进行单位转换。因此在使用calc属性时需要使用转义~进行特殊处理。\n\n# 函数\n\n * percentage:\n\n@base: #f04615;\n@width: 0.5;\n\n.class {\n  width: percentage(@width); // 0.5转换城50%\n  color: saturate(@base, 5%); // 饱和度增加5%\n}\n\n\n# 作用域\n\n如果当前作用域找不到，则从父级查找，同时支持预编译可以先引用后定义。\n\n@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}\n\n\n\n# scss(sass)\n\n# 导入\n\n@import "library.scss";\n\n\n# 变量\n\n$width: 10px;\n$height: @width + 10px;\n\n#header {\n  width: $width;\n  height: $height;\n}\n\n$side : left;\n// 字符串嵌套 #{}\n.rounded {\n    border-#{$side}-radius: 5px;\n}\n\n\n# 嵌套与属性嵌套\n\n#header {\n  color: black;\n  .logo {\n    width: 300px;\n  }\n  &:after {\n    content: "";\n  }\n//  属性的嵌套\n  border: {\n    color: red;\n  }\n}\n\n\n# 运算\n\n\n@var: 50vh/2;\nbody {\n    margin: (14px/2);\n    top: 50px + 100px;\n    right: $var * 10%;\n}\n\n\n# 继承@extend\n\n.class1 {\n    border: 1px solid #ddd;\n}\n.class2 {\n    @extend .class1;\n    font-size:120%;\n}\n\n\n# 混入@mixin\n\n@mixin left {\n    float: left;\n    margin-left: 10px;\n}\n\ndiv {\n  @include left;\n}\n\n\n * 指定参数和缺省值\n\n@mixin left($value: 10px) {\n    float: left;\n    margin-right: $value;\n}\n\ndiv {\n    @include left(20px);\n}\n\n\n# 颜色函数\n\n  lighten(#cc3, 10%) // #d6d65c\n  darken(#cc3, 10%) // #a3a329\n  grayscale(#cc3) // #808080\n  complement(#cc3) // #33c\n\n\n# 控制语句\n\n * @if\n\n@if lightness($color) > 30% {\n  background-color: #000;\n} @else {\n  background-color: #fff;\n}\n\n\n * @for\n\n@for $i from 1 to 10 {\n  .border-#{$i} {\n    border: #{$i}px solid blue;\n  }\n}\n\n\n * @while\n\n$i: 6;\n\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n\n\n * @each\n\n@each $member in a, b, c, d {\n  .#{$member} {\n    background-image: url("/image/#{$member}.jpg");\n  }\n}\n\n\n# 自定义函数\n\n@function double($n) {\n  @return $n * 2;\n}\n#sidebar {\n    width: double(5px);\n}\n',charsets:{cjk:!0}},{title:"2.5.1CSS定位",frontmatter:{},regularPath:"/frontend/css/location/",relativePath:"frontend/css/location/README.md",key:"v-3afc15e2",path:"/frontend/css/location/",headers:[{level:2,title:"2.5.1CSS定位",slug:"_2-5-1css定位",normalizedTitle:"2.5.1css定位",charIndex:2}],headersStr:"2.5.1CSS定位",content:'# 2.5.1CSS定位\n\nCSS 定位属性允许对元素进行定位改变其在页面的位置。\n\nCSS 有三种基本的定位机制：普通流、浮动、相对定位和绝对定位。\n\n# 元素定位的属性：\n\nposition:把元素放置到一个静态的、相对的、绝对的、或固定的位置中：\n\n> static:（默认值）普通流。\n\n> absolute:绝对定位， (相对与最接近的一个有绝对定位设置的父级对象进行绝对定位，如果对象的父元素没有设置定位属性，则依据 body 对象左上角作为参考进行定位)。\n\n> relative:相对定位，相对于其正常位置进行定位。\n\n> fixed:绝对定位，相对于浏览器窗口进行定位。\n\n> sticky:粘性定位，relative与fixed的结合，在滚动事件中，当滚动到顶部时，会有fixed的效果。常用与吸顶效果。\n\nsticky粘性定位生效条件\n\n父元素不能overflow:hidden或者overflow:auto属性\n必须指定top、bottom、left、right4个值之一，否则只会处于相对定位\n父元素的高度不能低于sticky元素的高度\nsticky元素仅在其父元素内生效\n\n# 属性值：\n\n> top:元素的上外边距与其包含块上边界之间的偏移。\n> right:元素的右外边距与其包含块上边界之间的偏移。\n> bottom:元素的下外边距与其包含块上边界之间的偏移。\n> left:元素的左外边距与其包含块上边界之间的偏移。\n\nclip:设置元素的形状,目前裁切形状只有矩形可以使用。\n\n> clip: rect(top, right, bottom, left);\n> \n> \n> rect()需要设置四个值：top, right, bottom和left。他们之间需要用逗号隔开，而且rect()属性值和margin、padding一样的标准，遵循顺时针旋转的规则。auto（默认值）clip设置auto值和没有进行剪切是一样的效果;\n> \n> WARNING\n> \n> clip属性只能在元素设置了“position:absolute”或者“position:fixed”属性起作用。\n\nvertical-align:设置元素的垂直对齐方式：（对块元素无效，块元素用margin）\n\n> baseline:（默认）元素放置在父元素的基线上。\n> top:把元素的顶端与行中最高元素的顶端对齐。\n> middle:把此元素放置在父元素的中部。\n> bottom:把元素的顶端与行中最低的元素的顶端对齐。\n> text-top:把元素的顶端与父元素字体的顶端对齐。\n> text-bottom:把元素的底端与父元素字体的底端对齐。\n> sub:垂直对齐文本的下标。\n> super:垂直对齐文本的上标。\n\nz-index:设置元素堆叠顺序-1 0 1 2 3 根据大小一次叠加，数值一样，后来居上。\n\n> WARNING\n> \n>  1. 只作用在被定位了的元素上\n>  2. 同一个父元素下的元素的层叠效果会受父元素的z-index影响,如果父元素的z-index值很小,那么子元素的z-index值很大也不起作用\n\nfloat 定义元素在哪个方向浮动：\n\n> left:元素向左浮动。\n> left:元素向左浮动。\n> none:（默认值）元素不浮动，并会显示在其在文本中出现的位置。\n\n# 各定位机制的区别：\n\n# 普通流：\n\n * 块级元素从上至下、行内元素从左至右一次排列。\n\n# 浮动：\n\n * 脱离标准流，不占位置，会影响标准流\n * 子盒子浮动，不会压住父盒子的padding和margin\n * 浮动元素改变元素的模式，无论行内元素还是块元素，设置浮动后都具有行内块元素特性，浮动的元素可以设置宽高，不设置则内容撑开。\n\nTIP\n\n浮动的清除的方法（父元素坍塌）：\n\n * clear:both/left/right/none\n * overflow:hidden;（通过BFC方式）\n * E:after{content: "";display: block;clear: both;}\n * 双伪元素\n\n# 相对定位：\n\n * 相对定位对象会占据它原来位置\n * 相对定位对象不可以层叠\n\n# 绝对定位：\n\n * 绝对定位对象不会占据它原来位置\n * 绝对定位对象可以层叠\n\nTIP\n\n * 常用定位模式：子绝、父相对；\n\n * 居中：父的一半减去自己的一半：\n\n * \n\ndiv{\n    left:50%;\n    top:50%;\n    transform:translate(-50%.-50%);\n    /*或*/\n    margin-left:width/2;  /*宽度的一半*/\n    margin-top:height/2;  /*高度的一半*/\n}\n',normalizedContent:'# 2.5.1css定位\n\ncss 定位属性允许对元素进行定位改变其在页面的位置。\n\ncss 有三种基本的定位机制：普通流、浮动、相对定位和绝对定位。\n\n# 元素定位的属性：\n\nposition:把元素放置到一个静态的、相对的、绝对的、或固定的位置中：\n\n> static:（默认值）普通流。\n\n> absolute:绝对定位， (相对与最接近的一个有绝对定位设置的父级对象进行绝对定位，如果对象的父元素没有设置定位属性，则依据 body 对象左上角作为参考进行定位)。\n\n> relative:相对定位，相对于其正常位置进行定位。\n\n> fixed:绝对定位，相对于浏览器窗口进行定位。\n\n> sticky:粘性定位，relative与fixed的结合，在滚动事件中，当滚动到顶部时，会有fixed的效果。常用与吸顶效果。\n\nsticky粘性定位生效条件\n\n父元素不能overflow:hidden或者overflow:auto属性\n必须指定top、bottom、left、right4个值之一，否则只会处于相对定位\n父元素的高度不能低于sticky元素的高度\nsticky元素仅在其父元素内生效\n\n# 属性值：\n\n> top:元素的上外边距与其包含块上边界之间的偏移。\n> right:元素的右外边距与其包含块上边界之间的偏移。\n> bottom:元素的下外边距与其包含块上边界之间的偏移。\n> left:元素的左外边距与其包含块上边界之间的偏移。\n\nclip:设置元素的形状,目前裁切形状只有矩形可以使用。\n\n> clip: rect(top, right, bottom, left);\n> \n> \n> rect()需要设置四个值：top, right, bottom和left。他们之间需要用逗号隔开，而且rect()属性值和margin、padding一样的标准，遵循顺时针旋转的规则。auto（默认值）clip设置auto值和没有进行剪切是一样的效果;\n> \n> warning\n> \n> clip属性只能在元素设置了“position:absolute”或者“position:fixed”属性起作用。\n\nvertical-align:设置元素的垂直对齐方式：（对块元素无效，块元素用margin）\n\n> baseline:（默认）元素放置在父元素的基线上。\n> top:把元素的顶端与行中最高元素的顶端对齐。\n> middle:把此元素放置在父元素的中部。\n> bottom:把元素的顶端与行中最低的元素的顶端对齐。\n> text-top:把元素的顶端与父元素字体的顶端对齐。\n> text-bottom:把元素的底端与父元素字体的底端对齐。\n> sub:垂直对齐文本的下标。\n> super:垂直对齐文本的上标。\n\nz-index:设置元素堆叠顺序-1 0 1 2 3 根据大小一次叠加，数值一样，后来居上。\n\n> warning\n> \n>  1. 只作用在被定位了的元素上\n>  2. 同一个父元素下的元素的层叠效果会受父元素的z-index影响,如果父元素的z-index值很小,那么子元素的z-index值很大也不起作用\n\nfloat 定义元素在哪个方向浮动：\n\n> left:元素向左浮动。\n> left:元素向左浮动。\n> none:（默认值）元素不浮动，并会显示在其在文本中出现的位置。\n\n# 各定位机制的区别：\n\n# 普通流：\n\n * 块级元素从上至下、行内元素从左至右一次排列。\n\n# 浮动：\n\n * 脱离标准流，不占位置，会影响标准流\n * 子盒子浮动，不会压住父盒子的padding和margin\n * 浮动元素改变元素的模式，无论行内元素还是块元素，设置浮动后都具有行内块元素特性，浮动的元素可以设置宽高，不设置则内容撑开。\n\ntip\n\n浮动的清除的方法（父元素坍塌）：\n\n * clear:both/left/right/none\n * overflow:hidden;（通过bfc方式）\n * e:after{content: "";display: block;clear: both;}\n * 双伪元素\n\n# 相对定位：\n\n * 相对定位对象会占据它原来位置\n * 相对定位对象不可以层叠\n\n# 绝对定位：\n\n * 绝对定位对象不会占据它原来位置\n * 绝对定位对象可以层叠\n\ntip\n\n * 常用定位模式：子绝、父相对；\n\n * 居中：父的一半减去自己的一半：\n\n * \n\ndiv{\n    left:50%;\n    top:50%;\n    transform:translate(-50%.-50%);\n    /*或*/\n    margin-left:width/2;  /*宽度的一半*/\n    margin-top:height/2;  /*高度的一半*/\n}\n',charsets:{cjk:!0}},{title:"通用属性",frontmatter:{},regularPath:"/frontend/html/attribute/",relativePath:"frontend/html/attribute/README.md",key:"v-76f9c94a",path:"/frontend/html/attribute/",headers:[{level:2,title:"通用属性",slug:"通用属性",normalizedTitle:"通用属性",charIndex:2},{level:3,title:"id",slug:"id",normalizedTitle:"id",charIndex:11},{level:3,title:"class",slug:"class",normalizedTitle:"class",charIndex:91},{level:3,title:"style",slug:"style",normalizedTitle:"style",charIndex:177},{level:3,title:"title",slug:"title",normalizedTitle:"title",charIndex:219},{level:3,title:"dir",slug:"dir",normalizedTitle:"dir",charIndex:286},{level:3,title:"lang",slug:"lang",normalizedTitle:"lang",charIndex:328},{level:3,title:"accesskey",slug:"accesskey",normalizedTitle:"accesskey",charIndex:407},{level:3,title:"tabindex",slug:"tabindex",normalizedTitle:"tabindex",charIndex:428},{level:3,title:"draggable",slug:"draggable",normalizedTitle:"draggable",charIndex:449},{level:3,title:"contenteditable",slug:"contenteditable",normalizedTitle:"contenteditable",charIndex:469},{level:3,title:"hidden",slug:"hidden",normalizedTitle:"hidden",charIndex:499},{level:3,title:"spellchcheck",slug:"spellchcheck",normalizedTitle:"spellchcheck",charIndex:516},{level:3,title:"contextmenu",slug:"contextmenu",normalizedTitle:"contextmenu",charIndex:539},{level:3,title:"data-",slug:"data",normalizedTitle:"data-",charIndex:563}],headersStr:"通用属性 id class style title dir lang accesskey tabindex draggable contenteditable hidden spellchcheck contextmenu data-",content:'# 通用属性\n\n\n# id\n\nid属性用于指定元素的识别名称，相当于一个人的身份证，是唯一的，同一个文档中不能有重复的id；一般配合CSS和JavaScript来选择元素。\n\n\n# class\n\nclass属性用于指定元素的类别名称，可以使用class元素给同一个文档中的多个元素进行归类，CSS就可以通过class个同一类元素设置统一的样式。\n\n\n# style\n\nstlyle属性用于给元素设定样式（内联样式或内部样式表）。\n\n\n# title\n\ntitle属性用于显示省略的内容（或补充/提示说明的内容）：当光标移动到元素内容上时显示title里的内容.。\n\n\n# dir\n\ndir属性用于设定元素标签内容的文字方向.与bdo元素共同作用。\n\n\n# lang\n\nlang属性用于指定语言，比如中文还是英文：zh-cn/en;除了在html标签中设置，它还可以在特定元素中使用，改变该元素使用的语言。\n\n\n# accesskey\n\n元素快捷键\n\n\n# tabindex\n\n元素移动顺序\n\n\n# draggable\n\n元素拖动\n\n\n# contenteditable\n\n元素是否允许编辑\n\n\n# hidden\n\n隐藏元素\n\n\n# spellchcheck\n\n元素检查\n\n\n# contextmenu\n\n元素快捷菜单\n\n\n# data-\n\n自定义属性\n\n<div data-自定义属性名="属性值">\n\n\n.data("属性名")\n\n\nWARNING\n\n 1. name和id属性：属性值必须是大小写英文字母开头；其余部分可以包含字母、数字、下划线、点等符号；属性值是区分大小写的\n\n 2. 属性值为数值时，必须输入正整数，不可谓0\n\n 3. width,height是属性值：如果设置为正整数时，单位默认为px（像素），不需要加上单位；但是在style中必须注明单位，否则会出错',normalizedContent:'# 通用属性\n\n\n# id\n\nid属性用于指定元素的识别名称，相当于一个人的身份证，是唯一的，同一个文档中不能有重复的id；一般配合css和javascript来选择元素。\n\n\n# class\n\nclass属性用于指定元素的类别名称，可以使用class元素给同一个文档中的多个元素进行归类，css就可以通过class个同一类元素设置统一的样式。\n\n\n# style\n\nstlyle属性用于给元素设定样式（内联样式或内部样式表）。\n\n\n# title\n\ntitle属性用于显示省略的内容（或补充/提示说明的内容）：当光标移动到元素内容上时显示title里的内容.。\n\n\n# dir\n\ndir属性用于设定元素标签内容的文字方向.与bdo元素共同作用。\n\n\n# lang\n\nlang属性用于指定语言，比如中文还是英文：zh-cn/en;除了在html标签中设置，它还可以在特定元素中使用，改变该元素使用的语言。\n\n\n# accesskey\n\n元素快捷键\n\n\n# tabindex\n\n元素移动顺序\n\n\n# draggable\n\n元素拖动\n\n\n# contenteditable\n\n元素是否允许编辑\n\n\n# hidden\n\n隐藏元素\n\n\n# spellchcheck\n\n元素检查\n\n\n# contextmenu\n\n元素快捷菜单\n\n\n# data-\n\n自定义属性\n\n<div data-自定义属性名="属性值">\n\n\n.data("属性名")\n\n\nwarning\n\n 1. name和id属性：属性值必须是大小写英文字母开头；其余部分可以包含字母、数字、下划线、点等符号；属性值是区分大小写的\n\n 2. 属性值为数值时，必须输入正整数，不可谓0\n\n 3. width,height是属性值：如果设置为正整数时，单位默认为px（像素），不需要加上单位；但是在style中必须注明单位，否则会出错',charsets:{cjk:!0}},{title:"2.2.1常用选择器",frontmatter:{},regularPath:"/frontend/css/selector/",relativePath:"frontend/css/selector/README.md",key:"v-70307f3b",path:"/frontend/css/selector/",headers:[{level:2,title:"2.2.1常用选择器",slug:"_2-2-1常用选择器",normalizedTitle:"2.2.1常用选择器",charIndex:2},{level:2,title:"2.2.2属性选择器",slug:"_2-2-2属性选择器",normalizedTitle:"2.2.2属性选择器",charIndex:82},{level:2,title:"2.2.3关系选择器",slug:"_2-2-3关系选择器",normalizedTitle:"2.2.3关系选择器",charIndex:658},{level:2,title:"2.2.4伪元素选择器",slug:"_2-2-4伪元素选择器",normalizedTitle:"2.2.4伪元素选择器",charIndex:994},{level:2,title:"2.2.5伪类选择器结构伪类选择器",slug:"_2-2-5伪类选择器结构伪类选择器",normalizedTitle:"2.2.5伪类选择器结构伪类选择器",charIndex:1275},{level:2,title:"2.2.6UI伪类及其他选择器",slug:"_2-2-6ui伪类及其他选择器",normalizedTitle:"2.2.6ui伪类及其他选择器",charIndex:1774},{level:2,title:"2.2.7 深度选择器",slug:"_2-2-7-深度选择器",normalizedTitle:"2.2.7 深度选择器",charIndex:2207}],headersStr:"2.2.1常用选择器 2.2.2属性选择器 2.2.3关系选择器 2.2.4伪元素选择器 2.2.5伪类选择器结构伪类选择器 2.2.6UI伪类及其他选择器 2.2.7 深度选择器",content:'# 2.2.1常用选择器\n\n 1. 通用选择器：*\n\n 2. 元素选择器：p/div...\n\n 3. id选择器：#id\n\n 4. 类选择器：.class\n\n\n# 2.2.2属性选择器\n\n * E[att] :选择具有att属性的E元素。需要选择有某个属性的元素，而不论属性值是什么，可以使用简单属性选择器。可以根据多个属性进行选择，只需将属性选择器链接在一起即可。\n\nimg[alt]{}\n\n\n * E[att="val"]：选择具有att属性且属性值等于val的E元素。进一步缩小选择范围，（只选择有特定属性值的元素。）\n\ninput[type="text"]{}\n\n\n * E[att~="val"]:选择具有att属性且属性值有多个，其中一个的值等于val的E元素。\n\ndiv[class~="a"]{}\n\n\n * E[att|="val"]:选择具有att属性且属性值为以val开头并用连接符"-"分隔的字符串的E元素。\n\ndiv[class|="a"]{}\n\n\n * E[att^="val"]:选择具有att属性且属性值为以val开头的字符串的E元素。\n\ndiv[class^="a"]{}\n\n\n * E[att$="val"]:选择具有att属性且属性值为以val结尾的字符串的E元素。\n\ndiv[class$="c"]{}\n\n\n * E[att*="val"]:选择具有att属性且属性值为包含val的字符串的E元素。div[class*="b"]\n\ndiv[class*="b"]{}\n\n\n\n# 2.2.3关系选择器\n\n * 后代选择器（包含选择器）：EE选择某元素的所有后代目标元素。ul li<!—ul下的所有li--\x3e\n\nul li{}\n\n\n * 子元素选择器：E>E只选择某元素的目标子元素（不包含孙元素）。Ul>li<!—ul下的子元素li--\x3e\n\nul>li{}\n\n\n * 交集选择器：EE（E可以是id/class/name）#id1#id2<!—id1和id2的交集--\x3e\n\nh1#title{}\n\n\n * 并集选择器：E,E（E可以是#id,.class,div）\n\nh1,h2{}\n\n\n * 相邻选择符：E+F选择紧贴在E元素之后的F元素。\n\np+div{}\n\n\n * 兄弟选择器:E~F选择E元素之后的所有兄弟F元素\n\np~div{}\n\n\n\n# 2.2.4伪元素选择器\n\n * E:first-letter/E::first-letter 设置元素内的第一个字符的样式（用于块对象）。\n\n * E:first-line/E::first-line设置元素内的第一行的样式（用于行内元素）。\n\n * E:before/E::before在每个 E元素的内容之前插入内容。用来和content属性一起使用（行内元素）。\n\n * E:after/E::after在每个E元素的内容之后插入内容。用来和content属性一起使用（行内元素）；\n\n * E::selection设置对象被选择时的颜色，背景。\n\n\n# 2.2.5伪类选择器结构伪类选择器\n\n * :root:选择文档的根元素。\n\n * E:first-child:选择第一个元素，是E则选，不是选。\n\n * E:last-child:选择最后一个元素，是E则选，不是选。\n\n * E:nth-child(n):选择第n个元素，是E则选，不是选。\n\n * E:nth-last-child(n):选择倒数第n个元素，是E则选，不是选。\n\n * E:first-of-type :选择E元素中的，第一个元素。\n\n * E:last-of-type:选择E元素中的，最后一个元素。\n\n * E:nth-of-type(n):选择E元素中的，第n个E元素。\n\n * E:nth-last-of-type(n):选择E元素中的，倒数第n个E元素。\n\n * E:only-child:选择父元素中子元素只有一个E的E元素。\n\n * E:only-of-type:选择父元素中子元素只有一个E类型的E元素。\n\n * E:empty :匹配没有任何子元素（包括text节点）的元素E。\n\nTIP\n\n*N的取值：数值、奇数（odd）偶数(even)、公式3n\n\n\n# 2.2.6UI伪类及其他选择器\n\n * E:active 向被激活的元素添加样式。\n\n * E:hover 当鼠标悬浮在元素上方时，向元素添加样式。\n\n * E:link 向未被访问的链接添加样式\n\n * E:visited 向已被访问的链接添加样式。\n\n * E:focus 向拥有键盘输入焦点的元素添加样式。\n\n * E:lang向带有指定 lang 属性的元素添加样式。\n\n * input:checked 选择每个被选中的input元素。\n\n * input:disabled 选择每个禁用的input元素\n\n * input:enabled 选择每个启用的input元素。\n\n * input:disabled 选择每个禁用的input元素\n\n * #E:target目标伪类选择器：选择当前活动的元素(某个被链接的元素)。\n\n * :not(E) 选择E元素之外的每个元素。\n\nWARNING\n\n:不支持IE6，::不支持IE5.5/6/7/8\n\n\n# 2.2.7 深度选择器\n\n详见：样式私有化-深度选择器',normalizedContent:'# 2.2.1常用选择器\n\n 1. 通用选择器：*\n\n 2. 元素选择器：p/div...\n\n 3. id选择器：#id\n\n 4. 类选择器：.class\n\n\n# 2.2.2属性选择器\n\n * e[att] :选择具有att属性的e元素。需要选择有某个属性的元素，而不论属性值是什么，可以使用简单属性选择器。可以根据多个属性进行选择，只需将属性选择器链接在一起即可。\n\nimg[alt]{}\n\n\n * e[att="val"]：选择具有att属性且属性值等于val的e元素。进一步缩小选择范围，（只选择有特定属性值的元素。）\n\ninput[type="text"]{}\n\n\n * e[att~="val"]:选择具有att属性且属性值有多个，其中一个的值等于val的e元素。\n\ndiv[class~="a"]{}\n\n\n * e[att|="val"]:选择具有att属性且属性值为以val开头并用连接符"-"分隔的字符串的e元素。\n\ndiv[class|="a"]{}\n\n\n * e[att^="val"]:选择具有att属性且属性值为以val开头的字符串的e元素。\n\ndiv[class^="a"]{}\n\n\n * e[att$="val"]:选择具有att属性且属性值为以val结尾的字符串的e元素。\n\ndiv[class$="c"]{}\n\n\n * e[att*="val"]:选择具有att属性且属性值为包含val的字符串的e元素。div[class*="b"]\n\ndiv[class*="b"]{}\n\n\n\n# 2.2.3关系选择器\n\n * 后代选择器（包含选择器）：ee选择某元素的所有后代目标元素。ul li<!—ul下的所有li--\x3e\n\nul li{}\n\n\n * 子元素选择器：e>e只选择某元素的目标子元素（不包含孙元素）。ul>li<!—ul下的子元素li--\x3e\n\nul>li{}\n\n\n * 交集选择器：ee（e可以是id/class/name）#id1#id2<!—id1和id2的交集--\x3e\n\nh1#title{}\n\n\n * 并集选择器：e,e（e可以是#id,.class,div）\n\nh1,h2{}\n\n\n * 相邻选择符：e+f选择紧贴在e元素之后的f元素。\n\np+div{}\n\n\n * 兄弟选择器:e~f选择e元素之后的所有兄弟f元素\n\np~div{}\n\n\n\n# 2.2.4伪元素选择器\n\n * e:first-letter/e::first-letter 设置元素内的第一个字符的样式（用于块对象）。\n\n * e:first-line/e::first-line设置元素内的第一行的样式（用于行内元素）。\n\n * e:before/e::before在每个 e元素的内容之前插入内容。用来和content属性一起使用（行内元素）。\n\n * e:after/e::after在每个e元素的内容之后插入内容。用来和content属性一起使用（行内元素）；\n\n * e::selection设置对象被选择时的颜色，背景。\n\n\n# 2.2.5伪类选择器结构伪类选择器\n\n * :root:选择文档的根元素。\n\n * e:first-child:选择第一个元素，是e则选，不是选。\n\n * e:last-child:选择最后一个元素，是e则选，不是选。\n\n * e:nth-child(n):选择第n个元素，是e则选，不是选。\n\n * e:nth-last-child(n):选择倒数第n个元素，是e则选，不是选。\n\n * e:first-of-type :选择e元素中的，第一个元素。\n\n * e:last-of-type:选择e元素中的，最后一个元素。\n\n * e:nth-of-type(n):选择e元素中的，第n个e元素。\n\n * e:nth-last-of-type(n):选择e元素中的，倒数第n个e元素。\n\n * e:only-child:选择父元素中子元素只有一个e的e元素。\n\n * e:only-of-type:选择父元素中子元素只有一个e类型的e元素。\n\n * e:empty :匹配没有任何子元素（包括text节点）的元素e。\n\ntip\n\n*n的取值：数值、奇数（odd）偶数(even)、公式3n\n\n\n# 2.2.6ui伪类及其他选择器\n\n * e:active 向被激活的元素添加样式。\n\n * e:hover 当鼠标悬浮在元素上方时，向元素添加样式。\n\n * e:link 向未被访问的链接添加样式\n\n * e:visited 向已被访问的链接添加样式。\n\n * e:focus 向拥有键盘输入焦点的元素添加样式。\n\n * e:lang向带有指定 lang 属性的元素添加样式。\n\n * input:checked 选择每个被选中的input元素。\n\n * input:disabled 选择每个禁用的input元素\n\n * input:enabled 选择每个启用的input元素。\n\n * input:disabled 选择每个禁用的input元素\n\n * #e:target目标伪类选择器：选择当前活动的元素(某个被链接的元素)。\n\n * :not(e) 选择e元素之外的每个元素。\n\nwarning\n\n:不支持ie6，::不支持ie5.5/6/7/8\n\n\n# 2.2.7 深度选择器\n\n详见：样式私有化-深度选择器',charsets:{cjk:!0}},{title:"元素的分类",frontmatter:{},regularPath:"/frontend/html/element/",relativePath:"frontend/html/element/README.md",key:"v-88b51a4a",path:"/frontend/html/element/",headers:[{level:2,title:"元素的分类",slug:"元素的分类",normalizedTitle:"元素的分类",charIndex:2}],headersStr:"元素的分类",content:"# 元素的分类\n\n * 块元素:主要特征是会产生换行效果，自动与其他元素分离成两行；通常可以作为容器在内部添加其他元素。\n\nh1~h6/hr/ul/ol/p/table\n\n * 内联元素:不会产生换行效果，会和其他元素并联排列；\n\nb/i/br/img",normalizedContent:"# 元素的分类\n\n * 块元素:主要特征是会产生换行效果，自动与其他元素分离成两行；通常可以作为容器在内部添加其他元素。\n\nh1~h6/hr/ul/ol/p/table\n\n * 内联元素:不会产生换行效果，会和其他元素并联排列；\n\nb/i/br/img",charsets:{cjk:!0}},{frontmatter:{},regularPath:"/frontend/css/box/",relativePath:"frontend/css/box/README.md",key:"v-8908393a",path:"/frontend/css/box/",headers:[{level:2,title:"2.4.1常用单位",slug:"_2-4-1常用单位",normalizedTitle:"2.4.1常用单位",charIndex:94},{level:2,title:"2.4.2元素的尺寸:",slug:"_2-4-2元素的尺寸",normalizedTitle:"2.4.2元素的尺寸:",charIndex:257}],headersStr:"2.4.1常用单位 2.4.2元素的尺寸:",content:"CSS 盒模型规定了处理元素内容、内边距、边框 和 外边距 的方式。\n\n最内部分是元素内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距。\n\n\n# 2.4.1常用单位\n\n 1. px\n 2. %相对于父元素\n 3. vh相对于视口高度，1vh=1%\n 4. vw相对于视口宽度，1vw=1%\n 5. vmax选择vw和vh中较小的一个值\n 6. vmin选择vw和vh中较大的一个值\n 7. em相对于父元素字体大小倍数\n 8. rem相对于html字体大小的倍数\n\n\n# 2.4.2元素的尺寸:\n\nheight:设置元素的高度。\n\nwidth:设置元素的宽度。\n\nmax-height:设置元素的最大高度。\n\nmax-width 设置元素的最大宽度。\n\nmin-height 设置元素的最小高度。\n\nmin-width 设置元素的最小宽度。\n\nTIP\n\n当属性值用百分比时是相对于父元素的尺寸来说的。 最大最小宽高等动态控制详见专题：移动端适配-媒体查询\n\nbox-sizing：\n\n> content-box（默认值）仅包括内容的宽高\n> border-box 内容的宽高+padding+border\n> inherit 继承父元素的属性值\n\npadding:元素的内边距:\n\n> padding-top上内边距。\n> padding-right右内边距。\n> padding-bottom下内边距。\n> padding-left左内边距。\n> padding 属性接受长度值或百分比值，但不允许使用负值。\n> \n> > padding * 同时设定四个边距\n> > padding ** 分别设定上下、左右边距\n> > padding *** 分别设定上、左右、下边距\n> > padding **** 分别设定上、右、下、左边距\n\nborder:元素的边框，是围绕元素内容和内边距的一条或多条线。\n依次设置border-width（宽度），样式（border-style），颜色（border-color）。\nborder-style可选值solid 实线/dotted 点状边框/double双线\n\nmargin:元素的外边距,围绕在元素边框的空白区域是外边距。\n\n> margin-top 上外边距。\n> margin-right 右内边距。\n> margin-bottom 下外边距。\n> margin-left 左外边距。\n> margin 属性接受长度值或百分比值，允许使用负值。\n> \n> > margin * 同时设定四个外边距\n> > margin ** 分别设定上下、左右外边距\n> > margin *** 分别设定上、左右、下外边距\n> > margin **** 分别设定上、右、下、左外边距\n\noverflow 如果内容溢出了元素内容区域，是否对内容的边缘进行裁剪。\noverflow-x 如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。\noverflow-y 如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。\n\n> visible 不裁剪内容，可能会显示在内容框之外。\n> hidden 裁剪内容 - 不提供滚动机制。\n> scroll 裁剪内容 - 提供滚动机制。\n> auto 如果溢出框，则应该提供滚动机制。\n\nWARNING\n\n * 外边距的合并\n\n> 外边距合并指的是，当两个块元素垂直外边距相遇时，它们将形成一个外边距，\n> 合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。\n\n * 行内元素没有上下外边距，没有上内边距。\n\n * 对于两个嵌套关系的块元素，假如父元素没有上内边距和边框，则父元素的上外边距和儿子的上外边距发生合并，解决方案\n\n>  1. 给父元素加overflow:hidden\n>  2. 给父元素加内边距或上边框。\n\n * 内外边距：绝大多数情况可以混用，建议优先使用width>padding>margin\n\n * margin和padding设置百分比的时候，是指相对于最近的块级父元素width（非总宽度）的百分比的计算,利用此方法可以根据宽度。",normalizedContent:"css 盒模型规定了处理元素内容、内边距、边框 和 外边距 的方式。\n\n最内部分是元素内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距。\n\n\n# 2.4.1常用单位\n\n 1. px\n 2. %相对于父元素\n 3. vh相对于视口高度，1vh=1%\n 4. vw相对于视口宽度，1vw=1%\n 5. vmax选择vw和vh中较小的一个值\n 6. vmin选择vw和vh中较大的一个值\n 7. em相对于父元素字体大小倍数\n 8. rem相对于html字体大小的倍数\n\n\n# 2.4.2元素的尺寸:\n\nheight:设置元素的高度。\n\nwidth:设置元素的宽度。\n\nmax-height:设置元素的最大高度。\n\nmax-width 设置元素的最大宽度。\n\nmin-height 设置元素的最小高度。\n\nmin-width 设置元素的最小宽度。\n\ntip\n\n当属性值用百分比时是相对于父元素的尺寸来说的。 最大最小宽高等动态控制详见专题：移动端适配-媒体查询\n\nbox-sizing：\n\n> content-box（默认值）仅包括内容的宽高\n> border-box 内容的宽高+padding+border\n> inherit 继承父元素的属性值\n\npadding:元素的内边距:\n\n> padding-top上内边距。\n> padding-right右内边距。\n> padding-bottom下内边距。\n> padding-left左内边距。\n> padding 属性接受长度值或百分比值，但不允许使用负值。\n> \n> > padding * 同时设定四个边距\n> > padding ** 分别设定上下、左右边距\n> > padding *** 分别设定上、左右、下边距\n> > padding **** 分别设定上、右、下、左边距\n\nborder:元素的边框，是围绕元素内容和内边距的一条或多条线。\n依次设置border-width（宽度），样式（border-style），颜色（border-color）。\nborder-style可选值solid 实线/dotted 点状边框/double双线\n\nmargin:元素的外边距,围绕在元素边框的空白区域是外边距。\n\n> margin-top 上外边距。\n> margin-right 右内边距。\n> margin-bottom 下外边距。\n> margin-left 左外边距。\n> margin 属性接受长度值或百分比值，允许使用负值。\n> \n> > margin * 同时设定四个外边距\n> > margin ** 分别设定上下、左右外边距\n> > margin *** 分别设定上、左右、下外边距\n> > margin **** 分别设定上、右、下、左外边距\n\noverflow 如果内容溢出了元素内容区域，是否对内容的边缘进行裁剪。\noverflow-x 如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。\noverflow-y 如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。\n\n> visible 不裁剪内容，可能会显示在内容框之外。\n> hidden 裁剪内容 - 不提供滚动机制。\n> scroll 裁剪内容 - 提供滚动机制。\n> auto 如果溢出框，则应该提供滚动机制。\n\nwarning\n\n * 外边距的合并\n\n> 外边距合并指的是，当两个块元素垂直外边距相遇时，它们将形成一个外边距，\n> 合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。\n\n * 行内元素没有上下外边距，没有上内边距。\n\n * 对于两个嵌套关系的块元素，假如父元素没有上内边距和边框，则父元素的上外边距和儿子的上外边距发生合并，解决方案\n\n>  1. 给父元素加overflow:hidden\n>  2. 给父元素加内边距或上边框。\n\n * 内外边距：绝大多数情况可以混用，建议优先使用width>padding>margin\n\n * margin和padding设置百分比的时候，是指相对于最近的块级父元素width（非总宽度）的百分比的计算,利用此方法可以根据宽度。",charsets:{cjk:!0}},{title:"1.2.10SVG元素",frontmatter:{},regularPath:"/frontend/html/element/SVG/",relativePath:"frontend/html/element/SVG/README.md",key:"v-2ea121de",path:"/frontend/html/element/SVG/",headers:[{level:2,title:"1.2.10SVG元素",slug:"_1-2-10svg元素",normalizedTitle:"1.2.10svg元素",charIndex:2},{level:3,title:"图形",slug:"图形",normalizedTitle:"图形",charIndex:18},{level:3,title:"滤镜",slug:"滤镜",normalizedTitle:"滤镜",charIndex:2968},{level:3,title:"动画",slug:"动画",normalizedTitle:"动画",charIndex:5656},{level:3,title:"事件",slug:"事件",normalizedTitle:"事件",charIndex:6352},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:8760}],headersStr:"1.2.10SVG元素 图形 滤镜 动画 事件 其他",content:'# 1.2.10SVG元素\n\n\n# 图形\n\n# svg\n\n所有的SVG元素都要放在svg标签内。\nsvg属性：\n\n> xmlns属性：定义SVG命名空间。\n> width/height属性：设置SVG文档宽高。\n> version定义所使用的SVG版本。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n</svg>\n\n\n# rect\n\n定义一个矩形元素。\nrect属性：\n\n> x/y设置矩形在svg标签的位置水平或垂直位置。\n> width/height设置矩形的宽高。\n> rx/ry设置矩形的水平或垂直边圆角的半径大小。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width边框的宽度。\n> stroke边框的颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n<rect width="300" height="100" x="50" y="20" rx="20" ry="20"\nstyle="fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)"/>\n</svg>\n\n\n# circle\n\n定义一个圆形元素。\ncircle属性：\n\n> cx/cy设置圆形中心在svg标签的位置水平或垂直位置。\n> r设置圆形的半径。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width边框的宽度。\n> stroke边框的颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <circle cx="100" cy="50" r="40" stroke="black"\n  stroke-width="2" fill="red"/>\n</svg>\n\n\n# ellipse\n\n定义一个椭圆元素。\nellipse属性：\n\n> cx/cy设置椭圆中心在svg标签的位置水平或垂直位置。\n> rx/ry设置椭圆的水平半径或垂直半径。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width边框的宽度。\n> stroke边框的颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <ellipse cx="240" cy="50" rx="220" ry="30" style="fill:yellow"/>\n</svg>\n\n\n# line\n\n定义一个直线元素。\nline属性：\n\n> x1/y1设置起点坐标。\n> x2/y2设置终点坐标。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n <line x1="0" y1="0" x2="200" y2="200"\n  style="stroke:rgb(255,0,0);stroke-width:2"/>\n</svg>\n\n\n# polygon\n\n定义一个多边形元素。\npolygon属性：\n\n> points设置各点坐标，水平、垂直坐标两两一组，逗号分隔。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n> fill-rule设置填充规则。\n\n<svg  height="210" width="500">\n  <polygon points="200,10 250,190 160,210"\n  style="fill:lime;stroke:purple;stroke-width:1"/>\n</svg>\n\n\n# polyline\n\n定义一个多边形元素。\npolygon属性：\n\n> points设置各点坐标，水平、垂直坐标两两一组，逗号分隔。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n> fill-rule设置填充规则。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <polyline points="0,40 40,40 40,80 80,80 80,120 120,120 120,160" style="fill:white;stroke:red;stroke-width:4" />\n</svg>\n\n\n# path\n\n定义一个路径元素。\npath属性：\n\n> M x y(moveto)从该坐标为开始。\n> L x y(lineto)到该坐标为结束。\n> H(horizontal lineto)设置水平终点。\n> V(vertical lineto) 设置垂直终点\n> C(curveto)曲线\n> S(smooth curveto)平滑曲线\n> Q(quadratic Bézier curve)赛贝尔曲线\n> T(smooth quadratic Bézier curveto)光滑赛贝尔曲线。\n> A(elliptical Arc)椭圆弧。\n> Z(closepath)闭合路径。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n    <path d="M150 0 L75 200 L225 200 Z" />\n</svg>\n\n\n# text\n\n定义一个文本元素。\ntext属性：\n\n> style设置css属性。\n> fill填充颜色。\n> stroke描边颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <text x="0" y="15" fill="red" transform="rotate(30 20,40)">I love SVG</text>\n</svg>\n\n\n# a\n\n定义一个链接元素。\ntext属性：\n\n> xlink:href设置路径。\n> target设置跳转模式。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1"\nxmlns:xlink="http://www.w3.org/1999/xlink">\n  <a xlink:href="http://www.w3schools.com/svg/" target="_blank">\n    <text x="0" y="15" fill="red">I love SVG</text>\n  </a>\n</svg>\n\n\n\n# 滤镜\n\n# defs\n\n所有的滤镜元素都要放在defs标签内。\n\n# filter\n\n根据ID对滤镜分组，需放在defs标签内。\nid定义滤镜ID。\n滤镜使用方法：filter="url(#id)"根据filterID绑定滤镜。\n\n# feGaussianBlur\n\n创建模糊滤镜\nfeGaussianBlur属性：\n\n> in="SourceGraphic"设置对整个图片创建滤镜。\n> stdDeviation设置模糊量。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <filter id="f1" x="0" y="0">\n      <feGaussianBlur in="SourceGraphic" stdDeviation="15" />\n    </filter>\n  </defs>\n  <rect width="90" height="90" stroke="green" stroke-width="3"\n  fill="yellow" filter="url(#f1)" />\n</svg>\n\n\n# feBlend\n\n设置滤镜混合模式\nfeGaussianBlur属性：\n\n> in="SourceGraphic"设置对整个图片创建滤镜。\n> dx/dy设置阴影偏移量。\n> result="offOut"\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <filter id="f1" x="0" y="0" width="200%" height="200%">\n      <feOffset result="offOut" in="SourceGraphic" dx="20" dy="20" />\n      <feBlend in="SourceGraphic" in2="offOut" mode="normal" />\n    </filter>\n  </defs>\n  <rect width="90" height="90" stroke="green" stroke-width="3"\n  fill="yellow" filter="url(#f1)" />\n</svg>\n\n\n# feOffset\n\n创建阴影滤镜\nfeGaussianBlur属性：\n\n> in="SourceGraphic"设置对整个图片创建滤镜。\n> dx/dy设置阴影偏移量。\n> result="offOut"\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <filter id="f1" x="0" y="0" width="200%" height="200%">\n      <feOffset result="offOut" in="SourceGraphic" dx="20" dy="20" />\n      <feBlend in="SourceGraphic" in2="offOut" mode="normal" />\n    </filter>\n  </defs>\n  <rect width="90" height="90" stroke="green" stroke-width="3"\n  fill="yellow" filter="url(#f1)" />\n</svg>\n\n\n# linearGradient\n\n创建线性渐变\nfeGaussianBlur属性：\n\n> x1/y1设置渐变开始位置。\n> x2/y2设置渐变结束位置。\n> stop属性：添加渐变颜色。\n> offset设置渐变颜色位置，0%表示起点，100%表示终点。\n> style设置css属性。\n> stop-color设置颜色。\n> stop-opacity设置透明度。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">\n      <stop offset="0%" style="stop-color:rgb(255,255,0);stop-opacity:1" />\n      <stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:1" />\n    </linearGradient>\n  </defs>\n  <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />\n</svg>\n\n\n# radialGradient\n\n创建放射性渐变\nradialGradient属性：\n\n> cx/cy设置外层圆心位置。\n> fx/fy设置内层圆心位置。\n> r设置渐变半径，百分比。\n> stop属性：添加渐变颜色。\n> offset设置渐变颜色位置，0%表示起点，100%表示终点。\n> style设置css属性。\n> stop-color设置颜色。\n> stop-opacity设置透明度。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <radialGradient id="grad1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">\n      <stop offset="0%" style="stop-color:rgb(255,255,255);\n      stop-opacity:0" />\n      <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />\n    </radialGradient>\n  </defs>\n  <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />\n</svg>\n\n\n\n# 动画\n\n# animate\n\n创建放射性渐变\nanimate属性：\n\n> attributeName设置发生变化的元素属性名。\n> attributeType设置属性类型，XML类型和css类型，默认auto，优先使用css属性，如果无效使用XML属性。\n> from/to/by设置初始值，终止值，迁移量。\n> begin/dur/end设置开始时间，时长，终止时间。 repeatDur设置动画的总时长。\n> fill设置结束后的画面，freeze停留在终止时刻，remove停留在初始化时刻，。\n> repeatCount重复次数、 indefinit为循环。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <radialGradient id="grad1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">\n      <stop offset="0%" style="stop-color:rgb(255,255,255);\n      stop-opacity:0" />\n      <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />\n    </radialGradient>\n  </defs>\n  <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />\n</svg>\n\n\n\n# 事件\n\n# SMIL方式\n\n点击后fill从红色变成蓝色\n\n<svg>\n<rect x="15" y="15" width="40" height="40" fill="red">\n<set attributeName="fill" to="blue" begin="click"/>\n</rect>\n</svg>\n\n\n# iframe方式\n\n <iframe scrolling="no" id="iframe" src="img.svg"/>\n\n\n $("#iframe").on("load", function (event) {//判断 iframe是否加载完成  这一步很重要\n    $("#img", this.contentDocument).click(function () {//添加点击事件\n  });\n });\n\n\n# Attributes方式\n\n<svg xmlns="http://www.w3.org/2000/svg"\nxmlns:xlink=http://www.w3.org/1999/xlink\nxmlns:a3="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"\na3:scriptImplementation="Adobe">\n  <script type="text/ecmascript" a3:scriptImplementation="Adobe">\n    <![CDATA[\n    function changeColor(evt)\n    {\n    var rect = evt.target;\n    rect.setAttributeNS(null, "fill", "blue")\n    }\n    ]]>\n  <\/script>\n  <rect x="5" y="5" width="40" height="40"\n  fill="red"\n  οnclick= "changeColor(evt)"/>click\n</svg>\n\n\n# JavaScript+SMIL方式\n\n<svg οnlοad="makeShape(evt)">\n  <script>\n    <![CDATA[\n    var svgns = "http://www.w3.org/2000/svg";u\n    function makeShape(evt) {\n    svgDoc = evt.target.ownerDocument;\n    var rect = svgDoc.createElementNS(svgns, "rect");v\n    rect.setAttributeNS(null, "x", "5");\n    rect.setAttributeNS(null, "y", "5");\n    rect.setAttributeNS(null, "width", "40");\n    rect.setAttributeNS(null, "height", "40");\n    rect.setAttributeNS(null, "fill", "red");\n    var set = svgDoc.createElementNS(svgns, "set");\n    set.setAttributeNS(null, "attributeName", "fill");\n    set.setAttributeNS(null, "to", "blue");\n    set.setAttributeNS(null, "begin", "click");\n    rect.appendChild(set);\n    svgDoc.rootElement.appendChild(rect);\n    }\n    ]]>\n  <\/script>\n</svg>\n\n\n# JavaScript+SMIL方式\n\n\n<svg οnlοad="makeShape(evt)">\n  <script>\n    <![CDATA[\n    var svgns = "http://www.w3.org/2000/svg";\n    function makeShape(evt) {\n    if ( window.svgDocument == null )\n    svgDoc = evt.target.ownerDocument;\n    var rect = svgDoc.createElementNS(svgns, "rect");\n    rect.setAttributeNS(null, "x", 15);\n    rect.setAttributeNS(null, "y", 15);\n    rect.setAttributeNS(null, "width", 40);\n    rect.setAttributeNS(null, "height", 40);\n    rect.setAttributeNS(null, "fill", "red");\n    rect.addEventListener("click", changeColor, false); u\n    svgDoc.documentElement.appendChild(rect);\n    }\n    function changeColor(evt) {\n    var target = evt.target;\n    target.setAttributeNS(null, "fill", "blue");\n    }\n    ]]>\n  <\/script>\n</svg>\n\n\n\n# 其他\n\nStroke属性的其他相关属性\nstroke-linecap设置线段端点样式。\nstroke-dasharray设置虚线，逗号分隔各线段长度。',normalizedContent:'# 1.2.10svg元素\n\n\n# 图形\n\n# svg\n\n所有的svg元素都要放在svg标签内。\nsvg属性：\n\n> xmlns属性：定义svg命名空间。\n> width/height属性：设置svg文档宽高。\n> version定义所使用的svg版本。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n</svg>\n\n\n# rect\n\n定义一个矩形元素。\nrect属性：\n\n> x/y设置矩形在svg标签的位置水平或垂直位置。\n> width/height设置矩形的宽高。\n> rx/ry设置矩形的水平或垂直边圆角的半径大小。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width边框的宽度。\n> stroke边框的颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n<rect width="300" height="100" x="50" y="20" rx="20" ry="20"\nstyle="fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)"/>\n</svg>\n\n\n# circle\n\n定义一个圆形元素。\ncircle属性：\n\n> cx/cy设置圆形中心在svg标签的位置水平或垂直位置。\n> r设置圆形的半径。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width边框的宽度。\n> stroke边框的颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <circle cx="100" cy="50" r="40" stroke="black"\n  stroke-width="2" fill="red"/>\n</svg>\n\n\n# ellipse\n\n定义一个椭圆元素。\nellipse属性：\n\n> cx/cy设置椭圆中心在svg标签的位置水平或垂直位置。\n> rx/ry设置椭圆的水平半径或垂直半径。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width边框的宽度。\n> stroke边框的颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <ellipse cx="240" cy="50" rx="220" ry="30" style="fill:yellow"/>\n</svg>\n\n\n# line\n\n定义一个直线元素。\nline属性：\n\n> x1/y1设置起点坐标。\n> x2/y2设置终点坐标。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n <line x1="0" y1="0" x2="200" y2="200"\n  style="stroke:rgb(255,0,0);stroke-width:2"/>\n</svg>\n\n\n# polygon\n\n定义一个多边形元素。\npolygon属性：\n\n> points设置各点坐标，水平、垂直坐标两两一组，逗号分隔。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n> fill-rule设置填充规则。\n\n<svg  height="210" width="500">\n  <polygon points="200,10 250,190 160,210"\n  style="fill:lime;stroke:purple;stroke-width:1"/>\n</svg>\n\n\n# polyline\n\n定义一个多边形元素。\npolygon属性：\n\n> points设置各点坐标，水平、垂直坐标两两一组，逗号分隔。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n> fill-rule设置填充规则。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <polyline points="0,40 40,40 40,80 80,80 80,120 120,120 120,160" style="fill:white;stroke:red;stroke-width:4" />\n</svg>\n\n\n# path\n\n定义一个路径元素。\npath属性：\n\n> m x y(moveto)从该坐标为开始。\n> l x y(lineto)到该坐标为结束。\n> h(horizontal lineto)设置水平终点。\n> v(vertical lineto) 设置垂直终点\n> c(curveto)曲线\n> s(smooth curveto)平滑曲线\n> q(quadratic bezier curve)赛贝尔曲线\n> t(smooth quadratic bezier curveto)光滑赛贝尔曲线。\n> a(elliptical arc)椭圆弧。\n> z(closepath)闭合路径。\n> style设置css属性。\n> fill填充颜色。\n> stroke-width直线宽度。\n> stroke直线颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n    <path d="m150 0 l75 200 l225 200 z" />\n</svg>\n\n\n# text\n\n定义一个文本元素。\ntext属性：\n\n> style设置css属性。\n> fill填充颜色。\n> stroke描边颜色。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <text x="0" y="15" fill="red" transform="rotate(30 20,40)">i love svg</text>\n</svg>\n\n\n# a\n\n定义一个链接元素。\ntext属性：\n\n> xlink:href设置路径。\n> target设置跳转模式。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1"\nxmlns:xlink="http://www.w3.org/1999/xlink">\n  <a xlink:href="http://www.w3schools.com/svg/" target="_blank">\n    <text x="0" y="15" fill="red">i love svg</text>\n  </a>\n</svg>\n\n\n\n# 滤镜\n\n# defs\n\n所有的滤镜元素都要放在defs标签内。\n\n# filter\n\n根据id对滤镜分组，需放在defs标签内。\nid定义滤镜id。\n滤镜使用方法：filter="url(#id)"根据filterid绑定滤镜。\n\n# fegaussianblur\n\n创建模糊滤镜\nfegaussianblur属性：\n\n> in="sourcegraphic"设置对整个图片创建滤镜。\n> stddeviation设置模糊量。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <filter id="f1" x="0" y="0">\n      <fegaussianblur in="sourcegraphic" stddeviation="15" />\n    </filter>\n  </defs>\n  <rect width="90" height="90" stroke="green" stroke-width="3"\n  fill="yellow" filter="url(#f1)" />\n</svg>\n\n\n# feblend\n\n设置滤镜混合模式\nfegaussianblur属性：\n\n> in="sourcegraphic"设置对整个图片创建滤镜。\n> dx/dy设置阴影偏移量。\n> result="offout"\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <filter id="f1" x="0" y="0" width="200%" height="200%">\n      <feoffset result="offout" in="sourcegraphic" dx="20" dy="20" />\n      <feblend in="sourcegraphic" in2="offout" mode="normal" />\n    </filter>\n  </defs>\n  <rect width="90" height="90" stroke="green" stroke-width="3"\n  fill="yellow" filter="url(#f1)" />\n</svg>\n\n\n# feoffset\n\n创建阴影滤镜\nfegaussianblur属性：\n\n> in="sourcegraphic"设置对整个图片创建滤镜。\n> dx/dy设置阴影偏移量。\n> result="offout"\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <filter id="f1" x="0" y="0" width="200%" height="200%">\n      <feoffset result="offout" in="sourcegraphic" dx="20" dy="20" />\n      <feblend in="sourcegraphic" in2="offout" mode="normal" />\n    </filter>\n  </defs>\n  <rect width="90" height="90" stroke="green" stroke-width="3"\n  fill="yellow" filter="url(#f1)" />\n</svg>\n\n\n# lineargradient\n\n创建线性渐变\nfegaussianblur属性：\n\n> x1/y1设置渐变开始位置。\n> x2/y2设置渐变结束位置。\n> stop属性：添加渐变颜色。\n> offset设置渐变颜色位置，0%表示起点，100%表示终点。\n> style设置css属性。\n> stop-color设置颜色。\n> stop-opacity设置透明度。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <lineargradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">\n      <stop offset="0%" style="stop-color:rgb(255,255,0);stop-opacity:1" />\n      <stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:1" />\n    </lineargradient>\n  </defs>\n  <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />\n</svg>\n\n\n# radialgradient\n\n创建放射性渐变\nradialgradient属性：\n\n> cx/cy设置外层圆心位置。\n> fx/fy设置内层圆心位置。\n> r设置渐变半径，百分比。\n> stop属性：添加渐变颜色。\n> offset设置渐变颜色位置，0%表示起点，100%表示终点。\n> style设置css属性。\n> stop-color设置颜色。\n> stop-opacity设置透明度。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <radialgradient id="grad1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">\n      <stop offset="0%" style="stop-color:rgb(255,255,255);\n      stop-opacity:0" />\n      <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />\n    </radialgradient>\n  </defs>\n  <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />\n</svg>\n\n\n\n# 动画\n\n# animate\n\n创建放射性渐变\nanimate属性：\n\n> attributename设置发生变化的元素属性名。\n> attributetype设置属性类型，xml类型和css类型，默认auto，优先使用css属性，如果无效使用xml属性。\n> from/to/by设置初始值，终止值，迁移量。\n> begin/dur/end设置开始时间，时长，终止时间。 repeatdur设置动画的总时长。\n> fill设置结束后的画面，freeze停留在终止时刻，remove停留在初始化时刻，。\n> repeatcount重复次数、 indefinit为循环。\n\n<svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n  <defs>\n    <radialgradient id="grad1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">\n      <stop offset="0%" style="stop-color:rgb(255,255,255);\n      stop-opacity:0" />\n      <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />\n    </radialgradient>\n  </defs>\n  <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />\n</svg>\n\n\n\n# 事件\n\n# smil方式\n\n点击后fill从红色变成蓝色\n\n<svg>\n<rect x="15" y="15" width="40" height="40" fill="red">\n<set attributename="fill" to="blue" begin="click"/>\n</rect>\n</svg>\n\n\n# iframe方式\n\n <iframe scrolling="no" id="iframe" src="img.svg"/>\n\n\n $("#iframe").on("load", function (event) {//判断 iframe是否加载完成  这一步很重要\n    $("#img", this.contentdocument).click(function () {//添加点击事件\n  });\n });\n\n\n# attributes方式\n\n<svg xmlns="http://www.w3.org/2000/svg"\nxmlns:xlink=http://www.w3.org/1999/xlink\nxmlns:a3="http://ns.adobe.com/adobesvgviewerextensions/3.0/"\na3:scriptimplementation="adobe">\n  <script type="text/ecmascript" a3:scriptimplementation="adobe">\n    <![cdata[\n    function changecolor(evt)\n    {\n    var rect = evt.target;\n    rect.setattributens(null, "fill", "blue")\n    }\n    ]]>\n  <\/script>\n  <rect x="5" y="5" width="40" height="40"\n  fill="red"\n  οnclick= "changecolor(evt)"/>click\n</svg>\n\n\n# javascript+smil方式\n\n<svg οnlοad="makeshape(evt)">\n  <script>\n    <![cdata[\n    var svgns = "http://www.w3.org/2000/svg";u\n    function makeshape(evt) {\n    svgdoc = evt.target.ownerdocument;\n    var rect = svgdoc.createelementns(svgns, "rect");v\n    rect.setattributens(null, "x", "5");\n    rect.setattributens(null, "y", "5");\n    rect.setattributens(null, "width", "40");\n    rect.setattributens(null, "height", "40");\n    rect.setattributens(null, "fill", "red");\n    var set = svgdoc.createelementns(svgns, "set");\n    set.setattributens(null, "attributename", "fill");\n    set.setattributens(null, "to", "blue");\n    set.setattributens(null, "begin", "click");\n    rect.appendchild(set);\n    svgdoc.rootelement.appendchild(rect);\n    }\n    ]]>\n  <\/script>\n</svg>\n\n\n# javascript+smil方式\n\n\n<svg οnlοad="makeshape(evt)">\n  <script>\n    <![cdata[\n    var svgns = "http://www.w3.org/2000/svg";\n    function makeshape(evt) {\n    if ( window.svgdocument == null )\n    svgdoc = evt.target.ownerdocument;\n    var rect = svgdoc.createelementns(svgns, "rect");\n    rect.setattributens(null, "x", 15);\n    rect.setattributens(null, "y", 15);\n    rect.setattributens(null, "width", 40);\n    rect.setattributens(null, "height", 40);\n    rect.setattributens(null, "fill", "red");\n    rect.addeventlistener("click", changecolor, false); u\n    svgdoc.documentelement.appendchild(rect);\n    }\n    function changecolor(evt) {\n    var target = evt.target;\n    target.setattributens(null, "fill", "blue");\n    }\n    ]]>\n  <\/script>\n</svg>\n\n\n\n# 其他\n\nstroke属性的其他相关属性\nstroke-linecap设置线段端点样式。\nstroke-dasharray设置虚线，逗号分隔各线段长度。',charsets:{cjk:!0}},{title:"1.2.6表单",frontmatter:{},regularPath:"/frontend/html/element/form/",relativePath:"frontend/html/element/form/README.md",key:"v-5489448a",path:"/frontend/html/element/form/",headers:[{level:2,title:"1.2.6表单",slug:"_1-2-6表单",normalizedTitle:"1.2.6表单",charIndex:2},{level:3,title:"input元素",slug:"input元素",normalizedTitle:"input元素",charIndex:14},{level:3,title:"select与HTML5新增的datalist元素",slug:"select与html5新增的datalist元素",normalizedTitle:"select与html5新增的datalist元素",charIndex:2623},{level:3,title:"lable元素和label属性",slug:"lable元素和label属性",normalizedTitle:"lable元素和label属性",charIndex:3101},{level:3,title:"textarea属性",slug:"textarea属性",normalizedTitle:"textarea属性",charIndex:3481},{level:3,title:"button属性",slug:"button属性",normalizedTitle:"button属性",charIndex:3684},{level:3,title:"form元素",slug:"form元素",normalizedTitle:"form元素",charIndex:4288},{level:3,title:"H5新增的表单重写",slug:"h5新增的表单重写",normalizedTitle:"h5新增的表单重写",charIndex:4580},{level:3,title:"output",slug:"output",normalizedTitle:"output",charIndex:5338},{level:3,title:"progress",slug:"progress",normalizedTitle:"progress",charIndex:5530},{level:3,title:"meter",slug:"meter",normalizedTitle:"meter",charIndex:5724},{level:3,title:"keygen",slug:"keygen",normalizedTitle:"keygen",charIndex:5936},{level:3,title:"fieldset/legend",slug:"fieldset-legend",normalizedTitle:"fieldset/legend",charIndex:6236},{level:3,title:"details/summary",slug:"details-summary",normalizedTitle:"details/summary",charIndex:6390}],headersStr:"1.2.6表单 input元素 select与HTML5新增的datalist元素 lable元素和label属性 textarea属性 button属性 form元素 H5新增的表单重写 output progress meter keygen fieldset/legend details/summary",content:'# 1.2.6表单\n\n\n# input元素\n\n用来设置表单中的内容项，比如输入内容的文本框，按钮等。 不仅可以布置在表单中，也可以在表单之外的元素使用。\n\n# 属性\n\n * type：指定输入内容的类型，默认为text:单行文本框；\n * name:输入内容的识别名称，传递参数时候的参数名称；\n * value:默认值；\n * maxlength:输入的最大字数；\n * readonly：只读属性，设置内容不可变更，提交时会以前发送至服务器；\n * disabled：设置为不可用（不可操作）；\n * required：设置该内容为必须填写项，否则无法提交；\n * placeholder：设置默认值，当文本框获得焦点时被清空，对text/url/tel/email/ password/search有效；\n * autocomplet：属性值为on/off,定义是否开启浏览器自动记忆功能；\n * autofocus：自动获得焦点；\n * accesskey：指定快捷键win中，指定快捷键后，按Alt+“快捷键”,便会获得焦点\n * tabindex：指定按Tab键时，项目间的移动顺序\n * autocomplet： HTML5新增属性属性值为on/off,定义是否开启浏览器自动记忆功能\n * pattern：设定输入类型的正则表达式\n * type属性\n\n> text:默认为。\n> password:密码状态输入。\n> submit:提交按钮，点击将数据发送至服务器。\n> button:普通按钮。\n\n> submit于button的区别\n> \n> 场景                                                                    SUBMIT                                                  BUTTON\n> 网页上需要提交信息到服务器                                                         √                                                       \n> 网页上执行一个普通的事件，如重置、清空功能。                                                                                                        √\n> 提交表单                                                                  √                                                       需要绑定事件才能提交表单数据\n> 局部刷新                                                                  不可以使用，在触发事件的同时会提交表单。                                    而button默认是不提交任何数据。可以绑定事件的方式来提交数据\n> 没有表单，却要提交数据                                                           submit需要有表单时，提交时才会带数据。当然使用submit也可以，但是前提要拦截onclick事件。   而button默认是不提交任何数据。可以绑定事件的方式来提交数据。\n> 表单数据太多的时候                                                             推荐                                                      需要写很多数据的获取动作\n> *提交数据是要使用JS进行校验的，但如果这时候用户禁用了JS，那么校验就失效了，如果后台也没有进行校验，那么不合法的数据就进入后台了。   不推荐                                                     推荐：通过button提交数据，那么如果用户禁用JS,那么数据提交动作就激活不了\n> \n> 使用submit时需要验证请加 return true或false\n> \n>   <input type="submit" name="Submit" value="注 册" onClick=" return check();">\n> \n> \n> reset:重置按钮。\n> image：图片式提交按钮。\n> hidden；隐藏字段。该内容不会显示页面上，一般为网页设计者设置的变量数据，提交时，隐藏内容会提交到服务器。\n> *email:表示要输入一个电子邮箱，并验证输入内容。\n> *url:表示要输入一个网址，并验证输入内容。\n> *tel:表示输入的内容是一个电话号码，不验证输入内容。\n> *number:可以配合input的max/min/step/value规定允许输入的最大值/最小值/步长/默认值。\n> *range(活动条):可以配合input的max/min/step/value规定的最大值/最小值/步长/默认值。\n> *时间类:包括datetime/datetime-local/date/month/week/time。\n> *color:可以建立一个颜色的选择输入框。\n> *seacrch:用于建立一个搜索框，用来供用户输入搜素的关键词。\n> *file:用来创建一个文件选取的输入框,可通过accept属性规定选取文件的类型，比如图片/视频（multiple：多文件上传）。\n> *checkbox:复选框（可以多选）通过checked属性可设置默认选项，再次单击取消。\n> *radio:单选框（可以多选）通过checked属性可设置默认选项，再次单击取消。必须将同一组单选项设置一个相同的name属性值。\n\nWARNING\n\n*为html5新增元素，低版本浏览器可能不支持，且效果不一。\n\n\n# select与HTML5新增的datalist元素\n\n# select元素:\n\n创建下拉菜单选项列表，不仅可以在表单中使用，还可以在其他块元素和内联元素中使用。select只是定义一个下拉菜单列表，其具体列表项要通过option元素建立。\n\n# option元素\n\n用来建立一个选项，即下拉列表的一个菜单项。\n\n# optgroup元素\n\n用来对option元素进行组合分组。\n\n# 属性\n\nsize用来定义列表中显示的列表项。\n\nmultiple属性用来定义是否可以多选。\n\n可以添加disabled属性和autofocus属性。\n\n# datalist元素\n\n创建一个选项列表(HTML5新增)\n\n\n<datalist>标签规定了<input> 元素可能的选项列表。需要使用<input> 元素的 list 属性\n\n来绑定 <datalist> 元素。<input list="browsers">\n\n<datalist id="browsers"><option value="Internet Explorer"></datalist>\n\n\n\n# lable元素和label属性\n\n为input建立一个与之相关联的标签，点击lable元素内文本时就会触发相关联的input\n\n# 关联方法：\n\n * 显式关联：（通过id和for建立关联）\n\n\n<input type=\'checkbox\' name=\'basket\' id=\'basketball\'>\n\n<label for="basketball">篮球</label>\n\n\n * 隐性关联（直接将表单控件放到label标签内）：\n\n\n<label>点击我可以使文本框获得焦点\n\n<input type=\'text\' name=\'theinput\' id=\'theinput\'>\n\n</label>\n\n\n可以通过accesskey建立快捷键\n\n# lable属性\n\n在option元素中可以设定比标签内容更优先的选项\n\noptgroup的分组名称\n\n\n# textarea属性\n\n用来建立多行输入文本框\n\n元素标签中的内容将一文本框默认值的形式呈现\n\n不仅可以用在表单中，也可以在其他块元素或内联元素中\n\ntextarea元素的属性：\n\nname/disabled/readonly/form/reauired/autofocus/placeholder\n\nrows属性：设置多行文本的行数（高度）\n\ncols属性：设置多行文本的每行显示的字数（宽度）\n\n\n# button属性\n\n用来建立一个按钮从功能上来说，与input元素建立的按钮相同\n\nbutton元素是双标签，其内部可以配置图片与文字，进行更复杂的样式设计\n\n不仅可以在表单中使用，还可以在其他块元素和内联元素中使用\n\nbutton元素的属性\n\ntype属性：可以设置三个值 submit/reset/button与input元素设置的按钮含义相同\n\nname/vlue/disable属性：与input的用法相同\n\nautofocus属性：设置按钮自动获得焦点。\n\nform属性：设定按钮隶属于哪一个或多个表单\n\nformmethod属性：设定表单的提交方式，将覆盖原本的提交方式\n\nformnovalidate属性：设定表单将会覆盖原本的novalidate属性\n\nfomaction属性：指定表单数据发送对象，将覆盖原来的action属性设定\n\nformenctype属性;指定表单的数据发送类型，将覆盖原本的enctype属性设定\n\nformtarget属性：将覆盖原本的target属性设定\n\n重要事项：如果在表单中使用 button 元素，不同的浏览器会提交不同的值。Internet Explorer 将提交 button元素开始标签与结束标签之间的文本，而其他浏览器将提交 value 属性的内容。最好就是在表单中使用 input 元素来创建按钮。其他地方使用button创建按钮。\n\n\n# form元素\n\n将表单外的内容与表单进行关联\n\n# novalidate属性\n\n设置数据提交时不进行验证\n\n# enctype属性\n\n仅作了解规定在发送到服务器之前应该如何对表单数据进行编码。通常情况下我们使用默认值即可\n\n# accept-charset属性\n\n仅作了解accept-charset 属性规定服务器处理表单数据所接受的字符集。 accept-charset 属性允许您指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。通常情况下我们使用默认值即可 此属性的默认值是 "unknown"，表示表单的字符集与包含表单的文档的字符集相同。\n\n\n# H5新增的表单重写\n\nform元素的属性小结\n\naction/method/enctype/name/accept-charset/accept/target/autocomplete/novalidate\n\naccept属性：（仅作了解）指定服务器处理表单时所能接受的数据形态，一般默认即可\n\naccept-charset: （仅作了解）指定表单处理数据时所能接受的字符编码\n\ntarget属性:指定在何处打开action属性所指定的URL目标\n\nenctype属性：(了解即可)规定在发送到服务器之前应该如何对表单数据进行编码。\n\n当method设定发送方式为get时，不必设置该属性；\n\n当method设定发送方式为post时该属性才有效；\n\n默认地，表单数据会编码为 "application/x-www-form-urlencoded"。就是说，在发送到服务器之前，所有字符都会进行编码（空格转换为 "+" 加号，特殊符号转换为 ASCII HEX 值）。\n\n当值设为"multipart/form-data"时表示：不对字符编码。在使用包含文件上传控件的表单时（比如当input的type值为file时），必须使用该值。\n\ntext/plain:空格转换为 "+" 加号，但不对特殊字符编码。\n\n表单的重写：重写 form 元素的某些属性设定。\n\n表单重写属性适用于提交按钮\n\nformaction - 重写表单的 action 属性\n\nformenctype - 重写表单的 enctype 属性\n\nformmethod - 重写表单的 method 属性\n\nformnovalidate - 重写表单的 novalidate 属性\n\nformtarget - 重写表单的 target 属性\n\n\n# output\n\noutput元素是HTML5新增的元素，用来设置不同数据的输出\n\noutput元素的输出内容是由javascript代码控制的\n\noninput表单事件：当用户对元素数据的输入时触发\n\noutput元素的属性：\n\nname属性：定义对象的唯一名称。（表单提交时使用）\n\nform属性：定义所属的一个或多个表单。\n\nfor属性：定义输出域相关的一个或多个元素。\n\n\n# progress\n\n是HTML5中新增的元素，用来建立一个进度条\n\n通常与JavaScript 一同使用，来显示任务的进度。\n\n使用时注意浏览器的支持情况：Internet Explorer 9 以及更早的版本不支持\n\nprogress元素的属性：\n\nmax属性：规定当前进度的最大值。\n\nvalue属性设定进度条当前默认显示值\n\nform属性：规定进度条所属的一个或多个表单。\n\n\n# meter\n\nHTML5中新增的元素，用来建立一个度量条,用来表示度量衡的评定\n\n通常与JavaScript 一同使用，来显示任务的进度。\n\nmeter元素的属性：\n\nvalue属性设定进度条当前默认显示值\n\nmax属性：规定范围的最大值，默认值为1.\n\nmin属性：规定范围的最小值，默认值为0.\n\nlow属性：规定被视作低的标准。\n\nhigh属性：规定被视作高标准。\n\nform属性：规定所属的一个或多个表单。\n\n\n# keygen\n\nHTML5中新增的元素，用来建立一个密钥生成器\n\n当提交表单时，私钥存储在本地，公钥发送到服务器。主要作用是提供一种用户验证身份的方法\n\n目前Internet Explorer 和 Safari暂不支持\n\nkeygen元素的属性：\n\nname/form/autofocus/disabled\n\nchallenge属性:将 keygen 的值设置为在提交时询问。\n\nkeytype属性：定义密钥类型，如设置为rsa（一种密码的算法），则生成 RSA 密钥。\n\nRSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。\n\n\n# fieldset/legend\n\nfieldset元素：可将表单内的相关元素分组。\n\n当一组表单元素放到fieldset标签内时，浏览器会以特殊方式来显示它们，通常会有一个边框。\n\n没有必需的或唯一的属性。form/disabled属性可用。\n\nlegend元素：为 fieldset 元素定义标题\n\n\n# details/summary\n\ndetails元素：\n\n用于描述文档或文档某个部分的细节。\n\n通常与summary元素配合使用，可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details中的内容。\n\ndetails元素的属性：\n\nopen：规定在 HTML 页面上 details 是可见的。\n\nWARNING\n\n*目前还不是所以浏览器都支持',normalizedContent:'# 1.2.6表单\n\n\n# input元素\n\n用来设置表单中的内容项，比如输入内容的文本框，按钮等。 不仅可以布置在表单中，也可以在表单之外的元素使用。\n\n# 属性\n\n * type：指定输入内容的类型，默认为text:单行文本框；\n * name:输入内容的识别名称，传递参数时候的参数名称；\n * value:默认值；\n * maxlength:输入的最大字数；\n * readonly：只读属性，设置内容不可变更，提交时会以前发送至服务器；\n * disabled：设置为不可用（不可操作）；\n * required：设置该内容为必须填写项，否则无法提交；\n * placeholder：设置默认值，当文本框获得焦点时被清空，对text/url/tel/email/ password/search有效；\n * autocomplet：属性值为on/off,定义是否开启浏览器自动记忆功能；\n * autofocus：自动获得焦点；\n * accesskey：指定快捷键win中，指定快捷键后，按alt+“快捷键”,便会获得焦点\n * tabindex：指定按tab键时，项目间的移动顺序\n * autocomplet： html5新增属性属性值为on/off,定义是否开启浏览器自动记忆功能\n * pattern：设定输入类型的正则表达式\n * type属性\n\n> text:默认为。\n> password:密码状态输入。\n> submit:提交按钮，点击将数据发送至服务器。\n> button:普通按钮。\n\n> submit于button的区别\n> \n> 场景                                                                    submit                                                  button\n> 网页上需要提交信息到服务器                                                         √                                                       \n> 网页上执行一个普通的事件，如重置、清空功能。                                                                                                        √\n> 提交表单                                                                  √                                                       需要绑定事件才能提交表单数据\n> 局部刷新                                                                  不可以使用，在触发事件的同时会提交表单。                                    而button默认是不提交任何数据。可以绑定事件的方式来提交数据\n> 没有表单，却要提交数据                                                           submit需要有表单时，提交时才会带数据。当然使用submit也可以，但是前提要拦截onclick事件。   而button默认是不提交任何数据。可以绑定事件的方式来提交数据。\n> 表单数据太多的时候                                                             推荐                                                      需要写很多数据的获取动作\n> *提交数据是要使用js进行校验的，但如果这时候用户禁用了js，那么校验就失效了，如果后台也没有进行校验，那么不合法的数据就进入后台了。   不推荐                                                     推荐：通过button提交数据，那么如果用户禁用js,那么数据提交动作就激活不了\n> \n> 使用submit时需要验证请加 return true或false\n> \n>   <input type="submit" name="submit" value="注 册" onclick=" return check();">\n> \n> \n> reset:重置按钮。\n> image：图片式提交按钮。\n> hidden；隐藏字段。该内容不会显示页面上，一般为网页设计者设置的变量数据，提交时，隐藏内容会提交到服务器。\n> *email:表示要输入一个电子邮箱，并验证输入内容。\n> *url:表示要输入一个网址，并验证输入内容。\n> *tel:表示输入的内容是一个电话号码，不验证输入内容。\n> *number:可以配合input的max/min/step/value规定允许输入的最大值/最小值/步长/默认值。\n> *range(活动条):可以配合input的max/min/step/value规定的最大值/最小值/步长/默认值。\n> *时间类:包括datetime/datetime-local/date/month/week/time。\n> *color:可以建立一个颜色的选择输入框。\n> *seacrch:用于建立一个搜索框，用来供用户输入搜素的关键词。\n> *file:用来创建一个文件选取的输入框,可通过accept属性规定选取文件的类型，比如图片/视频（multiple：多文件上传）。\n> *checkbox:复选框（可以多选）通过checked属性可设置默认选项，再次单击取消。\n> *radio:单选框（可以多选）通过checked属性可设置默认选项，再次单击取消。必须将同一组单选项设置一个相同的name属性值。\n\nwarning\n\n*为html5新增元素，低版本浏览器可能不支持，且效果不一。\n\n\n# select与html5新增的datalist元素\n\n# select元素:\n\n创建下拉菜单选项列表，不仅可以在表单中使用，还可以在其他块元素和内联元素中使用。select只是定义一个下拉菜单列表，其具体列表项要通过option元素建立。\n\n# option元素\n\n用来建立一个选项，即下拉列表的一个菜单项。\n\n# optgroup元素\n\n用来对option元素进行组合分组。\n\n# 属性\n\nsize用来定义列表中显示的列表项。\n\nmultiple属性用来定义是否可以多选。\n\n可以添加disabled属性和autofocus属性。\n\n# datalist元素\n\n创建一个选项列表(html5新增)\n\n\n<datalist>标签规定了<input> 元素可能的选项列表。需要使用<input> 元素的 list 属性\n\n来绑定 <datalist> 元素。<input list="browsers">\n\n<datalist id="browsers"><option value="internet explorer"></datalist>\n\n\n\n# lable元素和label属性\n\n为input建立一个与之相关联的标签，点击lable元素内文本时就会触发相关联的input\n\n# 关联方法：\n\n * 显式关联：（通过id和for建立关联）\n\n\n<input type=\'checkbox\' name=\'basket\' id=\'basketball\'>\n\n<label for="basketball">篮球</label>\n\n\n * 隐性关联（直接将表单控件放到label标签内）：\n\n\n<label>点击我可以使文本框获得焦点\n\n<input type=\'text\' name=\'theinput\' id=\'theinput\'>\n\n</label>\n\n\n可以通过accesskey建立快捷键\n\n# lable属性\n\n在option元素中可以设定比标签内容更优先的选项\n\noptgroup的分组名称\n\n\n# textarea属性\n\n用来建立多行输入文本框\n\n元素标签中的内容将一文本框默认值的形式呈现\n\n不仅可以用在表单中，也可以在其他块元素或内联元素中\n\ntextarea元素的属性：\n\nname/disabled/readonly/form/reauired/autofocus/placeholder\n\nrows属性：设置多行文本的行数（高度）\n\ncols属性：设置多行文本的每行显示的字数（宽度）\n\n\n# button属性\n\n用来建立一个按钮从功能上来说，与input元素建立的按钮相同\n\nbutton元素是双标签，其内部可以配置图片与文字，进行更复杂的样式设计\n\n不仅可以在表单中使用，还可以在其他块元素和内联元素中使用\n\nbutton元素的属性\n\ntype属性：可以设置三个值 submit/reset/button与input元素设置的按钮含义相同\n\nname/vlue/disable属性：与input的用法相同\n\nautofocus属性：设置按钮自动获得焦点。\n\nform属性：设定按钮隶属于哪一个或多个表单\n\nformmethod属性：设定表单的提交方式，将覆盖原本的提交方式\n\nformnovalidate属性：设定表单将会覆盖原本的novalidate属性\n\nfomaction属性：指定表单数据发送对象，将覆盖原来的action属性设定\n\nformenctype属性;指定表单的数据发送类型，将覆盖原本的enctype属性设定\n\nformtarget属性：将覆盖原本的target属性设定\n\n重要事项：如果在表单中使用 button 元素，不同的浏览器会提交不同的值。internet explorer 将提交 button元素开始标签与结束标签之间的文本，而其他浏览器将提交 value 属性的内容。最好就是在表单中使用 input 元素来创建按钮。其他地方使用button创建按钮。\n\n\n# form元素\n\n将表单外的内容与表单进行关联\n\n# novalidate属性\n\n设置数据提交时不进行验证\n\n# enctype属性\n\n仅作了解规定在发送到服务器之前应该如何对表单数据进行编码。通常情况下我们使用默认值即可\n\n# accept-charset属性\n\n仅作了解accept-charset 属性规定服务器处理表单数据所接受的字符集。 accept-charset 属性允许您指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。通常情况下我们使用默认值即可 此属性的默认值是 "unknown"，表示表单的字符集与包含表单的文档的字符集相同。\n\n\n# h5新增的表单重写\n\nform元素的属性小结\n\naction/method/enctype/name/accept-charset/accept/target/autocomplete/novalidate\n\naccept属性：（仅作了解）指定服务器处理表单时所能接受的数据形态，一般默认即可\n\naccept-charset: （仅作了解）指定表单处理数据时所能接受的字符编码\n\ntarget属性:指定在何处打开action属性所指定的url目标\n\nenctype属性：(了解即可)规定在发送到服务器之前应该如何对表单数据进行编码。\n\n当method设定发送方式为get时，不必设置该属性；\n\n当method设定发送方式为post时该属性才有效；\n\n默认地，表单数据会编码为 "application/x-www-form-urlencoded"。就是说，在发送到服务器之前，所有字符都会进行编码（空格转换为 "+" 加号，特殊符号转换为 ascii hex 值）。\n\n当值设为"multipart/form-data"时表示：不对字符编码。在使用包含文件上传控件的表单时（比如当input的type值为file时），必须使用该值。\n\ntext/plain:空格转换为 "+" 加号，但不对特殊字符编码。\n\n表单的重写：重写 form 元素的某些属性设定。\n\n表单重写属性适用于提交按钮\n\nformaction - 重写表单的 action 属性\n\nformenctype - 重写表单的 enctype 属性\n\nformmethod - 重写表单的 method 属性\n\nformnovalidate - 重写表单的 novalidate 属性\n\nformtarget - 重写表单的 target 属性\n\n\n# output\n\noutput元素是html5新增的元素，用来设置不同数据的输出\n\noutput元素的输出内容是由javascript代码控制的\n\noninput表单事件：当用户对元素数据的输入时触发\n\noutput元素的属性：\n\nname属性：定义对象的唯一名称。（表单提交时使用）\n\nform属性：定义所属的一个或多个表单。\n\nfor属性：定义输出域相关的一个或多个元素。\n\n\n# progress\n\n是html5中新增的元素，用来建立一个进度条\n\n通常与javascript 一同使用，来显示任务的进度。\n\n使用时注意浏览器的支持情况：internet explorer 9 以及更早的版本不支持\n\nprogress元素的属性：\n\nmax属性：规定当前进度的最大值。\n\nvalue属性设定进度条当前默认显示值\n\nform属性：规定进度条所属的一个或多个表单。\n\n\n# meter\n\nhtml5中新增的元素，用来建立一个度量条,用来表示度量衡的评定\n\n通常与javascript 一同使用，来显示任务的进度。\n\nmeter元素的属性：\n\nvalue属性设定进度条当前默认显示值\n\nmax属性：规定范围的最大值，默认值为1.\n\nmin属性：规定范围的最小值，默认值为0.\n\nlow属性：规定被视作低的标准。\n\nhigh属性：规定被视作高标准。\n\nform属性：规定所属的一个或多个表单。\n\n\n# keygen\n\nhtml5中新增的元素，用来建立一个密钥生成器\n\n当提交表单时，私钥存储在本地，公钥发送到服务器。主要作用是提供一种用户验证身份的方法\n\n目前internet explorer 和 safari暂不支持\n\nkeygen元素的属性：\n\nname/form/autofocus/disabled\n\nchallenge属性:将 keygen 的值设置为在提交时询问。\n\nkeytype属性：定义密钥类型，如设置为rsa（一种密码的算法），则生成 rsa 密钥。\n\nrsa是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被iso推荐为公钥数据加密标准。\n\n\n# fieldset/legend\n\nfieldset元素：可将表单内的相关元素分组。\n\n当一组表单元素放到fieldset标签内时，浏览器会以特殊方式来显示它们，通常会有一个边框。\n\n没有必需的或唯一的属性。form/disabled属性可用。\n\nlegend元素：为 fieldset 元素定义标题\n\n\n# details/summary\n\ndetails元素：\n\n用于描述文档或文档某个部分的细节。\n\n通常与summary元素配合使用，可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details中的内容。\n\ndetails元素的属性：\n\nopen：规定在 html 页面上 details 是可见的。\n\nwarning\n\n*目前还不是所以浏览器都支持',charsets:{cjk:!0}},{frontmatter:{},regularPath:"/frontend/css/sprite/",relativePath:"frontend/css/sprite/README.md",key:"v-90970822",path:"/frontend/css/sprite/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"1.2.9canvas元素",frontmatter:{},regularPath:"/frontend/html/element/canvas/",relativePath:"frontend/html/element/canvas/README.md",key:"v-0987790a",path:"/frontend/html/element/canvas/",headers:[{level:2,title:"1.2.9canvas元素",slug:"_1-2-9canvas元素",normalizedTitle:"1.2.9canvas元素",charIndex:2},{level:3,title:"绘制圆/弧",slug:"绘制圆-弧",normalizedTitle:"绘制圆/弧",charIndex:1501},{level:3,title:"文字的绘制",slug:"文字的绘制",normalizedTitle:"文字的绘制",charIndex:1776},{level:3,title:"绘制阴影",slug:"绘制阴影",normalizedTitle:"绘制阴影",charIndex:1909}],headersStr:"1.2.9canvas元素 绘制圆/弧 文字的绘制 绘制阴影",content:'# 1.2.9canvas元素\n\nHTML5的canvas元素是HTML5技术标准中最令人振奋的功能之一。它提供了一套强大的图形API，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。让开发者能够制作从文字处理到电子游戏的各类应用程序。\n\n# 绘制线段\n\n<canvas id="canvas" width="500" height="300">\x3c!--设置的宽高和ID --\x3e\n    您浏览器暂不支持HTML5的canvas元素\x3c!--添加提示语句--\x3e\n</canvas>\n\n\nvar canvas=document.getElementById(\'canvas\');// 获取画布/设置绘图绘图环境\n\nvar c=canvas.getContext(\'2d\');// 固定语句\n\nc.lineWidth=10;// 线宽\n\nc.strokeStyle="#A52A2A" // 轮廓颜色 \n\nc.moveTo(50,50); //  设置起点\n\nc.lineTo(200,200); // 设置终点\n\nc.stroke(); // 开始绘制\n\n\n# 绘制矩形\n\n * 方法一：\n\n\nvar canvas=document.getElementById(\'canvas\'); \n\nvar c=canvas.getContext(\'2d\');\n\nc.lineWidth=10; // 线宽\n\nc.strokeStyle="#A52A2A" // 轮廓颜色\n\nc.moveTo(50,50); // 设置起点\n\nc.lineTo(200,50);\n\nc.lineTo(200,150);\n\nc.lineTo(50,150);\n\nc.lineTo(50,50); // 方法一：通过坐标回到起点\n\nc.closePath(); // 方法二：从当前点回到起始点\n\nc.stroke(); // 开始绘制\n\n\n * 方法二：\n\nvar canvas=document.getElementById(\'canvas\'); \n\nvar c=canvas.getContext(\'2d\');\n\nc.lineWidth=10; // 线宽\n\nc.strokeStyle="green"\n\nc.rect(300,50,150,100) // 创建一个矩形(x,y,width,height)\n\nc.stroke(); // 开始绘制\n\n\n\n * 方法三：\n\nvar canvas=document.getElementById(\'canvas\'); \n\nvar c=canvas.getContext(\'2d\');\n\nc.lineWidth=10; // 线宽\n\nc.strokeStyle="green"; // 轮廓颜色\n\nc.fillStyle="red"; // 填充颜色\n\nc.strokeRect(300,50,150,100); // 绘制空心矩形(x,y,width,height)\n\nc.fill(); // 填充颜色\n\n\n * 方法四：\n\nvar canvas=document.getElementById(\'canvas\'); \n\nvar c=canvas.getContext(\'2d\');\n\nc.lineWidth=10; // 线宽\n\nc.strokeStyle="green": // 轮廓颜色\n\nc.fillStyle="red": // 填充颜色\n\nc.fillRect(300,50,150,100); // 绘制实心矩形(x,y,width,height)\n\n\n\n# 绘制圆/弧\n\nvar canvas=document.getElementById(\'canvas\');\n\nvar c=canvas.getContext(\'2d\');\n\nc.lineWidth=10; // 线宽\n\nc.strokeStyle="green"; // 轮廓颜色\n\nc.fillStyle="red"; // 填充颜色\n\nc.arc(100,50,30,0,Math.PI/2，true/false); // 绘制实心矩形(x,y,r,起始角度，结束角度，顺逆时针)\n\nc.stroke(); // 开始绘制。Fill填充\n\n\n\n# 文字的绘制\n\nc.font= 40px 隶书;\nc.strokeText("",x,y,maxWith);   // 文字内容”,x,y\nc.fillText("",x,y,maxWith);    //  文字内容”,x,y\nc.fillText();\n\n\n\n# 绘制阴影\n\nshadowOffsetX 设置阴影的水平偏移距离\n\nc.shadowOffsetX=10;\n\n\nshadowOffsetY 设置阴影垂直偏移距离\n\nc.shadowOffsetY=10;   \n\n\nshadowBlur 设置阴影的模糊系数\n\nc.shadowBlur=5;    \n\n\nshadowColor 设置阴影的颜色\n\nc.shadowColor="green"   \n',normalizedContent:'# 1.2.9canvas元素\n\nhtml5的canvas元素是html5技术标准中最令人振奋的功能之一。它提供了一套强大的图形api，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。让开发者能够制作从文字处理到电子游戏的各类应用程序。\n\n# 绘制线段\n\n<canvas id="canvas" width="500" height="300">\x3c!--设置的宽高和id --\x3e\n    您浏览器暂不支持html5的canvas元素\x3c!--添加提示语句--\x3e\n</canvas>\n\n\nvar canvas=document.getelementbyid(\'canvas\');// 获取画布/设置绘图绘图环境\n\nvar c=canvas.getcontext(\'2d\');// 固定语句\n\nc.linewidth=10;// 线宽\n\nc.strokestyle="#a52a2a" // 轮廓颜色 \n\nc.moveto(50,50); //  设置起点\n\nc.lineto(200,200); // 设置终点\n\nc.stroke(); // 开始绘制\n\n\n# 绘制矩形\n\n * 方法一：\n\n\nvar canvas=document.getelementbyid(\'canvas\'); \n\nvar c=canvas.getcontext(\'2d\');\n\nc.linewidth=10; // 线宽\n\nc.strokestyle="#a52a2a" // 轮廓颜色\n\nc.moveto(50,50); // 设置起点\n\nc.lineto(200,50);\n\nc.lineto(200,150);\n\nc.lineto(50,150);\n\nc.lineto(50,50); // 方法一：通过坐标回到起点\n\nc.closepath(); // 方法二：从当前点回到起始点\n\nc.stroke(); // 开始绘制\n\n\n * 方法二：\n\nvar canvas=document.getelementbyid(\'canvas\'); \n\nvar c=canvas.getcontext(\'2d\');\n\nc.linewidth=10; // 线宽\n\nc.strokestyle="green"\n\nc.rect(300,50,150,100) // 创建一个矩形(x,y,width,height)\n\nc.stroke(); // 开始绘制\n\n\n\n * 方法三：\n\nvar canvas=document.getelementbyid(\'canvas\'); \n\nvar c=canvas.getcontext(\'2d\');\n\nc.linewidth=10; // 线宽\n\nc.strokestyle="green"; // 轮廓颜色\n\nc.fillstyle="red"; // 填充颜色\n\nc.strokerect(300,50,150,100); // 绘制空心矩形(x,y,width,height)\n\nc.fill(); // 填充颜色\n\n\n * 方法四：\n\nvar canvas=document.getelementbyid(\'canvas\'); \n\nvar c=canvas.getcontext(\'2d\');\n\nc.linewidth=10; // 线宽\n\nc.strokestyle="green": // 轮廓颜色\n\nc.fillstyle="red": // 填充颜色\n\nc.fillrect(300,50,150,100); // 绘制实心矩形(x,y,width,height)\n\n\n\n# 绘制圆/弧\n\nvar canvas=document.getelementbyid(\'canvas\');\n\nvar c=canvas.getcontext(\'2d\');\n\nc.linewidth=10; // 线宽\n\nc.strokestyle="green"; // 轮廓颜色\n\nc.fillstyle="red"; // 填充颜色\n\nc.arc(100,50,30,0,math.pi/2，true/false); // 绘制实心矩形(x,y,r,起始角度，结束角度，顺逆时针)\n\nc.stroke(); // 开始绘制。fill填充\n\n\n\n# 文字的绘制\n\nc.font= 40px 隶书;\nc.stroketext("",x,y,maxwith);   // 文字内容”,x,y\nc.filltext("",x,y,maxwith);    //  文字内容”,x,y\nc.filltext();\n\n\n\n# 绘制阴影\n\nshadowoffsetx 设置阴影的水平偏移距离\n\nc.shadowoffsetx=10;\n\n\nshadowoffsety 设置阴影垂直偏移距离\n\nc.shadowoffsety=10;   \n\n\nshadowblur 设置阴影的模糊系数\n\nc.shadowblur=5;    \n\n\nshadowcolor 设置阴影的颜色\n\nc.shadowcolor="green"   \n',charsets:{cjk:!0}},{title:"1.2.3img元素",frontmatter:{},regularPath:"/frontend/html/element/img/",relativePath:"frontend/html/element/img/README.md",key:"v-36b00bc0",path:"/frontend/html/element/img/",headers:[{level:2,title:"1.2.3img元素",slug:"_1-2-3img元素",normalizedTitle:"1.2.3img元素",charIndex:2},{level:3,title:"常用属性",slug:"常用属性",normalizedTitle:"常用属性",charIndex:17},{level:3,title:"样式初始化",slug:"样式初始化",normalizedTitle:"样式初始化",charIndex:162},{level:3,title:"图形映射：",slug:"图形映射",normalizedTitle:"图形映射：",charIndex:292}],headersStr:"1.2.3img元素 常用属性 样式初始化 图形映射：",content:'# 1.2.3img元素\n\n\n# 常用属性\n\n# src属性\n\n指定图片来源的路径\n\n# alt属性\n\n当图片无法显示时的替代文字\n\n# width和height属性\n\n指定图片的宽度和高度；单位是像素或百分比；\n\n# title属性\n\n当鼠标移动到该位置时显示该内容\n\n# usemap属性\n\n设置图片的映射区域\n\n\n# 样式初始化\n\n提示\n\n去除图片默认边框\n\nimg{\n    display: block;\n    /* 或 */\n    vertical-align: middle;\n    /* 或 */\n    vertical-align: top;\n}\n\n\n\n# 图形映射：\n\nmap标签\n\n> name:设置映射区的名称\n\narea标签，创建一个子映射区(必须在map标签内使用)\n\n> shape:设置子映射区形状\n> \n> > rect:矩形\n> > circ:圆形\n> > poly:多边形\n\n> coords:设置子映射区坐标\n> \n> > coords(x1,y1,x2,y2):子映射区为矩形时x,y为左上角顶点坐标、右下角顶点坐标\n> > coords(x,y,radius):子映射区为圆形时,xy圆点坐标\n> > coords(x1,y1,x2,y2,..,xn,yn)子映射区为多边形时x,y为各顶点坐标\n> > href:设置子映射区的目标URL\n> > alt:设置子映射区的替代文本\n\n\x3c!-- 通过usemap属性绑定相应的map映射区 --\x3e\n<img src="planets.gif" width="145" height="126" alt="Planets" usemap="#planetmap"> \n\n<map name="planetmap"> \x3c!-- planetmap映射区名称 --\x3e\n <area shape="rect" coords="0,0,82,126" href="sun.htm" alt="Sun">\n <area shape="circle" coords="90,58,3" href="mercur.htm" alt="Mercury">\n <area shape="circle" coords="124,58,8" href="venus.htm" alt="Venus">\n</map>\n',normalizedContent:'# 1.2.3img元素\n\n\n# 常用属性\n\n# src属性\n\n指定图片来源的路径\n\n# alt属性\n\n当图片无法显示时的替代文字\n\n# width和height属性\n\n指定图片的宽度和高度；单位是像素或百分比；\n\n# title属性\n\n当鼠标移动到该位置时显示该内容\n\n# usemap属性\n\n设置图片的映射区域\n\n\n# 样式初始化\n\n提示\n\n去除图片默认边框\n\nimg{\n    display: block;\n    /* 或 */\n    vertical-align: middle;\n    /* 或 */\n    vertical-align: top;\n}\n\n\n\n# 图形映射：\n\nmap标签\n\n> name:设置映射区的名称\n\narea标签，创建一个子映射区(必须在map标签内使用)\n\n> shape:设置子映射区形状\n> \n> > rect:矩形\n> > circ:圆形\n> > poly:多边形\n\n> coords:设置子映射区坐标\n> \n> > coords(x1,y1,x2,y2):子映射区为矩形时x,y为左上角顶点坐标、右下角顶点坐标\n> > coords(x,y,radius):子映射区为圆形时,xy圆点坐标\n> > coords(x1,y1,x2,y2,..,xn,yn)子映射区为多边形时x,y为各顶点坐标\n> > href:设置子映射区的目标url\n> > alt:设置子映射区的替代文本\n\n\x3c!-- 通过usemap属性绑定相应的map映射区 --\x3e\n<img src="planets.gif" width="145" height="126" alt="planets" usemap="#planetmap"> \n\n<map name="planetmap"> \x3c!-- planetmap映射区名称 --\x3e\n <area shape="rect" coords="0,0,82,126" href="sun.htm" alt="sun">\n <area shape="circle" coords="90,58,3" href="mercur.htm" alt="mercury">\n <area shape="circle" coords="124,58,8" href="venus.htm" alt="venus">\n</map>\n',charsets:{cjk:!0}},{title:"1.2.11iframe元素（内联框架）",frontmatter:{},regularPath:"/frontend/html/element/iframe/",relativePath:"frontend/html/element/iframe/README.md",key:"v-da3632ec",path:"/frontend/html/element/iframe/",headers:[{level:2,title:"1.2.11iframe元素（内联框架）",slug:"_1-2-11iframe元素-内联框架",normalizedTitle:"1.2.11iframe元素（内联框架）",charIndex:2}],headersStr:"1.2.11iframe元素（内联框架）",content:'# 1.2.11iframe元素（内联框架）\n\niframe元素用来在文档中添加一个内联框架。\n\niframe为body元素的子元素，必须放置在boay中使用\n\n主要属性:\n\n * src:要显示的文档的URL\n * name:名称\n * id:ID\n * width:宽度\n * height:高度\n * scrolling:是否显示滚动条\n * srcdoc:要显示的HTML内容\n\n> <iframe srcdoc="<p>Hello world!</p>" src="demo_iframe_srcdoc.htm"></iframe>\n\n * seamless:设置一个特殊的样式\n * sandbox:沙箱属性\n\n> 设置空的时候限制全部\n> allow-same-origin:允许 iframe 内容被视为与包含文档有相同的来源\n> allow-top-navigation:允许 iframe 内容从包含文档导航（加载）内容\n> allow-forms:允许表单提交\n> allow-scripts:允许脚本执行\n\n获取iframe内的DOM元素(必须同源)：\n\n 1. window.frames[0].document\n\n 2. document.querySelector(\'iframe\').contentWindow.document',normalizedContent:'# 1.2.11iframe元素（内联框架）\n\niframe元素用来在文档中添加一个内联框架。\n\niframe为body元素的子元素，必须放置在boay中使用\n\n主要属性:\n\n * src:要显示的文档的url\n * name:名称\n * id:id\n * width:宽度\n * height:高度\n * scrolling:是否显示滚动条\n * srcdoc:要显示的html内容\n\n> <iframe srcdoc="<p>hello world!</p>" src="demo_iframe_srcdoc.htm"></iframe>\n\n * seamless:设置一个特殊的样式\n * sandbox:沙箱属性\n\n> 设置空的时候限制全部\n> allow-same-origin:允许 iframe 内容被视为与包含文档有相同的来源\n> allow-top-navigation:允许 iframe 内容从包含文档导航（加载）内容\n> allow-forms:允许表单提交\n> allow-scripts:允许脚本执行\n\n获取iframe内的dom元素(必须同源)：\n\n 1. window.frames[0].document\n\n 2. document.queryselector(\'iframe\').contentwindow.document',charsets:{cjk:!0}},{title:"2.3.1字体属性",frontmatter:{},regularPath:"/frontend/css/attribute/",relativePath:"frontend/css/attribute/README.md",key:"v-b6352a7a",path:"/frontend/css/attribute/",headers:[{level:2,title:"2.3.1字体属性",slug:"_2-3-1字体属性",normalizedTitle:"2.3.1字体属性",charIndex:2},{level:2,title:"2.3.2文本属性",slug:"_2-3-2文本属性",normalizedTitle:"2.3.2文本属性",charIndex:1290},{level:2,title:"2.3.3边框",slug:"_2-3-3边框",normalizedTitle:"2.3.3边框",charIndex:3457},{level:3,title:"CSS3新增的边框属性：",slug:"css3新增的边框属性",normalizedTitle:"css3新增的边框属性：",charIndex:4451},{level:2,title:"2.3.4背景",slug:"_2-3-4背景",normalizedTitle:"2.3.4背景",charIndex:5257},{level:3,title:"CSS3新增的背景属性：",slug:"css3新增的背景属性",normalizedTitle:"css3新增的背景属性：",charIndex:5760},{level:2,title:"2.3.5渐变",slug:"_2-3-5渐变",normalizedTitle:"2.3.5渐变",charIndex:6323},{level:2,title:"2.3.6列表与表格",slug:"_2-3-6列表与表格",normalizedTitle:"2.3.6列表与表格",charIndex:6850},{level:2,title:"2.3.7其他常用属性",slug:"_2-3-7其他常用属性",normalizedTitle:"2.3.7其他常用属性",charIndex:7513},{level:2,title:"2.3.8兼容属性",slug:"_2-3-8兼容属性",normalizedTitle:"2.3.8兼容属性",charIndex:9714}],headersStr:"2.3.1字体属性 2.3.2文本属性 2.3.3边框 CSS3新增的边框属性： 2.3.4背景 CSS3新增的背景属性： 2.3.5渐变 2.3.6列表与表格 2.3.7其他常用属性 2.3.8兼容属性",content:"# 2.3.1字体属性\n\nfont-size:规定文本的字体尺寸：\n\n> px\n> %:相对父元素\n> vh:相对视口\n> em:相对父元素\n> rem:相对html\n> xx-small\n> x-small\n> small\n> medium:默认值\n> large\n> x-large\n> xx-large\n> smaller:相对父元素\n> arger:相对父元素\n\nfont-variant:规定是否以小型大写字母的字体显示文本：\n\n> normal:（默认值）浏览器会显示一个标准的字体。\n> small-caps 浏览器会显示小型大写字母的字体。\n\nfont-style:规定文本的字体样式：\n\n> normal:（默认值）浏览器会显示一个标准的字体。\n> italic:浏览器会显示一个斜体的字体样式。\n> oblique:浏览器会显示一个倾斜的字体样式。\n\nfont-weight:规定字体的粗细：\n\n> normal:（默认值）定义标准的字符。\n> bold:定义粗体字符。\n> bolder:定义更粗的字符。\n> lighter:定义更细的字符。\n> 100-900定义由粗到细的字符。400等同于normal，而700等同于bold。\n\nfont-family:规定文本的字体系列：\n\nfont:在一个声明中设置所有字体属性：\n\n这个简写属性用于一次设置元素字体的两个或更多方面。\n\n至少要指定字体大小和字体系列\n\n可以按顺序设置如下属性：font-style/font-variant/font-weight/font-size/font-family\n\n@font-face:嵌入字体： 下载地址：https://icomoon.io/\n\n打包图标icomoon App\n\n生成字体图标：generate Font\n\n解压压缩包，将fonts文件移之网页根目录\n\n声明：\n@font-face {\n\n  font-family: 'icomoon';\n\n  src:  url('fonts/icomoon.eot?cothrk');\n\n  src:  url('fonts/icomoon.eot?cothrk#iefix') format('embedded-opentype'),\n\n  url('fonts/icomoon.ttf?cothrk') format('truetype'),\n\n  url('fonts/icomoon.woff?cothrk') format('woff'),\n\n  url('fonts/icomoon.svg?cothrk#icomoon') format('svg');\n\n  font-weight: normal;\n\n  font-style: normal;\n\n  font-display: block;\n\n}\ncss引用：\ndiv{\n\n    font-family: 'icomoon';\n\n    font-style: normal;\n\n}\n\n\nhtml中应用：\n\n<i></i>\n\n\n\n# 2.3.2文本属性\n\ncolor:设置文本颜色\n\ntext-align:设置文本的水平对齐方式\n\n> left:（默认值）左对齐\n> right:右对齐\n> center:居中对齐\n> justify:两端对齐\n\nCSS3中新增了start和end属性值，在通常情况下，start等于left，end等于right\n\ntext-align-last:设置行末的水平对齐方式\n\n> left:（默认值）左对齐\n> right:右对齐\n> center:居中对齐\n> justify:两端对齐\n\nline-height:设置行高\n\n> normal:（默认值）\n> 数字\n> %\n> px\n> rem\n\ntext-indent:设置文本的首行缩进\n\n> %\n> px\n> em rem\n\ntext-decoration:向文本添加修饰\n\n> none:（默认值）显示标准的文本。\n> underline:定义文本下划线。\n> overline:定义文本上划线。\n> line-through:定义穿过文本下的一条线。\n> blink:定义闪烁的文本\n\nletter-spacing:设置字符间距\n\n> normal:（默认值）\n> px:（允许使用负值）\n\nword-spacing: 设置字/单词间距。\n\n> normal:（默认值）就等同于设置为 0。\n> 数字:（允许使用负值）。\n\ntext-transform: 设置对象中的文本的大小写\n\n> none:（默认值）标准的文本。\n> capitalize:每个单词以大写字母开头。\n> uppercase:转换为大写字母。\n> lowercase:转换为小写字母\n\ntext-shadow:向文本添加阴影。\n\nwhite-space:设置元素中空白的处理方式。\n\n> none（默认值）空白会被浏览器忽略。\n> pre:空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签,常用来输出带格式的json。\n> nowrap:文本不会换行，文本会在在同一行上继续，直到遇到br标签为止。\n> pre-wrap:保留空白符，但是正常地进行换行。\n> pre-line:合并空白符，但是正常地进行换行。\n> inherit:从父元素继承 white-space 属性的值。\n\ndirection:设置文本方向\n\n> ltr（默认值）文本方向从左到右。\n> rtl文本方向从右到左。\n\ndirection:rtl在遇到括号的时候会显示异常\n\n\n\ntext-wrap:规定文本的换行规则。\n\nword-break:规定非中日韩文本的换行规则。\n\nword-wrap:允许对长的不可分割的单词进行分割并换行到下一行。\n\ntext-fill-color:文本填充颜色，指定文字填充部分的颜色\n\ntext-stroke:文本边框颜色，指定文字描边部分的颜色\n\n> text-stroke-width文字的描边宽度 text-stroke-color文字的描边颜色。\n> \n> WARNING\n> \n> 使用该属性需要使用浏览器私有前缀\n\ntext-overflow:规定当文本溢出包含元素时发生的事情。\n\n> clip（默认值）当对象内文本溢出时不显示省略标记（...），而是将 溢出的部分裁切掉。\n\n> ellipsis：当对象内文本溢出时显示省略标记（...）。\n> \n> WARNING\n> \n> 该属性需要和over-flow:hidden属性、white-space:nowrap配合使用\n\ntext-outline:规定文本的轮廓\n\ntext-justify:规定当 text-align 设置为 \"justify\" 时所使用的对齐方法。\n\ntext-align-last:设置如何对齐最后一行或紧挨着强制换行符之前的行。\n\ntext-emphasis:向元素的文本应用重点标记以及重点标记的前景色。\n\nunicode-bidi:用于同一个页面里存在从不同方向读进的文本显示。与direction属性一起使用\n\nnormal/embed/bidi-override\n\nhanging-punctuation:规定标点字符是否位于线框之外。\n\npunctuation-trim:规定是否对标点字符进行修剪。\n\ntab-size:设定一个tab在页面中的显示长度\n\ntext-wrap:规定文本的换行规则。注释：目前主流浏览器都不支持 text-wrap 属性。\n\nvertical-align:文本垂直居中（只对行内元素有效，对块元素需要设置display: table-cell;）\n\n几种实现垂直居中的方法\n\n 1.  absolute + margin auto\n 2.  absolute + 负 margin\n 3.  absolute + calc\n 4.  absolute + transform\n 5.  line-height + vertical-align\n 6.  table\n 7.  css-table\n 8.  flex-container\n 9.  flex + margin auto\n 10. grid网格布局：推荐在移动端使用\n\n\n# 2.3.3边框\n\n元素的边框就是围绕元素内容和内边距的一条或多条线。\n\nborder:简写属性，用于把针对四个边的属性设置在一个声明。\n\nborder-width:简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度：\n\n常用单位为像素(px)、em\n\n> thin:细的边框。\n> medium:（默认值）\n> thick:定义粗的边框。\n\nborder-style:用于设置元素所有边框的样式，或者单独地为各边设置边框样式：\n\n> none:定义无边框。\n> dotted:定义点状边框。\n> dashed:定义虚线。\n> solid:定义实线。\n> double:定义双线。\n> groove:定义 3D 凹槽边框。\n> ridge:定义 3D 垄状边框。\n> inset:定义 3D inset 边框。\n> outset:定义 3D outset 边框。\n\nborder-color:简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。\n\nborder-bottom:简写属性，用于把下边框的所有属性设置到一个声明中。\n\nborder-bottom-color:设置元素的下边框的颜色。\n\nborder-bottom-style:设置元素的下边框的样式。\n\nborder-bottom-width:设置元素的下边框的宽度。\n\nborder-left:简写属性，用于把左边框的所有属性设置到一个声明中。\n\nborder-left-color:设置元素的左边框的颜色。\n\nborder-left-style:设置元素的左边框的样式。\n\nborder-left-width:设置元素的左边框的宽度。\n\nborder-right:简写属性，用于把右边框的所有属性设置到一个声明中。\n\nborder-right-color:设置元素的右边框的颜色。\n\nborder-right-style:设置元素的右边框的样式。\n\nborder-right-width:设置元素的右边框的宽度。\n\nborder-top:简写属性，用于把上边框的所有属性设置到一个声明中。\n\nborder-top-color:设置元素的上边框的颜色。\n\nborder-top-style:设置元素的上边框的样式。\n\nborder-top-width:设置元素的上边框的宽度。\n\n\n# CSS3新增的边框属性：\n\nborder-radius:设置所有四个border-radius属性的简写属性：\n\n*:同时设定四个角的圆角\n\n**:分别设定左上 右下、左下 右上圆角\n\n***:分别设定左上 、左下 右上、右下圆角\n\n****:分别设定左上 、右上、右下、左下圆角\n\nborder-top-left-radius:左上角圆角边框\n\nborder-top-right-radius:右上角圆角边框\n\nborder-bottom-right-radius:右下角圆角边框\n\nborder-bottom-left-radius:左下角圆角边框\n\nborder-image:设置所有border-image:属性的简写属性：\n\nborder-image:复合属性，设置边框使用图像来填充，可依次设置一下属性：\n\nborder-image-source:图像来源路径\n\nborder-image-slice:边框背景图的分割方式\n\nborder-image-width:边框的宽度。\n\nborder-image-outset:边框背景图的扩展(边框图像区域超出边框的量。)\n\nborder-image-repeat:边框图像的平铺方式:\n\n> stretch:拉伸\n> repeat:重复铺满\n> round:重复铺满并对图片进行调整\n\n使用border绘制三角形\n\nspan\n{\n\t border: 6px solid red;\n    border-left-color: #fff;\n    border-top-color: #fff;\n    border-bottom-color:#fff;\n}\n\n\nbox-shadow:向方框添加一个或多个阴影：\n\nnone： 无阴影\n\n阴影水平偏移值/阴影垂直偏移值/阴影模糊值/阴影外延值/阴影的颜色/inset内阴影(默认值为outset)\n\n\n# 2.3.4背景\n\nbackground:简写属性，作用是将背景属性设置在一个声明中：\n\nbackground-attachment:背景图像是否固定或者随着页面的其余部分滚动。scroll 默认值。/fixed 当页面的其余部分滚动时，背景图像不会移动。\n\nbackground-color:设置元素的背景颜色。\n\nbackground-image:把图像设置为背景。\n\nbackground-position:设置背景图像的起始位置。\n\n> left\n> right\n> center\n> bottom\n> top\n> \n> TIP\n> \n> 这几个属性值可以两两组合使用，如果只规定了一个关键词，那么第二个值将是\"center\"。\n> \n> x% y% （左上角是 0% 0%。右下角是 100% 100%;如果仅规定了一个值，另一个值将是 50%。）\n> x y （左上角是 0 0。右下角是 100 100;如果仅规定了一个值，另一个值将是 50%。）\n\nbackground-repeat:设置背景图像是否及如何重复。repeat/repeat-x/repeat-y/no-repeat\n\n\n# CSS3新增的背景属性：\n\nbackground-size:规定背景图片的尺寸：\n\n> px\n> %\n> cover:把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。\n> contain:把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域\n\nbackground-clip:规定背景的绘制区域：\n\n> border-box:背景被裁剪到边框盒。\n> padding-box:背景被裁剪到内边距框。\n> content-box:背景被裁剪到内容框。\n\nbackground-origin:规定背景图片的定位区域：\n\n> padding-box:背景图像相对于内边距框来定位。\n> border-box:背景图像相对于边框盒来定位。\n> content-box:背景图像相对于内容框来定位。\n\nbackground-blend-mode:设置背景图片的混合模式。\n\n> normal:设置正常的混合模式（默认值）\n> multiply:正片叠底模式\n> screen:滤色模式\n> overlay:叠加模式\n> darken:变暗模式\n> lighten:变亮模式\n> color-dodge:颜色减淡模式\n> saturation:饱和度模式\n> color:颜色模式\n> luminosity:亮度模式\n\n\n# 2.3.5渐变\n\nlinear-gradinet:线性渐变(开始位置 角度，起始颜色，终止颜色 )\n\n> 开始位置：渐变开始的位置\n> \n> > %\n> > 长度\n> > left\n> > right\n> > top\n> > bottom\n\n> 角度：渐变终止方向的角度，当开始位置为数值或百分比时候可用\n\n> 起始颜色\n> 终止颜色\n\nrepeating-linear-gradinet:重复渐变\n\nradial-gradient:径向渐变(形状 发散方向，起始颜色，终止颜色)\n\n> 形状:\n> \n> > ellipse:椭圆\n> > circle:圆形\n\n> 方向：\n> \n> > left\n> > right\n> > top\n> > bottom\n> > center\n\n> 半径：可用像素或关键字表示\n> \n> > closest-side:圆心到距离最近的边\n> > farthest-side:圆心到距离最远的边\n> > closest-corner:圆心到距离最近的角\n> > farthest-corner:圆心到距离最远的角\n\n> 起始颜色\n> 终止颜色\n\nrepeating-radial-gradinet:重复的径向渐变\n\n\n# 2.3.6列表与表格\n\n表格有关的属性：\n\nborder-collapse:设置是否把表格边框合并为单一的边框.属性值：separate 默认值/collapse边框合并\n\nborder-spacing:设置分隔单元格边框的距离。\n\ncaption-side:设置表格标题的位置。属性值：top 默认值,在表格之上。bottom 在表格之下。\n\nempty-cells:设置是否显示表格中的空单元格。属性值：hide/show默认\n\ntable-layout:设置显示宽度是否随内容拉伸。属性值：auto默认/fixed 列宽由表格宽度和列宽度设定。\n\n列表的属性：\n\nlist-style:简写属性。用于把所有用于列表的属性设置于一个声明中。\n\nlist-style-type:设置列表项标志的类型：\n\n> none:无标记。\n> disc:（默认值）实心圆。\n> circle:空心圆。\n> square:实心方块。\n> decimal:数字。\n> decimal-leading-zero:0开头的数字。\n> lower-roman:小写罗马数字。\n> upper-roman:大写罗马数字。\n> lower-alpha:小写英文字母。\n> upper-alpha:大写英文字母。\n\nlist-style-position:设置列表项标志的位置。属性值：inside/outside默认值\n\nlist-style-image:将图象设置为列表项标志。属性值：URL 图像的路径。/none 默认。无图形被显示。\n\n\n# 2.3.7其他常用属性\n\nopacity:透明度设定\n\nTIP\n\n * IE9, Firefox, Chrome, Opera和Safari使用属性opacity来设定透明度。opacity属性能够设置的值从0.0到1.0。值越小，越透明。\n * IE8 以及更早的版本使用滤镜filter:alpha(opacity=x) x能够取的值从0到100。值越小，越透明。\n * opacity与通过rgba()设定透明度的区别：前者同时作用于元素的标签内容，后者只是作用于元素本身\n\ncursor鼠标的样式：\n\n> hand:是手型。\n> pointer:也是手型，推荐使用这种。\n> crosshair:是十字型。\n> text:是移动到文本上的那种效果。\n> wait:是等待的种效果。\n> default:是默认效果。\n> e-resize:是向右的箭头。\n> ne-resize:是向右上的箭头。\n> n-resize:是向上的箭头。\n> nw-resize:是向左上的箭头。\n> w-resize:是向左的箭。\n> sw-resize:是左下的箭头。\n> s-resize:是向下的箭头。\n> se-resize:是向右下的箭头。\n> auto:是由系统自动给出效果。\n\npointer-events规定元素是否对指针事件做出反应\n\n> auto:默认值。元素对指针事件做出反应，比如:hover和click。\n> none:元素不对指针事件做出反应。\n> initial:将此属性设置为其默认值。\n> inherit:从其父元素继承此属性。\n\noutline:轮廓 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n> outline-color:设置轮廓的颜色。\n> outline-style:设置轮廓的样式。\n> outline-width:设置轮廓的宽度。\n> outline-offset:设置轮廓到边框的距离。 注：css新增属性,不可以写到符合属性里。\n\ndisplay:规定元素应该生成的框的类型\n\n> none此元素不会被显示。\n> block:此元素将显示为块级元素。特征：换行，可设置宽高尺寸。\n> inline:行内元素，默认。特征:大小自适应；不换行。\n> inline-block:行内块元素。特征:可以设置大小，但是不可以换行。\n> 其他：list-item/table/inline-table/table-cell/table-caption......\n\ninline-block的一些特殊问题\n\n 1. 该属性会让元素中间解析一个空格。解决方法是给父元素加font-size:0px;\n 2. 该属性会在垂直方向上以基线对齐。解决方法是给元素加vertical-align: top;\n\nvisibility:规定元素是否可见\n\n> visible默认值。元素是可见的。\n> hidden:元素是不可见的。\n> collapse:当在表格元素中使用，可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 \"hidden\"。\n> inherit:规定应该从父元素继承visibility属性的值。\n\nfilter:滤镜\n\n> blur():模糊\n> brightness():亮度\n> contrast():对比度\n> grayscale():灰度\n> hue-rotate():色相旋转\n> invert():反相\n> opacity():透明度\n> saturate():饱和度\n> sepia():深褐色\n> drop-shadow():阴影\n\ntouch-action:设置元素允许的触控操作类型\n\n> auto:浏览器来决定\n> none:阻止一切操作\n> pan-x:只允许单指水平移动\n> pan-y:只允许单指垂直移动\n> pan-left、pan-right、pan-up、pan-down:只允许单指向左、右、上、下移动\n> manipulation:只允许滚动和持续缩放操作\n> pinch-zoom只允许多手指平移和缩放操作\n\noverscroll-behavior:设置滚动链行为\n是overscroll-behavior-x和overscroll-behavior-y的集合属性\n\n> auto:默认效果，元素的滚动会传播给祖先元素\n> contain:阻止滚动链，滚动不会传播给祖先\n> none:阻止滚动链，也会阻止元素本身的滚动\n\noverscroll-behavior:控制元素在移动设备上是否使用滚动回弹效果\n\n> touch:当手指从触摸屏上移开，会保持一段时间的滚动\n> auto:当手指从触摸屏上移开，滚动会立即停止\n\ntext-size-adjust:在移动端的文本溢出算法\n\n> none:文本大小不会根据设备尺寸进行调整\n> auto:文本大小根据设备尺寸进行调整\n> %:用百分比来指定文本大小在设备尺寸不同的情况下如何调整\n\nfont-size-adjust设置当第一个字体不能使用时，第二个字体的大小\n\n> number:定义字体的aspect值比率\n> none:默认\n> inherit:继承父元素\n\n\n# 2.3.8兼容属性\n\n * Webkit内核：前缀为-webkit-\n * Trident内核：前缀为-ms-\n * Gecko内核：前缀为-moz-\n * Presto内核：前缀为-o-",normalizedContent:"# 2.3.1字体属性\n\nfont-size:规定文本的字体尺寸：\n\n> px\n> %:相对父元素\n> vh:相对视口\n> em:相对父元素\n> rem:相对html\n> xx-small\n> x-small\n> small\n> medium:默认值\n> large\n> x-large\n> xx-large\n> smaller:相对父元素\n> arger:相对父元素\n\nfont-variant:规定是否以小型大写字母的字体显示文本：\n\n> normal:（默认值）浏览器会显示一个标准的字体。\n> small-caps 浏览器会显示小型大写字母的字体。\n\nfont-style:规定文本的字体样式：\n\n> normal:（默认值）浏览器会显示一个标准的字体。\n> italic:浏览器会显示一个斜体的字体样式。\n> oblique:浏览器会显示一个倾斜的字体样式。\n\nfont-weight:规定字体的粗细：\n\n> normal:（默认值）定义标准的字符。\n> bold:定义粗体字符。\n> bolder:定义更粗的字符。\n> lighter:定义更细的字符。\n> 100-900定义由粗到细的字符。400等同于normal，而700等同于bold。\n\nfont-family:规定文本的字体系列：\n\nfont:在一个声明中设置所有字体属性：\n\n这个简写属性用于一次设置元素字体的两个或更多方面。\n\n至少要指定字体大小和字体系列\n\n可以按顺序设置如下属性：font-style/font-variant/font-weight/font-size/font-family\n\n@font-face:嵌入字体： 下载地址：https://icomoon.io/\n\n打包图标icomoon app\n\n生成字体图标：generate font\n\n解压压缩包，将fonts文件移之网页根目录\n\n声明：\n@font-face {\n\n  font-family: 'icomoon';\n\n  src:  url('fonts/icomoon.eot?cothrk');\n\n  src:  url('fonts/icomoon.eot?cothrk#iefix') format('embedded-opentype'),\n\n  url('fonts/icomoon.ttf?cothrk') format('truetype'),\n\n  url('fonts/icomoon.woff?cothrk') format('woff'),\n\n  url('fonts/icomoon.svg?cothrk#icomoon') format('svg');\n\n  font-weight: normal;\n\n  font-style: normal;\n\n  font-display: block;\n\n}\ncss引用：\ndiv{\n\n    font-family: 'icomoon';\n\n    font-style: normal;\n\n}\n\n\nhtml中应用：\n\n<i></i>\n\n\n\n# 2.3.2文本属性\n\ncolor:设置文本颜色\n\ntext-align:设置文本的水平对齐方式\n\n> left:（默认值）左对齐\n> right:右对齐\n> center:居中对齐\n> justify:两端对齐\n\ncss3中新增了start和end属性值，在通常情况下，start等于left，end等于right\n\ntext-align-last:设置行末的水平对齐方式\n\n> left:（默认值）左对齐\n> right:右对齐\n> center:居中对齐\n> justify:两端对齐\n\nline-height:设置行高\n\n> normal:（默认值）\n> 数字\n> %\n> px\n> rem\n\ntext-indent:设置文本的首行缩进\n\n> %\n> px\n> em rem\n\ntext-decoration:向文本添加修饰\n\n> none:（默认值）显示标准的文本。\n> underline:定义文本下划线。\n> overline:定义文本上划线。\n> line-through:定义穿过文本下的一条线。\n> blink:定义闪烁的文本\n\nletter-spacing:设置字符间距\n\n> normal:（默认值）\n> px:（允许使用负值）\n\nword-spacing: 设置字/单词间距。\n\n> normal:（默认值）就等同于设置为 0。\n> 数字:（允许使用负值）。\n\ntext-transform: 设置对象中的文本的大小写\n\n> none:（默认值）标准的文本。\n> capitalize:每个单词以大写字母开头。\n> uppercase:转换为大写字母。\n> lowercase:转换为小写字母\n\ntext-shadow:向文本添加阴影。\n\nwhite-space:设置元素中空白的处理方式。\n\n> none（默认值）空白会被浏览器忽略。\n> pre:空白会被浏览器保留。其行为方式类似 html 中的 pre 标签,常用来输出带格式的json。\n> nowrap:文本不会换行，文本会在在同一行上继续，直到遇到br标签为止。\n> pre-wrap:保留空白符，但是正常地进行换行。\n> pre-line:合并空白符，但是正常地进行换行。\n> inherit:从父元素继承 white-space 属性的值。\n\ndirection:设置文本方向\n\n> ltr（默认值）文本方向从左到右。\n> rtl文本方向从右到左。\n\ndirection:rtl在遇到括号的时候会显示异常\n\n\n\ntext-wrap:规定文本的换行规则。\n\nword-break:规定非中日韩文本的换行规则。\n\nword-wrap:允许对长的不可分割的单词进行分割并换行到下一行。\n\ntext-fill-color:文本填充颜色，指定文字填充部分的颜色\n\ntext-stroke:文本边框颜色，指定文字描边部分的颜色\n\n> text-stroke-width文字的描边宽度 text-stroke-color文字的描边颜色。\n> \n> warning\n> \n> 使用该属性需要使用浏览器私有前缀\n\ntext-overflow:规定当文本溢出包含元素时发生的事情。\n\n> clip（默认值）当对象内文本溢出时不显示省略标记（...），而是将 溢出的部分裁切掉。\n\n> ellipsis：当对象内文本溢出时显示省略标记（...）。\n> \n> warning\n> \n> 该属性需要和over-flow:hidden属性、white-space:nowrap配合使用\n\ntext-outline:规定文本的轮廓\n\ntext-justify:规定当 text-align 设置为 \"justify\" 时所使用的对齐方法。\n\ntext-align-last:设置如何对齐最后一行或紧挨着强制换行符之前的行。\n\ntext-emphasis:向元素的文本应用重点标记以及重点标记的前景色。\n\nunicode-bidi:用于同一个页面里存在从不同方向读进的文本显示。与direction属性一起使用\n\nnormal/embed/bidi-override\n\nhanging-punctuation:规定标点字符是否位于线框之外。\n\npunctuation-trim:规定是否对标点字符进行修剪。\n\ntab-size:设定一个tab在页面中的显示长度\n\ntext-wrap:规定文本的换行规则。注释：目前主流浏览器都不支持 text-wrap 属性。\n\nvertical-align:文本垂直居中（只对行内元素有效，对块元素需要设置display: table-cell;）\n\n几种实现垂直居中的方法\n\n 1.  absolute + margin auto\n 2.  absolute + 负 margin\n 3.  absolute + calc\n 4.  absolute + transform\n 5.  line-height + vertical-align\n 6.  table\n 7.  css-table\n 8.  flex-container\n 9.  flex + margin auto\n 10. grid网格布局：推荐在移动端使用\n\n\n# 2.3.3边框\n\n元素的边框就是围绕元素内容和内边距的一条或多条线。\n\nborder:简写属性，用于把针对四个边的属性设置在一个声明。\n\nborder-width:简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度：\n\n常用单位为像素(px)、em\n\n> thin:细的边框。\n> medium:（默认值）\n> thick:定义粗的边框。\n\nborder-style:用于设置元素所有边框的样式，或者单独地为各边设置边框样式：\n\n> none:定义无边框。\n> dotted:定义点状边框。\n> dashed:定义虚线。\n> solid:定义实线。\n> double:定义双线。\n> groove:定义 3d 凹槽边框。\n> ridge:定义 3d 垄状边框。\n> inset:定义 3d inset 边框。\n> outset:定义 3d outset 边框。\n\nborder-color:简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。\n\nborder-bottom:简写属性，用于把下边框的所有属性设置到一个声明中。\n\nborder-bottom-color:设置元素的下边框的颜色。\n\nborder-bottom-style:设置元素的下边框的样式。\n\nborder-bottom-width:设置元素的下边框的宽度。\n\nborder-left:简写属性，用于把左边框的所有属性设置到一个声明中。\n\nborder-left-color:设置元素的左边框的颜色。\n\nborder-left-style:设置元素的左边框的样式。\n\nborder-left-width:设置元素的左边框的宽度。\n\nborder-right:简写属性，用于把右边框的所有属性设置到一个声明中。\n\nborder-right-color:设置元素的右边框的颜色。\n\nborder-right-style:设置元素的右边框的样式。\n\nborder-right-width:设置元素的右边框的宽度。\n\nborder-top:简写属性，用于把上边框的所有属性设置到一个声明中。\n\nborder-top-color:设置元素的上边框的颜色。\n\nborder-top-style:设置元素的上边框的样式。\n\nborder-top-width:设置元素的上边框的宽度。\n\n\n# css3新增的边框属性：\n\nborder-radius:设置所有四个border-radius属性的简写属性：\n\n*:同时设定四个角的圆角\n\n**:分别设定左上 右下、左下 右上圆角\n\n***:分别设定左上 、左下 右上、右下圆角\n\n****:分别设定左上 、右上、右下、左下圆角\n\nborder-top-left-radius:左上角圆角边框\n\nborder-top-right-radius:右上角圆角边框\n\nborder-bottom-right-radius:右下角圆角边框\n\nborder-bottom-left-radius:左下角圆角边框\n\nborder-image:设置所有border-image:属性的简写属性：\n\nborder-image:复合属性，设置边框使用图像来填充，可依次设置一下属性：\n\nborder-image-source:图像来源路径\n\nborder-image-slice:边框背景图的分割方式\n\nborder-image-width:边框的宽度。\n\nborder-image-outset:边框背景图的扩展(边框图像区域超出边框的量。)\n\nborder-image-repeat:边框图像的平铺方式:\n\n> stretch:拉伸\n> repeat:重复铺满\n> round:重复铺满并对图片进行调整\n\n使用border绘制三角形\n\nspan\n{\n\t border: 6px solid red;\n    border-left-color: #fff;\n    border-top-color: #fff;\n    border-bottom-color:#fff;\n}\n\n\nbox-shadow:向方框添加一个或多个阴影：\n\nnone： 无阴影\n\n阴影水平偏移值/阴影垂直偏移值/阴影模糊值/阴影外延值/阴影的颜色/inset内阴影(默认值为outset)\n\n\n# 2.3.4背景\n\nbackground:简写属性，作用是将背景属性设置在一个声明中：\n\nbackground-attachment:背景图像是否固定或者随着页面的其余部分滚动。scroll 默认值。/fixed 当页面的其余部分滚动时，背景图像不会移动。\n\nbackground-color:设置元素的背景颜色。\n\nbackground-image:把图像设置为背景。\n\nbackground-position:设置背景图像的起始位置。\n\n> left\n> right\n> center\n> bottom\n> top\n> \n> tip\n> \n> 这几个属性值可以两两组合使用，如果只规定了一个关键词，那么第二个值将是\"center\"。\n> \n> x% y% （左上角是 0% 0%。右下角是 100% 100%;如果仅规定了一个值，另一个值将是 50%。）\n> x y （左上角是 0 0。右下角是 100 100;如果仅规定了一个值，另一个值将是 50%。）\n\nbackground-repeat:设置背景图像是否及如何重复。repeat/repeat-x/repeat-y/no-repeat\n\n\n# css3新增的背景属性：\n\nbackground-size:规定背景图片的尺寸：\n\n> px\n> %\n> cover:把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。\n> contain:把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域\n\nbackground-clip:规定背景的绘制区域：\n\n> border-box:背景被裁剪到边框盒。\n> padding-box:背景被裁剪到内边距框。\n> content-box:背景被裁剪到内容框。\n\nbackground-origin:规定背景图片的定位区域：\n\n> padding-box:背景图像相对于内边距框来定位。\n> border-box:背景图像相对于边框盒来定位。\n> content-box:背景图像相对于内容框来定位。\n\nbackground-blend-mode:设置背景图片的混合模式。\n\n> normal:设置正常的混合模式（默认值）\n> multiply:正片叠底模式\n> screen:滤色模式\n> overlay:叠加模式\n> darken:变暗模式\n> lighten:变亮模式\n> color-dodge:颜色减淡模式\n> saturation:饱和度模式\n> color:颜色模式\n> luminosity:亮度模式\n\n\n# 2.3.5渐变\n\nlinear-gradinet:线性渐变(开始位置 角度，起始颜色，终止颜色 )\n\n> 开始位置：渐变开始的位置\n> \n> > %\n> > 长度\n> > left\n> > right\n> > top\n> > bottom\n\n> 角度：渐变终止方向的角度，当开始位置为数值或百分比时候可用\n\n> 起始颜色\n> 终止颜色\n\nrepeating-linear-gradinet:重复渐变\n\nradial-gradient:径向渐变(形状 发散方向，起始颜色，终止颜色)\n\n> 形状:\n> \n> > ellipse:椭圆\n> > circle:圆形\n\n> 方向：\n> \n> > left\n> > right\n> > top\n> > bottom\n> > center\n\n> 半径：可用像素或关键字表示\n> \n> > closest-side:圆心到距离最近的边\n> > farthest-side:圆心到距离最远的边\n> > closest-corner:圆心到距离最近的角\n> > farthest-corner:圆心到距离最远的角\n\n> 起始颜色\n> 终止颜色\n\nrepeating-radial-gradinet:重复的径向渐变\n\n\n# 2.3.6列表与表格\n\n表格有关的属性：\n\nborder-collapse:设置是否把表格边框合并为单一的边框.属性值：separate 默认值/collapse边框合并\n\nborder-spacing:设置分隔单元格边框的距离。\n\ncaption-side:设置表格标题的位置。属性值：top 默认值,在表格之上。bottom 在表格之下。\n\nempty-cells:设置是否显示表格中的空单元格。属性值：hide/show默认\n\ntable-layout:设置显示宽度是否随内容拉伸。属性值：auto默认/fixed 列宽由表格宽度和列宽度设定。\n\n列表的属性：\n\nlist-style:简写属性。用于把所有用于列表的属性设置于一个声明中。\n\nlist-style-type:设置列表项标志的类型：\n\n> none:无标记。\n> disc:（默认值）实心圆。\n> circle:空心圆。\n> square:实心方块。\n> decimal:数字。\n> decimal-leading-zero:0开头的数字。\n> lower-roman:小写罗马数字。\n> upper-roman:大写罗马数字。\n> lower-alpha:小写英文字母。\n> upper-alpha:大写英文字母。\n\nlist-style-position:设置列表项标志的位置。属性值：inside/outside默认值\n\nlist-style-image:将图象设置为列表项标志。属性值：url 图像的路径。/none 默认。无图形被显示。\n\n\n# 2.3.7其他常用属性\n\nopacity:透明度设定\n\ntip\n\n * ie9, firefox, chrome, opera和safari使用属性opacity来设定透明度。opacity属性能够设置的值从0.0到1.0。值越小，越透明。\n * ie8 以及更早的版本使用滤镜filter:alpha(opacity=x) x能够取的值从0到100。值越小，越透明。\n * opacity与通过rgba()设定透明度的区别：前者同时作用于元素的标签内容，后者只是作用于元素本身\n\ncursor鼠标的样式：\n\n> hand:是手型。\n> pointer:也是手型，推荐使用这种。\n> crosshair:是十字型。\n> text:是移动到文本上的那种效果。\n> wait:是等待的种效果。\n> default:是默认效果。\n> e-resize:是向右的箭头。\n> ne-resize:是向右上的箭头。\n> n-resize:是向上的箭头。\n> nw-resize:是向左上的箭头。\n> w-resize:是向左的箭。\n> sw-resize:是左下的箭头。\n> s-resize:是向下的箭头。\n> se-resize:是向右下的箭头。\n> auto:是由系统自动给出效果。\n\npointer-events规定元素是否对指针事件做出反应\n\n> auto:默认值。元素对指针事件做出反应，比如:hover和click。\n> none:元素不对指针事件做出反应。\n> initial:将此属性设置为其默认值。\n> inherit:从其父元素继承此属性。\n\noutline:轮廓 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n\n> outline-color:设置轮廓的颜色。\n> outline-style:设置轮廓的样式。\n> outline-width:设置轮廓的宽度。\n> outline-offset:设置轮廓到边框的距离。 注：css新增属性,不可以写到符合属性里。\n\ndisplay:规定元素应该生成的框的类型\n\n> none此元素不会被显示。\n> block:此元素将显示为块级元素。特征：换行，可设置宽高尺寸。\n> inline:行内元素，默认。特征:大小自适应；不换行。\n> inline-block:行内块元素。特征:可以设置大小，但是不可以换行。\n> 其他：list-item/table/inline-table/table-cell/table-caption......\n\ninline-block的一些特殊问题\n\n 1. 该属性会让元素中间解析一个空格。解决方法是给父元素加font-size:0px;\n 2. 该属性会在垂直方向上以基线对齐。解决方法是给元素加vertical-align: top;\n\nvisibility:规定元素是否可见\n\n> visible默认值。元素是可见的。\n> hidden:元素是不可见的。\n> collapse:当在表格元素中使用，可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 \"hidden\"。\n> inherit:规定应该从父元素继承visibility属性的值。\n\nfilter:滤镜\n\n> blur():模糊\n> brightness():亮度\n> contrast():对比度\n> grayscale():灰度\n> hue-rotate():色相旋转\n> invert():反相\n> opacity():透明度\n> saturate():饱和度\n> sepia():深褐色\n> drop-shadow():阴影\n\ntouch-action:设置元素允许的触控操作类型\n\n> auto:浏览器来决定\n> none:阻止一切操作\n> pan-x:只允许单指水平移动\n> pan-y:只允许单指垂直移动\n> pan-left、pan-right、pan-up、pan-down:只允许单指向左、右、上、下移动\n> manipulation:只允许滚动和持续缩放操作\n> pinch-zoom只允许多手指平移和缩放操作\n\noverscroll-behavior:设置滚动链行为\n是overscroll-behavior-x和overscroll-behavior-y的集合属性\n\n> auto:默认效果，元素的滚动会传播给祖先元素\n> contain:阻止滚动链，滚动不会传播给祖先\n> none:阻止滚动链，也会阻止元素本身的滚动\n\noverscroll-behavior:控制元素在移动设备上是否使用滚动回弹效果\n\n> touch:当手指从触摸屏上移开，会保持一段时间的滚动\n> auto:当手指从触摸屏上移开，滚动会立即停止\n\ntext-size-adjust:在移动端的文本溢出算法\n\n> none:文本大小不会根据设备尺寸进行调整\n> auto:文本大小根据设备尺寸进行调整\n> %:用百分比来指定文本大小在设备尺寸不同的情况下如何调整\n\nfont-size-adjust设置当第一个字体不能使用时，第二个字体的大小\n\n> number:定义字体的aspect值比率\n> none:默认\n> inherit:继承父元素\n\n\n# 2.3.8兼容属性\n\n * webkit内核：前缀为-webkit-\n * trident内核：前缀为-ms-\n * gecko内核：前缀为-moz-\n * presto内核：前缀为-o-",charsets:{cjk:!0}},{title:"1.2.8布局元素",frontmatter:{},regularPath:"/frontend/html/element/layout/",relativePath:"frontend/html/element/layout/README.md",key:"v-b15b0d6c",path:"/frontend/html/element/layout/",headers:[{level:2,title:"1.2.8布局元素",slug:"_1-2-8布局元素",normalizedTitle:"1.2.8布局元素",charIndex:2},{level:3,title:"article与section",slug:"article与section",normalizedTitle:"article与section",charIndex:16},{level:3,title:"cection",slug:"cection",normalizedTitle:"cection",charIndex:575},{level:3,title:"nav",slug:"nav",normalizedTitle:"nav",charIndex:603},{level:3,title:"aside",slug:"aside",normalizedTitle:"aside",charIndex:694},{level:3,title:"figure/figcaption",slug:"figure-figcaption",normalizedTitle:"figure/figcaption",charIndex:812},{level:3,title:"header/footer",slug:"header-footer",normalizedTitle:"header/footer",charIndex:921},{level:3,title:"hgroup",slug:"hgroup",normalizedTitle:"hgroup",charIndex:1060},{level:3,title:"address",slug:"address",normalizedTitle:"address",charIndex:1089},{level:3,title:"time",slug:"time",normalizedTitle:"time",charIndex:1121}],headersStr:"1.2.8布局元素 article与section cection nav aside figure/figcaption header/footer hgroup address time",content:'# 1.2.8布局元素\n\n\n# article与section\n\n# article:\n\n用于定义一个独立的内容区块，比如一篇文章，一篇博客，一个帖子，论坛的一段用户评论，一篇新闻消息等。\n\narticle元素内可以嵌套其他元素，它可以有自己的头、尾、主体等内容。使用时要特别注意内容的独立性，一般对于独立完整的内容才使用article元素，如果只是一段内容的话应该使用section元素。\n\n# section:\n\n用来定义文章中的章节(通常应该有标题和段落内容)\n\n用来定义文档中特定内容的区块，可视为一个区域分组元素，用来给页面上的内容分块。\n\nsection元素可以定义文档的主体内容。\n\n用一句话来概括它的作用就是给内容分段，给页面分区\n\n注意他与div的区别，div强调在形式上的独立性，section强调的是内容上的独立性，注意它的语义。\n\n# article元素和section元素的区别:\n\n# 语义不同\n\n * article元素更强调内容的独立性\n\n * section元素更强调内容的关联性\n\n * article元素是独立完整的内容，section元素页面内容分块\n\n# 相同点\n\n * 本质上都是带有语义的div块元素\n\n分别可以看作<div id="section">和<div id="article"> \n\n\n\n# cection\n\n定义一个区域，如文章的章节等\n\n\n# nav\n\n定义目录导航。\n\n并非所有的超链接都放在nav元素中，通常只把一个文档中的主导航栏放在nav中 。\n\n在文章页面中，nav还可以用来给一个文字做一个目录的超链接。\n\n\n# aside\n\n定义侧边栏。\n\n用于定义article元素之外的内容，前提是这些内容与article元素内的内容相关。\n\n同时也可嵌套在article元素内部使用，作为主要内容的附属信息，比如与主内容有关的参考资料，名词解释等。\n\n\n# figure/figcaption\n\n# figure\n\n用于设置一个页面的标题部分，通常会包含标题，LOGO，导航等。（通常会放在文章的头部）\n\n# figcaption\n\n用来给figure元素定义标题。\n\n\n# header/footer\n\n# header\n\n用于设置一个页面的标题部分，通常会包含标题，LOGO，导航等。（通常会放在文章的头部）\n\n# footer\n\n通常用于设置一个网页的底部区域，会包含友情链接，版权声明，文件建立日期，联系方式等。（通常会放在页面的页脚）\n\n\n# hgroup\n\n标题分组通常放在header中。\n\n\n# address\n\n地址、联系信息等，内容会以斜体显示。\n\n\n# time\n\n微格式的概念\n\nHTML5中的微格式，是一种利用HTML5中的新标签对网页添加附加信息的方法，附加信息例如新闻事件发生的日期和时间，文章发表的日期等。\n\nHTML5中的微格式是为了简化浏览器对数据的提取，方便搜索引擎的搜索。\n\ntime是HTML5新增的元素\n\ntime元素代表24小时中的某个时刻或某个日期，表示时刻时允许带时差。它可以定义很多格式的日期和时间。\n\ndatetime属性中日期与时间之间要用"T"文字分隔，"T"表示时间。请注意倒数第二行，时间加上Z文字表示给机器编码时使用UTC标准时间，表示向机器编码另一地区时间，如果是编码本地时间，则不需要添加时差。\n\npubdate属性是个可选标签，加上它搜索引擎/浏览器就可以很方便的识别出那个日期是文章、新闻的发表日期。\n\n<time> 元素示例\n<time datetime="2015-10-22">2015年10月12日</time>\n<time datetime="2015-10-22T20:00">2015年10月12日晚上8点</time>\n<time datetime="2015-10-22T20:00Z">2015年10月12日晚上8点</time>\n<time datetime="2015-10-22T20:00+09:00">美国时间2015年10月12日8点</time>\n\n\n补充：新布局的特点\n\n更注重于内容而不是形式\n\n对人的友好：更加的语义化，高度的描述性，更加的直观，增加了代码的可读性。\n\n对计算机的友好：浏览器更容易解析，搜索引擎更容易抓取文档的内容。\n\n代码更加的简洁。',normalizedContent:'# 1.2.8布局元素\n\n\n# article与section\n\n# article:\n\n用于定义一个独立的内容区块，比如一篇文章，一篇博客，一个帖子，论坛的一段用户评论，一篇新闻消息等。\n\narticle元素内可以嵌套其他元素，它可以有自己的头、尾、主体等内容。使用时要特别注意内容的独立性，一般对于独立完整的内容才使用article元素，如果只是一段内容的话应该使用section元素。\n\n# section:\n\n用来定义文章中的章节(通常应该有标题和段落内容)\n\n用来定义文档中特定内容的区块，可视为一个区域分组元素，用来给页面上的内容分块。\n\nsection元素可以定义文档的主体内容。\n\n用一句话来概括它的作用就是给内容分段，给页面分区\n\n注意他与div的区别，div强调在形式上的独立性，section强调的是内容上的独立性，注意它的语义。\n\n# article元素和section元素的区别:\n\n# 语义不同\n\n * article元素更强调内容的独立性\n\n * section元素更强调内容的关联性\n\n * article元素是独立完整的内容，section元素页面内容分块\n\n# 相同点\n\n * 本质上都是带有语义的div块元素\n\n分别可以看作<div id="section">和<div id="article"> \n\n\n\n# cection\n\n定义一个区域，如文章的章节等\n\n\n# nav\n\n定义目录导航。\n\n并非所有的超链接都放在nav元素中，通常只把一个文档中的主导航栏放在nav中 。\n\n在文章页面中，nav还可以用来给一个文字做一个目录的超链接。\n\n\n# aside\n\n定义侧边栏。\n\n用于定义article元素之外的内容，前提是这些内容与article元素内的内容相关。\n\n同时也可嵌套在article元素内部使用，作为主要内容的附属信息，比如与主内容有关的参考资料，名词解释等。\n\n\n# figure/figcaption\n\n# figure\n\n用于设置一个页面的标题部分，通常会包含标题，logo，导航等。（通常会放在文章的头部）\n\n# figcaption\n\n用来给figure元素定义标题。\n\n\n# header/footer\n\n# header\n\n用于设置一个页面的标题部分，通常会包含标题，logo，导航等。（通常会放在文章的头部）\n\n# footer\n\n通常用于设置一个网页的底部区域，会包含友情链接，版权声明，文件建立日期，联系方式等。（通常会放在页面的页脚）\n\n\n# hgroup\n\n标题分组通常放在header中。\n\n\n# address\n\n地址、联系信息等，内容会以斜体显示。\n\n\n# time\n\n微格式的概念\n\nhtml5中的微格式，是一种利用html5中的新标签对网页添加附加信息的方法，附加信息例如新闻事件发生的日期和时间，文章发表的日期等。\n\nhtml5中的微格式是为了简化浏览器对数据的提取，方便搜索引擎的搜索。\n\ntime是html5新增的元素\n\ntime元素代表24小时中的某个时刻或某个日期，表示时刻时允许带时差。它可以定义很多格式的日期和时间。\n\ndatetime属性中日期与时间之间要用"t"文字分隔，"t"表示时间。请注意倒数第二行，时间加上z文字表示给机器编码时使用utc标准时间，表示向机器编码另一地区时间，如果是编码本地时间，则不需要添加时差。\n\npubdate属性是个可选标签，加上它搜索引擎/浏览器就可以很方便的识别出那个日期是文章、新闻的发表日期。\n\n<time> 元素示例\n<time datetime="2015-10-22">2015年10月12日</time>\n<time datetime="2015-10-22t20:00">2015年10月12日晚上8点</time>\n<time datetime="2015-10-22t20:00z">2015年10月12日晚上8点</time>\n<time datetime="2015-10-22t20:00+09:00">美国时间2015年10月12日8点</time>\n\n\n补充：新布局的特点\n\n更注重于内容而不是形式\n\n对人的友好：更加的语义化，高度的描述性，更加的直观，增加了代码的可读性。\n\n对计算机的友好：浏览器更容易解析，搜索引擎更容易抓取文档的内容。\n\n代码更加的简洁。',charsets:{cjk:!0}},{title:"1.2.4列表",frontmatter:{},regularPath:"/frontend/html/element/list/",relativePath:"frontend/html/element/list/README.md",key:"v-0b9e0c4a",path:"/frontend/html/element/list/",headers:[{level:2,title:"1.2.4列表",slug:"_1-2-4列表",normalizedTitle:"1.2.4列表",charIndex:2},{level:3,title:"ul有序列表",slug:"ul有序列表",normalizedTitle:"ul有序列表",charIndex:14},{level:3,title:"ol无序列表",slug:"ol无序列表",normalizedTitle:"ol无序列表",charIndex:72},{level:3,title:"dl自定义列表",slug:"dl自定义列表",normalizedTitle:"dl自定义列表",charIndex:130},{level:3,title:"样式初始化",slug:"样式初始化",normalizedTitle:"样式初始化",charIndex:189}],headersStr:"1.2.4列表 ul有序列表 ol无序列表 dl自定义列表 样式初始化",content:"# 1.2.4列表\n\n\n# ul有序列表\n\n<ul>\n    <li>项目一</li>\n    <li>项目一</li>\n</ul>\n\n\n\n# ol无序列表\n\n<ol>\n    <li>项目一</li>\n    <li>项目一</li>\n</ol>\n\n\n\n# dl自定义列表\n\n<dl>\n    <li>项目一</li>\n    <li>项目一</li>\n</dl>\n\n\n\n# 样式初始化\n\n提示\n\n不显示项目符号\n\nul,ol{\n    list-style:none;\n}\n",normalizedContent:"# 1.2.4列表\n\n\n# ul有序列表\n\n<ul>\n    <li>项目一</li>\n    <li>项目一</li>\n</ul>\n\n\n\n# ol无序列表\n\n<ol>\n    <li>项目一</li>\n    <li>项目一</li>\n</ol>\n\n\n\n# dl自定义列表\n\n<dl>\n    <li>项目一</li>\n    <li>项目一</li>\n</dl>\n\n\n\n# 样式初始化\n\n提示\n\n不显示项目符号\n\nul,ol{\n    list-style:none;\n}\n",charsets:{cjk:!0}},{title:"1.2.7媒体元素",frontmatter:{},regularPath:"/frontend/html/element/media/",relativePath:"frontend/html/element/media/README.md",key:"v-ee8690c4",path:"/frontend/html/element/media/",headers:[{level:2,title:"1.2.7媒体元素",slug:"_1-2-7媒体元素",normalizedTitle:"1.2.7媒体元素",charIndex:2},{level:3,title:"video元素",slug:"video元素",normalizedTitle:"video元素",charIndex:16},{level:3,title:"audio元素",slug:"audio元素",normalizedTitle:"audio元素",charIndex:342},{level:3,title:"source元素-解决浏览器额兼容",slug:"source元素-解决浏览器额兼容",normalizedTitle:"source元素-解决浏览器额兼容",charIndex:606},{level:3,title:"embed/object元素",slug:"embed-object元素",normalizedTitle:"embed/object元素",charIndex:710}],headersStr:"1.2.7媒体元素 video元素 audio元素 source元素-解决浏览器额兼容 embed/object元素",content:"# 1.2.7媒体元素\n\n\n# video元素\n\n# video支持的格式：\n\nOgg=支持的浏览器有：Firefox、Opera、Chrome\n\nMPEG4=支持的浏览器有：IE9+、Chrome、Safari\n\n虽然目前应用较广，单有专利保护，是收费在\n\nWebM=支持的浏览器有：Chrome、Opera、Safari\n\n专门为网页传播而设计在，清晰度高，压缩率也很高，并且开源免费，未来可能会成为主流。目前国外大在视频网站很多采用\n\n# video属性：\n\nsrc:要播放的视频的 URL地址。\n\nwidth/height:设置视频播放器的宽度/高度。\n\nautoplay:视频在就绪后自动播放。\n\nloop:循环播放\n\ncontrol:向用户显示控件，比如播放按钮\n\n\n# audio元素\n\n# audio支持的格式：\n\nOgg=支持的浏览器有：Firefox、Opera、Chrome\n\nMP3=支持的浏览器有：IE9+、Chrome、Safari\n\nWAV=支持的浏览器有：Firefox、Chrome、Safari\n\n# audio属性：\n\nsrc:要播放的视频的 URL地址。\n\ncontrol:向用户显示控件，比如播放按钮\n\nautoplay:视频在就绪后自动播放。\n\nloop:循环播放\n\npreload:音频在页面加载时是否进行加载，并预备播放。一般不需要设置，使用默认值即可。\n\n\n# source元素-解决浏览器额兼容\n\nvideo和audio元素的子元素，可指定多个文件来源，用来解决浏览器的兼容问题\n\n如果使用了source元素，则不可以在video和audio中设置src属性\n\n\n# embed/object元素\n\nembed定义嵌入的内容，比如插件。\n\nembed用来嵌入对象，比如flash，但是能否正常显示，取决于浏览器是否支持或是否安装有相应的插件\n\nembed元素的属性有src、type、width、height\n\nobject定义定义一个嵌入的对象，用于包含对象，比如图像、音频、视频、以及 Flash。\n\nobject只是用来嵌入对象，但是能否正常显示，同样取决于浏览器是否支持或是否安装有相应的插件",normalizedContent:"# 1.2.7媒体元素\n\n\n# video元素\n\n# video支持的格式：\n\nogg=支持的浏览器有：firefox、opera、chrome\n\nmpeg4=支持的浏览器有：ie9+、chrome、safari\n\n虽然目前应用较广，单有专利保护，是收费在\n\nwebm=支持的浏览器有：chrome、opera、safari\n\n专门为网页传播而设计在，清晰度高，压缩率也很高，并且开源免费，未来可能会成为主流。目前国外大在视频网站很多采用\n\n# video属性：\n\nsrc:要播放的视频的 url地址。\n\nwidth/height:设置视频播放器的宽度/高度。\n\nautoplay:视频在就绪后自动播放。\n\nloop:循环播放\n\ncontrol:向用户显示控件，比如播放按钮\n\n\n# audio元素\n\n# audio支持的格式：\n\nogg=支持的浏览器有：firefox、opera、chrome\n\nmp3=支持的浏览器有：ie9+、chrome、safari\n\nwav=支持的浏览器有：firefox、chrome、safari\n\n# audio属性：\n\nsrc:要播放的视频的 url地址。\n\ncontrol:向用户显示控件，比如播放按钮\n\nautoplay:视频在就绪后自动播放。\n\nloop:循环播放\n\npreload:音频在页面加载时是否进行加载，并预备播放。一般不需要设置，使用默认值即可。\n\n\n# source元素-解决浏览器额兼容\n\nvideo和audio元素的子元素，可指定多个文件来源，用来解决浏览器的兼容问题\n\n如果使用了source元素，则不可以在video和audio中设置src属性\n\n\n# embed/object元素\n\nembed定义嵌入的内容，比如插件。\n\nembed用来嵌入对象，比如flash，但是能否正常显示，取决于浏览器是否支持或是否安装有相应的插件\n\nembed元素的属性有src、type、width、height\n\nobject定义定义一个嵌入的对象，用于包含对象，比如图像、音频、视频、以及 flash。\n\nobject只是用来嵌入对象，但是能否正常显示，同样取决于浏览器是否支持或是否安装有相应的插件",charsets:{cjk:!0}},{title:"1.2.5select元素",frontmatter:{},regularPath:"/frontend/html/element/select/",relativePath:"frontend/html/element/select/README.md",key:"v-3ccff98a",path:"/frontend/html/element/select/",headers:[{level:2,title:"1.2.5select元素",slug:"_1-2-5select元素",normalizedTitle:"1.2.5select元素",charIndex:2},{level:3,title:"基本结构",slug:"基本结构",normalizedTitle:"基本结构",charIndex:20},{level:3,title:"caption元素：为表格添加标题",slug:"caption元素-为表格添加标题",normalizedTitle:"caption元素：为表格添加标题",charIndex:176},{level:3,title:"th元素：为表格添加标题行",slug:"th元素-为表格添加标题行",normalizedTitle:"th元素：为表格添加标题行",charIndex:344},{level:3,title:"colspan元素：横向合并单元格",slug:"colspan元素-横向合并单元格",normalizedTitle:"colspan元素：横向合并单元格",charIndex:409},{level:3,title:"rowspan元素：纵向向合并单元格",slug:"rowspan元素-纵向向合并单元格",normalizedTitle:"rowspan元素：纵向向合并单元格",charIndex:471},{level:3,title:"thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚",slug:"thead-tfoot-tbaody元素-为表格设置表头-主体和表格页脚",normalizedTitle:"thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚",charIndex:534},{level:3,title:"colgroup元素：用来组合列",slug:"colgroup元素-用来组合列",normalizedTitle:"colgroup元素：用来组合列",charIndex:878},{level:3,title:"col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用",slug:"col元素-用来设定列的属性-一般作为colgroup元素的子元素配合使用",normalizedTitle:"col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用",charIndex:1129},{level:3,title:"html5新增属性",slug:"html5新增属性",normalizedTitle:"html5新增属性",charIndex:1469}],headersStr:"1.2.5select元素 基本结构 caption元素：为表格添加标题 th元素：为表格添加标题行 colspan元素：横向合并单元格 rowspan元素：纵向向合并单元格 thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚 colgroup元素：用来组合列 col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用 html5新增属性",content:'# 1.2.5select元素\n\n\n# 基本结构\n\ntable：表格的范围，外框；用来定义表格，表格的其他元素包含在table标签里面。\ntr：表格的行。\ntd：表格的单元格。\n\n<table>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n\n# caption元素：为表格添加标题\n\n<table>\n    <caption>标题</caption>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n注意\n\n在HTML5中已经被废弃，不推荐使用，建议使用CSS样式设置。\n\n\n# th元素：为表格添加标题行\n\n<tr>\n    <th>项目一</th>\n    <th>项目一</th>\n</tr>\n\n\n\n# colspan元素：横向合并单元格\n\n<tr>\n   <td colspan="2">合计</td>\n</tr>\n\n\n\n# rowspan元素：纵向向合并单元格\n\n<tr>\n   <td colspan="2">合计</td>\n</tr>\n\n\n\n# thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚\n\n<table>\n\t<thead>\n        \x3c!-- 表头 --\x3e\n\t\t<tr>\n\t\t\t<td>表头1</td>\n\t\t\t<td>表头2</td>\n\t\t</tr>\n\t</thead>\n\t<tbaody>\n        \x3c!-- 主体 --\x3e\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t</tbaody>\n\t<tfoot>\n        \x3c!-- 页脚 --\x3e\n\t\t<tr>\n\t\t\t<td>页脚1</td>\n\t\t\t<td>页脚2</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n\n\n\n# colgroup元素：用来组合列\n\n<table>\n    <colgroup span="2" style="background:red"></colgroup> \n    \x3c!-- 设置前两列背景颜色为红色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\n\n# col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用\n\n<table>\n    <colgroup>\n    <col span="2" style="background-color:red"> \n    <col style="background-color:yellow">\n  </colgroup> \n    \x3c!-- 设置前两列背景颜色为红色，其他为黄色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\n\n# html5新增属性\n\nform属性:将表单外的内容与表单进行关联\n\nnovalidate属性：设置数据提交时不进行验证\n\nenctype属性：仅作了解规定在发送到服务器之前应该如何对表单数据进行编码。通常情况下我们使用默认值即可\n\naccept-charset属性：仅作了解accept-charset 属性规定服务器处理表单数据所接受的字符集。 accept-charset 属性允许您指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。通常情况下我们使用默认值即可 此属性的默认值是 "unknown"，表示表单的字符集与包含表单的文档的字符集相同。',normalizedContent:'# 1.2.5select元素\n\n\n# 基本结构\n\ntable：表格的范围，外框；用来定义表格，表格的其他元素包含在table标签里面。\ntr：表格的行。\ntd：表格的单元格。\n\n<table>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n\n# caption元素：为表格添加标题\n\n<table>\n    <caption>标题</caption>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n注意\n\n在html5中已经被废弃，不推荐使用，建议使用css样式设置。\n\n\n# th元素：为表格添加标题行\n\n<tr>\n    <th>项目一</th>\n    <th>项目一</th>\n</tr>\n\n\n\n# colspan元素：横向合并单元格\n\n<tr>\n   <td colspan="2">合计</td>\n</tr>\n\n\n\n# rowspan元素：纵向向合并单元格\n\n<tr>\n   <td colspan="2">合计</td>\n</tr>\n\n\n\n# thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚\n\n<table>\n\t<thead>\n        \x3c!-- 表头 --\x3e\n\t\t<tr>\n\t\t\t<td>表头1</td>\n\t\t\t<td>表头2</td>\n\t\t</tr>\n\t</thead>\n\t<tbaody>\n        \x3c!-- 主体 --\x3e\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t</tbaody>\n\t<tfoot>\n        \x3c!-- 页脚 --\x3e\n\t\t<tr>\n\t\t\t<td>页脚1</td>\n\t\t\t<td>页脚2</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n\n\n\n# colgroup元素：用来组合列\n\n<table>\n    <colgroup span="2" style="background:red"></colgroup> \n    \x3c!-- 设置前两列背景颜色为红色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\n\n# col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用\n\n<table>\n    <colgroup>\n    <col span="2" style="background-color:red"> \n    <col style="background-color:yellow">\n  </colgroup> \n    \x3c!-- 设置前两列背景颜色为红色，其他为黄色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\n\n# html5新增属性\n\nform属性:将表单外的内容与表单进行关联\n\nnovalidate属性：设置数据提交时不进行验证\n\nenctype属性：仅作了解规定在发送到服务器之前应该如何对表单数据进行编码。通常情况下我们使用默认值即可\n\naccept-charset属性：仅作了解accept-charset 属性规定服务器处理表单数据所接受的字符集。 accept-charset 属性允许您指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。通常情况下我们使用默认值即可 此属性的默认值是 "unknown"，表示表单的字符集与包含表单的文档的字符集相同。',charsets:{cjk:!0}},{title:"1.2.1文本元素",frontmatter:{},regularPath:"/frontend/html/element/text/",relativePath:"frontend/html/element/text/README.md",key:"v-6f688a2c",path:"/frontend/html/element/text/",headers:[{level:2,title:"1.2.1文本元素",slug:"_1-2-1文本元素",normalizedTitle:"1.2.1文本元素",charIndex:2}],headersStr:"1.2.1文本元素",content:'# 1.2.1文本元素\n\n# 文本元素，就是将一段文本设置成相匹配的结构和含义\n\n 1.  b元素：加粗文字。\n\n 2.  br元素：强制换行。\n\n 3.  i元素：文字倾斜。\n\n 4.  del元素：删除文字。\n\n 5.  strong元素：强调一段文本（加粗文字）。\n\n 6.  wbr元素：表示安全换行。\n\n 7.  em元素：强调（文字倾斜）。\n\n 8.  s元素：删除线。表示不准确的删除。\n\n 9.  u元素：给文字加下划线。\n\n 10. ins元素：给文字加下划线，起到强调作用。\n\n 11. small元素：添加小号字体（用于免责声明和澄清声明）。\n\n 12. sub和sup元素：添加下标和上标： sub表示下标：HTML5sup，sup表示上标： HTML5sup 。\n\n 13. dfn元素：倾斜文本（表示定义术语，是对一个词或短语的解释）。\n\n 14. abbr元素：表示一段文本的缩写（在文本显示上没有任何实际效果，比如WTO）。\n\n 15. q元素：给文本加上双引号（表示引用来自其他地方的的内容）。\n\n 16. *code等元素：表示计算机代码片段。function(){}。\n\n 17. *var元素用来表示编程语言中的变量。\n\n 18. *numsamp元素表示程序或计算机的输出您没有权限浏览该网页。\n\n 19. *kbd元素表示某部分内容是由用户利用键盘输入如：请按Enter键。\n\n 20. ruby元素：文字上方或右方的注音符号（很多浏览器不支持此功能）,rp标签：是浏览器不支持时显示的内容\n\n> <ruby>\n>   漢 <rp>(</rp><rt>han</rt><rp>)</rp>\n>   字 <rp>(</rp><rt>zi</rt><rp>)</rp>\n> </ruby>\n\n 21. cite元素：表示引用其他作品的标题。 实际效果就是加粗文本\n 22. bdo元素：设置文字方向，必需使用dir属性才可以设置，共两个值，rtl（从右到左）。即：right to left\n 23. mark元素：突出显示文本，用于记号， 实际作用就是加上一个黄色的背景。\n 24. time元素：从语义上来看就是表示日期和时间，例如 2015-9-18\n 25. span元素：表示一般性的文本，没有特殊效果（行内元素）\n 26. pre元素：保持原始格式（其实主要是保持空格和换行）,常用来输出带格式的json\n 27. base元素：为页面上的所有链接规定默认地址或默认目标\n\n提示\n\n*这几个元素属于英文范畴，必须将html设置成英语才能体现效果。\n\n<html lang="en"> \n',normalizedContent:'# 1.2.1文本元素\n\n# 文本元素，就是将一段文本设置成相匹配的结构和含义\n\n 1.  b元素：加粗文字。\n\n 2.  br元素：强制换行。\n\n 3.  i元素：文字倾斜。\n\n 4.  del元素：删除文字。\n\n 5.  strong元素：强调一段文本（加粗文字）。\n\n 6.  wbr元素：表示安全换行。\n\n 7.  em元素：强调（文字倾斜）。\n\n 8.  s元素：删除线。表示不准确的删除。\n\n 9.  u元素：给文字加下划线。\n\n 10. ins元素：给文字加下划线，起到强调作用。\n\n 11. small元素：添加小号字体（用于免责声明和澄清声明）。\n\n 12. sub和sup元素：添加下标和上标： sub表示下标：html5sup，sup表示上标： html5sup 。\n\n 13. dfn元素：倾斜文本（表示定义术语，是对一个词或短语的解释）。\n\n 14. abbr元素：表示一段文本的缩写（在文本显示上没有任何实际效果，比如wto）。\n\n 15. q元素：给文本加上双引号（表示引用来自其他地方的的内容）。\n\n 16. *code等元素：表示计算机代码片段。function(){}。\n\n 17. *var元素用来表示编程语言中的变量。\n\n 18. *numsamp元素表示程序或计算机的输出您没有权限浏览该网页。\n\n 19. *kbd元素表示某部分内容是由用户利用键盘输入如：请按enter键。\n\n 20. ruby元素：文字上方或右方的注音符号（很多浏览器不支持此功能）,rp标签：是浏览器不支持时显示的内容\n\n> <ruby>\n>   漢 <rp>(</rp><rt>han</rt><rp>)</rp>\n>   字 <rp>(</rp><rt>zi</rt><rp>)</rp>\n> </ruby>\n\n 21. cite元素：表示引用其他作品的标题。 实际效果就是加粗文本\n 22. bdo元素：设置文字方向，必需使用dir属性才可以设置，共两个值，rtl（从右到左）。即：right to left\n 23. mark元素：突出显示文本，用于记号， 实际作用就是加上一个黄色的背景。\n 24. time元素：从语义上来看就是表示日期和时间，例如 2015-9-18\n 25. span元素：表示一般性的文本，没有特殊效果（行内元素）\n 26. pre元素：保持原始格式（其实主要是保持空格和换行）,常用来输出带格式的json\n 27. base元素：为页面上的所有链接规定默认地址或默认目标\n\n提示\n\n*这几个元素属于英文范畴，必须将html设置成英语才能体现效果。\n\n<html lang="en"> \n',charsets:{cjk:!0}},{title:"1.2.2a元素",frontmatter:{},regularPath:"/frontend/html/element/link/",relativePath:"frontend/html/element/link/README.md",key:"v-46ff92ca",path:"/frontend/html/element/link/",headers:[{level:2,title:"1.2.2a元素",slug:"_1-2-2a元素",normalizedTitle:"1.2.2a元素",charIndex:2},{level:3,title:"常用属性",slug:"常用属性",normalizedTitle:"常用属性",charIndex:15},{level:3,title:"外链",slug:"外链",normalizedTitle:"外链",charIndex:154},{level:3,title:"内链",slug:"内链",normalizedTitle:"内链",charIndex:568},{level:3,title:"样式初始化",slug:"样式初始化",normalizedTitle:"样式初始化",charIndex:651}],headersStr:"1.2.2a元素 常用属性 外链 内链 样式初始化",content:'# 1.2.2a元素\n\n\n# 常用属性\n\n# href属性\n\n指向的页面URL\n\n# target属性\n\n设置超链接的打开方式\n\n * self:当前位置、\n * blank:新窗口、\n * top:最顶层框架、\n * parent:父框架\n\n# type属性\n\n规定被链接文档的的 MIME 类型\n\n\n# 外链\n\n# 绝对路径和相对路径\n\n# 绝对路径\n\n需要指出链接资源的绝对位置，与你的HTML文档的位置无关。\n\n * 服务器中的位置： href="http://baidule.yuansupic.com/"\n * 本地存储的位置： file:///D:\\桌面\\HTML5课程\\HTML5入门实例课程\\lesson9\\1.png\n\n# 相对路径\n\n * 同一个路径： 直接写文件名称 或 ./文件名 比如：tp.jpg或者./tp.jpg\n * 在下级路径： 路径名称/资源名称：xxx/tp.jpg\n * 在下下级路径： xx/xxx/tp.jpg\n * 在上级路径：../资源名称：../tp.jpg\n * 在上上级路径： ../../tp.jpg\n\n提示\n\n * .表示当前目录、 ..表示上级目录、...表示上上级目录\n * 如果链接资源与你的HTML文档位于同一个站点，可以使用相对路径。否则必须使用绝对路径\n\n\n# 内链\n\n * id属性：href="#id"\n * name属性：href="#name"\n * 跨页面：href="index.html#id/name"\n\n\n# 样式初始化\n\na:link{\n    text-decoration:none;\n     /* 指正常的未被访问过的链接*/\n}\na:visited{\n    text-decoration:none;\n     /*指已经访问过的链接*/\n}a:hover{\n     text-decoration:none;\n     color: #C81623;\n     /*指鼠标在链接*/\n}\na:active{\n    text-decoration:none;\n    /* 指正在点的链接*/\n}\n',normalizedContent:'# 1.2.2a元素\n\n\n# 常用属性\n\n# href属性\n\n指向的页面url\n\n# target属性\n\n设置超链接的打开方式\n\n * self:当前位置、\n * blank:新窗口、\n * top:最顶层框架、\n * parent:父框架\n\n# type属性\n\n规定被链接文档的的 mime 类型\n\n\n# 外链\n\n# 绝对路径和相对路径\n\n# 绝对路径\n\n需要指出链接资源的绝对位置，与你的html文档的位置无关。\n\n * 服务器中的位置： href="http://baidule.yuansupic.com/"\n * 本地存储的位置： file:///d:\\桌面\\html5课程\\html5入门实例课程\\lesson9\\1.png\n\n# 相对路径\n\n * 同一个路径： 直接写文件名称 或 ./文件名 比如：tp.jpg或者./tp.jpg\n * 在下级路径： 路径名称/资源名称：xxx/tp.jpg\n * 在下下级路径： xx/xxx/tp.jpg\n * 在上级路径：../资源名称：../tp.jpg\n * 在上上级路径： ../../tp.jpg\n\n提示\n\n * .表示当前目录、 ..表示上级目录、...表示上上级目录\n * 如果链接资源与你的html文档位于同一个站点，可以使用相对路径。否则必须使用绝对路径\n\n\n# 内链\n\n * id属性：href="#id"\n * name属性：href="#name"\n * 跨页面：href="index.html#id/name"\n\n\n# 样式初始化\n\na:link{\n    text-decoration:none;\n     /* 指正常的未被访问过的链接*/\n}\na:visited{\n    text-decoration:none;\n     /*指已经访问过的链接*/\n}a:hover{\n     text-decoration:none;\n     color: #c81623;\n     /*指鼠标在链接*/\n}\na:active{\n    text-decoration:none;\n    /* 指正在点的链接*/\n}\n',charsets:{cjk:!0}},{title:"1.2.5表格",frontmatter:{},regularPath:"/frontend/html/element/table/",relativePath:"frontend/html/element/table/README.md",key:"v-477469ca",path:"/frontend/html/element/table/",headers:[{level:2,title:"1.2.5表格",slug:"_1-2-5表格",normalizedTitle:"1.2.5表格",charIndex:2},{level:3,title:"基本结构",slug:"基本结构",normalizedTitle:"基本结构",charIndex:14},{level:3,title:"table布局",slug:"table布局",normalizedTitle:"table布局",charIndex:170},{level:3,title:"caption元素：为表格添加标题",slug:"caption元素-为表格添加标题",normalizedTitle:"caption元素：为表格添加标题",charIndex:320},{level:3,title:"th元素：为表格添加标题行",slug:"th元素-为表格添加标题行",normalizedTitle:"th元素：为表格添加标题行",charIndex:488},{level:3,title:"colspan属性：横向合并单元格",slug:"colspan属性-横向合并单元格",normalizedTitle:"colspan属性：横向合并单元格",charIndex:553},{level:3,title:"rowspan属性：纵向向合并单元格",slug:"rowspan属性-纵向向合并单元格",normalizedTitle:"rowspan属性：纵向向合并单元格",charIndex:615},{level:3,title:"thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚",slug:"thead-tfoot-tbaody元素-为表格设置表头-主体和表格页脚",normalizedTitle:"thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚",charIndex:678},{level:3,title:"colgroup元素：用来组合列",slug:"colgroup元素-用来组合列",normalizedTitle:"colgroup元素：用来组合列",charIndex:1022},{level:3,title:"col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用",slug:"col元素-用来设定列的属性-一般作为colgroup元素的子元素配合使用",normalizedTitle:"col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用",charIndex:1273}],headersStr:"1.2.5表格 基本结构 table布局 caption元素：为表格添加标题 th元素：为表格添加标题行 colspan属性：横向合并单元格 rowspan属性：纵向向合并单元格 thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚 colgroup元素：用来组合列 col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用",content:'# 1.2.5表格\n\n\n# 基本结构\n\ntable：表格的范围，外框；用来定义表格，表格的其他元素包含在table标签里面。\ntr：表格的行。\ntd：表格的单元格。\n\n<table>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n\n# table布局\n\n# table布局是传统的网页布局方式：早期网页由于内容较少，布局简单，都是使用table布局。\n\n * 思路：用表格把屏幕分成几块--不同的单元格存放不同的内容。\n * 优点:比较简单，容易理解\n * 缺点：对于复杂的布局，表格嵌套太多，比较繁琐；后期维护和修改很不方便\n\n\n# caption元素：为表格添加标题\n\n<table>\n    <caption>标题</caption>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n注意\n\n在HTML5中已经被废弃，不推荐使用，建议使用CSS样式设置。\n\n\n# th元素：为表格添加标题行\n\n<tr>\n    <th>项目一</th>\n    <th>项目一</th>\n</tr>\n\n\n\n# colspan属性：横向合并单元格\n\n<tr>\n   <td colspan="2">合计</td>\n</tr>\n\n\n\n# rowspan属性：纵向向合并单元格\n\n<tr>\n   <td rowspan="2">合计</td>\n</tr>\n\n\n\n# thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚\n\n<table>\n\t<thead>\n        \x3c!-- 表头 --\x3e\n\t\t<tr>\n\t\t\t<td>表头1</td>\n\t\t\t<td>表头2</td>\n\t\t</tr>\n\t</thead>\n\t<tbaody>\n        \x3c!-- 主体 --\x3e\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t</tbaody>\n\t<tfoot>\n        \x3c!-- 页脚 --\x3e\n\t\t<tr>\n\t\t\t<td>页脚1</td>\n\t\t\t<td>页脚2</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n\n\n\n# colgroup元素：用来组合列\n\n<table>\n    <colgroup span="2" style="background:red"></colgroup> \n    \x3c!-- 设置前两列背景颜色为红色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\n\n# col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用\n\n<table>\n    <colgroup>\n    <col span="2" style="background-color:red"> \n    <col style="background-color:yellow">\n  </colgroup> \n    \x3c!-- 设置前两列背景颜色为红色，其他为黄色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\nWARNING\n\ncolgroup与col元素，不支持html5，不推荐使用',normalizedContent:'# 1.2.5表格\n\n\n# 基本结构\n\ntable：表格的范围，外框；用来定义表格，表格的其他元素包含在table标签里面。\ntr：表格的行。\ntd：表格的单元格。\n\n<table>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n\n# table布局\n\n# table布局是传统的网页布局方式：早期网页由于内容较少，布局简单，都是使用table布局。\n\n * 思路：用表格把屏幕分成几块--不同的单元格存放不同的内容。\n * 优点:比较简单，容易理解\n * 缺点：对于复杂的布局，表格嵌套太多，比较繁琐；后期维护和修改很不方便\n\n\n# caption元素：为表格添加标题\n\n<table>\n    <caption>标题</caption>\n    <tr><td>1<td><td>2<td></tr>\n    <tr><td>3<td><td>4<td></tr>\n</table>\n\n\n注意\n\n在html5中已经被废弃，不推荐使用，建议使用css样式设置。\n\n\n# th元素：为表格添加标题行\n\n<tr>\n    <th>项目一</th>\n    <th>项目一</th>\n</tr>\n\n\n\n# colspan属性：横向合并单元格\n\n<tr>\n   <td colspan="2">合计</td>\n</tr>\n\n\n\n# rowspan属性：纵向向合并单元格\n\n<tr>\n   <td rowspan="2">合计</td>\n</tr>\n\n\n\n# thead\\tfoot\\tbaody元素：为表格设置表头，主体和表格页脚\n\n<table>\n\t<thead>\n        \x3c!-- 表头 --\x3e\n\t\t<tr>\n\t\t\t<td>表头1</td>\n\t\t\t<td>表头2</td>\n\t\t</tr>\n\t</thead>\n\t<tbaody>\n        \x3c!-- 主体 --\x3e\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t</tbaody>\n\t<tfoot>\n        \x3c!-- 页脚 --\x3e\n\t\t<tr>\n\t\t\t<td>页脚1</td>\n\t\t\t<td>页脚2</td>\n\t\t</tr>\n\t</tfoot>\n</table>\n\n\n\n# colgroup元素：用来组合列\n\n<table>\n    <colgroup span="2" style="background:red"></colgroup> \n    \x3c!-- 设置前两列背景颜色为红色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\n\n# col元素：用来设定列的属性，一般作为colgroup元素的子元素配合使用\n\n<table>\n    <colgroup>\n    <col span="2" style="background-color:red"> \n    <col style="background-color:yellow">\n  </colgroup> \n    \x3c!-- 设置前两列背景颜色为红色，其他为黄色 --\x3e\n    <tr>\n        <td>1<td>\n            <td>2<td>\n        </tr>\n    <tr>\n        <td>3<td>\n            <td>4<td>\n        </tr>\n</table>\n\n\nwarning\n\ncolgroup与col元素，不支持html5，不推荐使用',charsets:{cjk:!0}},{title:"HTML5大纲算法",frontmatter:{},regularPath:"/frontend/html/outliner/",relativePath:"frontend/html/outliner/README.md",key:"v-cffb7706",path:"/frontend/html/outliner/",headers:[{level:2,title:"HTML5大纲算法",slug:"html5大纲算法",normalizedTitle:"html5大纲算法",charIndex:2}],headersStr:"HTML5大纲算法",content:"# HTML5大纲算法\n\n在html5中有一个很重要的概念，叫做HTML5大纲算法(HTML5 Outliner),它的用途为用户提供一份页面的信息结构目录。合理的使用HTML5元素标签，可以生成一个非常清晰的文档大纲\n\nHTML5大纲算法\n\n我们可以通过各种工具去查看当前页面，这里推荐使用一个测试工具：HTML5 Outliner，网址如下：https://gsnedders.html5.org/outliner/\n\n1.section和div的区别\n\ndiv元素在html5之前是最常用的最流行的标签，但他本身是没有任何语义的，它只不过是用来布局页面和CSS样式以及JS调用。\n\n在html5中section标签并不是用来取代div的。他是具有语义的文档标签，在大纲规范中规定section至少要包含一个标题。也就是section标签内至少包含一个h1~h6.\n\n如果是页面布局，且不是header、footer之类的专属区域，都应该使用div;\n\n2.body、nav、section都是需要有标题的才规范.header和div则是不需要标题的。\n\n3.section和nav元素大纲要求有标题h1~h6，但是section必须有才规范，而nav如果没有标题，也是合理的。给他添加了标题会让大纲更好看，所以我们可以添加完了在隐藏，就不会破坏布局了。",normalizedContent:"# html5大纲算法\n\n在html5中有一个很重要的概念，叫做html5大纲算法(html5 outliner),它的用途为用户提供一份页面的信息结构目录。合理的使用html5元素标签，可以生成一个非常清晰的文档大纲\n\nhtml5大纲算法\n\n我们可以通过各种工具去查看当前页面，这里推荐使用一个测试工具：html5 outliner，网址如下：https://gsnedders.html5.org/outliner/\n\n1.section和div的区别\n\ndiv元素在html5之前是最常用的最流行的标签，但他本身是没有任何语义的，它只不过是用来布局页面和css样式以及js调用。\n\n在html5中section标签并不是用来取代div的。他是具有语义的文档标签，在大纲规范中规定section至少要包含一个标题。也就是section标签内至少包含一个h1~h6.\n\n如果是页面布局，且不是header、footer之类的专属区域，都应该使用div;\n\n2.body、nav、section都是需要有标题的才规范.header和div则是不需要标题的。\n\n3.section和nav元素大纲要求有标题h1~h6，但是section必须有才规范，而nav如果没有标题，也是合理的。给他添加了标题会让大纲更好看，所以我们可以添加完了在隐藏，就不会破坏布局了。",charsets:{cjk:!0}},{title:"什么是HTML",frontmatter:{},regularPath:"/frontend/html/introduction/",relativePath:"frontend/html/introduction/README.md",key:"v-76991ebd",path:"/frontend/html/introduction/",headers:[{level:2,title:"什么是HTML",slug:"什么是html",normalizedTitle:"什么是html",charIndex:2},{level:2,title:"开发工具",slug:"开发工具",normalizedTitle:"开发工具",charIndex:84},{level:2,title:"基本格式",slug:"基本格式",normalizedTitle:"基本格式",charIndex:175},{level:2,title:"元素的概念",slug:"元素的概念",normalizedTitle:"元素的概念",charIndex:1292},{level:3,title:"双标签",slug:"双标签",normalizedTitle:"双标签",charIndex:1302},{level:3,title:"单标签",slug:"单标签",normalizedTitle:"单标签",charIndex:821},{level:2,title:"元素的属性",slug:"元素的属性",normalizedTitle:"元素的属性",charIndex:1426}],headersStr:"什么是HTML 开发工具 基本格式 元素的概念 双标签 单标签 元素的属性",content:'# 什么是HTML\n\nHTML是一种超文本标记语言，“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。\n\nHTML5是HTML的最新版本。\n\n\n# 开发工具\n\nVisual Studio Code(VScode)、WebStorm 、notepad++、Ecliipse、sublime、Dreamweaver等等...\n\n\n# 基本格式\n\n\n<!DOCTYPE html>\n\x3c!-- 文档声明 --\x3e\n\n<html>\n\x3c!-- 表示文档的开始 --\x3e\n\n<head>\n\t\x3c!-- head标签存放文档的基本信息，不可见元素 --\x3e\n\t<meta charset="utf-8">\x3c!-- 声明字符编码 --\x3e\n\t<meta name="viewport" content="width=device-width,\t\t\n\t initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /> \n\t<title>网页标题</title>\n\t<meta name="keywords" content="网页关键词" />\n\t<meta name="description" content="网页描述" /> \n\t\x3c!-- 异步加载css文件 --\x3e\n\t<link rel="stylesheet" type="text/css" href="index.css">\n\t\x3c!-- 同步加载js文件 --\x3e\n\t<script type="text/javascript" src="index.js"><\/script>\n</head>\n\n<body>\n\t\x3c!-- body标签存放文档可见内容 --\x3e\n\n</body>\n\n</html>\x3c!-- 表示文档结束 --\x3e\n\n\nTIP\n\n*注意事项：\n\n 1. 文件保存为以 .html 为后缀的文件。\n\n 2. <meta>是个单标签，它没有结束标签；meta元素也可以成为空元素。meta元素为head元素的子元素，且只能放在head标签中使用。meta元素重要用来附加文档的额外信息，除了使用我们熟悉的 charset="utf-8"声明字符编码外，它还有几个常用的功能通过name与content属性为文件加入作者(author)描述信息（description）关键词(kewords)编码工具（generator）等信息。 通过属性http-equiv将指定的信息以HTTP表头信息的方式送到客户端。\n\n 3. <script>标签位置与加载关系\n\n>  1. 放在<head>里，浏览器会解析html后同步加载js文件。缺点是页面的加载会滞后且不能进行DOM操作。\n>  2. 放在</body>前面，先渲染html在加载js。缺点是对于依赖js文件的部分会滞后。\n>  3. 使用async属性异步加载js文件\n> \n>  <script type="text/javascript" src="index.js" async><\/script>\n\n\n# 元素的概念\n\n\n# 双标签\n\n开始标签   元素内容        结束标签\n<h1>   h标签用来表示标题   </h1>\n<p>    p标签表示一个段落   </p>\n\n\n# 单标签\n\n单标签（没有结束标签）\n<hr>是一个单标签，会给文档加一个横线\n\n\n# 元素的属性\n\n属性的作用就是就为元素提供更多的信息，大多数元素都可以拥有属性\n\n<标签 属性1=参数1></标签>\n',normalizedContent:'# 什么是html\n\nhtml是一种超文本标记语言，“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。\n\nhtml5是html的最新版本。\n\n\n# 开发工具\n\nvisual studio code(vscode)、webstorm 、notepad++、ecliipse、sublime、dreamweaver等等...\n\n\n# 基本格式\n\n\n<!doctype html>\n\x3c!-- 文档声明 --\x3e\n\n<html>\n\x3c!-- 表示文档的开始 --\x3e\n\n<head>\n\t\x3c!-- head标签存放文档的基本信息，不可见元素 --\x3e\n\t<meta charset="utf-8">\x3c!-- 声明字符编码 --\x3e\n\t<meta name="viewport" content="width=device-width,\t\t\n\t initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /> \n\t<title>网页标题</title>\n\t<meta name="keywords" content="网页关键词" />\n\t<meta name="description" content="网页描述" /> \n\t\x3c!-- 异步加载css文件 --\x3e\n\t<link rel="stylesheet" type="text/css" href="index.css">\n\t\x3c!-- 同步加载js文件 --\x3e\n\t<script type="text/javascript" src="index.js"><\/script>\n</head>\n\n<body>\n\t\x3c!-- body标签存放文档可见内容 --\x3e\n\n</body>\n\n</html>\x3c!-- 表示文档结束 --\x3e\n\n\ntip\n\n*注意事项：\n\n 1. 文件保存为以 .html 为后缀的文件。\n\n 2. <meta>是个单标签，它没有结束标签；meta元素也可以成为空元素。meta元素为head元素的子元素，且只能放在head标签中使用。meta元素重要用来附加文档的额外信息，除了使用我们熟悉的 charset="utf-8"声明字符编码外，它还有几个常用的功能通过name与content属性为文件加入作者(author)描述信息（description）关键词(kewords)编码工具（generator）等信息。 通过属性http-equiv将指定的信息以http表头信息的方式送到客户端。\n\n 3. <script>标签位置与加载关系\n\n>  1. 放在<head>里，浏览器会解析html后同步加载js文件。缺点是页面的加载会滞后且不能进行dom操作。\n>  2. 放在</body>前面，先渲染html在加载js。缺点是对于依赖js文件的部分会滞后。\n>  3. 使用async属性异步加载js文件\n> \n>  <script type="text/javascript" src="index.js" async><\/script>\n\n\n# 元素的概念\n\n\n# 双标签\n\n开始标签   元素内容        结束标签\n<h1>   h标签用来表示标题   </h1>\n<p>    p标签表示一个段落   </p>\n\n\n# 单标签\n\n单标签（没有结束标签）\n<hr>是一个单标签，会给文档加一个横线\n\n\n# 元素的属性\n\n属性的作用就是就为元素提供更多的信息，大多数元素都可以拥有属性\n\n<标签 属性1=参数1></标签>\n',charsets:{cjk:!0}},{title:"3.10.1 基本概念",frontmatter:{},regularPath:"/frontend/javascript/BOM/",relativePath:"frontend/javascript/BOM/README.md",key:"v-39eada8f",path:"/frontend/javascript/BOM/",headers:[{level:2,title:"3.10.1 基本概念",slug:"_3-10-1-基本概念",normalizedTitle:"3.10.1 基本概念",charIndex:2},{level:2,title:"3.10.2 window对象的方法和属性",slug:"_3-10-2-window对象的方法和属性",normalizedTitle:"3.10.2 window对象的方法和属性",charIndex:91},{level:3,title:"对话框",slug:"对话框",normalizedTitle:"对话框",charIndex:227},{level:3,title:"窗体控制",slug:"窗体控制",normalizedTitle:"窗体控制",charIndex:719},{level:3,title:"窗口的属性：",slug:"窗口的属性",normalizedTitle:"窗口的属性：",charIndex:1658},{level:3,title:"定时器",slug:"定时器",normalizedTitle:"定时器",charIndex:2384},{level:3,title:"其他方法",slug:"其他方法",normalizedTitle:"其他方法",charIndex:2630},{level:2,title:"3.10.3 Window对象属性",slug:"_3-10-3-window对象属性",normalizedTitle:"3.10.3 window对象属性",charIndex:2910},{level:2,title:"3.10.4 History对象的常用方法",slug:"_3-10-4-history对象的常用方法",normalizedTitle:"3.10.4 history对象的常用方法",charIndex:3467},{level:2,title:"3.10.5 Location对象",slug:"_3-10-5-location对象",normalizedTitle:"3.10.5 location对象",charIndex:4669},{level:2,title:"3.10.6 Screen对象",slug:"_3-10-6-screen对象",normalizedTitle:"3.10.6 screen对象",charIndex:5547},{level:2,title:"3.10.7 Navigator对象属性",slug:"_3-10-7-navigator对象属性",normalizedTitle:"3.10.7 navigator对象属性",charIndex:5749},{level:2,title:"3.10.8 缓存对象及其他缓存技术",slug:"_3-10-8-缓存对象及其他缓存技术",normalizedTitle:"3.10.8 缓存对象及其他缓存技术",charIndex:6016},{level:3,title:"Cookie",slug:"cookie",normalizedTitle:"cookie",charIndex:6039},{level:3,title:"SessionStorage",slug:"sessionstorage",normalizedTitle:"sessionstorage",charIndex:7333},{level:3,title:"LocalStorage",slug:"localstorage",normalizedTitle:"localstorage",charIndex:7575},{level:3,title:"Application Cache",slug:"application-cache",normalizedTitle:"application cache",charIndex:7760},{level:3,title:"IndexDB",slug:"indexdb",normalizedTitle:"indexdb",charIndex:7782},{level:3,title:"Web SQL",slug:"web-sql",normalizedTitle:"web sql",charIndex:7794},{level:3,title:"SQLite",slug:"sqlite",normalizedTitle:"sqlite",charIndex:7806},{level:3,title:"各缓存技术的比较",slug:"各缓存技术的比较",normalizedTitle:"各缓存技术的比较",charIndex:7817}],headersStr:"3.10.1 基本概念 3.10.2 window对象的方法和属性 对话框 窗体控制 窗口的属性： 定时器 其他方法 3.10.3 Window对象属性 3.10.4 History对象的常用方法 3.10.5 Location对象 3.10.6 Screen对象 3.10.7 Navigator对象属性 3.10.8 缓存对象及其他缓存技术 Cookie SessionStorage LocalStorage Application Cache IndexDB Web SQL SQLite 各缓存技术的比较",content:'# 3.10.1 基本概念\n\nBOM是Browser Object Model的缩写，简称浏览器对象模型\n\nBOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性\n\n\n# 3.10.2 window对象的方法和属性\n\nwindow对象是浏览器窗口对文档提供的一个现实的容器，代表打开的浏览器窗口，是每一个加载文档的父对象\n\nwindow的属性和方法调用方法:window.属性，window.方法\n\n也可以直接调用省略 window.\n\n\n# 对话框\n\nalert() 显示带有一段消息和一个确认按钮的警告框。\n\nconfirm() 显示可提示用户输入的对话框。返回值为布尔值\n\nfunction myFunction(){\n    var x;\n    var r=confirm("按下按钮!");\n    if (r==true){\n        x="你按下了\\"确定\\"按钮!";\n    }\n    else{\n        x="你按下了\\"取消\\"按钮!";\n    };\n}\n\n\nprompt(msg,defaultText) 显示带有一段消息以及确认按钮和取消按钮的对话框。第一个参数是提示,第二个参数是默认值，返回值为输入的值，取消返回null。\n\nfunction myFunction(){ \n    var x; \n    var person=prompt("请输入你的名字","Harry Potter"); \n    if (person!=null && person!=""){ \n     x="你好 " + person + "! 今天感觉如何?"; \n    } \n}\n\n\n\n# 窗体控制\n\nopen(URL,name,specs,replace) 打开一个新的浏览器窗口或查找一个已命名的窗口。\n\n> URL:打开指定的页面的URL。如果没有指定URL，打开一个新的空白窗口 name:指定target属性或窗口的名称。支持以下值\n> \n> > _blank - URL加载到一个新的窗口。这是默认 _parent - URL加载到父框架 _self - URL替换当前页面 _top - URL替换任何可加载的框架集 name - 窗口名称 features:声明了新窗口要显示的标准浏览器的特征。 channelmode=yes|no|1|0 是否要在影院模式显示 window。默认是没有的。仅限IE directories=yes|no|1|0 是否添加目录按钮。默认是肯定的。仅限IE浏览器 fullscreen=yes|no|1|0 浏览器是否显示全屏模式。默认是没有的。在全屏模式下的 window，还必须在影院模式。仅限IE left=pixels 该窗口的左侧位置 location=yes|no|1|0 是否显示地址字段.默认值是yes menubar=yes|no|1|0 是否显示菜单栏.默认值是yes resizable=yes|no|1|0 是否可调整窗口大小.默认值是yes scrollbars=yes|no|1|0 是否显示滚动条.默认值是yes status=yes|no|1|0 是否要添加一个状态栏.默认值是yes titlebar=yes|no|1|0 是否显示标题栏.被忽略，除非调用HTML应用程序或一个值得信赖的对话框.默认值是yes toolbar=yes|no|1|0 是否显示浏览器工具栏.默认值是yes top=pixels 窗口顶部的位置.仅限IE浏 width=pixels 窗口的宽度.最小.值为100\n\nfunction openWin(){\n\tmyWindow=window.open(\'\',\'\',\'width=200,height=100\');\n\tmyWindow.document.write("<p>这是\'我的窗口\'</p>");\n\tmyWindow.focus();\n}\n\n\n\n# 窗口的属性：\n\n# 常用：\n\nwidth新建窗口宽度\n\nheigth新建窗口高度\n\ntop左上角垂直坐标\n\nleft左上角水平坐标\n\n# 不常用的属性：\n\ntoolbar指定窗口是否有标准工具栏。当该选项的值为1或yes时，表示有标准工具栏，当该选项的值为0或no时，表示没有标准工具栏；\n\nresizable指定窗口是否可改变大小，选项的值及含义与toolbar相同；\n\nocation指定窗口是否有地址工具栏，选项的值及含义与toolbar相同；\n\ndirectories指定窗口是否有链接工具栏，选项的值及含义与toolbar相同；\n\nstatus指定窗口是否有状态栏，选项的值及含义与toolbar相同；\n\nmenubar指定窗口是否有菜单，选项的值及含义与toolbar相同；\n\nscrollbar指定当前窗口文档大于窗口时是否有滚动条，选项的值及含义与 toolbar相同；\n\nclose() 关闭浏览器窗口。\n\ndocument.hidden判断页面是否隐藏的布尔值\ndocument.visibilityState返回document的可见性\n\n> hidden：文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于 \'锁屏状态\'\n> visible：此页面在前景标签页中，并且窗口没有最小化\n> prerender：页面在屏幕外执行预渲染处理 document.hidden 的值为 true\n> unloaded：页面正在从内存中卸载\n\n> 监听visibilityState事件\n> \n> document.addEventListener(\'visibilitychange\', function() {});\n\n\n# 定时器\n\n * setInterval(按照指定的周期（以毫秒计）来调用函数或计算表达式。\n * clearInterval取消由setInterval设置的定时器。\n * setTimeout在指定的毫秒数后调用函数或计算表达式。\n * clearTimeout取消由setTimeout方法设置的定时器。。\n\nvar timer = setInterval(function(){ alert("Hello"); }, 3000);\n clearInterval(timer)\n\n\n\n# 其他方法\n\n * print打印当前窗口的内容。\n\n * blur把键盘焦点从顶层窗口移开。\n\n * createPopup创建一个 pop-up 窗口。只支持id\n\n * focus把键盘焦点给予一个窗口。\n\n * moveBy可相对窗口的当前坐标把它移动指定的像素。\n\n * moveTo把窗口的左上角移动到一个指定的坐标。\n\n * resizeBy按照指定的像素调整窗口的大小。\n\n * resizeTo把窗口的大小调整到指定的宽度和高度。\n\n * scrollBy按照指定的像素值来滚动内容。\n\n * scrollTo把内容滚动到指定的坐标。\n\n\n# 3.10.3 Window对象属性\n\n * innerWidth返回窗口的文档显示区的宽度。\n\n * innerHeight返回窗口的文档显示区的高度。\n\nwindow.innerWidth\n\n\n * name设置或返回窗口的名称。\n\n * opener返回父窗口,谁触发了open事件谁是父窗口\n\nwindow.opener.close() //关闭父窗口\nmyWindow.opener.document.write("<p>这个是父窗口!</p>")//向父窗口传值\n\n\nTIP\n\n * parent返回父窗口,用于iframe中，谁创建的iframe谁是父窗口\n\n * closed设置窗口，并返回窗口状态\n\n    myWindow=window.open("","","width=400,height=200");//myWindow返回true/fasle 代表myWindow打开的窗口是否关闭\n    myWindow.close();  //关闭打开的窗口\n\n\n * self返回对当前窗口的引用。\n\n * top返回最顶层的先辈窗口。\n\n * outerheight返回窗口的外部高度。\n\n * outerwidth返回窗口的外部宽度。\n\n * status设置窗口状态栏的文本。\n\n\n# 3.10.4 History对象的常用方法\n\n * length属性查看客户端浏览器的历史列表中访问的网页个数\n\n * back加载history列表中的前一个 URL。\n\n * forward加载history列表中的下一个 URL。\n\nhistory.forward();\n\n\n * go加载history列表中的某个具体页面。\n\n * pushState pushState(state,popstate,title)\n\n> 一个与指定网址相关的状态对象 popstate回调函数,如果不需要这个对象，此处可以填null。 title新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null url新的网址，必须与当前页面处在同一个域。\n\n * replaceState 同pushState，不会在History对象中生成一个新的记录。新的记录会覆盖History对象中的当前记录，不能返回。\n\nTIP\n\nhistory.replaceState({name: "华为"}, "", "j87078.html");\nwindow.location.reload();\n\n\n与location.replace相同效果\n\n监听pushState和replaceState事件\n\nconst bindEventListener = function(type) {\n   const historyEvent = history[type];\n   return function() {\n       const newEvent = historyEvent.apply(this, arguments);\n      const e = new Event(type);\n       e.arguments = arguments;\n       window.dispatchEvent(e);\n       return newEvent;\n   };\n};\nhistory.pushState = bindEventListener(\'pushState\');\nhistory.replaceState = bindEventListener(\'replaceState\');\n\n// 使用\nwindow.addEventListener(\'replaceState\', function(e) {\n  console.log(\'THEY DID IT AGAIN! replaceState\');\n});\nwindow.addEventListener(\'pushState\', function(e) {\n  console.log(\'THEY DID IT AGAIN! pushState\');\n});\n\n\n * onpopstate监听history的改变\n\n\n# 3.10.5 Location对象\n\nhref设置或返回完整的 URL。\n\nlocation.href\n\n\n * host设置或返回主机名和当前 URL 的端口号。\n\n * hash设置或返回从井号 (#) 开始的 URL（锚）。\n\n * hostname设置或返回当前 URL 的主机名。\n\n * pathname设置或返回当前 URL 的路径部分。\n\n * port设置或返回当前 URL 的端口号。\n\n * protocol设置或返回当前 URL 的协议。\n\n * search设置或返回从问号 (?) 开始的 URL（查询部分）。\n\n * assign加载新的文档。\n\nlocation.assign(URL)\n\n\n * reload重新加载当前文档。\n\n window.location.reload()  //重新加载（有可能从缓存中加载）\n window.location.reload(true) //重新加载(从服务器重新加载)\n\n\nTIP\n\n 1. 如果该方法没有规定参数，或者参数是 false，它就会用 HTTP 头 If-Modified-Since 来检测服务器上的文档是否已改变。如果文档已改变，reload会再次下载该文档。如果文档未改变，则该方法将从缓存中装载文档。这与用户单击浏览器的刷新按钮的效果是完全一样的。\n 2. 如果把该方法的参数设置为 true，那么无论文档的最后修改日期是什么，它都会绕过缓存，从服务器上重新下载该文档。这与用户在单击浏览器的刷新按钮时按住 Shift 健的效果是完全一样。\n\n * replace用新的文档替换当前文档。replace方法不会在History对象中生成一个新的记录。当使用该方法时，新的URL将覆盖History对象中的当前记录，不能返回。\n\nlocation.replace(\'https://jaqi.gitee.io/page/#/\');\n\n\nTIP\n\nHistory与Location与的区别 History操作的是历史栈，Location操作的是url\n\n\n# 3.10.6 Screen对象\n\n * availHeight返回显示屏幕的高度 (除 Windows 任务栏之外)。\n\nscreen.availHeight\n\n\n * availWidth返回显示屏幕的宽度 (除 Windows 任务栏之外)。\n\n * height返回显示屏幕的高度。\n\n * width返回显示器屏幕的宽度。\n\n * bufferDepth设置或返回显示器屏幕的比特深度。\n\n\n# 3.10.7 Navigator对象属性\n\n * appCodeName返回浏览器的代码名。\n\n * appMinorVersion返回浏览器的次级版本。\n\n * appName返回浏览器的名称。\n\n * appVersion返回浏览器的平台和版本信息。\n\n * cookieEnabled返回指明浏览器中是否启用 cookie 的布尔值。\n\n * userAgent返回由客户机发送服务器的user-agent头部的值\n\nnavigator.userAgent\n\n\n * onLine返回指明系统是否处于脱机模式的布尔值。\n\n\n# 3.10.8 缓存对象及其他缓存技术\n\n\n# Cookie\n\n * 设置Cookie：\n\n    document.cookie="key=value";\n    // 设置过期时间\n    document.cookie="key=value; expires=Thu, 18 Dec 2043 12:00:00 GMT";\n\n\n * 读取Cookie\n\n    document.cookie\n\n\n * 修改Cookie\n\n    document.cookie="key=value; expires=Thu, 18 Dec 2043 12:00:00 GMT";\n\n\n * 删除Cookie，只需要设置expires参数为以前的时间即可\n\n    document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 GMT";\n\n\n常用的cookie函数\n\n// 设置Cookie\nfunction setCookie(cname,cvalue,exdays)\n{\n  var d = new Date();\n  d.setTime(d.getTime()+(exdays*24*60*60*1000));\n  var expires = "expires="+d.toGMTString();\n  document.cookie = cname + "=" + cvalue + "; " + expires;\n}\n\n// 获取Cookie\nfunction getCookie(cname)\n{\n  var name = cname + "=";\n  var ca = document.cookie.split(\';\');\n  for(var i=0; i<ca.length; i++) \n  {\n    var c = ca[i].trim();\n    if (c.indexOf(name)==0) return c.substring(name.length,c.length);\n  }\n  return "";\n}\n\n// 检测Cookie\nfunction checkCookie()\n{\n  var username=getCookie("username");\n  if (username!="")\n  {\n    alert("Welcome again " + username);\n  }\n  else \n  {\n    username = prompt("Please enter your name:","");\n    if (username!="" && username!=null)\n    {\n      setCookie("username",username,365);\n    }\n  }\n}\n\n\nWARNING\n\n 1. Cookie不能跨域访问和操作\n 2. 不能访问和操作设置了设置了HttpOnly的(防止XSS攻击)\n 3. 设置了Secure=true只能用https协议发送给服务器\n\n\n# SessionStorage\n\n * 设置sessionStorage\n\nsessionStorage.setItem("key", "value");\n\n\n * 读取sessionStorage\n\nsessionStorage.getItem("key");\n\n\n * 删除sessionStorage\n\nsessionStorage.removeItem("key");\n\n\n * 删除所有sessionStorage\n\nsessionStorage.clear();\n\n\n\n# LocalStorage\n\n * 设置sessionStorage\n\nlocalStorage.setItem("key", "value");\n\n\n * 读取sessionStorage\n\nlocalStorage.getItem("key");\n\n\n * 删除sessionStorage\n\nlocalStorage.removeItem("key");\n\n\n\n# Application Cache\n\n\n# IndexDB\n\n\n# Web SQL\n\n\n# SQLite\n\n\n# 各缓存技术的比较\n\n名称                  存储位置   生命周期                     容量限制       兼容性\nCookie              浏览器    自行设置，可以无限长               >4KB       良好\nSessionStorage      浏览器    仅在当前会话下有效，关闭页面或浏览器后被清除   >5MB       优秀\nLocalStorage        浏览器    除非被清除，否则永久保存             每个域名>5MB   优秀\nApplication Cache   电脑缓存   除非被清除，否则永久保存             5MB        标准已废弃不建议使用\nIndexDB             浏览器    除非被清除，否则永久保存             理论无上限      良好\nWeb SQL             电脑缓存   除非被清除，否则永久保存             >25MB      一般\nSQLite              安卓缓存   除非被清除，否则永久保存             理论无上限      一般',normalizedContent:'# 3.10.1 基本概念\n\nbom是browser object model的缩写，简称浏览器对象模型\n\nbom由一系列相关的对象构成，并且每个对象都提供了很多方法与属性\n\n\n# 3.10.2 window对象的方法和属性\n\nwindow对象是浏览器窗口对文档提供的一个现实的容器，代表打开的浏览器窗口，是每一个加载文档的父对象\n\nwindow的属性和方法调用方法:window.属性，window.方法\n\n也可以直接调用省略 window.\n\n\n# 对话框\n\nalert() 显示带有一段消息和一个确认按钮的警告框。\n\nconfirm() 显示可提示用户输入的对话框。返回值为布尔值\n\nfunction myfunction(){\n    var x;\n    var r=confirm("按下按钮!");\n    if (r==true){\n        x="你按下了\\"确定\\"按钮!";\n    }\n    else{\n        x="你按下了\\"取消\\"按钮!";\n    };\n}\n\n\nprompt(msg,defaulttext) 显示带有一段消息以及确认按钮和取消按钮的对话框。第一个参数是提示,第二个参数是默认值，返回值为输入的值，取消返回null。\n\nfunction myfunction(){ \n    var x; \n    var person=prompt("请输入你的名字","harry potter"); \n    if (person!=null && person!=""){ \n     x="你好 " + person + "! 今天感觉如何?"; \n    } \n}\n\n\n\n# 窗体控制\n\nopen(url,name,specs,replace) 打开一个新的浏览器窗口或查找一个已命名的窗口。\n\n> url:打开指定的页面的url。如果没有指定url，打开一个新的空白窗口 name:指定target属性或窗口的名称。支持以下值\n> \n> > _blank - url加载到一个新的窗口。这是默认 _parent - url加载到父框架 _self - url替换当前页面 _top - url替换任何可加载的框架集 name - 窗口名称 features:声明了新窗口要显示的标准浏览器的特征。 channelmode=yes|no|1|0 是否要在影院模式显示 window。默认是没有的。仅限ie directories=yes|no|1|0 是否添加目录按钮。默认是肯定的。仅限ie浏览器 fullscreen=yes|no|1|0 浏览器是否显示全屏模式。默认是没有的。在全屏模式下的 window，还必须在影院模式。仅限ie left=pixels 该窗口的左侧位置 location=yes|no|1|0 是否显示地址字段.默认值是yes menubar=yes|no|1|0 是否显示菜单栏.默认值是yes resizable=yes|no|1|0 是否可调整窗口大小.默认值是yes scrollbars=yes|no|1|0 是否显示滚动条.默认值是yes status=yes|no|1|0 是否要添加一个状态栏.默认值是yes titlebar=yes|no|1|0 是否显示标题栏.被忽略，除非调用html应用程序或一个值得信赖的对话框.默认值是yes toolbar=yes|no|1|0 是否显示浏览器工具栏.默认值是yes top=pixels 窗口顶部的位置.仅限ie浏 width=pixels 窗口的宽度.最小.值为100\n\nfunction openwin(){\n\tmywindow=window.open(\'\',\'\',\'width=200,height=100\');\n\tmywindow.document.write("<p>这是\'我的窗口\'</p>");\n\tmywindow.focus();\n}\n\n\n\n# 窗口的属性：\n\n# 常用：\n\nwidth新建窗口宽度\n\nheigth新建窗口高度\n\ntop左上角垂直坐标\n\nleft左上角水平坐标\n\n# 不常用的属性：\n\ntoolbar指定窗口是否有标准工具栏。当该选项的值为1或yes时，表示有标准工具栏，当该选项的值为0或no时，表示没有标准工具栏；\n\nresizable指定窗口是否可改变大小，选项的值及含义与toolbar相同；\n\nocation指定窗口是否有地址工具栏，选项的值及含义与toolbar相同；\n\ndirectories指定窗口是否有链接工具栏，选项的值及含义与toolbar相同；\n\nstatus指定窗口是否有状态栏，选项的值及含义与toolbar相同；\n\nmenubar指定窗口是否有菜单，选项的值及含义与toolbar相同；\n\nscrollbar指定当前窗口文档大于窗口时是否有滚动条，选项的值及含义与 toolbar相同；\n\nclose() 关闭浏览器窗口。\n\ndocument.hidden判断页面是否隐藏的布尔值\ndocument.visibilitystate返回document的可见性\n\n> hidden：文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于 \'锁屏状态\'\n> visible：此页面在前景标签页中，并且窗口没有最小化\n> prerender：页面在屏幕外执行预渲染处理 document.hidden 的值为 true\n> unloaded：页面正在从内存中卸载\n\n> 监听visibilitystate事件\n> \n> document.addeventlistener(\'visibilitychange\', function() {});\n\n\n# 定时器\n\n * setinterval(按照指定的周期（以毫秒计）来调用函数或计算表达式。\n * clearinterval取消由setinterval设置的定时器。\n * settimeout在指定的毫秒数后调用函数或计算表达式。\n * cleartimeout取消由settimeout方法设置的定时器。。\n\nvar timer = setinterval(function(){ alert("hello"); }, 3000);\n clearinterval(timer)\n\n\n\n# 其他方法\n\n * print打印当前窗口的内容。\n\n * blur把键盘焦点从顶层窗口移开。\n\n * createpopup创建一个 pop-up 窗口。只支持id\n\n * focus把键盘焦点给予一个窗口。\n\n * moveby可相对窗口的当前坐标把它移动指定的像素。\n\n * moveto把窗口的左上角移动到一个指定的坐标。\n\n * resizeby按照指定的像素调整窗口的大小。\n\n * resizeto把窗口的大小调整到指定的宽度和高度。\n\n * scrollby按照指定的像素值来滚动内容。\n\n * scrollto把内容滚动到指定的坐标。\n\n\n# 3.10.3 window对象属性\n\n * innerwidth返回窗口的文档显示区的宽度。\n\n * innerheight返回窗口的文档显示区的高度。\n\nwindow.innerwidth\n\n\n * name设置或返回窗口的名称。\n\n * opener返回父窗口,谁触发了open事件谁是父窗口\n\nwindow.opener.close() //关闭父窗口\nmywindow.opener.document.write("<p>这个是父窗口!</p>")//向父窗口传值\n\n\ntip\n\n * parent返回父窗口,用于iframe中，谁创建的iframe谁是父窗口\n\n * closed设置窗口，并返回窗口状态\n\n    mywindow=window.open("","","width=400,height=200");//mywindow返回true/fasle 代表mywindow打开的窗口是否关闭\n    mywindow.close();  //关闭打开的窗口\n\n\n * self返回对当前窗口的引用。\n\n * top返回最顶层的先辈窗口。\n\n * outerheight返回窗口的外部高度。\n\n * outerwidth返回窗口的外部宽度。\n\n * status设置窗口状态栏的文本。\n\n\n# 3.10.4 history对象的常用方法\n\n * length属性查看客户端浏览器的历史列表中访问的网页个数\n\n * back加载history列表中的前一个 url。\n\n * forward加载history列表中的下一个 url。\n\nhistory.forward();\n\n\n * go加载history列表中的某个具体页面。\n\n * pushstate pushstate(state,popstate,title)\n\n> 一个与指定网址相关的状态对象 popstate回调函数,如果不需要这个对象，此处可以填null。 title新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null url新的网址，必须与当前页面处在同一个域。\n\n * replacestate 同pushstate，不会在history对象中生成一个新的记录。新的记录会覆盖history对象中的当前记录，不能返回。\n\ntip\n\nhistory.replacestate({name: "华为"}, "", "j87078.html");\nwindow.location.reload();\n\n\n与location.replace相同效果\n\n监听pushstate和replacestate事件\n\nconst bindeventlistener = function(type) {\n   const historyevent = history[type];\n   return function() {\n       const newevent = historyevent.apply(this, arguments);\n      const e = new event(type);\n       e.arguments = arguments;\n       window.dispatchevent(e);\n       return newevent;\n   };\n};\nhistory.pushstate = bindeventlistener(\'pushstate\');\nhistory.replacestate = bindeventlistener(\'replacestate\');\n\n// 使用\nwindow.addeventlistener(\'replacestate\', function(e) {\n  console.log(\'they did it again! replacestate\');\n});\nwindow.addeventlistener(\'pushstate\', function(e) {\n  console.log(\'they did it again! pushstate\');\n});\n\n\n * onpopstate监听history的改变\n\n\n# 3.10.5 location对象\n\nhref设置或返回完整的 url。\n\nlocation.href\n\n\n * host设置或返回主机名和当前 url 的端口号。\n\n * hash设置或返回从井号 (#) 开始的 url（锚）。\n\n * hostname设置或返回当前 url 的主机名。\n\n * pathname设置或返回当前 url 的路径部分。\n\n * port设置或返回当前 url 的端口号。\n\n * protocol设置或返回当前 url 的协议。\n\n * search设置或返回从问号 (?) 开始的 url（查询部分）。\n\n * assign加载新的文档。\n\nlocation.assign(url)\n\n\n * reload重新加载当前文档。\n\n window.location.reload()  //重新加载（有可能从缓存中加载）\n window.location.reload(true) //重新加载(从服务器重新加载)\n\n\ntip\n\n 1. 如果该方法没有规定参数，或者参数是 false，它就会用 http 头 if-modified-since 来检测服务器上的文档是否已改变。如果文档已改变，reload会再次下载该文档。如果文档未改变，则该方法将从缓存中装载文档。这与用户单击浏览器的刷新按钮的效果是完全一样的。\n 2. 如果把该方法的参数设置为 true，那么无论文档的最后修改日期是什么，它都会绕过缓存，从服务器上重新下载该文档。这与用户在单击浏览器的刷新按钮时按住 shift 健的效果是完全一样。\n\n * replace用新的文档替换当前文档。replace方法不会在history对象中生成一个新的记录。当使用该方法时，新的url将覆盖history对象中的当前记录，不能返回。\n\nlocation.replace(\'https://jaqi.gitee.io/page/#/\');\n\n\ntip\n\nhistory与location与的区别 history操作的是历史栈，location操作的是url\n\n\n# 3.10.6 screen对象\n\n * availheight返回显示屏幕的高度 (除 windows 任务栏之外)。\n\nscreen.availheight\n\n\n * availwidth返回显示屏幕的宽度 (除 windows 任务栏之外)。\n\n * height返回显示屏幕的高度。\n\n * width返回显示器屏幕的宽度。\n\n * bufferdepth设置或返回显示器屏幕的比特深度。\n\n\n# 3.10.7 navigator对象属性\n\n * appcodename返回浏览器的代码名。\n\n * appminorversion返回浏览器的次级版本。\n\n * appname返回浏览器的名称。\n\n * appversion返回浏览器的平台和版本信息。\n\n * cookieenabled返回指明浏览器中是否启用 cookie 的布尔值。\n\n * useragent返回由客户机发送服务器的user-agent头部的值\n\nnavigator.useragent\n\n\n * online返回指明系统是否处于脱机模式的布尔值。\n\n\n# 3.10.8 缓存对象及其他缓存技术\n\n\n# cookie\n\n * 设置cookie：\n\n    document.cookie="key=value";\n    // 设置过期时间\n    document.cookie="key=value; expires=thu, 18 dec 2043 12:00:00 gmt";\n\n\n * 读取cookie\n\n    document.cookie\n\n\n * 修改cookie\n\n    document.cookie="key=value; expires=thu, 18 dec 2043 12:00:00 gmt";\n\n\n * 删除cookie，只需要设置expires参数为以前的时间即可\n\n    document.cookie = "username=; expires=thu, 01 jan 1970 00:00:00 gmt";\n\n\n常用的cookie函数\n\n// 设置cookie\nfunction setcookie(cname,cvalue,exdays)\n{\n  var d = new date();\n  d.settime(d.gettime()+(exdays*24*60*60*1000));\n  var expires = "expires="+d.togmtstring();\n  document.cookie = cname + "=" + cvalue + "; " + expires;\n}\n\n// 获取cookie\nfunction getcookie(cname)\n{\n  var name = cname + "=";\n  var ca = document.cookie.split(\';\');\n  for(var i=0; i<ca.length; i++) \n  {\n    var c = ca[i].trim();\n    if (c.indexof(name)==0) return c.substring(name.length,c.length);\n  }\n  return "";\n}\n\n// 检测cookie\nfunction checkcookie()\n{\n  var username=getcookie("username");\n  if (username!="")\n  {\n    alert("welcome again " + username);\n  }\n  else \n  {\n    username = prompt("please enter your name:","");\n    if (username!="" && username!=null)\n    {\n      setcookie("username",username,365);\n    }\n  }\n}\n\n\nwarning\n\n 1. cookie不能跨域访问和操作\n 2. 不能访问和操作设置了设置了httponly的(防止xss攻击)\n 3. 设置了secure=true只能用https协议发送给服务器\n\n\n# sessionstorage\n\n * 设置sessionstorage\n\nsessionstorage.setitem("key", "value");\n\n\n * 读取sessionstorage\n\nsessionstorage.getitem("key");\n\n\n * 删除sessionstorage\n\nsessionstorage.removeitem("key");\n\n\n * 删除所有sessionstorage\n\nsessionstorage.clear();\n\n\n\n# localstorage\n\n * 设置sessionstorage\n\nlocalstorage.setitem("key", "value");\n\n\n * 读取sessionstorage\n\nlocalstorage.getitem("key");\n\n\n * 删除sessionstorage\n\nlocalstorage.removeitem("key");\n\n\n\n# application cache\n\n\n# indexdb\n\n\n# web sql\n\n\n# sqlite\n\n\n# 各缓存技术的比较\n\n名称                  存储位置   生命周期                     容量限制       兼容性\ncookie              浏览器    自行设置，可以无限长               >4kb       良好\nsessionstorage      浏览器    仅在当前会话下有效，关闭页面或浏览器后被清除   >5mb       优秀\nlocalstorage        浏览器    除非被清除，否则永久保存             每个域名>5mb   优秀\napplication cache   电脑缓存   除非被清除，否则永久保存             5mb        标准已废弃不建议使用\nindexdb             浏览器    除非被清除，否则永久保存             理论无上限      良好\nweb sql             电脑缓存   除非被清除，否则永久保存             >25mb      一般\nsqlite              安卓缓存   除非被清除，否则永久保存             理论无上限      一般',charsets:{cjk:!0}},{title:"3.11.1基本概念",frontmatter:{},regularPath:"/frontend/javascript/DOM/",relativePath:"frontend/javascript/DOM/README.md",key:"v-06de06ea",path:"/frontend/javascript/DOM/",headers:[{level:2,title:"3.11.1基本概念",slug:"_3-11-1基本概念",normalizedTitle:"3.11.1基本概念",charIndex:2},{level:2,title:"3.11.2获取DOM常用方法",slug:"_3-11-2获取dom常用方法",normalizedTitle:"3.11.2获取dom常用方法",charIndex:200},{level:2,title:"3.11.3操作DOM对象",slug:"_3-11-3操作dom对象",normalizedTitle:"3.11.3操作dom对象",charIndex:908},{level:2,title:"3.11.5DOM节点",slug:"_3-11-5dom节点",normalizedTitle:"3.11.5dom节点",charIndex:2307},{level:3,title:"浏览器兼容情况查询",slug:"浏览器兼容情况查询",normalizedTitle:"浏览器兼容情况查询",charIndex:3467}],headersStr:"3.11.1基本概念 3.11.2获取DOM常用方法 3.11.3操作DOM对象 3.11.5DOM节点 浏览器兼容情况查询",content:'# 3.11.1基本概念\n\n每个载入浏览器的HTML文档都会成为Document对象。\n\nDocument对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。\n\nDocument对象是Window对象的一部分\n\n当浏览器打开一个HTML文档时，浏览器解析HTML文档的标记，并创建表示这些标记的对象，这些对象就是HTML文档对象。\n\n文档对象即Document对象，指的是一回事。\n\n\n# 3.11.2获取DOM常用方法\n\n * getElementById返回拥有指定 id 的第一个对象的引用。\n\nvar x=document.getElementById("id")\n\n\n * getElementsByName返回拥有指定name的对象的集合。ie中只对表单元素中的name有效\n\nvar x=document.getElementsByName("name");\n\n\n * getElementsByTagName返回带有指定标签名的对象集合。Ie8+\n\nvar x=document.getElementsByTagName("div")[0]\n\n\n * getElementsByClassName返回文档中所有指定class的元素集合。\n\nvar x=document.getElementsByClassName("class")[0]\n\n\n * querySelector返回指定元素节点的子树中匹配选择器的集合中的第一个元素，如果没有匹配返回null,Ie9+\n\nvar x=document.querySelectorAll(".example");\n\n\n * querySelectorAll按文档顺序返回指定元素节点的子树中匹配选择器的元素集合，如果没有匹配返回空集合,Ie8+\n\n  var list=document.querySelectorAll(".example1,.example2");\n  var example1 = list[0]\n\n\nWARNING\n\n * querySelectorAll查找元素是非实时的，即不支持有动态添加元素情况下的查找\n\n\n# 3.11.3操作DOM对象\n\n在DOM中，Element对象表示HTML元素。\n\n * innerHTML设置或返回元素的内容。\n\nelement.innerHTML="hello word";\n\n\n * tagName返回元素的标签名。\n\n * id设置或返回元素的id。\n\nelement.id\n\n\n * className设置或返回元素的class属性。\n\n * title设置或返回元素的title属性。\n\n * style设置或返回元素的style属性。\n\nelement.style.width="100px";\nelement.style.cssText="width:100px";\n\n\nTIP\n\n 1. className\n\nelement.className="width:100px" \n\n\n 2. getComputedStyle\n\nvar element = querySelector.getElementById("test");\nWindow.getComputedStyle(element, false)["属性名"]\n//兼容：\nfunction getStyle(obj,attr){\n   if(window.getComputedStyle){\n    return window.getComputedStyle(obj,false)[attr];\n   }else{\n    return obj.currentStyle[attr];\n   }\n  }\n\n\n 3. getPropertyValue\n\nvar element = querySelector.getElementById("test");\nwindow.getComputedStyle(element, null).getPropertyValue("CSS属性")\n\n\n * getAttribute返回元素节点指定属性值的属性值。\n\na.getAttribute("target"); //_black\n\n\n * setAttribute把指定属性设置或更改为指定值。\n\n * removeAttribute从元素中移除指定属性。\n\n * createElement创建一个元素(节点)。\n\nvar btn=document.createElement("BUTTON");\n\n\n * appendChild向元素列表的末尾添加新的子节点。\n\ndocument.body.appendChild(btn) //添加到body中.\n\n\n * removeChild从元素中移除子节点。\n\nul.removeChild(li)\n\n\n * insertBefore向元素添加新的子节点，作为第一个子节点。\n\nul.insertBefore(newItem1, newItem2);\n\n\n * cloneNode元素克隆,(true)复制子元素,()不复制子元素\n\nli.cloneNode(true)\n\n\n * replaceChild替换元素中的子节点。\n\nul.insertBefore(newLi、, oldLi);\n\n\n * write向文档写HTML表达式或JavaScript代码。\n\nTIP\n\n文档加载之后使用docunment.write()会覆盖原文档.\n\n\n# 3.11.5DOM节点\n\nHTML 文档中的所有内容都是节点。\n\n整个文档是一个文档节点、每个 HTML 元素是元素节点、HTML 元素内的文本是文本节点\n\n每个 HTML 属性是属性节点、注释是注释节点。\n\n节点的属性：(名称、类型、值)\n\n * nodeName返回元素的名称。与tagName作用相同 文本节点的名称为:#text;文档节点的名称为:#document.\n\n * nodeType返回元素的节点类型。\n\n> 元素节点返回 1\n> 属性节点返回 2\n> 文本节点返回 3\n\n * nodeValue设置或返回元素值。\n\n> 文本节点返回文本内容 属性节点返回属性值 元素节点无nodeValue\n\nvar x=document.getElementById("demo").childNodes[0].nodeValue;\n\n\n# 父子节点属性\n\n * parentNode返回元素的父节点。\n\n * childNodes返回元素子节点的NodeList类似CSS中的子选择器（包括文本，标签，和回车，可以借助nodetype筛选）\n\n * children返回元素的子元素,该属性只返回元素节点。\n\n * firstChild（识别回车）和element.firstElementChild 返回元素的首个子元素。类似CSS中的：e:first-child\n\n * lastChild（识别回车）和element.lastElementChild 返回元素的最后一个子元素。类似CSS中的：e:last-child\n\n# 兄弟节点属性\n\n * previousSibling返回位于相同节点树层级的前一个元素（包括文本节点、注释节点即回车、换行、空格、文本等等）。\n\n * previousElementSibling返回位于相同节点树层级的前一个元素。\n\n * nextSibling返回位于相同节点树层级的后一个元素（包括文本节点、注释节点即回车、换行、空格、文本等等）。\n\n * nextElementSibling返回位于相同节点树层级的后一个元素。\n\nvar x = document.getElementById("li").nextElementSibling.innerHTML;\n\n\n# 文件节点属性\n\n * attributes返回指定节点的属性集合，即NamedNodeMap。\n\n<p id="demo" class="demo" onclick="myFunction()"></p>\n\n\n\tvar x=document.getElementById("demo").attributes.length; //x=3 id/class/onclick\n\n\nTIP\n\n\n# 浏览器兼容情况查询',normalizedContent:'# 3.11.1基本概念\n\n每个载入浏览器的html文档都会成为document对象。\n\ndocument对象使我们可以从脚本中对 html 页面中的所有元素进行访问。\n\ndocument对象是window对象的一部分\n\n当浏览器打开一个html文档时，浏览器解析html文档的标记，并创建表示这些标记的对象，这些对象就是html文档对象。\n\n文档对象即document对象，指的是一回事。\n\n\n# 3.11.2获取dom常用方法\n\n * getelementbyid返回拥有指定 id 的第一个对象的引用。\n\nvar x=document.getelementbyid("id")\n\n\n * getelementsbyname返回拥有指定name的对象的集合。ie中只对表单元素中的name有效\n\nvar x=document.getelementsbyname("name");\n\n\n * getelementsbytagname返回带有指定标签名的对象集合。ie8+\n\nvar x=document.getelementsbytagname("div")[0]\n\n\n * getelementsbyclassname返回文档中所有指定class的元素集合。\n\nvar x=document.getelementsbyclassname("class")[0]\n\n\n * queryselector返回指定元素节点的子树中匹配选择器的集合中的第一个元素，如果没有匹配返回null,ie9+\n\nvar x=document.queryselectorall(".example");\n\n\n * queryselectorall按文档顺序返回指定元素节点的子树中匹配选择器的元素集合，如果没有匹配返回空集合,ie8+\n\n  var list=document.queryselectorall(".example1,.example2");\n  var example1 = list[0]\n\n\nwarning\n\n * queryselectorall查找元素是非实时的，即不支持有动态添加元素情况下的查找\n\n\n# 3.11.3操作dom对象\n\n在dom中，element对象表示html元素。\n\n * innerhtml设置或返回元素的内容。\n\nelement.innerhtml="hello word";\n\n\n * tagname返回元素的标签名。\n\n * id设置或返回元素的id。\n\nelement.id\n\n\n * classname设置或返回元素的class属性。\n\n * title设置或返回元素的title属性。\n\n * style设置或返回元素的style属性。\n\nelement.style.width="100px";\nelement.style.csstext="width:100px";\n\n\ntip\n\n 1. classname\n\nelement.classname="width:100px" \n\n\n 2. getcomputedstyle\n\nvar element = queryselector.getelementbyid("test");\nwindow.getcomputedstyle(element, false)["属性名"]\n//兼容：\nfunction getstyle(obj,attr){\n   if(window.getcomputedstyle){\n    return window.getcomputedstyle(obj,false)[attr];\n   }else{\n    return obj.currentstyle[attr];\n   }\n  }\n\n\n 3. getpropertyvalue\n\nvar element = queryselector.getelementbyid("test");\nwindow.getcomputedstyle(element, null).getpropertyvalue("css属性")\n\n\n * getattribute返回元素节点指定属性值的属性值。\n\na.getattribute("target"); //_black\n\n\n * setattribute把指定属性设置或更改为指定值。\n\n * removeattribute从元素中移除指定属性。\n\n * createelement创建一个元素(节点)。\n\nvar btn=document.createelement("button");\n\n\n * appendchild向元素列表的末尾添加新的子节点。\n\ndocument.body.appendchild(btn) //添加到body中.\n\n\n * removechild从元素中移除子节点。\n\nul.removechild(li)\n\n\n * insertbefore向元素添加新的子节点，作为第一个子节点。\n\nul.insertbefore(newitem1, newitem2);\n\n\n * clonenode元素克隆,(true)复制子元素,()不复制子元素\n\nli.clonenode(true)\n\n\n * replacechild替换元素中的子节点。\n\nul.insertbefore(newli、, oldli);\n\n\n * write向文档写html表达式或javascript代码。\n\ntip\n\n文档加载之后使用docunment.write()会覆盖原文档.\n\n\n# 3.11.5dom节点\n\nhtml 文档中的所有内容都是节点。\n\n整个文档是一个文档节点、每个 html 元素是元素节点、html 元素内的文本是文本节点\n\n每个 html 属性是属性节点、注释是注释节点。\n\n节点的属性：(名称、类型、值)\n\n * nodename返回元素的名称。与tagname作用相同 文本节点的名称为:#text;文档节点的名称为:#document.\n\n * nodetype返回元素的节点类型。\n\n> 元素节点返回 1\n> 属性节点返回 2\n> 文本节点返回 3\n\n * nodevalue设置或返回元素值。\n\n> 文本节点返回文本内容 属性节点返回属性值 元素节点无nodevalue\n\nvar x=document.getelementbyid("demo").childnodes[0].nodevalue;\n\n\n# 父子节点属性\n\n * parentnode返回元素的父节点。\n\n * childnodes返回元素子节点的nodelist类似css中的子选择器（包括文本，标签，和回车，可以借助nodetype筛选）\n\n * children返回元素的子元素,该属性只返回元素节点。\n\n * firstchild（识别回车）和element.firstelementchild 返回元素的首个子元素。类似css中的：e:first-child\n\n * lastchild（识别回车）和element.lastelementchild 返回元素的最后一个子元素。类似css中的：e:last-child\n\n# 兄弟节点属性\n\n * previoussibling返回位于相同节点树层级的前一个元素（包括文本节点、注释节点即回车、换行、空格、文本等等）。\n\n * previouselementsibling返回位于相同节点树层级的前一个元素。\n\n * nextsibling返回位于相同节点树层级的后一个元素（包括文本节点、注释节点即回车、换行、空格、文本等等）。\n\n * nextelementsibling返回位于相同节点树层级的后一个元素。\n\nvar x = document.getelementbyid("li").nextelementsibling.innerhtml;\n\n\n# 文件节点属性\n\n * attributes返回指定节点的属性集合，即namednodemap。\n\n<p id="demo" class="demo" onclick="myfunction()"></p>\n\n\n\tvar x=document.getelementbyid("demo").attributes.length; //x=3 id/class/onclick\n\n\ntip\n\n\n# 浏览器兼容情况查询',charsets:{cjk:!0}},{title:"TypeScript",frontmatter:{},regularPath:"/frontend/javascript/TypeScript/",relativePath:"frontend/javascript/TypeScript/README.md",key:"v-4d2f95dd",path:"/frontend/javascript/TypeScript/",headers:[{level:2,title:"TypeScript",slug:"typescript",normalizedTitle:"typescript",charIndex:2}],headersStr:"TypeScript",content:"# TypeScript",normalizedContent:"# typescript",charsets:{}},{title:"3.4.1基本概念",frontmatter:{},regularPath:"/frontend/javascript/control/",relativePath:"frontend/javascript/control/README.md",key:"v-e176d6d6",path:"/frontend/javascript/control/",headers:[{level:2,title:"3.4.1基本概念",slug:"_3-4-1基本概念",normalizedTitle:"3.4.1基本概念",charIndex:2},{level:2,title:"3.4.2if选择语句",slug:"_3-4-2if选择语句",normalizedTitle:"3.4.2if选择语句",charIndex:59},{level:2,title:"3.4.3switch多条件选择语句",slug:"_3-4-3switch多条件选择语句",normalizedTitle:"3.4.3switch多条件选择语句",charIndex:354},{level:2,title:"3.4.4for循环语句",slug:"_3-4-4for循环语句",normalizedTitle:"3.4.4for循环语句",charIndex:734},{level:2,title:"3.4.5while循环",slug:"_3-4-5while循环",normalizedTitle:"3.4.5while循环",charIndex:1092},{level:2,title:"3.4.6do-while循环",slug:"_3-4-6do-while循环",normalizedTitle:"3.4.6do-while循环",charIndex:1181},{level:2,title:"3.4.7其他控制语句",slug:"_3-4-7其他控制语句",normalizedTitle:"3.4.7其他控制语句",charIndex:1346},{level:3,title:"for/in",slug:"for-in",normalizedTitle:"for/in",charIndex:1362},{level:3,title:"for/of",slug:"for-of",normalizedTitle:"for/of",charIndex:1536},{level:3,title:"for/each",slug:"for-each",normalizedTitle:"for/each",charIndex:1676},{level:2,title:"3.4.8跳出",slug:"_3-4-8跳出",normalizedTitle:"3.4.8跳出",charIndex:2323}],headersStr:"3.4.1基本概念 3.4.2if选择语句 3.4.3switch多条件选择语句 3.4.4for循环语句 3.4.5while循环 3.4.6do-while循环 3.4.7其他控制语句 for/in for/of for/each 3.4.8跳出",content:"# 3.4.1基本概念\n\n# 单行语句\n\n# 复合语句\n\n# 代码块\n\n# 复合语句也会被当做一条语句来处理\n\n\n# 3.4.2if选择语句\n\n# 过程：\n\n条件语句用于基于不同的条件来执行不同的动作。\n\nif() 语句 - 只有当指定条件为 true 时，使用该语句来执行代码\n\nif()...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码\n\nif()...else if()....else 语句 - 使用该语句来选择多个代码块之一来执行\n\nif语句()中的表达式会自动转换成布尔值。\n\n# 写法：\n\nif(condition){\n// 要执行的代码\n}else if(condition){\n// 要执行的代码\n}else{\n// 要执行的代码\n}\n\n\n\n# 3.4.3switch多条件选择语句\n\n使用 switch 语句来选择要执行的多个代码块之一。\n\n# 过程：\n\n首先设置表达式 n（通常是一个变量）。\n\n随后表达式的值会与结构中的每个 case 的值做比较。\n\n如果存在匹配，则与该 case 关联的代码块会被执行。\n\n请使用 break 来阻止代码自动地向下一个 case 运行。\n\ndefault 关键词来规定匹配不存在时做的事情;相当于if里的else\n\n# 写法：\n\nswitch(n)\n{\ncase 1:\n    // 要执行的代码;\n    break;\ncase 2:\n    // 要执行的代码;\n    break;\ncase 3:\n    // 要执行的代码;\n    break;\ndefault:\n//n 与 所有的case 都不同时执行的代码，相当于if里的else\n} \n\n\n\n# 3.4.4for循环语句\n\n在编程中有些指令需要执行很多遍，这时候就要用到循环语句。\n\n# 语法：\n\nfor (语句 1; 语句 2; 语句 3) { 被执行的代码块 }\n\n# 过程：\n\n语句 1 在循环（代码块）开始前执行\n\n语句 2 定义运行循环（代码块）的条件,如果语句 2 返回 true，则循环再次开始，如果返回 false，则循环将结束。\n\n语句 3 在循环（代码块）已被执行之后执行\n\n语句 1 是可选的，也就是说不使用语句 1 也可以。\n\n如果您省略了语句 2，那么必须在循环内提供 break。否则循环就无法停下来。这样有可能令浏览器崩溃。\n\n语句 3 也是可选的。\n\n# 写法：\n\nfor(var i=0 ; i<arr;i++){\n    console.log(arr[i])\n}\n\n\n\n# 3.4.5while循环\n\nwhile循环在执行前测试一个条件，如果条件成立进入循环。\n\n# 写法：\n\nwhile(condition)\n{\n// 要执行的代码;\n}\n\n\n\n# 3.4.6do-while循环\n\nwhile循环在执行前测试一个条件，而do-while循环先执行循环，然后再测试条件成立与否。\n\n# 写法：\n\ndo\n{\n// 要执行的代码;\n}\nwhile (condition)\n\n\nTIP\n\n差别：for:已知循环次数，while:已知循环条件，do-while:希望至少循环一次\n\n\n# 3.4.7其他控制语句\n\n\n# for/in\n\n循环遍历对象\n\nlet obj = {a: '1', b: '2', c: '3', d: '4'}\nfor (let key in obj) {\n    console.log(key)    //对象的属性名称 a,b,c,d\n    console.log(obj[key])  //对象的属性值1，2，3，4\n}\n\n\n\n# for/of\n\nES6新增加的语法，用来对键值进行循环\n\nlet arr = ['China', 'America', 'Korea']\nfor (let o of arr) {\n    console.log(o) //China, America, Korea\n}\n\n\n\n# for/each\n\n遍历数组，并调用函数（不能使用return、break等中断循环），不改变原数组，无返回值undefined。\n\nlet arr = ['a', 'b', 'c', 'd']\narr.forEach(function (val, index, arr) {\n    console.log(val + ', index = ' + index) // val是当前元素，index当前元素索引，arr数组\n})\n\n\n// 输出结果\na, index = 0\nb, index = 1\nc, index = 2\nd, index = 3\n\n\n# map\n\n与for/each相同\n\nvar numbers = [4, 9, 16, 25];\n\nfunction myFunction() {\n    x = document.getElementById(\"demo\")\n    x.innerHTML = numbers.map(Math.sqrt);\n}\n// 输出结果\n2,3,4,5\n\n\nTIP\n\n# map与foreach区别：\n\n 1. map速度比for/each快\n\n 2. map会返回一个新数组，不对原数组产生影响,for/each不会产生新数组，for/each返回undefined\n\n 3. map因为返回数组所以可以链式操作，for/each不能\n\n 4. map里可以用return ,而for/each不能用break和return。\n\n\n# 3.4.8跳出\n\nbreak用来终止循环，让循环不再往下继续，可以用在循环或switch中,不能用在for/each中。\n\ncontinue用来跳过当前循环，继续往下循环，只能用在循环中。\n\nreturn跳出当前函数，只能用咱函数体内。",normalizedContent:"# 3.4.1基本概念\n\n# 单行语句\n\n# 复合语句\n\n# 代码块\n\n# 复合语句也会被当做一条语句来处理\n\n\n# 3.4.2if选择语句\n\n# 过程：\n\n条件语句用于基于不同的条件来执行不同的动作。\n\nif() 语句 - 只有当指定条件为 true 时，使用该语句来执行代码\n\nif()...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码\n\nif()...else if()....else 语句 - 使用该语句来选择多个代码块之一来执行\n\nif语句()中的表达式会自动转换成布尔值。\n\n# 写法：\n\nif(condition){\n// 要执行的代码\n}else if(condition){\n// 要执行的代码\n}else{\n// 要执行的代码\n}\n\n\n\n# 3.4.3switch多条件选择语句\n\n使用 switch 语句来选择要执行的多个代码块之一。\n\n# 过程：\n\n首先设置表达式 n（通常是一个变量）。\n\n随后表达式的值会与结构中的每个 case 的值做比较。\n\n如果存在匹配，则与该 case 关联的代码块会被执行。\n\n请使用 break 来阻止代码自动地向下一个 case 运行。\n\ndefault 关键词来规定匹配不存在时做的事情;相当于if里的else\n\n# 写法：\n\nswitch(n)\n{\ncase 1:\n    // 要执行的代码;\n    break;\ncase 2:\n    // 要执行的代码;\n    break;\ncase 3:\n    // 要执行的代码;\n    break;\ndefault:\n//n 与 所有的case 都不同时执行的代码，相当于if里的else\n} \n\n\n\n# 3.4.4for循环语句\n\n在编程中有些指令需要执行很多遍，这时候就要用到循环语句。\n\n# 语法：\n\nfor (语句 1; 语句 2; 语句 3) { 被执行的代码块 }\n\n# 过程：\n\n语句 1 在循环（代码块）开始前执行\n\n语句 2 定义运行循环（代码块）的条件,如果语句 2 返回 true，则循环再次开始，如果返回 false，则循环将结束。\n\n语句 3 在循环（代码块）已被执行之后执行\n\n语句 1 是可选的，也就是说不使用语句 1 也可以。\n\n如果您省略了语句 2，那么必须在循环内提供 break。否则循环就无法停下来。这样有可能令浏览器崩溃。\n\n语句 3 也是可选的。\n\n# 写法：\n\nfor(var i=0 ; i<arr;i++){\n    console.log(arr[i])\n}\n\n\n\n# 3.4.5while循环\n\nwhile循环在执行前测试一个条件，如果条件成立进入循环。\n\n# 写法：\n\nwhile(condition)\n{\n// 要执行的代码;\n}\n\n\n\n# 3.4.6do-while循环\n\nwhile循环在执行前测试一个条件，而do-while循环先执行循环，然后再测试条件成立与否。\n\n# 写法：\n\ndo\n{\n// 要执行的代码;\n}\nwhile (condition)\n\n\ntip\n\n差别：for:已知循环次数，while:已知循环条件，do-while:希望至少循环一次\n\n\n# 3.4.7其他控制语句\n\n\n# for/in\n\n循环遍历对象\n\nlet obj = {a: '1', b: '2', c: '3', d: '4'}\nfor (let key in obj) {\n    console.log(key)    //对象的属性名称 a,b,c,d\n    console.log(obj[key])  //对象的属性值1，2，3，4\n}\n\n\n\n# for/of\n\nes6新增加的语法，用来对键值进行循环\n\nlet arr = ['china', 'america', 'korea']\nfor (let o of arr) {\n    console.log(o) //china, america, korea\n}\n\n\n\n# for/each\n\n遍历数组，并调用函数（不能使用return、break等中断循环），不改变原数组，无返回值undefined。\n\nlet arr = ['a', 'b', 'c', 'd']\narr.foreach(function (val, index, arr) {\n    console.log(val + ', index = ' + index) // val是当前元素，index当前元素索引，arr数组\n})\n\n\n// 输出结果\na, index = 0\nb, index = 1\nc, index = 2\nd, index = 3\n\n\n# map\n\n与for/each相同\n\nvar numbers = [4, 9, 16, 25];\n\nfunction myfunction() {\n    x = document.getelementbyid(\"demo\")\n    x.innerhtml = numbers.map(math.sqrt);\n}\n// 输出结果\n2,3,4,5\n\n\ntip\n\n# map与foreach区别：\n\n 1. map速度比for/each快\n\n 2. map会返回一个新数组，不对原数组产生影响,for/each不会产生新数组，for/each返回undefined\n\n 3. map因为返回数组所以可以链式操作，for/each不能\n\n 4. map里可以用return ,而for/each不能用break和return。\n\n\n# 3.4.8跳出\n\nbreak用来终止循环，让循环不再往下继续，可以用在循环或switch中,不能用在for/each中。\n\ncontinue用来跳过当前循环，继续往下循环，只能用在循环中。\n\nreturn跳出当前函数，只能用咱函数体内。",charsets:{cjk:!0}},{title:"3.2.1字符串型数据String",frontmatter:{},regularPath:"/frontend/javascript/datatype/",relativePath:"frontend/javascript/datatype/README.md",key:"v-18513586",path:"/frontend/javascript/datatype/",headers:[{level:2,title:"3.2.1字符串型数据String",slug:"_3-2-1字符串型数据string",normalizedTitle:"3.2.1字符串型数据string",charIndex:2},{level:2,title:"3.2.2数值型数据Number",slug:"_3-2-2数值型数据number",normalizedTitle:"3.2.2数值型数据number",charIndex:262},{level:2,title:"3.2.3布尔型数据Boolen",slug:"_3-2-3布尔型数据boolen",normalizedTitle:"3.2.3布尔型数据boolen",charIndex:613},{level:2,title:"3.2.4Undefined",slug:"_3-2-4undefined",normalizedTitle:"3.2.4undefined",charIndex:844},{level:2,title:"3.2.5Null",slug:"_3-2-5null",normalizedTitle:"3.2.5null",charIndex:1007},{level:2,title:"3.2.6数组Array:",slug:"_3-2-6数组array",normalizedTitle:"3.2.6数组array:",charIndex:1176},{level:2,title:"3.2.7对象Object:",slug:"_3-2-7对象object",normalizedTitle:"3.2.7对象object:",charIndex:1227},{level:2,title:"3.2.8数据类型检测",slug:"_3-2-8数据类型检测",normalizedTitle:"3.2.8数据类型检测",charIndex:1358},{level:3,title:"typeof方法：",slug:"typeof方法",normalizedTitle:"typeof方法：",charIndex:1374},{level:3,title:"constructor方法：",slug:"constructor方法",normalizedTitle:"constructor方法：",charIndex:1462},{level:3,title:"toString方法：",slug:"tostring方法",normalizedTitle:"tostring方法：",charIndex:1540},{level:2,title:"3.2.9浅拷贝与深拷贝",slug:"_3-2-9浅拷贝与深拷贝",normalizedTitle:"3.2.9浅拷贝与深拷贝",charIndex:1565}],headersStr:"3.2.1字符串型数据String 3.2.2数值型数据Number 3.2.3布尔型数据Boolen 3.2.4Undefined 3.2.5Null 3.2.6数组Array: 3.2.7对象Object: 3.2.8数据类型检测 typeof方法： constructor方法： toString方法： 3.2.9浅拷贝与深拷贝",content:'# 3.2.1字符串型数据String\n\n常量字符串：如 "JavaScript",\'HTML5\'\n\n变量字符串：如：var text="HTML5视频教程"\n\n可以使用"+"进行字符串的连接。\n\nTIP\n\n在 JavaScript 中，字符串使用单引号或者双引号来起始或者结束。如果要输出单引号或者双引号，就要用到转义字符\n\nJavaScript中常用的转义字符\n\n换行符：\\n\n\n回车符：\\r\n\n退格符: \\b\n\n反斜杠: \\\n\n双引号: "\n\n......\n*部分转义字符在输出为HTML文档流时不发生作用。\n\n\n# 3.2.2数值型数据Number\n\nJavaScript只有一种数字类型。数字可以带小数点，也可以不带。\n\n极大或极小的数字可以通过科学（指数）计数法来书写：3e4\n\n数值可以通过运算符进行计算。\n\n浮点数值的最高精度是17位小数，但是在进行算术计算时其精度远远不如整数。例如，0.1加0.2的结果不是0.3， 而是0.30000000000000004。这个舍入误差会导致无法测试特定的浮点数值。\n\n数字可以写成十进制、八进制、十六进制。\n\n八进制在js中表示是第一位一定要是0，后面就是八进制字数序列（0~7）\n\n十六进制字面量前两位必须是0x,后面跟十六进制数字（0~9及A~F）。字母A~F不区分大小写。\n\n*科学（指数）计数法、八进制、十六进制表示的数字在输出时统统会转换成十进制。\n\n\n# 3.2.3布尔型数据Boolen\n\n布尔型数据boolen:只能有两个值：true 或 false。\n\n将各种类型的值转化成Boolean类型的规则如下：\n\nNumber:任意非0的数值为true,0值和NaN为"false"。\n\nString:所有的非空字符串转化为 true;""（空字符串）转化成false\n\nObject的任何对象都会转化为 true;\n\n在javascript中，undefined、null、“ ”=false，其他都为真。\n\n\n# 3.2.4Undefined\n\n这是一个很有意思的数据类型，因为它的值只有一个，那就是undefined。\n\n在申明变量时如果没有将变量赋值的话这个变量也是属于Undefined类型的。。\n\n如果一个变量没有申明就直接去访问解释器会报错误信息，但是这样的变量如果使用typeof返回的结果也是"undefined"。\n\n\n# 3.2.5Null\n\nNull也是一个只有一个值得数据类型，它的值就是null，任何变量只要给其赋值为null的话这个变量的数据类型就是Null类型。\n\n可以通过将变量的值设置为 null 来清空变量。\n\nnull和undefined的区别：\n\nnull 已定义，并初始化为null;undefined:未定义，或者未初始化 。\n\n\n# 3.2.6数组Array:\n\n可以通过数组的下标来访问数组的元素。\n\n数组元素的顺序从0开始\n\n\n# 3.2.7对象Object:\n\n在javascript中，所有的对象都继承自Object对象。\n\n对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。\n\n对象没有赋值的属性，该属性的值为undefined。\n\n\n# 3.2.8数据类型检测\n\n\n# typeof方法：\n\n适用于基本数据类型undefined,boolean,number,string、object、function\n\nTypeof(vuale)\n\n\n\n# constructor方法：\n\n适用于对象、数组等复杂的数据类型,不适用与undefined和null。\n\nobject.constructor\n\n\n\n# toString方法：\n\n最安全、准确。\n\n\n# 3.2.9浅拷贝与深拷贝\n\n# 浅拷贝（shallowCopy）：只是增加了一个指针指向已存在的内存地址。\n\n# 深拷贝（deepCopy）：增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，\n\n对于字符串类型，浅拷贝是对值的复制。对于对象来说，浅拷贝是对对象地址的复制。\n\n * 深拷方法：\n\n 1. JSON方法\n\n let obj2 = JSON.parse(JSON.stringify(obj))\n\n\n 2. 递归\n 3. 利用lodash库的cloneDeep方法\n 4. ES6扩展运算符（只能当对象属性是基本数据类型才是深拷贝，引用类型还是浅拷贝）\n\nlet obj2 = {...obj1}\n',normalizedContent:'# 3.2.1字符串型数据string\n\n常量字符串：如 "javascript",\'html5\'\n\n变量字符串：如：var text="html5视频教程"\n\n可以使用"+"进行字符串的连接。\n\ntip\n\n在 javascript 中，字符串使用单引号或者双引号来起始或者结束。如果要输出单引号或者双引号，就要用到转义字符\n\njavascript中常用的转义字符\n\n换行符：\\n\n\n回车符：\\r\n\n退格符: \\b\n\n反斜杠: \\\n\n双引号: "\n\n......\n*部分转义字符在输出为html文档流时不发生作用。\n\n\n# 3.2.2数值型数据number\n\njavascript只有一种数字类型。数字可以带小数点，也可以不带。\n\n极大或极小的数字可以通过科学（指数）计数法来书写：3e4\n\n数值可以通过运算符进行计算。\n\n浮点数值的最高精度是17位小数，但是在进行算术计算时其精度远远不如整数。例如，0.1加0.2的结果不是0.3， 而是0.30000000000000004。这个舍入误差会导致无法测试特定的浮点数值。\n\n数字可以写成十进制、八进制、十六进制。\n\n八进制在js中表示是第一位一定要是0，后面就是八进制字数序列（0~7）\n\n十六进制字面量前两位必须是0x,后面跟十六进制数字（0~9及a~f）。字母a~f不区分大小写。\n\n*科学（指数）计数法、八进制、十六进制表示的数字在输出时统统会转换成十进制。\n\n\n# 3.2.3布尔型数据boolen\n\n布尔型数据boolen:只能有两个值：true 或 false。\n\n将各种类型的值转化成boolean类型的规则如下：\n\nnumber:任意非0的数值为true,0值和nan为"false"。\n\nstring:所有的非空字符串转化为 true;""（空字符串）转化成false\n\nobject的任何对象都会转化为 true;\n\n在javascript中，undefined、null、“ ”=false，其他都为真。\n\n\n# 3.2.4undefined\n\n这是一个很有意思的数据类型，因为它的值只有一个，那就是undefined。\n\n在申明变量时如果没有将变量赋值的话这个变量也是属于undefined类型的。。\n\n如果一个变量没有申明就直接去访问解释器会报错误信息，但是这样的变量如果使用typeof返回的结果也是"undefined"。\n\n\n# 3.2.5null\n\nnull也是一个只有一个值得数据类型，它的值就是null，任何变量只要给其赋值为null的话这个变量的数据类型就是null类型。\n\n可以通过将变量的值设置为 null 来清空变量。\n\nnull和undefined的区别：\n\nnull 已定义，并初始化为null;undefined:未定义，或者未初始化 。\n\n\n# 3.2.6数组array:\n\n可以通过数组的下标来访问数组的元素。\n\n数组元素的顺序从0开始\n\n\n# 3.2.7对象object:\n\n在javascript中，所有的对象都继承自object对象。\n\n对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。\n\n对象没有赋值的属性，该属性的值为undefined。\n\n\n# 3.2.8数据类型检测\n\n\n# typeof方法：\n\n适用于基本数据类型undefined,boolean,number,string、object、function\n\ntypeof(vuale)\n\n\n\n# constructor方法：\n\n适用于对象、数组等复杂的数据类型,不适用与undefined和null。\n\nobject.constructor\n\n\n\n# tostring方法：\n\n最安全、准确。\n\n\n# 3.2.9浅拷贝与深拷贝\n\n# 浅拷贝（shallowcopy）：只是增加了一个指针指向已存在的内存地址。\n\n# 深拷贝（deepcopy）：增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，\n\n对于字符串类型，浅拷贝是对值的复制。对于对象来说，浅拷贝是对对象地址的复制。\n\n * 深拷方法：\n\n 1. json方法\n\n let obj2 = json.parse(json.stringify(obj))\n\n\n 2. 递归\n 3. 利用lodash库的clonedeep方法\n 4. es6扩展运算符（只能当对象属性是基本数据类型才是深拷贝，引用类型还是浅拷贝）\n\nlet obj2 = {...obj1}\n',charsets:{cjk:!0}},{title:"3.16.1 let和const命令",frontmatter:{},regularPath:"/frontend/javascript/ECMAScript/",relativePath:"frontend/javascript/ECMAScript/README.md",key:"v-42b112dd",path:"/frontend/javascript/ECMAScript/",headers:[{level:2,title:"3.16.1 let和const命令",slug:"_3-16-1-let和const命令",normalizedTitle:"3.16.1 let和const命令",charIndex:2},{level:2,title:"3.16.2 变量的解构赋值",slug:"_3-16-2-变量的解构赋值",normalizedTitle:"3.16.2 变量的解构赋值",charIndex:656},{level:3,title:"1. 数据的解构赋值",slug:"_1-数据的解构赋值",normalizedTitle:"1. 数据的解构赋值",charIndex:715},{level:3,title:"2. 对象的解构赋值",slug:"_2-对象的解构赋值",normalizedTitle:"2. 对象的解构赋值",charIndex:1116},{level:3,title:"3. 字符串的解构赋值",slug:"_3-字符串的解构赋值",normalizedTitle:"3. 字符串的解构赋值",charIndex:2245},{level:3,title:"4. 数值和布尔值的解构赋值",slug:"_4-数值和布尔值的解构赋值",normalizedTitle:"4. 数值和布尔值的解构赋值",charIndex:2385},{level:3,title:"5. 函数参数的解构赋值",slug:"_5-函数参数的解构赋值",normalizedTitle:"5. 函数参数的解构赋值",charIndex:2591},{level:2,title:"3.16.3 函数扩展",slug:"_3-16-3-函数扩展",normalizedTitle:"3.16.3 函数扩展",charIndex:3271},{level:3,title:"1. length属性",slug:"_1-length属性",normalizedTitle:"1. length属性",charIndex:3287},{level:3,title:"2. 作用域",slug:"_2-作用域",normalizedTitle:"2. 作用域",charIndex:3323},{level:3,title:"3. rest参数",slug:"_3-rest参数",normalizedTitle:"3. rest参数",charIndex:3391},{level:3,title:"4. 严格模式",slug:"_4-严格模式",normalizedTitle:"4. 严格模式",charIndex:3490},{level:3,title:"5. name属性",slug:"_5-name属性",normalizedTitle:"5. name属性",charIndex:3768},{level:2,title:"3.16.4 字符串扩展",slug:"_3-16-4-字符串扩展",normalizedTitle:"3.16.4 字符串扩展",charIndex:4381},{level:3,title:"1. for...of方法遍历字符串",slug:"_1-for-of方法遍历字符串",normalizedTitle:"1. for...of方法遍历字符串",charIndex:4398},{level:3,title:"2. 模板字符串",slug:"_2-模板字符串",normalizedTitle:"2. 模板字符串",charIndex:4494},{level:3,title:"3. 模板标签",slug:"_3-模板标签",normalizedTitle:"3. 模板标签",charIndex:4699},{level:3,title:"4. includes/startsWith/endsWith",slug:"_4-includes-startswith-endswith",normalizedTitle:"4. includes/startswith/endswith",charIndex:4833},{level:3,title:"5. repeat",slug:"_5-repeat",normalizedTitle:"5. repeat",charIndex:5014},{level:3,title:"6. padStart/padEnd",slug:"_6-padstart-padend",normalizedTitle:"6. padstart/padend",charIndex:5147},{level:3,title:"7. trimStart/trimEnd",slug:"_7-trimstart-trimend",normalizedTitle:"7. trimstart/trimend",charIndex:5487},{level:3,title:"8. matchAll",slug:"_8-matchall",normalizedTitle:"8. matchall",charIndex:5568},{level:3,title:"9. replaceAll",slug:"_9-replaceall",normalizedTitle:"9. replaceall",charIndex:5610},{level:2,title:"3.16.5 数值扩展",slug:"_3-16-5-数值扩展",normalizedTitle:"3.16.5 数值扩展",charIndex:6228},{level:3,title:"1. isFinite/isNaN",slug:"_1-isfinite-isnan",normalizedTitle:"1. isfinite/isnan",charIndex:6244},{level:3,title:"2. parseInt/parseFloat",slug:"_2-parseint-parsefloat",normalizedTitle:"2. parseint/parsefloat",charIndex:6318},{level:3,title:"3. isInteger",slug:"_3-isinteger",normalizedTitle:"3. isinteger",charIndex:6345},{level:3,title:"4. EPSILON",slug:"_4-epsilon",normalizedTitle:"4. epsilon",charIndex:6373},{level:2,title:"3.16.6 Math扩展",slug:"_3-16-6-math扩展",normalizedTitle:"3.16.6 math扩展",charIndex:6411},{level:3,title:"1. Math去除小数部分",slug:"_1-math去除小数部分",normalizedTitle:"1. math去除小数部分",charIndex:6429},{level:3,title:"2. sign判断一个数的底数",slug:"_2-sign判断一个数的底数",normalizedTitle:"2. sign判断一个数的底数",charIndex:6447},{level:3,title:"3. cbrt计算一个数的立方根",slug:"_3-cbrt计算一个数的立方根",normalizedTitle:"3. cbrt计算一个数的立方根",charIndex:6467},{level:3,title:"4. cbrt计算所有参数的平方和的平方根",slug:"_4-cbrt计算所有参数的平方和的平方根",normalizedTitle:"4. cbrt计算所有参数的平方和的平方根",charIndex:6488},{level:2,title:"3.16.7 数组扩展",slug:"_3-16-7-数组扩展",normalizedTitle:"3.16.7 数组扩展",charIndex:6514},{level:3,title:"1. 扩展运算符...",slug:"_1-扩展运算符",normalizedTitle:"1. 扩展运算符...",charIndex:6530},{level:3,title:"2. from",slug:"_2-from",normalizedTitle:"2. from",charIndex:7006},{level:3,title:"3. of",slug:"_3-of",normalizedTitle:"3. of",charIndex:7195},{level:3,title:"4. copyWithin",slug:"_4-copywithin",normalizedTitle:"4. copywithin",charIndex:7255},{level:3,title:"5. find/findIndex",slug:"_5-find-findindex",normalizedTitle:"5. find/findindex",charIndex:7517},{level:3,title:"6. fill",slug:"_6-fill",normalizedTitle:"6. fill",charIndex:7673},{level:3,title:"7.  entries/keys/values",slug:"_7-entries-keys-values",normalizedTitle:"7.  entries/keys/values",charIndex:null},{level:3,title:"8. includes",slug:"_8-includes",normalizedTitle:"8. includes",charIndex:8252},{level:3,title:"9. flat/flatMap",slug:"_9-flat-flatmap",normalizedTitle:"9. flat/flatmap",charIndex:8473},{level:2,title:"3.16.8 对象扩展",slug:"_3-16-8-对象扩展",normalizedTitle:"3.16.8 对象扩展",charIndex:8698},{level:3,title:"1. 属性的简洁表示法",slug:"_1-属性的简洁表示法",normalizedTitle:"1. 属性的简洁表示法",charIndex:8714},{level:3,title:"2. 属性名表达式",slug:"_2-属性名表达式",normalizedTitle:"2. 属性名表达式",charIndex:8778},{level:3,title:"3. name属性",slug:"_3-name属性",normalizedTitle:"3. name属性",charIndex:8836},{level:3,title:"4. 可枚举性",slug:"_4-可枚举性",normalizedTitle:"4. 可枚举性",charIndex:8923},{level:3,title:"5. 属性的遍历",slug:"_5-属性的遍历",normalizedTitle:"5. 属性的遍历",charIndex:9691},{level:3,title:"6. super关键字",slug:"_6-super关键字",normalizedTitle:"6. super关键字",charIndex:10136},{level:3,title:"7. 对象的扩展运算符 详见数组的扩展",slug:"_7-对象的扩展运算符-详见数组的扩展",normalizedTitle:"7. 对象的扩展运算符 详见数组的扩展",charIndex:10663},{level:3,title:"8. ?.链判断运算符",slug:"_8-链判断运算符",normalizedTitle:"8. ?.链判断运算符",charIndex:10687},{level:3,title:"9. ??Null判断运算符",slug:"_9-null判断运算符",normalizedTitle:"9. ??null判断运算符",charIndex:11088},{level:3,title:"10. Object.is",slug:"_10-object-is",normalizedTitle:"10. object.is",charIndex:11352},{level:3,title:"11. Object.assign",slug:"_11-object-assign",normalizedTitle:"11. object.assign",charIndex:11507},{level:3,title:"12. Object.getOwnPropertyDescriptors",slug:"_12-object-getownpropertydescriptors",normalizedTitle:"12. object.getownpropertydescriptors",charIndex:11670},{level:3,title:"13.  __proto__属性和Object.setPrototypeOf/Object.getPrototypeOf方法",slug:"_13-proto-属性和object-setprototypeof-object-getprototypeof方法",normalizedTitle:"13.  __proto__属性和object.setprototypeof/object.getprototypeof方法",charIndex:null},{level:3,title:"14.  Object.keys/Object.values/Object.entries/Object.fromEntries",slug:"_14-object-keys-object-values-object-entries-object-fromentries",normalizedTitle:"14.  object.keys/object.values/object.entries/object.fromentries",charIndex:null},{level:2,title:"3.16.9 Symbol",slug:"_3-16-9-symbol",normalizedTitle:"3.16.9 symbol",charIndex:12726},{level:2,title:"3.16.10 Set与Map",slug:"_3-16-10-set与map",normalizedTitle:"3.16.10 set与map",charIndex:13495},{level:3,title:"Set",slug:"set",normalizedTitle:"set",charIndex:6982},{level:3,title:"Map",slug:"map",normalizedTitle:"map",charIndex:6976},{level:2,title:"3.16.11 proxy",slug:"_3-16-11-proxy",normalizedTitle:"3.16.11 proxy",charIndex:14603},{level:2,title:"3.16.12 Reflect",slug:"_3-16-12-reflect",normalizedTitle:"3.16.12 reflect",charIndex:14957},{level:2,title:"3.16.13 Promise",slug:"_3-16-13-promise",normalizedTitle:"3.16.13 promise",charIndex:15016},{level:2,title:"3.16.14 Iterator和for...of循环",slug:"_3-16-14-iterator和for-of循环",normalizedTitle:"3.16.14 iterator和for...of循环",charIndex:15053},{level:2,title:"3.16.15 Iterator",slug:"_3-16-15-iterator",normalizedTitle:"3.16.15 iterator",charIndex:15226},{level:2,title:"3.16.16 for...of",slug:"_3-16-16-for-of",normalizedTitle:"3.16.16 for...of",charIndex:15588},{level:2,title:"3.16.17 Generator",slug:"_3-16-17-generator",normalizedTitle:"3.16.17 generator",charIndex:15678},{level:2,title:"3.16.18 async",slug:"_3-16-18-async",normalizedTitle:"3.16.18 async",charIndex:17045},{level:2,title:"3.16.19 Class",slug:"_3-16-19-class",normalizedTitle:"3.16.19 class",charIndex:17467},{level:2,title:"3.16.20 ES6 Module",slug:"_3-16-20-es6-module",normalizedTitle:"3.16.20 es6 module",charIndex:18108},{level:3,title:"export",slug:"export",normalizedTitle:"export",charIndex:18475},{level:3,title:"import",slug:"import",normalizedTitle:"import",charIndex:18482},{level:3,title:"export default",slug:"export-default",normalizedTitle:"export default",charIndex:19954},{level:3,title:"export与import的复合写法",slug:"export与import的复合写法",normalizedTitle:"export与import的复合写法",charIndex:20851},{level:3,title:"模块的继承",slug:"模块的继承",normalizedTitle:"模块的继承",charIndex:21071},{level:3,title:"跨模块常量",slug:"跨模块常量",normalizedTitle:"跨模块常量",charIndex:21242},{level:3,title:"Module的加载实现",slug:"module的加载实现",normalizedTitle:"module的加载实现",charIndex:21612},{level:2,title:"3.16.21  风格规范",slug:"_3-16-21-风格规范",normalizedTitle:"3.16.21  风格规范",charIndex:null}],headersStr:"3.16.1 let和const命令 3.16.2 变量的解构赋值 1. 数据的解构赋值 2. 对象的解构赋值 3. 字符串的解构赋值 4. 数值和布尔值的解构赋值 5. 函数参数的解构赋值 3.16.3 函数扩展 1. length属性 2. 作用域 3. rest参数 4. 严格模式 5. name属性 3.16.4 字符串扩展 1. for...of方法遍历字符串 2. 模板字符串 3. 模板标签 4. includes/startsWith/endsWith 5. repeat 6. padStart/padEnd 7. trimStart/trimEnd 8. matchAll 9. replaceAll 3.16.5 数值扩展 1. isFinite/isNaN 2. parseInt/parseFloat 3. isInteger 4. EPSILON 3.16.6 Math扩展 1. Math去除小数部分 2. sign判断一个数的底数 3. cbrt计算一个数的立方根 4. cbrt计算所有参数的平方和的平方根 3.16.7 数组扩展 1. 扩展运算符... 2. from 3. of 4. copyWithin 5. find/findIndex 6. fill 7.  entries/keys/values 8. includes 9. flat/flatMap 3.16.8 对象扩展 1. 属性的简洁表示法 2. 属性名表达式 3. name属性 4. 可枚举性 5. 属性的遍历 6. super关键字 7. 对象的扩展运算符 详见数组的扩展 8. ?.链判断运算符 9. ??Null判断运算符 10. Object.is 11. Object.assign 12. Object.getOwnPropertyDescriptors 13.  __proto__属性和Object.setPrototypeOf/Object.getPrototypeOf方法 14.  Object.keys/Object.values/Object.entries/Object.fromEntries 3.16.9 Symbol 3.16.10 Set与Map Set Map 3.16.11 proxy 3.16.12 Reflect 3.16.13 Promise 3.16.14 Iterator和for...of循环 3.16.15 Iterator 3.16.16 for...of 3.16.17 Generator 3.16.18 async 3.16.19 Class 3.16.20 ES6 Module export import export default export与import的复合写法 模块的继承 跨模块常量 Module的加载实现 3.16.21  风格规范",content:"# 3.16.1 let和const命令\n\nlet声明的变量不存在预解析，不存在变量提升，同一作用域不允许重复声明，只能在块内访问。\nconst用于声明常量，值不可以改变，不存在预解析，必须初始化（直接赋值），同一作用域不允许重复声明，只能在块内访问。\n\nTIP\n\n 1. 块级作用域：if/else/for，由{}包括起来的部分。\n 2. const指向的地址不可以改变，但是指向的数据结构是可以改变的。可以使用Object.freeze冻结指向的对象。\n 3. let/const声明的变量不属于顶层对象的属性。\n 4. *ES2020新增globalThis可以在任何环境下获取顶层对象。\n\n块级作用域的优点：\n\nfor (var i = 0; i < 5; i++) {\n  setTimeout(() => {\n    console.log(i)\n  }, 1000)\n}\n// 5 5 5 5 5\n\n\nfor (let i = 0; i < 5; i++) {\n  setTimeout(() => {\n    console.log(i)\n  }, 1000)\n}\n// 0 1 2 3 4\n\n// 通过闭包实现\nfor (var i = 0; i < 5; i++) {\n  (function (index) {\n    setTimeout(() => {\n      console.log(index)\n    }, 1000)\n  })(i)\n}\n// 0 1 2 3 4\n\n\n\n# 3.16.2 变量的解构赋值\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构\n\n\n# 1. 数据的解构赋值\n\n=号右侧必须是数组，根据数据顺序一一对应，如果解构不成功，变量的值就等于undefined。\n\n>     let [a,b,c] = [1,2,3] // a = 1 b = 2 c = 3\n>     let [foo, [[bar], baz]] = [1, [[2], 3]] // foo = 1 bar = 2 baz = 3\n>     let [head, ...tail] = [1, 2, 3, 4];  // head = 1  tail = [2, 3, 4]\n>     let [x, y] = [1, 2, 3];let [x, y] = [1, 2, 3]; // x =1 y = 2\n> \n> \n>  * 默认值\n> \n>      let [x, y = 'b'] = ['a']; // 给y设置默认值 x='a', y='b'\n\n\n# 2. 对象的解构赋值\n\n=号右侧必须是对象，根据key一一对应，如果解构不成功，变量的值就等于undefined。\n\n>    let { bar, foo } = { foo: 'aaa', bar: 'bbb' }; // bar = aaa foo = bbb\n>    let { baz } = { foo: 'aaa', bar: 'bbb' };  // baz = undefined\n>    let { foo: baz } = { foo: 'aaa', bar: 'bbb' }; \n> \n> \n>  * 默认值\n> \n>      let {x, y = 5} = [x:1]]; // 给y设置默认值 x=1, y=5\n> \n> \n>  * 别名\n> \n> // 给baz设置别名foo baz = aaa  \n> // foo = error: foo is not defined 真正被赋值的是变量baz，而不是别名foo。\n> let { foo: baz } = { foo: 'aaa', bar: 'bbb' }; \n> \n> \n>  * 嵌套结构的对象\n> \n> let obj = {p: ['Hello',{ y: 'World' }]};\n> let { p: [x, { y }] } = obj; // x = \"Hello\" y =  \"World\"  \n> // 通过别名s接收\n> let { p:s, p: [x, { y }] } = obj; \n> // x = \"Hello\" y = \"World\"  \n> // 第一个p是表示赋值给p, 第二个p 表示obj里面的p对象\n> // p = [\"Hello\", {y: \"World\"}] s = [\"Hello\", {y: \"World\"}]\n> \n> \n> let obj = {p:{x:'Hello',y: 'World'}};\n> let {p,p:{x,y}} = obj   // p = {x: \"Hello\", y: \"World\"}\n> // 通过别名s接收\n> let {p:s,p:{x,y}} = obj   // p = {x: \"Hello\", y: \"World\"} s = {x: \"Hello\", y: \"World\"}\n> \n> \n> WARNING\n> \n> 如果要将一个已经声明的变量用于解构赋值,需要将整个解构赋值语句，放在一个圆括号里面。\n> \n> \n> let x;\n> // 错误的写法 \n> {x} = {x: 1};\n> // 正确的写法\n> ({x} = {x: 1});\n\n\n# 3. 字符串的解构赋值\n\n    let [a, b, c, d, e] = 'hello' // a = \"h\" b = \"e\" c = \"l\" d = \"l\" e = \"o\"\n    let {length : len} = 'hello'; // len = 5\n\n\n\n# 4. 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n    let {toString: s} = 123;\n    s === Number.prototype.toString // true\n\n\nTIP\n\n数值和布尔值的包装对象都有toString属性，因此变量都能取到值。 由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\n\n# 5. 函数参数的解构赋值\n\n> function add([x, y]){\n>   return x + y;\n> }\n> \n> add([1, 2]); // 3\n> \n> \n> [[1, 2], [3, 4]].map(([a, b]) => a + b);// [ 3, 7 ]\n> \n> \n>  * 默认值\n> \n>  1. 写法一：函数参数的默认值是空对象，但是设置了对象解构赋值的默认值\n> \n> function move({x = 0, y = 0} = {}) {\n>   return [x, y];\n> }\n> move({x: 3, y: 8}); // [3, 8]\n> move({x: 3}); // [3, 0]\n> move({}); // [0, 0]\n> move(); // [0, 0]\n> \n> \n>  2. 写法二：函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值\n> \n> function move({x, y} = { x: 0, y: 0 }) {\n>   return [x, y];\n> }\n> \n> move({x: 3, y: 8}); // [3, 8]\n> move({x: 3}); // [3, undefined]\n> move({}); // [undefined, undefined]\n> move(); // [0, 0]\n> \n> \n>  * 参数默认值的位置：通常情况下，定义了默认值的参数，应该是函数的尾参数，否则不能省略默认值前面的参数。\n\n\n# 3.16.3 函数扩展\n\n\n# 1. length属性\n\n只会返回没有设置默认值的参数的长度。\n\n\n# 2. 作用域\n\n如果设置了默认值参数，则赋值语句本事会形成一个单独的作用域。如果作用域内未定义则查找全局参数，否则提示未定义。\n\n\n# 3. rest参数\n\n用于获取函数的多余参数\n\nfunction fn(...rest) {\n  return rest;  // [1,2,3,4,5]\n}\nfn(1,2,3,4,5)\n\n\n\n# 4. 严格模式\n\nES6规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能设定为严格模式\n\n'use strict'; // 设置为严格模式\nfunction doSomething(a, b = a) { // 方法内部正常模式，不能在方法内设置use strict\n}\n\n\nTIP\n\n 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n 2. 消除代码运行的一些不安全之处，保证代码运行的安全。\n 3. 提高编译器效率，增加运行速度。\n 4. 为未来新版本的Javascript做好铺垫。\n\n\n# 5. name属性\n\nfunction fn(){}\nvar f = function fn(){}\nfn.name  // fn\nf.name // 匿名函数赋值给变量 ES5 => \"\"  ES6 => fn \n\n\n * 箭头函数:使用=>定义函数\n\nvar f = v => v\n//等同于\nvar f = function (v) {\n return v;\n};\n\n\nTIP\n\n 1. 如果不需要参数或需要多个参数，就使用一个圆括号代表参数部分。\n 2. 如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。\n 3. 箭头函数内的this指向定义时所在作用域链上一层的this\n 4. 箭头函数不可以当做构造函数，不可以使用new命令\n 5. 箭头函数不可以使用arguments对象\n 6. 箭头函数不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n 7. 给对象的属性定义方法时，不建议使用箭头函数，此时的箭头函数this指向全局。\n 8. \n\n * 尾调用优化:删除调用尾调用方法的方法的调用帧，只要严格模式模式下有效。 尾调用：指某个函数的最后一步是调用另一个函数。return后调用另一个方法\n * 尾递归优化:只保留一个调用记录，只要严格模式模式下有效。 尾递归：指某个函数的最后一步是调用函数自己。return后调用自己\n\n箭头函数的作用域详见3.5.5\n\n\n# 3.16.4 字符串扩展\n\n\n# 1. for...of方法遍历字符串\n\n> for (let codePoint of 'foo') {console.log(codePoint)}  // \"f\" \"o\" \"o\"\n\n\n# 2. 模板字符串\n\n> 通过反引号包裹字符串，${}可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性还可以调用函数。\n> \n> `Hello ${name}, how are you ${time}?`\n> \n> \n> TIP\n> \n>  * 如果模板内字符串需要输出反引号，则序号反斜杠转译`\n>  * 模板字符串内的所有空格和缩进都会保留，如果不想保留可以使用trim去除\n\n\n# 3. 模板标签\n\n> 把模板设置成一个方法\n> \n> Hello([`Hello ${name}, how are you ${time}?`]) \n> // 等同于\n> Hello`Hello ${name}, how are you ${time}?` \n\n\n# 4. includes/startsWith/endsWith\n\n> let s = 'Hello world!';\n> s.startsWith('Hello') // true 指定字符串是否在首位\n> s.endsWith('!') // true  指定字符串是否在尾部\n> s.includes('o') // true  是否含有指定字符串\n\n\n# 5. repeat\n\n> 将原字符串重复n次,如果是小数，向下取整，不可以是负数。\n> \n> 'x'.repeat(3) // \"xxx\"\n> 'hello'.repeat(2) // \"hellohello\"\n> 'na'.repeat(0) // \"\"\n\n\n# 6. padStart/padEnd\n\n> *ES2017新增：padStart用于头部补全，padEnd()`用于尾部补全。第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。\n> \n> 'x'.padStart(5, 'ab') // 'ababx' 头部用ab补全，补全后为5位\n> 'x'.padEnd(5, 'ab') // 'xabab' 尾部用ab补全，补全后为5位\n> \n> \n> TIP\n> \n>  * 如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。\n>  * 如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。\n>  * 如果省略第二个字符串，则默认使用空格补全。\n\n\n# 7. trimStart/trimEnd\n\n> *ES2019新增：trimStart消除字符串头部的空格，trimEnd消除尾部的空格,不改变原字符串\n\n\n# 8. matchAll\n\n> 方法返回一个正则表达式在当前字符串的所有匹配\n\n\n# 9. replaceAll\n\n> *ES2021新增：一次性替换所有匹配，正则必须配置全局匹配g。\n> \n>  * $&匹配的字符串\n>  * $`匹配结果前面的字符串\n>  * $' 匹配结果后面的字符串+\n>  * $n匹配的第N组数据，n从1开始。这个参数生效的前提是，第一个参数必须是正则表达式。\n>  * $$表示美元符号\n> \n> // $& 表示匹配的字符串，即`b`本身\n> 'abbc'.replaceAll('b', '$&') // abbc\n> // $` 表示匹配结果之前的字符串\n> // 对于第一个`b`，$` 指代`a`\n> // 对于第二个`b`，$` 指代`ab`\n> 'abbc'.replaceAll('b', '$`') // 'aaabc'\n> // $' 表示匹配结果之后的字符串\n> // 对于第一个`b`，$' 指代`bc`\n> // 对于第二个`b`，$' 指代`c`\n> 'abbc'.replaceAll('b', `$'`) // 'abccc'\n> // $1 表示正则表达式的第一个组匹配，指代`ab`\n> // $2 表示正则表达式的第二个组匹配，指代`bc`\n> 'abbc'.replaceAll(/(ab)(bc)/g, '$2$1')// 'bcab'\n> // $$ 指代 $\n> 'abc'.replaceAll('b', '$$')// 'a$c'\n\n\n# 3.16.5 数值扩展\n\n\n# 1. isFinite/isNaN\n\n> Number.isFinite()检测数值是否有限，Number.isNaN检测数值是否为NaN\n\n\n# 2. parseInt/parseFloat\n\n\n# 3. isInteger\n\n> 判断是否为整数\n\n\n# 4. EPSILON\n\n> 生成一个极小的常量，常用语设置误差范围\n\n\n# 3.16.6 Math扩展\n\n\n# 1. Math去除小数部分\n\n\n# 2. sign判断一个数的底数\n\n\n# 3. cbrt计算一个数的立方根\n\n\n# 4. cbrt计算所有参数的平方和的平方根\n\n\n# 3.16.7 数组扩展\n\n\n# 1. 扩展运算符...\n\n将一个数组转为用逗号分隔的参数序列\n\n>  * 数组合并\n> \n> arr1.push(...arr2);// push方法的参数不可以是数组，所以通过扩展运算符拆分在参数序列插入arr1数组\n> \n> \n>  * 深拷贝\n> \n> arr1 = (...arr2);\n> \n> \n>  * 配合解构赋值\n> \n> const [first, ...rest] = [1, 2, 3, 4, 5]; //  first = 1    rest = [2, 3, 4, 5] \n> \n> \n>  * 字符串转数组\n> \n> [...'hello']// 字符串转数组 [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n> \n> \n>  * 遍历器（Iterator）转数组\n> \n> let nodeList = document.querySelectorAll('div');\n> let array = [...nodeList];\n> \n> \n>  * Map 和 Set 结构，Generator 函数\n\n\n# 2. from\n\n> 将类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。\n> \n> const list = document.querySelectorAll(\"li\");\n> Array.from(list).map((item) => item);\n\n\n# 3. of\n\n> 将一组值，转换为数组\n> \n> Array.of(3, 11, 8) // [3,11,8]\n\n\n# 4. copyWithin\n\n> 在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。\n> \n> [1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5]\n> \n> \n> 第一个参数：从该位置开始替换数据。如果为负值，表示倒数。 第二个参数：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。 第三个参数：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。\n\n\n# 5. find/findIndex\n\n> find/findIndex找出第一个符合条件的数组成员。find返回找到的第一个元素，findIndex返回找到的第一个元素的索引\n\n  [1,2,3,4,5,6,7,8,9,10,11].find(item => item>10) // 找到大于10的数\n\n\n\n# 6. fill\n\n> 使用给定值填充数组,第一个参数是要填充的值，第二个参数是起始位置，第三个参数是结束位置\n> \n> ['a', 'b', 'c'].fill(7)  // [7, 7, 7]\n> new Array(3).fill(7)  // [7, 7, 7]\n> ['a', 'b', 'c'].fill(7, 1, 2)  // ['a', 7, 'c']\n\n\n# 7. entries/keys/values\n\n> 用于遍历数组。它们都返回一个遍历器对象（Iterator），可以用for...of循环进行遍历，唯一的区别是keys是对键名的遍历、values是对键值的遍历，entries是对键值对的遍历。\n> \n> for (let index of ['a', 'b'].keys()) {\n>  console.log(index);// 0  1\n> }\n> \n> for (let elem of ['a', 'b'].values()) {\n>  console.log(elem);// 'a'  'b'\n> }\n> \n> for (let [index, elem] of ['a', 'b'].entries()) {\n>  console.log(index, elem);// 0 \"a\"  1 \"b\"\n> }\n\n\n# 8. includes\n\n> 表示某个数组是否包含给定的值，与字符串的indexof方法类似.第一个参数是给定的值，第二个参数是起始位置，负数倒序。\n\n[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n\n\n\n# 9. flat/flatMap\n\n> flat将嵌套的数组“拉平”,参数表示拉平的层数，默认为1，Infinity表示全部拉平。\n> flatMap对原数组的每个成员执行一个函数.并返回一个新的拉平数组，但是只能“拉平”一层。\n> \n> [1, 2, [3, 4]].flat() // [1, 2, 3, 4]\n> [1, 2, 3, 4].flatMap(x => [[x * 2]])  // [[2], [4], [6], [8]]\n\n\n# 3.16.8 对象扩展\n\n\n# 1. 属性的简洁表示法\n\n> const baz = {foo};// 等同于   baz = {foo: foo};\n\n\n# 2. 属性名表达式\n\n> obj['a' + 'bc'] = 123;  // obj.abc = 123\n\n\n# 3. name属性\n\n> 对象也是方法，name属性返回方法名。如果对象的方法使用了取值函数（getter）和存值函数（setter），在name前加get和set\n\n\n# 4. 可枚举性\n\n> 对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n> \n> let obj = { foo: 123 };\n> Object.getOwnPropertyDescriptor(obj, 'foo')\n> //  {\n> //    value: 123,  属性值\n> //    writable: true, \n> //    enumerable: true, 是否可枚举\n> //    configurable: true\n> //  }\n> \n> \n> 描述对象的enumerable属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性。 目前，有四个操作会忽略enumerable为false的属性。\n> \n> > for/in：只遍历对象自身的和继承的可枚举的属性。 Object.keys：返回对象自身的所有可枚举的属性的键名。 JSON.stringify：只串行化对象自身的可枚举的属性。 Object.assign： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。 这四个操作之中，前三个是 ES5 就有的，最后一个Object.assign是 ES6 新增的。其中，只有for/in会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（enumerable）这个概念的最初目的，就是让某些属性可以规避掉for/in操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的toString方法，以及数组的length属性，就通过“可枚举性”，从而避免被for...in遍历到。\n\n\n# 5. 属性的遍历\n\n>  * for/in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n>  * Object.keys(obj)返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名\n>  * Object.getOwnPropertyNames(obj)返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。\n>  * Object.getOwnPropertySymbols(obj)返回一个数组，包含对象自身的所有 Symbol 属性的键名。\n>  * Reflect.ownKeys(obj)返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或> 字符串，也不管是否可枚举。\n> \n> TIP\n> \n> 首先遍历所有数值键，按照数值升序排列。 其次遍历所有字符串键，按照加入时间升序排列。 最后遍历所有 Symbol 键，按照加入时间升序排列。\n\n\n# 6. super关键字\n\n指向当前对象的原型对象,只能用在对象方法之中。\n\nonst proto = {\n  foo: 'hello'\n};\n\nconst obj = {\n  foo: 'world',\n  find() {\n    return super.foo;\n  }\n};\n\nObject.setPrototypeOf(obj, proto);\nobj.find() // \"hello\"\n\n\nJavaScript引擎内部，super.foo等同于Object.getPrototypeOf(this).foo（属性）或Object.getPrototypeOf(this).foo.call(this)（方法）。\n\nconst proto = {\n\n\nconst obj = {\n  foo: super.foo // 报错 super用在了属性里\n}\n\nconst obj = {\n  foo: () => super.foo // 报错 super用在了函数里\n}\n\nconst obj = {\n  foo: function () {\n    return super.foo // 报错 super用在了函数里\n  }\n}\n\n\n\n# 7. 对象的扩展运算符 详见数组的扩展\n\n\n# 8. ?.链判断运算符\n\n> *ES2020新增：?.链判断运算符 如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n> \n> // 错误的写法\n> const  firstName = message.body.user.firstName;\n> \n> // 正确的写法\n> const firstName = (message\n>   && message.body\n>   && message.body.user\n>   && message.body.user.firstName) || 'default';\n>  // 使用链判断运算符写法\n>  const firstName = message?.body?.user?.firstName || 'default';\n\n\n# 9. ??Null判断运算符\n\n> *ES2020新增：??Null判断运算符\n> \n> // 如果firstName的值是false或0，default会生效\n>  const firstName = message?.body?.user?.firstName || 'default';  \n> // firstName的值是null或undefined，default才会生效\n> const firstName = message?.body?.user?.firstName ?? 'default';  \n\n\n# 10. Object.is\n\n> 判断是否同值相等\n> \n> Object.is('foo', 'foo') // true\n> Object.is({}, {}) // false\n> Object.is(+0, -0) // false\n> Object.is(NaN, NaN) // true\n\n\n# 11. Object.assign\n\n> 将源对象的所有可枚举属性属性合并。\n> \n> Object.assign(source1,source2,source3);\n> \n> \n> WARNING\n> \n> 如果属性同名则后面的覆盖前面的,因此嵌套对象会执行覆盖而不是插入，因此不能处理嵌套对象。 该方法为浅拷贝。\n\n\n# 12. Object.getOwnPropertyDescriptors\n\n> ES5：getOwnPropertyDescriptor返回某个对象属性的描述对象。\n> *ES2017：getOwnPropertyDescriptors返回指定对象所有自身属性（非继承属性）的描述对象。\n> 该方法的引入目的，主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。Object。assign方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。\n\n\n# 13. __proto__属性和Object.setPrototypeOf/Object.getPrototypeOf方法\n\n> __proto__属性：用来读取或设置当前对象的原型对象。出于兼容性考虑建议使用一下方法操作原型对象。\n> Object.setPrototypeOf方法用于设置一个对象的原型对象，返回参数对象本身。\n> Object.setPrototypeOf方法用于读取一个对象的原型对象。\n\n\n# 14. Object.keys/Object.values/Object.entries/Object.fromEntries\n\n> Object.keys返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\n> *ES2017：Object.values返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。\n> Object.entries返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。\n> \n> var obj = { foo: 'bar', baz: 42 };\n> Object.keys(obj) // [\"foo\", \"baz\"]\n> Object.values(obj) // [\"bar\", 42]  \n> Object.entries(obj) // [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n> \n> \n> Object.fromEntries是Object.entries的逆操作，用于将一个键值对数组转为对象。\n> \n> Object.fromEntries([\n>   ['foo', 'bar'],\n>   ['baz', 42]\n> ])\n> // { foo: \"bar\", baz: 42 }\n\n\n# 3.16.9 Symbol\n\nES5的对象属性名都是字符串，这容易造成属性名的冲突。\nES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\nSymbol值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的Symbol类型。凡是属性名属于Symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n\n 1. 如果不加参数，它们在控制台的输出都是Symbol()\n 2. Symbol函数的参数只是表示对当前Symbol值的描述，因此相同参数的Symbol函数的返回值是不相等的。\n\n// 没有参数的情况\nlet s1 = Symbol(); // s1 = Symbol()\nlet s2 = Symbol(); // s2 = Symbol()\n\ns1 === s2 // false\n\n// 有参数的情况\nlet s1 = Symbol('foo'); // s1 = Symbol(foo)\nlet s2 = Symbol('foo'); //  s2 = Symbol(foo)\n\ns1 === s2 // false\n\n\n 3. Symbol值不能与其他类型的值进行运算,但是，Symbol值可以显式转为字符串也可以转为布尔值，但是不能转为数值\n\nlet sym = Symbol('My symbol');\n\nString(sym) // 'Symbol(My symbol)'\nsym.toString() // 'Symbol(My symbol)'\n\n\n\n# 3.16.10 Set与Map\n\n\n# Set\n\nES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\n\nset方法:\n\n> add:添加某个值，返回Set对象本身\n> clear:删除所有的键/值对，没有返回值\n> delete:删除某个键，返回true。如果删除失败，返回false\n> forEach:对每个元素执行指定操作\n> has:返回一个布尔值，表示某个键是否在当前 Set 对象之中\n\n 1. 用来数组，字符串去重\n\nlet array = [1, 2, 3, 4, 5, 5, 5, 5]\n[...new Set(array)]\nlet string = \"1234555555\"\n[...new Set(string)].join('')\n\n\n 2. 用来数组，字符串并集\n\nvar a = new Set([1, 2, 3]);\nvar b = new Set([4, 3, 2]);\nvar union = new Set([...a, ...b]); // {1, 2, 3, 4}\n\n\n 3. 用来数组，字符串交集\n\nvar a = new Set([1, 2, 3]);\nvar b = new Set([4, 3, 2]);\nvar intersect = new Set([...a].filter(x => b.has(x))); // {2, 3}\n\n\n 4. 用来数组，字符串差集\n\nvar a = new Set([1, 2, 3]);\nvar b = new Set([4, 3, 2]);\nvar difference = new Set([...a].filter(x => !b.has(x))); // {1}\n\n\n\n# Map\n\nObject 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应\n\n 1. size返回总成员数\n 2. has判断是否有该成员，成功返回true\n 3. get返回该成员的值，没有对应成员，返回undefined。\n 4. delete删除该成员，成功返回true\n 5. clear清空所有成员\n\nconst map = new Map([\n  ['name', '张三'],\n  ['title', 'Author']\n]);\n\nmap.size // 2 \nmap.has('name') // true\nmap.get('name') // \"张三\"\nmap.has('title') // true\nmap.get('title') // \"Author\"\n\n\n\n# 3.16.11 proxy\n\nProxy可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。 Proxy接受两个参数。第一个参数是所要代理的目标对象，第二个参数是一个配置对象用于拦截对应的操作。 第二个参数支持一下拦截操作：\n\n 1. get拦截对象属性的读取。\n 2. set拦截对象属性的设置。\n 3. has判断对象是否具有某个属性\n 4. construct拦截new命令\n 5. deleteProperty拦截delete操作\n 6. definePropertyObject.defineProperty()操作\n\n\n# 3.16.12 Reflect\n\n将Object对象的一些明显属于语言内部的方法，放到Reflect对象上。\n\n\n# 3.16.13 Promise\n\nPromise详见3.14.2\n\n\n# 3.16.14 Iterator和for...of循环\n\nJavaScript原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。为了统一接口机制，来处理不同的数据结构，因此提出了遍历器（Iterator）为各种不同的数据结构提供统一的访问机制。以及新的遍历命令for...of\n\n\n# 3.16.15 Iterator\n\n * Iterator 的遍历过程:\n\n>  1. 创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。\n>  2. 第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n>  3. 第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。\n>  4. 不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n * next方法返回两个对象，当前指向的成员值value和该成员是否被遍历过done\n * 原生具备 Iterator 接口的数据结构如下。\n\n> Array\n> Map\n> Set String\n> TypedArray\n> 函数的 arguments 对象\n> NodeList 对象\n\n\n# 3.16.16 for...of\n\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n\n\n# 3.16.17 Generator\n\nGenerator函数特征\n\n 1. function关键字与函数名之间有一个星号。\n 2. 函数体内部使用yield表达式，定义不同的内部状态，遇到yield会暂停执行。\n 3. next恢复暂停，向下执行。返回value表达式的值，done是否完成遍历。\n\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n\nhw.next()// { value: 'hello', done: false }\nhw.next() // { value: 'world', done: false }\nhw.next() // { value: 'ending', done: true }\nhw.next() // { value: undefined, done: true }\n\n\n\n * next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。\n\nfunction* f() {\n  for(var i = 0; true; i++) {\n    var reset = yield i;\n    if(reset) { i = -1; }\n  }\n}\n\nvar g = f();\n\ng.next() // { value: 0, done: false }\ng.next() // { value: 1, done: false }\ng.next(true) // { value: 0, done: false }\n\n\n如果next方法没有参数，每次运行到yield表达式，变量reset的值总是undefined。当next方法带一个参数true时，变量reset就被重置为这个参数（即true），因此i会等于-1，下一轮循环就会从-1开始递增。\n\n * throw在函数体外抛出错误，然后在Generator函数体内捕获\n\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  i.throw('a');\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 内部捕获 a\n// 外部捕获 b\n\n\n * return返回给定的值，并且终结遍历Generator函数。\n\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n\n\n\n# 3.16.18 async\n\n*ES2017新增async，它就是Generator函数的语法糖。\n\n * 相对于Generator的改进：\n\n 1. 内置执行器：Generator函数的执行必须靠执行器，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。\n 2. 更好的语义：async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。\n 3. 更广的适用性：yield命令后面只能是Thunk函数或Promise对象，而async函数的await命令后面，可以是Promise对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即resolved的Promise对象）。\n 4. 返回值是Promise：async函数的返回值是Promise对象，可以用then方法指定下一步的操作。\n\n详见3.14.3\n\n\n# 3.16.19 Class\n\n为了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。 ES写法：\n\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.total = function () {\n  return this.x + this.y;\n};\nPoint.prototype.description = '求和';\n\nvar p = new Point(1,2);\np.Description // '求和'\np.total() // 3 \n\n\nES6 class写法：\n\nclass Point {\n  // 构造函数\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  // prototype方法\n  total() {\n    return this.x+this.y;\n  }\n}\n Object.assign(Point.prototype, {\n\tDescription : '求和',\n});\nvar p = new Point(1,2);\np.Description // '求和'\np.total() // 3 \n\n\nTIP\n\n 1. 类名不能重复\n 2. 类定义不会被提升，需要在访问前定义\n\nprototype详见3.15.3\n\n\n# 3.16.20 ES6 Module\n\nCommonJS、AMD和ES6 Module规范的区别：\n\n 1. CommonJS用于服务器，AMD用于浏览器。ES6 Module则是通用解决方案。\n 2. ES6 Module是静态化思维，在编译时就能确认依赖关系。前两者是在运行时加载。\n 3. ES6 Module模块输出的是实时的动态数据是值的引用，而CommonJS输出的是缓存的值，是一个值的拷贝。\n 4. CommonJS是同步加载模式，AMD和ES6 Module是异步加载。\n 5. CommonJS加载的是一个对象该对象只有在脚本运行完才会生成。而ES6 Module模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\n\nCommonJS详见7.1.6\n\nES6 Module主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。\n\n\n# export\n\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错。\n\nexport命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n\n * export的写法\n\n// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n\n// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三 通过as关键字设置别名\nvar n = 1;\nexport {n as m}; \n\n\n * 输出function和class的写法\n\n// 报错\nfunction f() {}\nexport f;\n\n// 正确\nexport function f() {};\n\n// 正确\nfunction f() {}\nexport {f};\n\n\n批量输出\n\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n\n// 另一种写法\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n\n\n\n# import\n\n使用export命令定义了模块的对外接口以后,就可以通过import命令加载这个模块。import命令是一个只读接口，虽然输出对象时可以修改但不建议。\n\nimport { firstName, lastName, year } from './profile.js';\n\n// 通过as关键字设置别名\nimport { lastName as surname } from './profile.js';\n\n// 整体加载\nimport *as profile from './profile.js';\n\n// 整体加载的使用\nprofile.firstName\nprofile.lastName\nprofile.year\n\n\n\n动态引入模块：import和export命令只能在模块的顶层，不能在代码块之中调用\n\n\n// 错误写法\nif (x === 1) {\n  import 'module1';\n} else {\n  import 'module2';\n}\n\n// 正确写法\nif (x === 1) {\n import('module1.js').then((MyModual)=>{\n    new MyModual();\n  })\n} else {\n  import('module2.css').then((module2)=>{\n    module2;  // 引入css文件的写法\n  })\n}\n\n\n// CommonJS写法 \n// 该方法不能引入css文件的写法。\nif (x === 1) {\n  require('module1.js');\n} else {\n  require('module2.js');\n}\n\n\n\n\n# export default\n\n使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。\n\n * 输出匿名函数\n\nexport default function () {\n  console.log('foo');\n}\n// 使用默认输出时，变量不需要大括号\nimport customName from './export-default';\ncustomName(); // 'foo'\n\n\n * 输出非匿名函数\n\nexport default function foo() {\n  console.log('foo');\n}\n// 另一种写法\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo;\n// 等同于  \nexport {foo as default};\n\n\nexport default命令的本质是将后面的值，赋给default变量，所以它后面不能跟变量声明语句。\n\n// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n\n// 正确\nexport default 42;\n\n// 报错\nexport 42;\n\n\n\n * *ES2020提案import支持动态加载模块,返回一个promise 。\n\nimport(specifier) //specifier 表示变量\n\n\n按需加载:只有用户点击了按钮，才会加载这个模块。\n\nbutton.addEventListener('click', event => {\n  import('./dialogBox.js')\n  .then(dialogBox => {\n    dialogBox.open();\n  })\n  .catch(error => {\n  })\n});\n\n\n\n# export与import的复合写法\n\n先输入后输出同一个模块。\n需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。\n\nexport { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n\n\n\n# 模块的继承\n\n输出circle模块的所有属性和方法,但会忽略circle模块里的默认方法，然后有输出e和默认方法。\n\nexport * from 'circle';\nexport var e = 2.71828182846;\nexport default function(x) {\n  return Math.exp(x);\n}\n\n\n\n# 跨模块常量\n\nconst声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。\n\n// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n\n\n\n# Module的加载实现\n\n * 传统方法 defer是“渲染完再执行”，async是“下载完就执行”。\n\n<script src=\"path/to/myModule.js\" defer><\/script>\n<script src=\"path/to/myModule.js\" async><\/script>\n\n\n * ES6加载 要加入type=\"module\"属性。属于异步加载，等同于defer。\n\n<script type=\"module\" src=\"./foo.js\"><\/script>\n// 另一种写法\n<script type=\"module\">\n  import foo from \"./foo.js\";\n<\/script>\n\n\n\n# 3.16.21 风格规范\n\n 1. let取代var,常量使用const代替。\n 2. 字符串使用单引号，动态字符串使用反引号。\n 3. 优先使用解构赋值\n 4. 单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。\n 5. 对象尽量静态化，一旦定义不要随便增加新属性，如果增加使用Object.assign方法\n\n> const a = {};\n> Object.assign(a, { x: 3 });\n\n 6.  对象的key与vaule同名时候，尽量简写。\n 7.  使用...扩展运算符拷贝数组。\n 8.  立即执行的函数可以写成箭头函数的形式。\n 9.  import取代require\n 10. export取代module.exports\n 11. 如果模块只有一个输出值，就使用export default\n 12. 使用ESLint检查工具",normalizedContent:"# 3.16.1 let和const命令\n\nlet声明的变量不存在预解析，不存在变量提升，同一作用域不允许重复声明，只能在块内访问。\nconst用于声明常量，值不可以改变，不存在预解析，必须初始化（直接赋值），同一作用域不允许重复声明，只能在块内访问。\n\ntip\n\n 1. 块级作用域：if/else/for，由{}包括起来的部分。\n 2. const指向的地址不可以改变，但是指向的数据结构是可以改变的。可以使用object.freeze冻结指向的对象。\n 3. let/const声明的变量不属于顶层对象的属性。\n 4. *es2020新增globalthis可以在任何环境下获取顶层对象。\n\n块级作用域的优点：\n\nfor (var i = 0; i < 5; i++) {\n  settimeout(() => {\n    console.log(i)\n  }, 1000)\n}\n// 5 5 5 5 5\n\n\nfor (let i = 0; i < 5; i++) {\n  settimeout(() => {\n    console.log(i)\n  }, 1000)\n}\n// 0 1 2 3 4\n\n// 通过闭包实现\nfor (var i = 0; i < 5; i++) {\n  (function (index) {\n    settimeout(() => {\n      console.log(index)\n    }, 1000)\n  })(i)\n}\n// 0 1 2 3 4\n\n\n\n# 3.16.2 变量的解构赋值\n\nes6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构\n\n\n# 1. 数据的解构赋值\n\n=号右侧必须是数组，根据数据顺序一一对应，如果解构不成功，变量的值就等于undefined。\n\n>     let [a,b,c] = [1,2,3] // a = 1 b = 2 c = 3\n>     let [foo, [[bar], baz]] = [1, [[2], 3]] // foo = 1 bar = 2 baz = 3\n>     let [head, ...tail] = [1, 2, 3, 4];  // head = 1  tail = [2, 3, 4]\n>     let [x, y] = [1, 2, 3];let [x, y] = [1, 2, 3]; // x =1 y = 2\n> \n> \n>  * 默认值\n> \n>      let [x, y = 'b'] = ['a']; // 给y设置默认值 x='a', y='b'\n\n\n# 2. 对象的解构赋值\n\n=号右侧必须是对象，根据key一一对应，如果解构不成功，变量的值就等于undefined。\n\n>    let { bar, foo } = { foo: 'aaa', bar: 'bbb' }; // bar = aaa foo = bbb\n>    let { baz } = { foo: 'aaa', bar: 'bbb' };  // baz = undefined\n>    let { foo: baz } = { foo: 'aaa', bar: 'bbb' }; \n> \n> \n>  * 默认值\n> \n>      let {x, y = 5} = [x:1]]; // 给y设置默认值 x=1, y=5\n> \n> \n>  * 别名\n> \n> // 给baz设置别名foo baz = aaa  \n> // foo = error: foo is not defined 真正被赋值的是变量baz，而不是别名foo。\n> let { foo: baz } = { foo: 'aaa', bar: 'bbb' }; \n> \n> \n>  * 嵌套结构的对象\n> \n> let obj = {p: ['hello',{ y: 'world' }]};\n> let { p: [x, { y }] } = obj; // x = \"hello\" y =  \"world\"  \n> // 通过别名s接收\n> let { p:s, p: [x, { y }] } = obj; \n> // x = \"hello\" y = \"world\"  \n> // 第一个p是表示赋值给p, 第二个p 表示obj里面的p对象\n> // p = [\"hello\", {y: \"world\"}] s = [\"hello\", {y: \"world\"}]\n> \n> \n> let obj = {p:{x:'hello',y: 'world'}};\n> let {p,p:{x,y}} = obj   // p = {x: \"hello\", y: \"world\"}\n> // 通过别名s接收\n> let {p:s,p:{x,y}} = obj   // p = {x: \"hello\", y: \"world\"} s = {x: \"hello\", y: \"world\"}\n> \n> \n> warning\n> \n> 如果要将一个已经声明的变量用于解构赋值,需要将整个解构赋值语句，放在一个圆括号里面。\n> \n> \n> let x;\n> // 错误的写法 \n> {x} = {x: 1};\n> // 正确的写法\n> ({x} = {x: 1});\n\n\n# 3. 字符串的解构赋值\n\n    let [a, b, c, d, e] = 'hello' // a = \"h\" b = \"e\" c = \"l\" d = \"l\" e = \"o\"\n    let {length : len} = 'hello'; // len = 5\n\n\n\n# 4. 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n    let {tostring: s} = 123;\n    s === number.prototype.tostring // true\n\n\ntip\n\n数值和布尔值的包装对象都有tostring属性，因此变量都能取到值。 由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\n\n# 5. 函数参数的解构赋值\n\n> function add([x, y]){\n>   return x + y;\n> }\n> \n> add([1, 2]); // 3\n> \n> \n> [[1, 2], [3, 4]].map(([a, b]) => a + b);// [ 3, 7 ]\n> \n> \n>  * 默认值\n> \n>  1. 写法一：函数参数的默认值是空对象，但是设置了对象解构赋值的默认值\n> \n> function move({x = 0, y = 0} = {}) {\n>   return [x, y];\n> }\n> move({x: 3, y: 8}); // [3, 8]\n> move({x: 3}); // [3, 0]\n> move({}); // [0, 0]\n> move(); // [0, 0]\n> \n> \n>  2. 写法二：函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值\n> \n> function move({x, y} = { x: 0, y: 0 }) {\n>   return [x, y];\n> }\n> \n> move({x: 3, y: 8}); // [3, 8]\n> move({x: 3}); // [3, undefined]\n> move({}); // [undefined, undefined]\n> move(); // [0, 0]\n> \n> \n>  * 参数默认值的位置：通常情况下，定义了默认值的参数，应该是函数的尾参数，否则不能省略默认值前面的参数。\n\n\n# 3.16.3 函数扩展\n\n\n# 1. length属性\n\n只会返回没有设置默认值的参数的长度。\n\n\n# 2. 作用域\n\n如果设置了默认值参数，则赋值语句本事会形成一个单独的作用域。如果作用域内未定义则查找全局参数，否则提示未定义。\n\n\n# 3. rest参数\n\n用于获取函数的多余参数\n\nfunction fn(...rest) {\n  return rest;  // [1,2,3,4,5]\n}\nfn(1,2,3,4,5)\n\n\n\n# 4. 严格模式\n\nes6规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能设定为严格模式\n\n'use strict'; // 设置为严格模式\nfunction dosomething(a, b = a) { // 方法内部正常模式，不能在方法内设置use strict\n}\n\n\ntip\n\n 1. 消除javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n 2. 消除代码运行的一些不安全之处，保证代码运行的安全。\n 3. 提高编译器效率，增加运行速度。\n 4. 为未来新版本的javascript做好铺垫。\n\n\n# 5. name属性\n\nfunction fn(){}\nvar f = function fn(){}\nfn.name  // fn\nf.name // 匿名函数赋值给变量 es5 => \"\"  es6 => fn \n\n\n * 箭头函数:使用=>定义函数\n\nvar f = v => v\n//等同于\nvar f = function (v) {\n return v;\n};\n\n\ntip\n\n 1. 如果不需要参数或需要多个参数，就使用一个圆括号代表参数部分。\n 2. 如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。\n 3. 箭头函数内的this指向定义时所在作用域链上一层的this\n 4. 箭头函数不可以当做构造函数，不可以使用new命令\n 5. 箭头函数不可以使用arguments对象\n 6. 箭头函数不可以使用yield命令，因此箭头函数不能用作 generator 函数。\n 7. 给对象的属性定义方法时，不建议使用箭头函数，此时的箭头函数this指向全局。\n 8. \n\n * 尾调用优化:删除调用尾调用方法的方法的调用帧，只要严格模式模式下有效。 尾调用：指某个函数的最后一步是调用另一个函数。return后调用另一个方法\n * 尾递归优化:只保留一个调用记录，只要严格模式模式下有效。 尾递归：指某个函数的最后一步是调用函数自己。return后调用自己\n\n箭头函数的作用域详见3.5.5\n\n\n# 3.16.4 字符串扩展\n\n\n# 1. for...of方法遍历字符串\n\n> for (let codepoint of 'foo') {console.log(codepoint)}  // \"f\" \"o\" \"o\"\n\n\n# 2. 模板字符串\n\n> 通过反引号包裹字符串，${}可以放入任意的javascript表达式，可以进行运算，以及引用对象属性还可以调用函数。\n> \n> `hello ${name}, how are you ${time}?`\n> \n> \n> tip\n> \n>  * 如果模板内字符串需要输出反引号，则序号反斜杠转译`\n>  * 模板字符串内的所有空格和缩进都会保留，如果不想保留可以使用trim去除\n\n\n# 3. 模板标签\n\n> 把模板设置成一个方法\n> \n> hello([`hello ${name}, how are you ${time}?`]) \n> // 等同于\n> hello`hello ${name}, how are you ${time}?` \n\n\n# 4. includes/startswith/endswith\n\n> let s = 'hello world!';\n> s.startswith('hello') // true 指定字符串是否在首位\n> s.endswith('!') // true  指定字符串是否在尾部\n> s.includes('o') // true  是否含有指定字符串\n\n\n# 5. repeat\n\n> 将原字符串重复n次,如果是小数，向下取整，不可以是负数。\n> \n> 'x'.repeat(3) // \"xxx\"\n> 'hello'.repeat(2) // \"hellohello\"\n> 'na'.repeat(0) // \"\"\n\n\n# 6. padstart/padend\n\n> *es2017新增：padstart用于头部补全，padend()`用于尾部补全。第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。\n> \n> 'x'.padstart(5, 'ab') // 'ababx' 头部用ab补全，补全后为5位\n> 'x'.padend(5, 'ab') // 'xabab' 尾部用ab补全，补全后为5位\n> \n> \n> tip\n> \n>  * 如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。\n>  * 如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。\n>  * 如果省略第二个字符串，则默认使用空格补全。\n\n\n# 7. trimstart/trimend\n\n> *es2019新增：trimstart消除字符串头部的空格，trimend消除尾部的空格,不改变原字符串\n\n\n# 8. matchall\n\n> 方法返回一个正则表达式在当前字符串的所有匹配\n\n\n# 9. replaceall\n\n> *es2021新增：一次性替换所有匹配，正则必须配置全局匹配g。\n> \n>  * $&匹配的字符串\n>  * $`匹配结果前面的字符串\n>  * $' 匹配结果后面的字符串+\n>  * $n匹配的第n组数据，n从1开始。这个参数生效的前提是，第一个参数必须是正则表达式。\n>  * $$表示美元符号\n> \n> // $& 表示匹配的字符串，即`b`本身\n> 'abbc'.replaceall('b', '$&') // abbc\n> // $` 表示匹配结果之前的字符串\n> // 对于第一个`b`，$` 指代`a`\n> // 对于第二个`b`，$` 指代`ab`\n> 'abbc'.replaceall('b', '$`') // 'aaabc'\n> // $' 表示匹配结果之后的字符串\n> // 对于第一个`b`，$' 指代`bc`\n> // 对于第二个`b`，$' 指代`c`\n> 'abbc'.replaceall('b', `$'`) // 'abccc'\n> // $1 表示正则表达式的第一个组匹配，指代`ab`\n> // $2 表示正则表达式的第二个组匹配，指代`bc`\n> 'abbc'.replaceall(/(ab)(bc)/g, '$2$1')// 'bcab'\n> // $$ 指代 $\n> 'abc'.replaceall('b', '$$')// 'a$c'\n\n\n# 3.16.5 数值扩展\n\n\n# 1. isfinite/isnan\n\n> number.isfinite()检测数值是否有限，number.isnan检测数值是否为nan\n\n\n# 2. parseint/parsefloat\n\n\n# 3. isinteger\n\n> 判断是否为整数\n\n\n# 4. epsilon\n\n> 生成一个极小的常量，常用语设置误差范围\n\n\n# 3.16.6 math扩展\n\n\n# 1. math去除小数部分\n\n\n# 2. sign判断一个数的底数\n\n\n# 3. cbrt计算一个数的立方根\n\n\n# 4. cbrt计算所有参数的平方和的平方根\n\n\n# 3.16.7 数组扩展\n\n\n# 1. 扩展运算符...\n\n将一个数组转为用逗号分隔的参数序列\n\n>  * 数组合并\n> \n> arr1.push(...arr2);// push方法的参数不可以是数组，所以通过扩展运算符拆分在参数序列插入arr1数组\n> \n> \n>  * 深拷贝\n> \n> arr1 = (...arr2);\n> \n> \n>  * 配合解构赋值\n> \n> const [first, ...rest] = [1, 2, 3, 4, 5]; //  first = 1    rest = [2, 3, 4, 5] \n> \n> \n>  * 字符串转数组\n> \n> [...'hello']// 字符串转数组 [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n> \n> \n>  * 遍历器（iterator）转数组\n> \n> let nodelist = document.queryselectorall('div');\n> let array = [...nodelist];\n> \n> \n>  * map 和 set 结构，generator 函数\n\n\n# 2. from\n\n> 将类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 es6 新增的数据结构 set 和 map）。\n> \n> const list = document.queryselectorall(\"li\");\n> array.from(list).map((item) => item);\n\n\n# 3. of\n\n> 将一组值，转换为数组\n> \n> array.of(3, 11, 8) // [3,11,8]\n\n\n# 4. copywithin\n\n> 在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。\n> \n> [1, 2, 3, 4, 5].copywithin(0, 3) // [4, 5, 3, 4, 5]\n> \n> \n> 第一个参数：从该位置开始替换数据。如果为负值，表示倒数。 第二个参数：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。 第三个参数：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。\n\n\n# 5. find/findindex\n\n> find/findindex找出第一个符合条件的数组成员。find返回找到的第一个元素，findindex返回找到的第一个元素的索引\n\n  [1,2,3,4,5,6,7,8,9,10,11].find(item => item>10) // 找到大于10的数\n\n\n\n# 6. fill\n\n> 使用给定值填充数组,第一个参数是要填充的值，第二个参数是起始位置，第三个参数是结束位置\n> \n> ['a', 'b', 'c'].fill(7)  // [7, 7, 7]\n> new array(3).fill(7)  // [7, 7, 7]\n> ['a', 'b', 'c'].fill(7, 1, 2)  // ['a', 7, 'c']\n\n\n# 7. entries/keys/values\n\n> 用于遍历数组。它们都返回一个遍历器对象（iterator），可以用for...of循环进行遍历，唯一的区别是keys是对键名的遍历、values是对键值的遍历，entries是对键值对的遍历。\n> \n> for (let index of ['a', 'b'].keys()) {\n>  console.log(index);// 0  1\n> }\n> \n> for (let elem of ['a', 'b'].values()) {\n>  console.log(elem);// 'a'  'b'\n> }\n> \n> for (let [index, elem] of ['a', 'b'].entries()) {\n>  console.log(index, elem);// 0 \"a\"  1 \"b\"\n> }\n\n\n# 8. includes\n\n> 表示某个数组是否包含给定的值，与字符串的indexof方法类似.第一个参数是给定的值，第二个参数是起始位置，负数倒序。\n\n[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n\n\n\n# 9. flat/flatmap\n\n> flat将嵌套的数组“拉平”,参数表示拉平的层数，默认为1，infinity表示全部拉平。\n> flatmap对原数组的每个成员执行一个函数.并返回一个新的拉平数组，但是只能“拉平”一层。\n> \n> [1, 2, [3, 4]].flat() // [1, 2, 3, 4]\n> [1, 2, 3, 4].flatmap(x => [[x * 2]])  // [[2], [4], [6], [8]]\n\n\n# 3.16.8 对象扩展\n\n\n# 1. 属性的简洁表示法\n\n> const baz = {foo};// 等同于   baz = {foo: foo};\n\n\n# 2. 属性名表达式\n\n> obj['a' + 'bc'] = 123;  // obj.abc = 123\n\n\n# 3. name属性\n\n> 对象也是方法，name属性返回方法名。如果对象的方法使用了取值函数（getter）和存值函数（setter），在name前加get和set\n\n\n# 4. 可枚举性\n\n> 对象的每个属性都有一个描述对象（descriptor），用来控制该属性的行为。getownpropertydescriptor方法可以获取该属性的描述对象。\n> \n> let obj = { foo: 123 };\n> object.getownpropertydescriptor(obj, 'foo')\n> //  {\n> //    value: 123,  属性值\n> //    writable: true, \n> //    enumerable: true, 是否可枚举\n> //    configurable: true\n> //  }\n> \n> \n> 描述对象的enumerable属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性。 目前，有四个操作会忽略enumerable为false的属性。\n> \n> > for/in：只遍历对象自身的和继承的可枚举的属性。 object.keys：返回对象自身的所有可枚举的属性的键名。 json.stringify：只串行化对象自身的可枚举的属性。 object.assign： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。 这四个操作之中，前三个是 es5 就有的，最后一个object.assign是 es6 新增的。其中，只有for/in会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（enumerable）这个概念的最初目的，就是让某些属性可以规避掉for/in操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的tostring方法，以及数组的length属性，就通过“可枚举性”，从而避免被for...in遍历到。\n\n\n# 5. 属性的遍历\n\n>  * for/in循环遍历对象自身的和继承的可枚举属性（不含 symbol 属性）。\n>  * object.keys(obj)返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 symbol 属性）的键名\n>  * object.getownpropertynames(obj)返回一个数组，包含对象自身的所有属性（不含 symbol 属性，但是包括不可枚举属性）的键名。\n>  * object.getownpropertysymbols(obj)返回一个数组，包含对象自身的所有 symbol 属性的键名。\n>  * reflect.ownkeys(obj)返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 symbol 或> 字符串，也不管是否可枚举。\n> \n> tip\n> \n> 首先遍历所有数值键，按照数值升序排列。 其次遍历所有字符串键，按照加入时间升序排列。 最后遍历所有 symbol 键，按照加入时间升序排列。\n\n\n# 6. super关键字\n\n指向当前对象的原型对象,只能用在对象方法之中。\n\nonst proto = {\n  foo: 'hello'\n};\n\nconst obj = {\n  foo: 'world',\n  find() {\n    return super.foo;\n  }\n};\n\nobject.setprototypeof(obj, proto);\nobj.find() // \"hello\"\n\n\njavascript引擎内部，super.foo等同于object.getprototypeof(this).foo（属性）或object.getprototypeof(this).foo.call(this)（方法）。\n\nconst proto = {\n\n\nconst obj = {\n  foo: super.foo // 报错 super用在了属性里\n}\n\nconst obj = {\n  foo: () => super.foo // 报错 super用在了函数里\n}\n\nconst obj = {\n  foo: function () {\n    return super.foo // 报错 super用在了函数里\n  }\n}\n\n\n\n# 7. 对象的扩展运算符 详见数组的扩展\n\n\n# 8. ?.链判断运算符\n\n> *es2020新增：?.链判断运算符 如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取message.body.user.firstname，安全的写法是写成下面这样。\n> \n> // 错误的写法\n> const  firstname = message.body.user.firstname;\n> \n> // 正确的写法\n> const firstname = (message\n>   && message.body\n>   && message.body.user\n>   && message.body.user.firstname) || 'default';\n>  // 使用链判断运算符写法\n>  const firstname = message?.body?.user?.firstname || 'default';\n\n\n# 9. ??null判断运算符\n\n> *es2020新增：??null判断运算符\n> \n> // 如果firstname的值是false或0，default会生效\n>  const firstname = message?.body?.user?.firstname || 'default';  \n> // firstname的值是null或undefined，default才会生效\n> const firstname = message?.body?.user?.firstname ?? 'default';  \n\n\n# 10. object.is\n\n> 判断是否同值相等\n> \n> object.is('foo', 'foo') // true\n> object.is({}, {}) // false\n> object.is(+0, -0) // false\n> object.is(nan, nan) // true\n\n\n# 11. object.assign\n\n> 将源对象的所有可枚举属性属性合并。\n> \n> object.assign(source1,source2,source3);\n> \n> \n> warning\n> \n> 如果属性同名则后面的覆盖前面的,因此嵌套对象会执行覆盖而不是插入，因此不能处理嵌套对象。 该方法为浅拷贝。\n\n\n# 12. object.getownpropertydescriptors\n\n> es5：getownpropertydescriptor返回某个对象属性的描述对象。\n> *es2017：getownpropertydescriptors返回指定对象所有自身属性（非继承属性）的描述对象。\n> 该方法的引入目的，主要是为了解决object.assign()无法正确拷贝get属性和set属性的问题。object。assign方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。\n\n\n# 13. __proto__属性和object.setprototypeof/object.getprototypeof方法\n\n> __proto__属性：用来读取或设置当前对象的原型对象。出于兼容性考虑建议使用一下方法操作原型对象。\n> object.setprototypeof方法用于设置一个对象的原型对象，返回参数对象本身。\n> object.setprototypeof方法用于读取一个对象的原型对象。\n\n\n# 14. object.keys/object.values/object.entries/object.fromentries\n\n> object.keys返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\n> *es2017：object.values返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。\n> object.entries返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。\n> \n> var obj = { foo: 'bar', baz: 42 };\n> object.keys(obj) // [\"foo\", \"baz\"]\n> object.values(obj) // [\"bar\", 42]  \n> object.entries(obj) // [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n> \n> \n> object.fromentries是object.entries的逆操作，用于将一个键值对数组转为对象。\n> \n> object.fromentries([\n>   ['foo', 'bar'],\n>   ['baz', 42]\n> ])\n> // { foo: \"bar\", baz: 42 }\n\n\n# 3.16.9 symbol\n\nes5的对象属性名都是字符串，这容易造成属性名的冲突。\nes6引入了一种新的原始数据类型symbol，表示独一无二的值。它是javascript语言的第七种数据类型，前六种是：undefined、null、布尔值（boolean）、字符串（string）、数值（number）、对象（object）。\nsymbol值通过symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的symbol类型。凡是属性名属于symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n\n 1. 如果不加参数，它们在控制台的输出都是symbol()\n 2. symbol函数的参数只是表示对当前symbol值的描述，因此相同参数的symbol函数的返回值是不相等的。\n\n// 没有参数的情况\nlet s1 = symbol(); // s1 = symbol()\nlet s2 = symbol(); // s2 = symbol()\n\ns1 === s2 // false\n\n// 有参数的情况\nlet s1 = symbol('foo'); // s1 = symbol(foo)\nlet s2 = symbol('foo'); //  s2 = symbol(foo)\n\ns1 === s2 // false\n\n\n 3. symbol值不能与其他类型的值进行运算,但是，symbol值可以显式转为字符串也可以转为布尔值，但是不能转为数值\n\nlet sym = symbol('my symbol');\n\nstring(sym) // 'symbol(my symbol)'\nsym.tostring() // 'symbol(my symbol)'\n\n\n\n# 3.16.10 set与map\n\n\n# set\n\nes6 提供了新的数据结构 set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\n\nset方法:\n\n> add:添加某个值，返回set对象本身\n> clear:删除所有的键/值对，没有返回值\n> delete:删除某个键，返回true。如果删除失败，返回false\n> foreach:对每个元素执行指定操作\n> has:返回一个布尔值，表示某个键是否在当前 set 对象之中\n\n 1. 用来数组，字符串去重\n\nlet array = [1, 2, 3, 4, 5, 5, 5, 5]\n[...new set(array)]\nlet string = \"1234555555\"\n[...new set(string)].join('')\n\n\n 2. 用来数组，字符串并集\n\nvar a = new set([1, 2, 3]);\nvar b = new set([4, 3, 2]);\nvar union = new set([...a, ...b]); // {1, 2, 3, 4}\n\n\n 3. 用来数组，字符串交集\n\nvar a = new set([1, 2, 3]);\nvar b = new set([4, 3, 2]);\nvar intersect = new set([...a].filter(x => b.has(x))); // {2, 3}\n\n\n 4. 用来数组，字符串差集\n\nvar a = new set([1, 2, 3]);\nvar b = new set([4, 3, 2]);\nvar difference = new set([...a].filter(x => !b.has(x))); // {1}\n\n\n\n# map\n\nobject 结构提供了“字符串—值”的对应，map 结构提供了“值—值”的对应\n\n 1. size返回总成员数\n 2. has判断是否有该成员，成功返回true\n 3. get返回该成员的值，没有对应成员，返回undefined。\n 4. delete删除该成员，成功返回true\n 5. clear清空所有成员\n\nconst map = new map([\n  ['name', '张三'],\n  ['title', 'author']\n]);\n\nmap.size // 2 \nmap.has('name') // true\nmap.get('name') // \"张三\"\nmap.has('title') // true\nmap.get('title') // \"author\"\n\n\n\n# 3.16.11 proxy\n\nproxy可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。proxy这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。 proxy接受两个参数。第一个参数是所要代理的目标对象，第二个参数是一个配置对象用于拦截对应的操作。 第二个参数支持一下拦截操作：\n\n 1. get拦截对象属性的读取。\n 2. set拦截对象属性的设置。\n 3. has判断对象是否具有某个属性\n 4. construct拦截new命令\n 5. deleteproperty拦截delete操作\n 6. definepropertyobject.defineproperty()操作\n\n\n# 3.16.12 reflect\n\n将object对象的一些明显属于语言内部的方法，放到reflect对象上。\n\n\n# 3.16.13 promise\n\npromise详见3.14.2\n\n\n# 3.16.14 iterator和for...of循环\n\njavascript原有的表示“集合”的数据结构，主要是数组（array）和对象（object），es6 又添加了map和set。为了统一接口机制，来处理不同的数据结构，因此提出了遍历器（iterator）为各种不同的数据结构提供统一的访问机制。以及新的遍历命令for...of\n\n\n# 3.16.15 iterator\n\n * iterator 的遍历过程:\n\n>  1. 创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。\n>  2. 第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n>  3. 第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。\n>  4. 不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n * next方法返回两个对象，当前指向的成员值value和该成员是否被遍历过done\n * 原生具备 iterator 接口的数据结构如下。\n\n> array\n> map\n> set string\n> typedarray\n> 函数的 arguments 对象\n> nodelist 对象\n\n\n# 3.16.16 for...of\n\n一个数据结构只要部署了symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n\n\n# 3.16.17 generator\n\ngenerator函数特征\n\n 1. function关键字与函数名之间有一个星号。\n 2. 函数体内部使用yield表达式，定义不同的内部状态，遇到yield会暂停执行。\n 3. next恢复暂停，向下执行。返回value表达式的值，done是否完成遍历。\n\nfunction* helloworldgenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloworldgenerator();\n\nhw.next()// { value: 'hello', done: false }\nhw.next() // { value: 'world', done: false }\nhw.next() // { value: 'ending', done: true }\nhw.next() // { value: undefined, done: true }\n\n\n\n * next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。\n\nfunction* f() {\n  for(var i = 0; true; i++) {\n    var reset = yield i;\n    if(reset) { i = -1; }\n  }\n}\n\nvar g = f();\n\ng.next() // { value: 0, done: false }\ng.next() // { value: 1, done: false }\ng.next(true) // { value: 0, done: false }\n\n\n如果next方法没有参数，每次运行到yield表达式，变量reset的值总是undefined。当next方法带一个参数true时，变量reset就被重置为这个参数（即true），因此i会等于-1，下一轮循环就会从-1开始递增。\n\n * throw在函数体外抛出错误，然后在generator函数体内捕获\n\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  i.throw('a');\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 内部捕获 a\n// 外部捕获 b\n\n\n * return返回给定的值，并且终结遍历generator函数。\n\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n\n\n\n# 3.16.18 async\n\n*es2017新增async，它就是generator函数的语法糖。\n\n * 相对于generator的改进：\n\n 1. 内置执行器：generator函数的执行必须靠执行器，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。\n 2. 更好的语义：async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。\n 3. 更广的适用性：yield命令后面只能是thunk函数或promise对象，而async函数的await命令后面，可以是promise对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即resolved的promise对象）。\n 4. 返回值是promise：async函数的返回值是promise对象，可以用then方法指定下一步的操作。\n\n详见3.14.3\n\n\n# 3.16.19 class\n\n为了更接近传统语言的写法，引入了 class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。 es写法：\n\nfunction point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\npoint.prototype.total = function () {\n  return this.x + this.y;\n};\npoint.prototype.description = '求和';\n\nvar p = new point(1,2);\np.description // '求和'\np.total() // 3 \n\n\nes6 class写法：\n\nclass point {\n  // 构造函数\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  // prototype方法\n  total() {\n    return this.x+this.y;\n  }\n}\n object.assign(point.prototype, {\n\tdescription : '求和',\n});\nvar p = new point(1,2);\np.description // '求和'\np.total() // 3 \n\n\ntip\n\n 1. 类名不能重复\n 2. 类定义不会被提升，需要在访问前定义\n\nprototype详见3.15.3\n\n\n# 3.16.20 es6 module\n\ncommonjs、amd和es6 module规范的区别：\n\n 1. commonjs用于服务器，amd用于浏览器。es6 module则是通用解决方案。\n 2. es6 module是静态化思维，在编译时就能确认依赖关系。前两者是在运行时加载。\n 3. es6 module模块输出的是实时的动态数据是值的引用，而commonjs输出的是缓存的值，是一个值的拷贝。\n 4. commonjs是同步加载模式，amd和es6 module是异步加载。\n 5. commonjs加载的是一个对象该对象只有在脚本运行完才会生成。而es6 module模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\n\ncommonjs详见7.1.6\n\nes6 module主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。\n\n\n# export\n\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错。\n\nexport命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n\n * export的写法\n\n// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n\n// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三 通过as关键字设置别名\nvar n = 1;\nexport {n as m}; \n\n\n * 输出function和class的写法\n\n// 报错\nfunction f() {}\nexport f;\n\n// 正确\nexport function f() {};\n\n// 正确\nfunction f() {}\nexport {f};\n\n\n批量输出\n\nexport var firstname = 'michael';\nexport var lastname = 'jackson';\nexport var year = 1958;\n\n// 另一种写法\nvar firstname = 'michael';\nvar lastname = 'jackson';\nvar year = 1958;\n\nexport { firstname, lastname, year };\n\n\n\n# import\n\n使用export命令定义了模块的对外接口以后,就可以通过import命令加载这个模块。import命令是一个只读接口，虽然输出对象时可以修改但不建议。\n\nimport { firstname, lastname, year } from './profile.js';\n\n// 通过as关键字设置别名\nimport { lastname as surname } from './profile.js';\n\n// 整体加载\nimport *as profile from './profile.js';\n\n// 整体加载的使用\nprofile.firstname\nprofile.lastname\nprofile.year\n\n\n\n动态引入模块：import和export命令只能在模块的顶层，不能在代码块之中调用\n\n\n// 错误写法\nif (x === 1) {\n  import 'module1';\n} else {\n  import 'module2';\n}\n\n// 正确写法\nif (x === 1) {\n import('module1.js').then((mymodual)=>{\n    new mymodual();\n  })\n} else {\n  import('module2.css').then((module2)=>{\n    module2;  // 引入css文件的写法\n  })\n}\n\n\n// commonjs写法 \n// 该方法不能引入css文件的写法。\nif (x === 1) {\n  require('module1.js');\n} else {\n  require('module2.js');\n}\n\n\n\n\n# export default\n\n使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。\n\n * 输出匿名函数\n\nexport default function () {\n  console.log('foo');\n}\n// 使用默认输出时，变量不需要大括号\nimport customname from './export-default';\ncustomname(); // 'foo'\n\n\n * 输出非匿名函数\n\nexport default function foo() {\n  console.log('foo');\n}\n// 另一种写法\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo;\n// 等同于  \nexport {foo as default};\n\n\nexport default命令的本质是将后面的值，赋给default变量，所以它后面不能跟变量声明语句。\n\n// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n\n// 正确\nexport default 42;\n\n// 报错\nexport 42;\n\n\n\n * *es2020提案import支持动态加载模块,返回一个promise 。\n\nimport(specifier) //specifier 表示变量\n\n\n按需加载:只有用户点击了按钮，才会加载这个模块。\n\nbutton.addeventlistener('click', event => {\n  import('./dialogbox.js')\n  .then(dialogbox => {\n    dialogbox.open();\n  })\n  .catch(error => {\n  })\n});\n\n\n\n# export与import的复合写法\n\n先输入后输出同一个模块。\n需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。\n\nexport { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n\n\n\n# 模块的继承\n\n输出circle模块的所有属性和方法,但会忽略circle模块里的默认方法，然后有输出e和默认方法。\n\nexport * from 'circle';\nexport var e = 2.71828182846;\nexport default function(x) {\n  return math.exp(x);\n}\n\n\n\n# 跨模块常量\n\nconst声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。\n\n// constants.js 模块\nexport const a = 1;\nexport const b = 3;\nexport const c = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.a); // 1\nconsole.log(constants.b); // 3\n\n// test2.js 模块\nimport {a, b} from './constants';\nconsole.log(a); // 1\nconsole.log(b); // 3\n\n\n\n# module的加载实现\n\n * 传统方法 defer是“渲染完再执行”，async是“下载完就执行”。\n\n<script src=\"path/to/mymodule.js\" defer><\/script>\n<script src=\"path/to/mymodule.js\" async><\/script>\n\n\n * es6加载 要加入type=\"module\"属性。属于异步加载，等同于defer。\n\n<script type=\"module\" src=\"./foo.js\"><\/script>\n// 另一种写法\n<script type=\"module\">\n  import foo from \"./foo.js\";\n<\/script>\n\n\n\n# 3.16.21 风格规范\n\n 1. let取代var,常量使用const代替。\n 2. 字符串使用单引号，动态字符串使用反引号。\n 3. 优先使用解构赋值\n 4. 单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。\n 5. 对象尽量静态化，一旦定义不要随便增加新属性，如果增加使用object.assign方法\n\n> const a = {};\n> object.assign(a, { x: 3 });\n\n 6.  对象的key与vaule同名时候，尽量简写。\n 7.  使用...扩展运算符拷贝数组。\n 8.  立即执行的函数可以写成箭头函数的形式。\n 9.  import取代require\n 10. export取代module.exports\n 11. 如果模块只有一个输出值，就使用export default\n 12. 使用eslint检查工具",charsets:{cjk:!0}},{title:"3.7.1基本概念",frontmatter:{},regularPath:"/frontend/javascript/date/",relativePath:"frontend/javascript/date/README.md",key:"v-5317d5fd",path:"/frontend/javascript/date/",headers:[{level:2,title:"3.7.1基本概念",slug:"_3-7-1基本概念",normalizedTitle:"3.7.1基本概念",charIndex:2},{level:2,title:"3.7.2Date对象的创建：",slug:"_3-7-2date对象的创建",normalizedTitle:"3.7.2date对象的创建：",charIndex:143},{level:2,title:"3.7.3Date对象的方法：",slug:"_3-7-3date对象的方法",normalizedTitle:"3.7.3date对象的方法：",charIndex:381},{level:2,title:"3.7.4Date对象的相关字符串方法：",slug:"_3-7-4date对象的相关字符串方法",normalizedTitle:"3.7.4date对象的相关字符串方法：",charIndex:2431}],headersStr:"3.7.1基本概念 3.7.2Date对象的创建： 3.7.3Date对象的方法： 3.7.4Date对象的相关字符串方法：",content:'# 3.7.1基本概念\n\n 1. Date是JavaScript的内置对象，系统在Date对象中封装了与日期和时间相关的属性和方法。\n\n 2. Date使用UTC1970年1月1日0时开始经过的毫秒数来存储时间。\n\n 3. GMT 格林尼治时间\n\n 4. UTC 国际协调时间\n\n\n# 3.7.2Date对象的创建：\n\nvar date= new Date(); //无参数的情况下返回值为当前时间。\nvar date = new Date(milliseconds);\nvar date = new Date(dateString);\nvar date = new Date(year, month, day, hours, minutes, seconds, milliseconds);\n\n\nWARNING\n\n不同浏览器显示的时间格式会有细微差异\n\n\n# 3.7.3Date对象的方法：\n\n * Date.now返回自1970年1月1日 00:00:00 UTC到当前时间的毫秒数。\n\nvar nowTime = Date.now();\n\n\n * Date.parse返回自1970年1月1日 00:00:00 UTC到指定日期（字符串）的毫秒数。 支持的时间格式如下：1/24/2016/January 24,2016/Sun Jan 24 2016 10:10:10 GMT+0800\n\nvar time = Date.parse("1/24/2016")\n\n\n * Date.UTC返回自1970年1月1日 00:00:00 UTC到指定构造函数的毫秒数。 Date.UTC(year,month,date,hrs,min,sec,ms)\n\n> year1900 年后的某一年份。\n> month0 到 11 之间的一个整数，表示月份。\n> date1 到 31 之间的一个整数，表示某月当中的第几天。\n> hrs0 到 23 之间的一个整数，表示小时。\n> min0 到 59 之间的一个整数，表示分钟。\n> sec0 到 59 之间的一个整数，表示秒。\n> ms0 到 999 之间的一个整数，表示毫秒。\n\nvar time = Date.UTC(2012,02,30)\n\n\n * getFullYear从 Date 对象以四位数字返回年份。\n * getMonth从 Date 对象返回月份 (0 ~ 11)。\n * getDate从 Date 对象返回一个月中的某一天 (1 ~ 31)。\n * getDay从 Date 对象返回一周中的某一天 (0 ~ 6)。\n * getHours返回 Date 对象的小时 (0 ~ 23)。\n * getMinutes返回 Date 对象的分钟 (0 ~ 59)。\n * getSeconds返回 Date 对象的秒数 (0 ~ 59)。\n * getMilliseconds返回 Date 对象的毫秒(0 ~ 999)。\n * getTime返回 1970 年 1 月 1 日至今的毫秒数。\n * getTimezoneOffset返回本地时间与格林威治标准时间 (GMT) 的分钟差\n * getUTCDate根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。\n * getUTCDay根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。\n * getUTCFullYear根据世界时从 Date 对象返回四位数的年份。\n * getUTCHours根据世界时返回 Date 对象的小时 (0 ~ 23)。\n * getUTCMilliseconds根据世界时返回 Date 对象的毫秒(0 ~ 999)。\n * getUTCMinutes根据世界时返回 Date 对象的分钟 (0 ~ 59)。\n * getUTCMonth根据世界时从 Date 对象返回月份 (0 ~ 11)。\n * getUTCSeconds根据世界时返回 Date 对象的秒钟 (0 ~ 59)。\n * setDate设置 Date 对象中月的某一天 (1 ~ 31)。\n * setFullYear设置 Date 对象中的年份（四位数字）。\n * setHours设置 Date 对象中的小时 (0 ~ 23)。\n * setMilliseconds设置 Date 对象中的毫秒 (0 ~ 999)。\n * setMinutes设置 Date 对象中的分钟 (0 ~ 59)。\n * setMonth设置 Date 对象中月份 (0 ~ 11)。\n * setSeconds设置 Date 对象中的秒钟 (0 ~ 59)。\n * setTime方法以毫秒设置 Date 对象。\n * setUTCDate根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。\n * setUTCFullYear根据世界时设置 Date 对象中的年份（四位数字）。\n * setUTCHours根据世界时设置 Date 对象中的小时 (0 ~ 23)。\n * setUTCMilliseconds根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。\n * setUTCMinutes根据世界时设置 Date 对象中的分钟 (0 ~ 59)。\n * setUTCMonth根据世界时设置 Date 对象中的月份 (0 ~ 11)。\n * setUTCSeconds方法用于根据世界时 (UTC) 设置指定时间的秒字段。\n * toDateString把 Date 对象的日期部分转换为字符串。\n * toISOString使用 ISO 标准返回字符串的日期格式。\n * toJSON以JSON 数据格式返回日期字符串。\n * toUTCString根据世界时，把 Date 对象转换为字符串。\n\n\n# 3.7.4Date对象的相关字符串方法：\n\n * toSting把Date实例的字符串表示\n * toDateSting把Date的日期部分字符串表示\n * toTimeSting把Date的时间部分字符串表示\n * toLocaleString根据本地时区把 Date 对象转换为字符串\n * toLocaleDateString根据本地时区把，把 Date 对象的日期部分转换为字符串。\n * toLocaleTimeString根据本地时区把，把 Date 对象的时间部分转换为字符串。\n * valueOf转换为毫秒数\n\nWARNING\n\n * 格式不正确会返回NaN\n * 注意UTC时间和时区的换算，如东八区和标准时间是八小时时差',normalizedContent:'# 3.7.1基本概念\n\n 1. date是javascript的内置对象，系统在date对象中封装了与日期和时间相关的属性和方法。\n\n 2. date使用utc1970年1月1日0时开始经过的毫秒数来存储时间。\n\n 3. gmt 格林尼治时间\n\n 4. utc 国际协调时间\n\n\n# 3.7.2date对象的创建：\n\nvar date= new date(); //无参数的情况下返回值为当前时间。\nvar date = new date(milliseconds);\nvar date = new date(datestring);\nvar date = new date(year, month, day, hours, minutes, seconds, milliseconds);\n\n\nwarning\n\n不同浏览器显示的时间格式会有细微差异\n\n\n# 3.7.3date对象的方法：\n\n * date.now返回自1970年1月1日 00:00:00 utc到当前时间的毫秒数。\n\nvar nowtime = date.now();\n\n\n * date.parse返回自1970年1月1日 00:00:00 utc到指定日期（字符串）的毫秒数。 支持的时间格式如下：1/24/2016/january 24,2016/sun jan 24 2016 10:10:10 gmt+0800\n\nvar time = date.parse("1/24/2016")\n\n\n * date.utc返回自1970年1月1日 00:00:00 utc到指定构造函数的毫秒数。 date.utc(year,month,date,hrs,min,sec,ms)\n\n> year1900 年后的某一年份。\n> month0 到 11 之间的一个整数，表示月份。\n> date1 到 31 之间的一个整数，表示某月当中的第几天。\n> hrs0 到 23 之间的一个整数，表示小时。\n> min0 到 59 之间的一个整数，表示分钟。\n> sec0 到 59 之间的一个整数，表示秒。\n> ms0 到 999 之间的一个整数，表示毫秒。\n\nvar time = date.utc(2012,02,30)\n\n\n * getfullyear从 date 对象以四位数字返回年份。\n * getmonth从 date 对象返回月份 (0 ~ 11)。\n * getdate从 date 对象返回一个月中的某一天 (1 ~ 31)。\n * getday从 date 对象返回一周中的某一天 (0 ~ 6)。\n * gethours返回 date 对象的小时 (0 ~ 23)。\n * getminutes返回 date 对象的分钟 (0 ~ 59)。\n * getseconds返回 date 对象的秒数 (0 ~ 59)。\n * getmilliseconds返回 date 对象的毫秒(0 ~ 999)。\n * gettime返回 1970 年 1 月 1 日至今的毫秒数。\n * gettimezoneoffset返回本地时间与格林威治标准时间 (gmt) 的分钟差\n * getutcdate根据世界时从 date 对象返回月中的一天 (1 ~ 31)。\n * getutcday根据世界时从 date 对象返回周中的一天 (0 ~ 6)。\n * getutcfullyear根据世界时从 date 对象返回四位数的年份。\n * getutchours根据世界时返回 date 对象的小时 (0 ~ 23)。\n * getutcmilliseconds根据世界时返回 date 对象的毫秒(0 ~ 999)。\n * getutcminutes根据世界时返回 date 对象的分钟 (0 ~ 59)。\n * getutcmonth根据世界时从 date 对象返回月份 (0 ~ 11)。\n * getutcseconds根据世界时返回 date 对象的秒钟 (0 ~ 59)。\n * setdate设置 date 对象中月的某一天 (1 ~ 31)。\n * setfullyear设置 date 对象中的年份（四位数字）。\n * sethours设置 date 对象中的小时 (0 ~ 23)。\n * setmilliseconds设置 date 对象中的毫秒 (0 ~ 999)。\n * setminutes设置 date 对象中的分钟 (0 ~ 59)。\n * setmonth设置 date 对象中月份 (0 ~ 11)。\n * setseconds设置 date 对象中的秒钟 (0 ~ 59)。\n * settime方法以毫秒设置 date 对象。\n * setutcdate根据世界时设置 date 对象中月份的一天 (1 ~ 31)。\n * setutcfullyear根据世界时设置 date 对象中的年份（四位数字）。\n * setutchours根据世界时设置 date 对象中的小时 (0 ~ 23)。\n * setutcmilliseconds根据世界时设置 date 对象中的毫秒 (0 ~ 999)。\n * setutcminutes根据世界时设置 date 对象中的分钟 (0 ~ 59)。\n * setutcmonth根据世界时设置 date 对象中的月份 (0 ~ 11)。\n * setutcseconds方法用于根据世界时 (utc) 设置指定时间的秒字段。\n * todatestring把 date 对象的日期部分转换为字符串。\n * toisostring使用 iso 标准返回字符串的日期格式。\n * tojson以json 数据格式返回日期字符串。\n * toutcstring根据世界时，把 date 对象转换为字符串。\n\n\n# 3.7.4date对象的相关字符串方法：\n\n * tosting把date实例的字符串表示\n * todatesting把date的日期部分字符串表示\n * totimesting把date的时间部分字符串表示\n * tolocalestring根据本地时区把 date 对象转换为字符串\n * tolocaledatestring根据本地时区把，把 date 对象的日期部分转换为字符串。\n * tolocaletimestring根据本地时区把，把 date 对象的时间部分转换为字符串。\n * valueof转换为毫秒数\n\nwarning\n\n * 格式不正确会返回nan\n * 注意utc时间和时区的换算，如东八区和标准时间是八小时时差',charsets:{cjk:!0}},{title:"3.12.1基本概念",frontmatter:{},regularPath:"/frontend/javascript/event/",relativePath:"frontend/javascript/event/README.md",key:"v-86caa34a",path:"/frontend/javascript/event/",headers:[{level:2,title:"3.12.1基本概念",slug:"_3-12-1基本概念",normalizedTitle:"3.12.1基本概念",charIndex:2},{level:2,title:"3.12.2事件处理(绑定事件)",slug:"_3-12-2事件处理-绑定事件",normalizedTitle:"3.12.2事件处理(绑定事件)",charIndex:127},{level:3,title:"DOM0级：",slug:"dom0级",normalizedTitle:"dom0级：",charIndex:148},{level:3,title:"DOM2级：",slug:"dom2级",normalizedTitle:"dom2级：",charIndex:417},{level:3,title:"DOM0级与DOM2级的区别：",slug:"dom0级与dom2级的区别",normalizedTitle:"dom0级与dom2级的区别：",charIndex:1289},{level:3,title:"DOM3级：",slug:"dom3级",normalizedTitle:"dom3级：",charIndex:1379},{level:2,title:"3.12.3常用的事件类型(事件处理函数)",slug:"_3-12-3常用的事件类型-事件处理函数",normalizedTitle:"3.12.3常用的事件类型(事件处理函数)",charIndex:1772},{level:3,title:"鼠标事件",slug:"鼠标事件",normalizedTitle:"鼠标事件",charIndex:1499},{level:3,title:"键盘事件",slug:"键盘事件",normalizedTitle:"键盘事件",charIndex:1609},{level:3,title:"其他事件",slug:"其他事件",normalizedTitle:"其他事件",charIndex:2310},{level:2,title:"3.12.4事件的对象",slug:"_3-12-4事件的对象",normalizedTitle:"3.12.4事件的对象",charIndex:2648},{level:2,title:"3.12.5client/offset/scroll",slug:"_3-12-5client-offset-scroll",normalizedTitle:"3.12.5client/offset/scroll",charIndex:3542},{level:3,title:"client",slug:"client",normalizedTitle:"client",charIndex:2824},{level:3,title:"offset",slug:"offset",normalizedTitle:"offset",charIndex:2901},{level:3,title:"scroll",slug:"scroll",normalizedTitle:"scroll",charIndex:1456},{level:2,title:"3.12.6事件的冒泡和捕获",slug:"_3-12-6事件的冒泡和捕获",normalizedTitle:"3.12.6事件的冒泡和捕获",charIndex:4502},{level:3,title:"事件的冒泡：",slug:"事件的冒泡",normalizedTitle:"事件的冒泡：",charIndex:4521},{level:3,title:"事件的捕获：",slug:"事件的捕获",normalizedTitle:"事件的捕获：",charIndex:4599},{level:3,title:"事件的阻止",slug:"事件的阻止",normalizedTitle:"事件的阻止",charIndex:4909}],headersStr:"3.12.1基本概念 3.12.2事件处理(绑定事件) DOM0级： DOM2级： DOM0级与DOM2级的区别： DOM3级： 3.12.3常用的事件类型(事件处理函数) 鼠标事件 键盘事件 其他事件 3.12.4事件的对象 3.12.5client/offset/scroll client offset scroll 3.12.6事件的冒泡和捕获 事件的冒泡： 事件的捕获： 事件的阻止",content:'# 3.12.1基本概念\n\n事件是一些特定动作发生时所发出的信号,JavaScript中的事件是可以被JavaScript侦测到的行为。\n\n网页中的每个元素都可以产生某些事件，我们可以在用户点击某按钮时产生一个onClick事件来触发某个函数。\n\n\n# 3.12.2事件处理(绑定事件)\n\n\n# DOM0级：\n\n同一个元素的同一种事件只能绑定一个函数，否则后面的函数会覆盖之前的函数\n\n * 内联方式\n\n<input id="myButton" type="button" value="Press Me" onclick="alert(\'thanks\');" >\n\n\n * 脚本方式\n\ndocument.getElementById("myButton").onclick = function () {\n    alert(\'thanks\');\n}\n\n\n * 事件清理\n\n   input.onclick = null\n\n\n\n# DOM2级：\n\n * addEventListener绑定事件\n\nelement.addEventListener(event, function, useCapture)\n\n\n * 新的写法：\n\nelement.addEventListener(event, function, {\n    capture: false, //捕获\n    passive: false, \n    once: false    //只触发一次\n})\n\n\n * removeEventListener移除事件\n\nelement.removeEventListener(event, function, useCapture)\n\n\n * 新的写法：\n\nelement.removeEventListener(event, function, {\n    capture: false, //捕获\n    passive: false, \n    once: false    // 只触发一次\n})\n\n\n> event:事件名\n> function:绑定的函数\n> useCapture、capture：（true：捕获/false：冒泡） passive提前告诉浏览器是否会阻止默认行为(Firefox、safari和Chrome支持)\n> once只触发一次(目前浏览器都不支持)\n\nWARNING\n\n 1. IE8及其以下需要使用IE事件处理程序attachEvent/detachEvent\n 2. 捕获与冒泡详见3.12.6\n 3. 如果要阻止默认行为，需设置passive，否则可能会失败\n 4. 要移除事件时，移除时绑定的事件必须监听时绑定的是同一个事件。\n\n> document.addEventListener("touchmove", this.fn);\n> document.removeEventListener("touchmove", this.fn);\n> fn(event) {console.log(event)};\n\n\n# DOM0级与DOM2级的区别：\n\n * DOM0：存在覆盖的问题；下边的代码会把上边的代码覆盖\n\n * DOM2：同时绑定几个事件（相同或不同），然后顺序执行，不会覆盖。\n\n\n# DOM3级：\n\nDOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：\n\n> UI事件，当用户与页面上的元素交互时触发，如：load、scroll\n> 焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n> 鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n> 滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n> 文本事件，当在文档中输入文本时触发，如：textInput\n> 键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n> 合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart\n> 变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified\n> 同时DOM3级事件也允许使用者自定义一些事件\n\n\n# 3.12.3常用的事件类型(事件处理函数)\n\n\n# 鼠标事件\n\n * onclick鼠标点击某个对象\n\n * ondblclick当用户双击某个对象时调用的事件句柄。\n\n * oncontextmenu在用户点击鼠标右键打开上下文菜单时触发\n\n * onmousedown鼠标按钮被按下。\n\n * onmousemove鼠标被移动。\n\n * onmouseout鼠标从某元素移开。\n\n * onmouseover鼠标移到某元素之上。\n\n * onmouseup鼠标按键被松开。\n\n\n# 键盘事件\n\n * onkeydown某个键盘按键被按下。\n\n> 用户按下任何键盘键时发生,因此监听一个用户是否按下按键请使用 onkeydown 事件，所以浏览器都支持。\n\n * onkeyup某个键盘按键被松开。\n\n * onkeypress某个键盘按键被按下并松开。\n\n> 不是适用于系统按钮(如： ALT, CTRL, SHIFT, ESC)。\n\n * keyCode\n\n>  * 键盘事件的event对象中包含一个keyCode属性，onkeydown和onkeyup表示你按下的具体的键，而onkeypress表示你按下的字符。\n>    keyCode详见3.12.4\n\n\n# 其他事件\n\nonload一个页面或一幅图像完成加载\nonunload用户退出页面。存在兼容性问题\n\nWARNING\n\n>  1. IE6，IE7，IE8中，刷新页面、关闭浏览器之后、页面跳转之后都会执行。\n>  2. IE9刷新页面会执行，页面跳转、关闭浏览器不能执行。\n>  3. Opera、Chrome 任何情况都不执行。\n\n * onblur元素失去焦点。\n\n * onfocus元素获得焦点。\n\n * onselect文本被选中。\n\n * onabort图像的加载被中断\n\n * onchange域的内容被改变。\n\n * onerror在加载文档或图像时发生错误。\n\n * onreset重置按钮被点击。\n\n * onscroll当文档被滚动时发生的事件。\n\n\n# 3.12.4事件的对象\n\n在触发某个事件时，会产生一个事件对象event这个对象中包含着所有与事件有关的信息。包括导致事件的元素，事件的类型以及其他与特定事件相关的信息。\n\n * type获取事件类型\n\n * target获取事件目标\n   \n   target=e.target || e.srcElement; //获取当前事件源\n   \n\n * clientX/clientY窗口坐标\n\n * pageX/pageY页面坐标（包括已卷曲距离）\n\n * screenX/screenY屏幕坐标\n\n * offsetX/offsetY区域坐标（相对于带有定位的父盒子）\n\n# 键值\n\n>  * keyCode兼容：\n\n * keyCode\n\n> 返回keydown和keyup事件时触发的键盘按键对应的ASII码（不支持Firefox浏览器的onkeypress事件）。\n\n * which\n\n> 返回onkeypress、nkeydown、onkeyup事件时触发的键盘按键对应的ASII码（不支持IE8及其更早版本）。\n\n> > 兼容方案：\n> \n> document.onkeydown = function(e){\n> var e = e || window.event;var e = e.keyCode || e.which;}\n\n * ctrlKey/altKey/shiftKey\n\n> 事件被触发时ctrl/alt/shift键是否被按下，返回布尔值。\n\n * button返回当事件被触发时，哪个鼠标按钮被点击。\n\n> 0|1|2分别代表左中右三个键，IE浏览器左中右三个键对应的数字为1|4|2\n> \n> 兼容：\n> \n> function fn(e){\n> if(e){\n>   returee.button\n> }else if(event){\n>   switch(event.button){\n>   case 1:return 0; \n>   case 4:return 1; \n>   case 2:return 2; \n>   }}\n> }\n\n\n# 3.12.5client/offset/scroll\n\n\n# client\n\n * clientWidth/clientHeight\n\nelement.clientWidth\n\n\n内容+外边距padding（,与内容是否溢出无关,不包括滚动条、边框和外边距）\n\n * clientTop/clientLeft\n\n 1. 如果文字方向从右往左(默认从左往右,通过设置 direction: rtl;)进行排列,且存在垂直滚动条的情况下 一侧边框宽度border+一侧宽带条宽度scollbar\n 2. 默认情况下 一侧边框宽度border\n\nWARNING\n\n如果当前元素是行内元素(inline)时, clientLeft将返回 0;\n\n\n# offset\n\n * offsetParent ie8+：假如祖先元素中都没有定位，offsetParent就是body，如果有定位，则以结构上最近的带有定位的祖先元素为准。 ie6/7：自身没有定位，参考的是最近的有宽高的祖先元素，没有宽高参考body。如果自身有定位，与高级浏览器一直。\n\n*兼容：自身元素定位，祖先无边框。\n\n * offsetWidth/offsetHeight\n\n内容+边框border+外边距padding（与内容是否溢出无关）\n\n * offsetLeft/offsetTop offsetLeft：元素自身的左边框外部到offsetParent左边框内部的距离。（ie8：多一个offsetParent边框）\n   offsetTop：元素自身的上边框外部到offsetParent上边框内部的距离。（ie8：多一个offsetParent边框）\n\n\n# scroll\n\n * scrollWidth/scrollHeight 起始位置内边距+内容实际宽度（与内容溢出有关） scrollWidth=padding-left+textwidth scrollHeight= padding-top+textheight\n\n * scrollTop/scrollLeft\n\n兼容：\n\nvar scrollTop=document.documentElement.scrollTop||doucument.body.scrollTop;\n\n\n\n# 3.12.6事件的冒泡和捕获\n\n\n# 事件的冒泡：\n\n事件按照从最特定的事件目标到最不特定的事件目标的顺序触发。 事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\n\n# 事件的捕获：\n\n与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。 事件捕获时，父级元素先触发，子级元素后触发\n\n通过addEventListener函数，可以自己选择绑定事件时采用事件捕获还是事件冒泡它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。详见3.12.2\n\nWARNING\n\n 1. IE9以前的版本只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。\n 2. 不是所有的事件都能冒泡，例如：blur、focus、load、unload\n\n\n# 事件的阻止\n\n# 阻止冒泡或捕获\n\n新：\n\ne.stopPropagation():\n\n\nie8以下：e.stopPropagation?e.stopPropagation():e.cancelBubble=true;\n\n\n# 阻止事件的默认行为\n\n新:\n\ne.preventDefault():\n\n\nie8以下：function(){return false;} / e.returnValue=false;\n\n\n# 冒泡或捕获也阻止事件的默认行为\n\nstopImmediatePropagationDOM3新增方法',normalizedContent:'# 3.12.1基本概念\n\n事件是一些特定动作发生时所发出的信号,javascript中的事件是可以被javascript侦测到的行为。\n\n网页中的每个元素都可以产生某些事件，我们可以在用户点击某按钮时产生一个onclick事件来触发某个函数。\n\n\n# 3.12.2事件处理(绑定事件)\n\n\n# dom0级：\n\n同一个元素的同一种事件只能绑定一个函数，否则后面的函数会覆盖之前的函数\n\n * 内联方式\n\n<input id="mybutton" type="button" value="press me" onclick="alert(\'thanks\');" >\n\n\n * 脚本方式\n\ndocument.getelementbyid("mybutton").onclick = function () {\n    alert(\'thanks\');\n}\n\n\n * 事件清理\n\n   input.onclick = null\n\n\n\n# dom2级：\n\n * addeventlistener绑定事件\n\nelement.addeventlistener(event, function, usecapture)\n\n\n * 新的写法：\n\nelement.addeventlistener(event, function, {\n    capture: false, //捕获\n    passive: false, \n    once: false    //只触发一次\n})\n\n\n * removeeventlistener移除事件\n\nelement.removeeventlistener(event, function, usecapture)\n\n\n * 新的写法：\n\nelement.removeeventlistener(event, function, {\n    capture: false, //捕获\n    passive: false, \n    once: false    // 只触发一次\n})\n\n\n> event:事件名\n> function:绑定的函数\n> usecapture、capture：（true：捕获/false：冒泡） passive提前告诉浏览器是否会阻止默认行为(firefox、safari和chrome支持)\n> once只触发一次(目前浏览器都不支持)\n\nwarning\n\n 1. ie8及其以下需要使用ie事件处理程序attachevent/detachevent\n 2. 捕获与冒泡详见3.12.6\n 3. 如果要阻止默认行为，需设置passive，否则可能会失败\n 4. 要移除事件时，移除时绑定的事件必须监听时绑定的是同一个事件。\n\n> document.addeventlistener("touchmove", this.fn);\n> document.removeeventlistener("touchmove", this.fn);\n> fn(event) {console.log(event)};\n\n\n# dom0级与dom2级的区别：\n\n * dom0：存在覆盖的问题；下边的代码会把上边的代码覆盖\n\n * dom2：同时绑定几个事件（相同或不同），然后顺序执行，不会覆盖。\n\n\n# dom3级：\n\ndom3级事件在dom2级事件的基础上添加了更多的事件类型，全部类型如下：\n\n> ui事件，当用户与页面上的元素交互时触发，如：load、scroll\n> 焦点事件，当元素获得或失去焦点时触发，如：blur、focus\n> 鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup\n> 滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel\n> 文本事件，当在文档中输入文本时触发，如：textinput\n> 键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress\n> 合成事件，当为ime（输入法编辑器）输入字符时触发，如：compositionstart\n> 变动事件，当底层dom结构发生变化时触发，如：domsubtreemodified\n> 同时dom3级事件也允许使用者自定义一些事件\n\n\n# 3.12.3常用的事件类型(事件处理函数)\n\n\n# 鼠标事件\n\n * onclick鼠标点击某个对象\n\n * ondblclick当用户双击某个对象时调用的事件句柄。\n\n * oncontextmenu在用户点击鼠标右键打开上下文菜单时触发\n\n * onmousedown鼠标按钮被按下。\n\n * onmousemove鼠标被移动。\n\n * onmouseout鼠标从某元素移开。\n\n * onmouseover鼠标移到某元素之上。\n\n * onmouseup鼠标按键被松开。\n\n\n# 键盘事件\n\n * onkeydown某个键盘按键被按下。\n\n> 用户按下任何键盘键时发生,因此监听一个用户是否按下按键请使用 onkeydown 事件，所以浏览器都支持。\n\n * onkeyup某个键盘按键被松开。\n\n * onkeypress某个键盘按键被按下并松开。\n\n> 不是适用于系统按钮(如： alt, ctrl, shift, esc)。\n\n * keycode\n\n>  * 键盘事件的event对象中包含一个keycode属性，onkeydown和onkeyup表示你按下的具体的键，而onkeypress表示你按下的字符。\n>    keycode详见3.12.4\n\n\n# 其他事件\n\nonload一个页面或一幅图像完成加载\nonunload用户退出页面。存在兼容性问题\n\nwarning\n\n>  1. ie6，ie7，ie8中，刷新页面、关闭浏览器之后、页面跳转之后都会执行。\n>  2. ie9刷新页面会执行，页面跳转、关闭浏览器不能执行。\n>  3. opera、chrome 任何情况都不执行。\n\n * onblur元素失去焦点。\n\n * onfocus元素获得焦点。\n\n * onselect文本被选中。\n\n * onabort图像的加载被中断\n\n * onchange域的内容被改变。\n\n * onerror在加载文档或图像时发生错误。\n\n * onreset重置按钮被点击。\n\n * onscroll当文档被滚动时发生的事件。\n\n\n# 3.12.4事件的对象\n\n在触发某个事件时，会产生一个事件对象event这个对象中包含着所有与事件有关的信息。包括导致事件的元素，事件的类型以及其他与特定事件相关的信息。\n\n * type获取事件类型\n\n * target获取事件目标\n   \n   target=e.target || e.srcelement; //获取当前事件源\n   \n\n * clientx/clienty窗口坐标\n\n * pagex/pagey页面坐标（包括已卷曲距离）\n\n * screenx/screeny屏幕坐标\n\n * offsetx/offsety区域坐标（相对于带有定位的父盒子）\n\n# 键值\n\n>  * keycode兼容：\n\n * keycode\n\n> 返回keydown和keyup事件时触发的键盘按键对应的asii码（不支持firefox浏览器的onkeypress事件）。\n\n * which\n\n> 返回onkeypress、nkeydown、onkeyup事件时触发的键盘按键对应的asii码（不支持ie8及其更早版本）。\n\n> > 兼容方案：\n> \n> document.onkeydown = function(e){\n> var e = e || window.event;var e = e.keycode || e.which;}\n\n * ctrlkey/altkey/shiftkey\n\n> 事件被触发时ctrl/alt/shift键是否被按下，返回布尔值。\n\n * button返回当事件被触发时，哪个鼠标按钮被点击。\n\n> 0|1|2分别代表左中右三个键，ie浏览器左中右三个键对应的数字为1|4|2\n> \n> 兼容：\n> \n> function fn(e){\n> if(e){\n>   returee.button\n> }else if(event){\n>   switch(event.button){\n>   case 1:return 0; \n>   case 4:return 1; \n>   case 2:return 2; \n>   }}\n> }\n\n\n# 3.12.5client/offset/scroll\n\n\n# client\n\n * clientwidth/clientheight\n\nelement.clientwidth\n\n\n内容+外边距padding（,与内容是否溢出无关,不包括滚动条、边框和外边距）\n\n * clienttop/clientleft\n\n 1. 如果文字方向从右往左(默认从左往右,通过设置 direction: rtl;)进行排列,且存在垂直滚动条的情况下 一侧边框宽度border+一侧宽带条宽度scollbar\n 2. 默认情况下 一侧边框宽度border\n\nwarning\n\n如果当前元素是行内元素(inline)时, clientleft将返回 0;\n\n\n# offset\n\n * offsetparent ie8+：假如祖先元素中都没有定位，offsetparent就是body，如果有定位，则以结构上最近的带有定位的祖先元素为准。 ie6/7：自身没有定位，参考的是最近的有宽高的祖先元素，没有宽高参考body。如果自身有定位，与高级浏览器一直。\n\n*兼容：自身元素定位，祖先无边框。\n\n * offsetwidth/offsetheight\n\n内容+边框border+外边距padding（与内容是否溢出无关）\n\n * offsetleft/offsettop offsetleft：元素自身的左边框外部到offsetparent左边框内部的距离。（ie8：多一个offsetparent边框）\n   offsettop：元素自身的上边框外部到offsetparent上边框内部的距离。（ie8：多一个offsetparent边框）\n\n\n# scroll\n\n * scrollwidth/scrollheight 起始位置内边距+内容实际宽度（与内容溢出有关） scrollwidth=padding-left+textwidth scrollheight= padding-top+textheight\n\n * scrolltop/scrollleft\n\n兼容：\n\nvar scrolltop=document.documentelement.scrolltop||doucument.body.scrolltop;\n\n\n\n# 3.12.6事件的冒泡和捕获\n\n\n# 事件的冒泡：\n\n事件按照从最特定的事件目标到最不特定的事件目标的顺序触发。 事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\n\n# 事件的捕获：\n\n与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。 事件捕获时，父级元素先触发，子级元素后触发\n\n通过addeventlistener函数，可以自己选择绑定事件时采用事件捕获还是事件冒泡它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。详见3.12.2\n\nwarning\n\n 1. ie9以前的版本只支持事件冒泡，不支持事件捕获，它也不支持addeventlistener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachevent。\n 2. 不是所有的事件都能冒泡，例如：blur、focus、load、unload\n\n\n# 事件的阻止\n\n# 阻止冒泡或捕获\n\n新：\n\ne.stoppropagation():\n\n\nie8以下：e.stoppropagation?e.stoppropagation():e.cancelbubble=true;\n\n\n# 阻止事件的默认行为\n\n新:\n\ne.preventdefault():\n\n\nie8以下：function(){return false;} / e.returnvalue=false;\n\n\n# 冒泡或捕获也阻止事件的默认行为\n\nstopimmediatepropagationdom3新增方法',charsets:{cjk:!0}},{title:"3.15.1 什么是面向对象编程",frontmatter:{},regularPath:"/frontend/javascript/oop/",relativePath:"frontend/javascript/oop/README.md",key:"v-a1b70ea2",path:"/frontend/javascript/oop/",headers:[{level:2,title:"3.15.1 什么是面向对象编程",slug:"_3-15-1-什么是面向对象编程",normalizedTitle:"3.15.1 什么是面向对象编程",charIndex:2},{level:3,title:"面向过程（Procedure Oriented简称PO）：",slug:"面向过程-procedure-oriented简称po",normalizedTitle:"面向过程（procedure oriented简称po）：",charIndex:23},{level:3,title:"面向对象（Object Oriented简称OO）：",slug:"面向对象-object-oriented简称oo",normalizedTitle:"面向对象（object oriented简称oo）：",charIndex:213},{level:3,title:"面向对象的相关概念",slug:"面向对象的相关概念",normalizedTitle:"面向对象的相关概念",charIndex:866},{level:3,title:"面向对象编程的特性",slug:"面向对象编程的特性",normalizedTitle:"面向对象编程的特性",charIndex:939},{level:3,title:"面向对象编程的五大基本原则",slug:"面向对象编程的五大基本原则",normalizedTitle:"面向对象编程的五大基本原则",charIndex:1544},{level:2,title:"3.15.2 JS面向对象编程概述",slug:"_3-15-2-js面向对象编程概述",normalizedTitle:"3.15.2 js面向对象编程概述",charIndex:2376},{level:3,title:"JS内置类",slug:"js内置类",normalizedTitle:"js内置类",charIndex:2398},{level:3,title:"构造函数（类）",slug:"构造函数-类",normalizedTitle:"构造函数（类）",charIndex:2617},{level:3,title:"相关方法",slug:"相关方法",normalizedTitle:"相关方法",charIndex:3743},{level:2,title:"3.15.3 对象封装方法",slug:"_3-15-3-对象封装方法",normalizedTitle:"3.15.3 对象封装方法",charIndex:3775},{level:3,title:"1、生成实例对象的原始模式",slug:"_1、生成实例对象的原始模式",normalizedTitle:"1、生成实例对象的原始模式",charIndex:3802},{level:3,title:"2、原始模式的改进",slug:"_2、原始模式的改进",normalizedTitle:"2、原始模式的改进",charIndex:4065},{level:3,title:"3、构造函数模式",slug:"_3、构造函数模式",normalizedTitle:"3、构造函数模式",charIndex:4310},{level:3,title:"4、构造函数模式的问题",slug:"_4、构造函数模式的问题",normalizedTitle:"4、构造函数模式的问题",charIndex:4880},{level:3,title:"5、Prototype模式",slug:"_5、prototype模式",normalizedTitle:"5、prototype模式",charIndex:5349},{level:3,title:"6、Prototype模式的ES6语法class",slug:"_6、prototype模式的es6语法class",normalizedTitle:"6、prototype模式的es6语法class",charIndex:5856},{level:3,title:"7、Prototype模式的验证方法",slug:"_7、prototype模式的验证方法",normalizedTitle:"7、prototype模式的验证方法",charIndex:3752},{level:2,title:"3.15.4 构造函数继承方法",slug:"_3-15-4-构造函数继承方法",normalizedTitle:"3.15.4 构造函数继承方法",charIndex:6768},{level:3,title:"1、构造函数绑定",slug:"_1、构造函数绑定",normalizedTitle:"1、构造函数绑定",charIndex:6942},{level:3,title:"2、prototype模式",slug:"_2、prototype模式",normalizedTitle:"2、prototype模式",charIndex:7166},{level:3,title:"3、直接继承prototype",slug:"_3、直接继承prototype",normalizedTitle:"3、直接继承prototype",charIndex:7885},{level:3,title:"4、利用空对象作为中介",slug:"_4、利用空对象作为中介",normalizedTitle:"4、利用空对象作为中介",charIndex:8543},{level:3,title:"5、拷贝继承",slug:"_5、拷贝继承",normalizedTitle:"5、拷贝继承",charIndex:9104},{level:2,title:"3.15.5 非构造函数的继承方法",slug:"_3-15-5-非构造函数的继承方法",normalizedTitle:"3.15.5 非构造函数的继承方法",charIndex:9563},{level:3,title:"1、object()方法",slug:"_1、object-方法",normalizedTitle:"1、object()方法",charIndex:9791},{level:3,title:"2、浅拷贝",slug:"_2、浅拷贝",normalizedTitle:"2、浅拷贝",charIndex:10162},{level:3,title:"3、深拷贝",slug:"_3、深拷贝",normalizedTitle:"3、深拷贝",charIndex:10528}],headersStr:"3.15.1 什么是面向对象编程 面向过程（Procedure Oriented简称PO）： 面向对象（Object Oriented简称OO）： 面向对象的相关概念 面向对象编程的特性 面向对象编程的五大基本原则 3.15.2 JS面向对象编程概述 JS内置类 构造函数（类） 相关方法 3.15.3 对象封装方法 1、生成实例对象的原始模式 2、原始模式的改进 3、构造函数模式 4、构造函数模式的问题 5、Prototype模式 6、Prototype模式的ES6语法class 7、Prototype模式的验证方法 3.15.4 构造函数继承方法 1、构造函数绑定 2、prototype模式 3、直接继承prototype 4、利用空对象作为中介 5、拷贝继承 3.15.5 非构造函数的继承方法 1、object()方法 2、浅拷贝 3、深拷贝",content:'# 3.15.1 什么是面向对象编程\n\n\n# 面向过程（Procedure Oriented简称PO）：\n\n当解决一个问题的时候，面向过程会把事情拆分成：一个个函数和数据（用于方法的参数）。然后按照一定的顺序，执行完这些方法（每个方法看作一个过程），等方法执行完了，事情就搞定了。如c\n\n * 优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源。\n * 缺点：没有面向对象易维护、易复用、易扩展\n\n\n# 面向对象（Object Oriented简称OO）：\n\n当解决一个问题的时候，面向对象会把事物抽象成对象的概念，就是说这个问题里面有哪些对象，然后给对象赋一些属性和方法，然后让每个对象去执行自己的方法，问题得到解决。\n如js/java/php/c#/python/c++/ruby/...\n\n * 优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护。\n * 缺点：性能比面向过程低\n\n# 例子：五子棋\n\n * 面向过程的设计思路：\n\n> 1、开始游戏，2、黑子先走，3、绘制画面，4、判断输赢，5、轮到白子，6、绘制画面，7、判断输赢，8、返回步骤2，9、输出最后结果。把上面每个步骤用不同的方法来实现。\n\n * 面向对象：\n\n> 整个五子棋可以分为1、黑白双方，这两方的行为是一模一样的，2、棋盘系统，负责绘制画面，3、规则系统，负责判定诸如犯规、输赢等。第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。\n\n可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了多个步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。\n\n\n# 面向对象的相关概念\n\n * 对象：万物皆对象\n * 类：对象的具体细分（按功能特点进行分类 大类 小类）\n * 实例：类中一个具体的事物\n\n\n# 面向对象编程的特性\n\n三大基本特性：封装，继承，多态\n\n * 封装\n\n封装，就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。\n\n * 继承\n\n继承，指可以让某个类型的对象获得另一个类型的对象的属性的方法。它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过 “继承”和“组合”来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用父类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力。\n\n * 多态\n\n多态，是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。\n\n\n# 面向对象编程的五大基本原则\n\n * 单一职责原则SRP(Single Responsibility Principle)\n\n> 是指一个类的功能要单一，不能包罗万象。如同一个人一样，分配的工作不能太多，否则一天到晚虽然忙忙碌碌的，但效率却高不起来。\n\n * 开放封闭原则OCP(Open－Close Principle)\n\n> 一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。\n\n * 里式替换原则LSP(the Liskov Substitution Principle LSP)\n\n> 子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。\n\n * 依赖倒置原则DIP(the Dependency Inversion Principle DIP)\n\n> 具体依赖抽象，上层依赖下层。假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类： 而应当由B定义一个抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。\n\n * 接口分离原则ISP(the Interface Segregation Principle ISP)\n\n> 模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来\n\n\n# 3.15.2 JS面向对象编程概述\n\n\n# JS内置类\n\n * JS内置类Object的基类分为以下小类：\n\n> Number、String、Boolean、Null、Undefined、Array、Date、RegExp、Function、 HTMLCollection、EventTarget、自定义类\n\n * 侠义对象、广义对象、严格对象：\n\n> 侠义对象：通过{}创建的对象 广义对象：Array、Date、RegExp、Function... 严格对象：json\n\n\n# 构造函数（类）\n\n# 什么是构造函数：\n\n> 通过new关键字执行的，一般首字母大写的函数。构造函数的this指向函数本身。\n\nTIP\n\n构造函数模没有return,默认会返回this对象,如果写return只能返回引用类型。\n\n# 构造函数的创建过程：\n\n>  1. new关键字执行时，函数内部创建了一个空对象\n>  2. this指向这个空对象\n>  3. 执行函数内部的语句\n>  4. 返回这个对象\n\n# 构造函数的作用：\n\n> 创建对象时完成对对象属性的一些初始化等操作，为对象数据成员开辟内存空间，并给创建的对象建立一个统一标识符。\n\n# 原型对象prototype\n\n> 每一个构造函数都有一个prototype对象，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n\n# 构造函数的constructor属性\n\n> 每一个构造函数都有一个constructor属性，指向它的构造函数。\n\n# 原型对象的constructor属性\n\n> 每一个原型对象（prototype）都有一个constructor属性，指向该原型对象对应的构造函数。\n\n# 构造函数的__proto__属性\n\n> 每个通过构造函数创建的对象都有一个__proto__属性，该属性指向原型对象\n\n# 原型链\n\n> \n\n# 原型链机制\n\n> 通过构造函数创建的对象会先查找自己的属性，如果没有通过__proto__去原型上查找。如果还没有就去自己原型对象的原型对象去查找，一直查找到object基类。\n\n> Object.prototype是所有对象的原型链的终点。\n\n# 系统内置构造函数：\n\n * Object\n\nvar obj = new Object() //obj是Object的实例\nobj.name = \'大毛\'\nobj.color = \'黄色\'\n\n\n * Function\n\nvar fn = new Function("a","b","console.log(a+b)") //fn是Function的实例\nfn(1,4)\n\n\nfunction Cat(name,color){\n\tthis.name=name;\n\tthis.color=color;\n}\nCat.prototype.type = "猫科动物"; // 通过原型设置公共属性\nvar cat1 = new Cat("大毛","黄色");\nvar cat2 = new Cat("二毛","黑色");\n\nalert(cat1.name); // 大毛\nalert(cat1.color); // 黄色\nalert(cat1.type); // 猫科动物\n\n\n\n# 相关方法\n\n详见：7、Prototype模式的验证方法\n\n\n# 3.15.3 对象封装方法\n\n封装的六种方法\n\n\n# 1、生成实例对象的原始模式\n\nvar Cat = {\n   name : \'\',\n   color : \'\'\n}\n\n\nvar cat1 = {}; // 创建一个空对象\n　　cat1.name = "大毛"; // 按照原型对象的属性赋值\n　　cat1.color = "黄色";\nvar cat2 = {};\n　　cat2.name = "二毛";\n　　cat2.color = "黑色";\n\n\n这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。\n\n\n# 2、原始模式的改进\n\n我们可以写一个函数，解决代码重复的问题。\n\nfunction Cat(name,color) {\n　　return {\n　　　　name:name,\n　　　　color:color\n　　}\n}\n\n\n然后生成实例对象，就等于是在调用函数：\n\n　　var cat1 = Cat("大毛","黄色");\n　　var cat2 = Cat("二毛","黑色");\n\n\n这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。\n\n\n# 3、构造函数模式\n\n为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。\n\n所谓"构造函数"，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。\n\nfunction Cat(name,color){\n　　this.name=name;\n　　this.color=color;\n}\n\n\n　　var cat1 = new Cat("大毛","黄色");\n　　var cat2 = new Cat("二毛","黑色");\n　　alert(cat1.name); // 大毛\n　　alert(cat1.color); // 黄色\n\n\n这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。\n\n　　alert(cat1.constructor == Cat); //true\n　　alert(cat2.constructor == Cat); //true\n\n\n使用instanceof运算符，验证原型对象与实例对象之间的关系。\n\n　　alert(cat1 instanceof Cat); //true\n　　alert(cat2 instanceof Cat); //true\n\n\n\n# 4、构造函数模式的问题\n\n构造函数方法很好用，但是存在一个浪费内存的问题。\n\n我们现在为Cat对象添加一个不变的属性type（种类），再添加一个方法eat（吃）。那么，原型对象Cat就变成了下面这样：\n\nfunction Cat(name,color){\n　　this.name = name;\n　　this.color = color;\n　　this.type = "猫科动物";\n　　this.eat = function(){alert("吃老鼠");};\n}\n\n\n还是采用同样的方法，生成实例：\n\n　　var cat1 = new Cat("大毛","黄色");\n　　var cat2 = new Cat ("二毛","黑色");\n　　alert(cat1.type); // 猫科动物\n　　cat1.eat(); // 吃老鼠\n\n\ntype属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。\n\n　　alert(cat1.eat == cat2.eat); //false\n\n\n\n# 5、Prototype模式\n\nJavascript规定，每一个构造函数都有一个prototype对象，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。 这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。\n\n　　function Cat(name,color){\n　　　　this.name = name;\n　　　　this.color = color;\n　　}\n\tCat.prototype = {\n\t\ttype:"猫科动物"，\n\t\teat:function(){alert("吃老鼠")};\n\t}\n\n\n然后，生成实例。\n\n　　var cat1 = new Cat("大毛","黄色");\n　　var cat2 = new Cat("二毛","黑色");\n　　alert(cat1.type); // 猫科动物\n　　cat1.eat(); // 吃老鼠\n\n\n这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。\n\n　　alert(cat1.eat == cat2.eat); //true\n\n\n\n# 6、Prototype模式的ES6语法class\n\nclass Cat {\n\tconstructor(name,color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n\ttype = "猫科动物";\n\teat = function(){alert("吃老鼠")};\n}\nvar cat1 = new Cat("大毛","黄色");\nvar cat2 = new Cat("二毛","黑色");\nalert(cat1.type); // 猫科动物\ncat1.eat(); // 吃老鼠\n\n\nclass详见3.16.19\n\n\n# 7、Prototype模式的验证方法\n\n为了配合prototype属性，Javascript定义了一些辅助方法，帮助我们使用它。，\n\n 1. isPrototypeOf()\n\n这个方法用来判断，某个proptotype对象和某个实例之间的关系。\n\n　　alert(Cat.prototype.isPrototypeOf(cat1)); //true\n　　alert(Cat.prototype.isPrototypeOf(cat2)); //true\n\n\n 2. hasOwnProperty()\n\n每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。\n\n　　alert(cat1.hasOwnProperty("name")); // true\n　　alert(cat1.hasOwnProperty("type")); // false\n\n\n 3. in运算符\n\nin运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。\n\n　　alert("name" in cat1); // true\n　　alert("type" in cat1); // true\n\n\nin运算符还可以用来遍历某个对象的所有属性。\n\n　　for(var prop in cat1) { alert("cat1["+prop+"]="+cat1[prop]); }\n\n\n\n# 3.15.4 构造函数继承方法\n\n构造函数继承的五种方法\n\n　function Animal(){\n　　　this.species = "动物";\n　}\n　function Cat(name,color){\n　　　this.name = name;\n　　　this.color = color;\n　}\n\n\n怎样才能使"猫"继承"动物"呢？\n\n\n# 1、构造函数绑定\n\n第一种方法也是最简单的方法，使用call或apply方法，将父对象的构造函数绑定在子对象上。\n\nfunction Cat(name,color){\n　　Animal.apply(this, arguments);\n　　this.name = name;\n　　this.color = color;\n}\nvar cat1 = new Cat("大毛","黄色");\nalert(cat1.species); // 动物\n\n\n\n# 2、prototype模式\n\n如果"猫"的prototype对象，指向一个Animal的实例，那么所有"猫"的实例，就能继承Animal了。\n\n　　Cat.prototype = new Animal(); //Cat的prototype对象指向一个Animal的实例。\n　　Cat.prototype.constructor = Cat;\n　　var cat1 = new Cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n　　alert(cat1.constructor == Cat.prototype.constructor); // true 实例的constructor属性，默认同prototype对象constructor属性\n　　alert(cat1.constructor == Animal); // true\n\n\nTIP\n\nCat.prototype = new Animal();它相当于完全删除了prototype对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？ Cat.prototype.constructor = Cat;任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有"Cat.prototype = new Animal();"这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。因此在替换prototype对象后需要将prototype的上constructor属性指回原来的构造函数。\n\n\n# 3、直接继承prototype\n\n第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过Animal()，直接继承Animal.prototype\n\n　　function Animal(){ }\n　　Animal.prototype.species = "动物";\n　　Cat.prototype = Animal.prototype; // 将Cat的prototype对象直接指向Animal的prototype对象，这样就完成了继承。\n　　Cat.prototype.constructor = Cat;\n　　var cat1 = new Cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n\n\n与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。 所以，上面这一段代码其实是有问题的。请看第二行\n\nCat.prototype.constructor = Cat; // 这一句实际上把Animal.prototype对象的constructor属性也改掉了！\nalert(Animal.prototype.constructor); // Cat\n\n\n\n# 4、利用空对象作为中介\n\n由于"直接继承prototype"存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。\n\n　　function extend(Child, Parent) {\n　　　　var F = function(){};\n　　　　F.prototype = Parent.prototype;\n　　　　Child.prototype = new F();\n　　　　Child.prototype.constructor = Child;\n　　　　Child.uber = Parent.prototype;\n　　}\n//使用\n　　extend(Cat,Animal);\n　　var cat1 = new Cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n\n\nTIP\n\n 1. F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。\n 2. Child.uber = Parent.prototype;意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性。\n\n\n# 5、拷贝继承\n\n上面是采用prototype对象，实现继承。我们也可以换一种思路，纯粹采用"拷贝"方法实现继承。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？这样我们就有了第五种方法。\n\n首先，还是把Animal的所有不变属性，都放到它的prototype对象上。\n\nfunction Animal(){...}\nAnimal.prototype.species = "动物";\n\n// 属性拷贝\nfunction extend2(Child, Parent) {\n　　var p = Parent.prototype;\n　　var c = Child.prototype;\n　　for (var i in p) {\n　　　　c[i] = p[i];\n　　　　}\n　　c.uber = p;\n}\n\n// 使用\n　　extend2(Cat, Animal);\n　　var cat1 = new Cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n\n\n\n# 3.15.5 非构造函数的继承方法\n\n构造函数继承的三种方法\n\n比如，现在有一个对象，叫做"中国人"。\n\nvar Chinese = {\n　　nation:\'中国\'\n};\n// 还有一个对象，叫做"医生"。\nvar Doctor ={\n　　career:\'医生\'\n}\n\n\n请问怎样才能让"医生"去继承"中国人"，也就是说，我怎样才能生成一个"中国医生"的对象？ 这里要注意，这两个对象都是普通对象，不是构造函数，无法使用构造函数方法实现"继承"。\n\n\n# 1、object()方法\n\njson格式的发明人Douglas Crockford，提出了一个object()函数，可以做到这一点。\n\nfunction object(o) {\n　　function F() {}\n　　F.prototype = o;\n　　return new F();\n}\n\n\nobject()函数，其实只做一件事，就是把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。\n\n// 使用的时候，第一步先在父对象的基础上，生成子对象：\n　　var Doctor = object(Chinese);\n// 然后，再加上子对象本身的属性：\n　　Doctor.career = \'医生\';\n// 这时，子对象已经继承了父对象的属性了。\n　　alert(Doctor.nation); //中国\n\n\n\n# 2、浅拷贝\n\n除了使用原型链(prototype)以外，还有另一种思路：把父对象的属性，全部拷贝给子对象，也能实现继承。\n\n下面这个函数，就是在做拷贝：\n\nfunction extendCopy(p) {\n　　var c = {};\n　　for (var i in p) {\n　　　　c[i] = p[i];\n　　}\n　　c.uber = p;\n　　return c;\n}\n// 使用\nvar Doctor = extendCopy(Chinese);\nDoctor.career = \'医生\';\nalert(Doctor.nation); // 中国\n\n\n这样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址"浅拷贝"，而不是真正拷贝，因此存在父对象被篡改的可能。\n\n\n# 3、深拷贝\n\n所谓"深拷贝"，就是能够实现真正意义上的数组和对象的拷贝。它的实现并不难，只要递归调用"浅拷贝"就行了。\n\nfunction deepCopy(p, c) {\n　　var c = c || {};\n　　for (var i in p) {\n　　　　if (typeof p[i] === \'object\') {\n　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n　　　　　　deepCopy(p[i], c[i]);\n　　　　} else {\n　　　　　　　c[i] = p[i];\n　　　　}\n　　}\n　　return c;\n}\n// 使用的时候这样写：\nvar Doctor = deepCopy(Chinese);\n// 给父对象加一个属性，值为数组。然后，在子对象上修改这个属性：\nChinese.birthPlaces = [\'北京\',\'上海\',\'香港\'];\nDoctor.birthPlaces.push(\'厦门\');\n// 这时，父对象就不会受到影响了。\nalert(Doctor.birthPlaces); //北京, 上海, 香港, 厦门\nalert(Chinese.birthPlaces); //北京, 上海, 香港\n\n\n目前，jQuery库使用的就是这种继承方法。\n\n参考:2分钟让你明白什么是面向对象编程、 Javascript 面向对象编程',normalizedContent:'# 3.15.1 什么是面向对象编程\n\n\n# 面向过程（procedure oriented简称po）：\n\n当解决一个问题的时候，面向过程会把事情拆分成：一个个函数和数据（用于方法的参数）。然后按照一定的顺序，执行完这些方法（每个方法看作一个过程），等方法执行完了，事情就搞定了。如c\n\n * 优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源。\n * 缺点：没有面向对象易维护、易复用、易扩展\n\n\n# 面向对象（object oriented简称oo）：\n\n当解决一个问题的时候，面向对象会把事物抽象成对象的概念，就是说这个问题里面有哪些对象，然后给对象赋一些属性和方法，然后让每个对象去执行自己的方法，问题得到解决。\n如js/java/php/c#/python/c++/ruby/...\n\n * 优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护。\n * 缺点：性能比面向过程低\n\n# 例子：五子棋\n\n * 面向过程的设计思路：\n\n> 1、开始游戏，2、黑子先走，3、绘制画面，4、判断输赢，5、轮到白子，6、绘制画面，7、判断输赢，8、返回步骤2，9、输出最后结果。把上面每个步骤用不同的方法来实现。\n\n * 面向对象：\n\n> 整个五子棋可以分为1、黑白双方，这两方的行为是一模一样的，2、棋盘系统，负责绘制画面，3、规则系统，负责判定诸如犯规、输赢等。第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。\n\n可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了多个步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。\n\n\n# 面向对象的相关概念\n\n * 对象：万物皆对象\n * 类：对象的具体细分（按功能特点进行分类 大类 小类）\n * 实例：类中一个具体的事物\n\n\n# 面向对象编程的特性\n\n三大基本特性：封装，继承，多态\n\n * 封装\n\n封装，就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。\n\n * 继承\n\n继承，指可以让某个类型的对象获得另一个类型的对象的属性的方法。它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过 “继承”和“组合”来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用父类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力。\n\n * 多态\n\n多态，是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。\n\n\n# 面向对象编程的五大基本原则\n\n * 单一职责原则srp(single responsibility principle)\n\n> 是指一个类的功能要单一，不能包罗万象。如同一个人一样，分配的工作不能太多，否则一天到晚虽然忙忙碌碌的，但效率却高不起来。\n\n * 开放封闭原则ocp(open－close principle)\n\n> 一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。\n\n * 里式替换原则lsp(the liskov substitution principle lsp)\n\n> 子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。\n\n * 依赖倒置原则dip(the dependency inversion principle dip)\n\n> 具体依赖抽象，上层依赖下层。假设b是较a低的模块，但b需要使用到a的功能，这个时候，b不应当直接使用a中的具体类： 而应当由b定义一个抽象接口，并由a来实现这个抽象接口，b只使用这个抽象接口：这样就达到了依赖倒置的目的，b也解除了对a的依赖，反过来是a依赖于b定义的抽象接口。通过上层模块难以避免依赖下层模块，假如b也直接依赖a的实现，那么就可能造成循环依赖。一个常见的问题就是编译a模块时需要直接包含到b模块的cpp文件，而编译b时同样要直接包含到a的cpp文件。\n\n * 接口分离原则isp(the interface segregation principle isp)\n\n> 模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来\n\n\n# 3.15.2 js面向对象编程概述\n\n\n# js内置类\n\n * js内置类object的基类分为以下小类：\n\n> number、string、boolean、null、undefined、array、date、regexp、function、 htmlcollection、eventtarget、自定义类\n\n * 侠义对象、广义对象、严格对象：\n\n> 侠义对象：通过{}创建的对象 广义对象：array、date、regexp、function... 严格对象：json\n\n\n# 构造函数（类）\n\n# 什么是构造函数：\n\n> 通过new关键字执行的，一般首字母大写的函数。构造函数的this指向函数本身。\n\ntip\n\n构造函数模没有return,默认会返回this对象,如果写return只能返回引用类型。\n\n# 构造函数的创建过程：\n\n>  1. new关键字执行时，函数内部创建了一个空对象\n>  2. this指向这个空对象\n>  3. 执行函数内部的语句\n>  4. 返回这个对象\n\n# 构造函数的作用：\n\n> 创建对象时完成对对象属性的一些初始化等操作，为对象数据成员开辟内存空间，并给创建的对象建立一个统一标识符。\n\n# 原型对象prototype\n\n> 每一个构造函数都有一个prototype对象，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n\n# 构造函数的constructor属性\n\n> 每一个构造函数都有一个constructor属性，指向它的构造函数。\n\n# 原型对象的constructor属性\n\n> 每一个原型对象（prototype）都有一个constructor属性，指向该原型对象对应的构造函数。\n\n# 构造函数的__proto__属性\n\n> 每个通过构造函数创建的对象都有一个__proto__属性，该属性指向原型对象\n\n# 原型链\n\n> \n\n# 原型链机制\n\n> 通过构造函数创建的对象会先查找自己的属性，如果没有通过__proto__去原型上查找。如果还没有就去自己原型对象的原型对象去查找，一直查找到object基类。\n\n> object.prototype是所有对象的原型链的终点。\n\n# 系统内置构造函数：\n\n * object\n\nvar obj = new object() //obj是object的实例\nobj.name = \'大毛\'\nobj.color = \'黄色\'\n\n\n * function\n\nvar fn = new function("a","b","console.log(a+b)") //fn是function的实例\nfn(1,4)\n\n\nfunction cat(name,color){\n\tthis.name=name;\n\tthis.color=color;\n}\ncat.prototype.type = "猫科动物"; // 通过原型设置公共属性\nvar cat1 = new cat("大毛","黄色");\nvar cat2 = new cat("二毛","黑色");\n\nalert(cat1.name); // 大毛\nalert(cat1.color); // 黄色\nalert(cat1.type); // 猫科动物\n\n\n\n# 相关方法\n\n详见：7、prototype模式的验证方法\n\n\n# 3.15.3 对象封装方法\n\n封装的六种方法\n\n\n# 1、生成实例对象的原始模式\n\nvar cat = {\n   name : \'\',\n   color : \'\'\n}\n\n\nvar cat1 = {}; // 创建一个空对象\n　　cat1.name = "大毛"; // 按照原型对象的属性赋值\n　　cat1.color = "黄色";\nvar cat2 = {};\n　　cat2.name = "二毛";\n　　cat2.color = "黑色";\n\n\n这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。\n\n\n# 2、原始模式的改进\n\n我们可以写一个函数，解决代码重复的问题。\n\nfunction cat(name,color) {\n　　return {\n　　　　name:name,\n　　　　color:color\n　　}\n}\n\n\n然后生成实例对象，就等于是在调用函数：\n\n　　var cat1 = cat("大毛","黄色");\n　　var cat2 = cat("二毛","黑色");\n\n\n这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。\n\n\n# 3、构造函数模式\n\n为了解决从原型对象生成实例的问题，javascript提供了一个构造函数（constructor）模式。\n\n所谓"构造函数"，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。\n\nfunction cat(name,color){\n　　this.name=name;\n　　this.color=color;\n}\n\n\n　　var cat1 = new cat("大毛","黄色");\n　　var cat2 = new cat("二毛","黑色");\n　　alert(cat1.name); // 大毛\n　　alert(cat1.color); // 黄色\n\n\n这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。\n\n　　alert(cat1.constructor == cat); //true\n　　alert(cat2.constructor == cat); //true\n\n\n使用instanceof运算符，验证原型对象与实例对象之间的关系。\n\n　　alert(cat1 instanceof cat); //true\n　　alert(cat2 instanceof cat); //true\n\n\n\n# 4、构造函数模式的问题\n\n构造函数方法很好用，但是存在一个浪费内存的问题。\n\n我们现在为cat对象添加一个不变的属性type（种类），再添加一个方法eat（吃）。那么，原型对象cat就变成了下面这样：\n\nfunction cat(name,color){\n　　this.name = name;\n　　this.color = color;\n　　this.type = "猫科动物";\n　　this.eat = function(){alert("吃老鼠");};\n}\n\n\n还是采用同样的方法，生成实例：\n\n　　var cat1 = new cat("大毛","黄色");\n　　var cat2 = new cat ("二毛","黑色");\n　　alert(cat1.type); // 猫科动物\n　　cat1.eat(); // 吃老鼠\n\n\ntype属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。\n\n　　alert(cat1.eat == cat2.eat); //false\n\n\n\n# 5、prototype模式\n\njavascript规定，每一个构造函数都有一个prototype对象，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。 这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。\n\n　　function cat(name,color){\n　　　　this.name = name;\n　　　　this.color = color;\n　　}\n\tcat.prototype = {\n\t\ttype:"猫科动物"，\n\t\teat:function(){alert("吃老鼠")};\n\t}\n\n\n然后，生成实例。\n\n　　var cat1 = new cat("大毛","黄色");\n　　var cat2 = new cat("二毛","黑色");\n　　alert(cat1.type); // 猫科动物\n　　cat1.eat(); // 吃老鼠\n\n\n这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。\n\n　　alert(cat1.eat == cat2.eat); //true\n\n\n\n# 6、prototype模式的es6语法class\n\nclass cat {\n\tconstructor(name,color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n\ttype = "猫科动物";\n\teat = function(){alert("吃老鼠")};\n}\nvar cat1 = new cat("大毛","黄色");\nvar cat2 = new cat("二毛","黑色");\nalert(cat1.type); // 猫科动物\ncat1.eat(); // 吃老鼠\n\n\nclass详见3.16.19\n\n\n# 7、prototype模式的验证方法\n\n为了配合prototype属性，javascript定义了一些辅助方法，帮助我们使用它。，\n\n 1. isprototypeof()\n\n这个方法用来判断，某个proptotype对象和某个实例之间的关系。\n\n　　alert(cat.prototype.isprototypeof(cat1)); //true\n　　alert(cat.prototype.isprototypeof(cat2)); //true\n\n\n 2. hasownproperty()\n\n每个实例对象都有一个hasownproperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。\n\n　　alert(cat1.hasownproperty("name")); // true\n　　alert(cat1.hasownproperty("type")); // false\n\n\n 3. in运算符\n\nin运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。\n\n　　alert("name" in cat1); // true\n　　alert("type" in cat1); // true\n\n\nin运算符还可以用来遍历某个对象的所有属性。\n\n　　for(var prop in cat1) { alert("cat1["+prop+"]="+cat1[prop]); }\n\n\n\n# 3.15.4 构造函数继承方法\n\n构造函数继承的五种方法\n\n　function animal(){\n　　　this.species = "动物";\n　}\n　function cat(name,color){\n　　　this.name = name;\n　　　this.color = color;\n　}\n\n\n怎样才能使"猫"继承"动物"呢？\n\n\n# 1、构造函数绑定\n\n第一种方法也是最简单的方法，使用call或apply方法，将父对象的构造函数绑定在子对象上。\n\nfunction cat(name,color){\n　　animal.apply(this, arguments);\n　　this.name = name;\n　　this.color = color;\n}\nvar cat1 = new cat("大毛","黄色");\nalert(cat1.species); // 动物\n\n\n\n# 2、prototype模式\n\n如果"猫"的prototype对象，指向一个animal的实例，那么所有"猫"的实例，就能继承animal了。\n\n　　cat.prototype = new animal(); //cat的prototype对象指向一个animal的实例。\n　　cat.prototype.constructor = cat;\n　　var cat1 = new cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n　　alert(cat1.constructor == cat.prototype.constructor); // true 实例的constructor属性，默认同prototype对象constructor属性\n　　alert(cat1.constructor == animal); // true\n\n\ntip\n\ncat.prototype = new animal();它相当于完全删除了prototype对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？ cat.prototype.constructor = cat;任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有"cat.prototype = new animal();"这一行，cat.prototype.constructor是指向cat的；加了这一行以后，cat.prototype.constructor指向animal。因此在替换prototype对象后需要将prototype的上constructor属性指回原来的构造函数。\n\n\n# 3、直接继承prototype\n\n第三种方法是对第二种方法的改进。由于animal对象中，不变的属性都可以直接写入animal.prototype。所以，我们也可以让cat()跳过animal()，直接继承animal.prototype\n\n　　function animal(){ }\n　　animal.prototype.species = "动物";\n　　cat.prototype = animal.prototype; // 将cat的prototype对象直接指向animal的prototype对象，这样就完成了继承。\n　　cat.prototype.constructor = cat;\n　　var cat1 = new cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n\n\n与前一种方法相比，这样做的优点是效率比较高（不用执行和建立animal的实例了），比较省内存。缺点是 cat.prototype和animal.prototype现在指向了同一个对象，那么任何对cat.prototype的修改，都会反映到animal.prototype。 所以，上面这一段代码其实是有问题的。请看第二行\n\ncat.prototype.constructor = cat; // 这一句实际上把animal.prototype对象的constructor属性也改掉了！\nalert(animal.prototype.constructor); // cat\n\n\n\n# 4、利用空对象作为中介\n\n由于"直接继承prototype"存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。\n\n　　function extend(child, parent) {\n　　　　var f = function(){};\n　　　　f.prototype = parent.prototype;\n　　　　child.prototype = new f();\n　　　　child.prototype.constructor = child;\n　　　　child.uber = parent.prototype;\n　　}\n//使用\n　　extend(cat,animal);\n　　var cat1 = new cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n\n\ntip\n\n 1. f是空对象，所以几乎不占内存。这时，修改cat的prototype对象，就不会影响到animal的prototype对象。\n 2. child.uber = parent.prototype;意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性。\n\n\n# 5、拷贝继承\n\n上面是采用prototype对象，实现继承。我们也可以换一种思路，纯粹采用"拷贝"方法实现继承。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？这样我们就有了第五种方法。\n\n首先，还是把animal的所有不变属性，都放到它的prototype对象上。\n\nfunction animal(){...}\nanimal.prototype.species = "动物";\n\n// 属性拷贝\nfunction extend2(child, parent) {\n　　var p = parent.prototype;\n　　var c = child.prototype;\n　　for (var i in p) {\n　　　　c[i] = p[i];\n　　　　}\n　　c.uber = p;\n}\n\n// 使用\n　　extend2(cat, animal);\n　　var cat1 = new cat("大毛","黄色");\n　　alert(cat1.species); // 动物\n\n\n\n# 3.15.5 非构造函数的继承方法\n\n构造函数继承的三种方法\n\n比如，现在有一个对象，叫做"中国人"。\n\nvar chinese = {\n　　nation:\'中国\'\n};\n// 还有一个对象，叫做"医生"。\nvar doctor ={\n　　career:\'医生\'\n}\n\n\n请问怎样才能让"医生"去继承"中国人"，也就是说，我怎样才能生成一个"中国医生"的对象？ 这里要注意，这两个对象都是普通对象，不是构造函数，无法使用构造函数方法实现"继承"。\n\n\n# 1、object()方法\n\njson格式的发明人douglas crockford，提出了一个object()函数，可以做到这一点。\n\nfunction object(o) {\n　　function f() {}\n　　f.prototype = o;\n　　return new f();\n}\n\n\nobject()函数，其实只做一件事，就是把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。\n\n// 使用的时候，第一步先在父对象的基础上，生成子对象：\n　　var doctor = object(chinese);\n// 然后，再加上子对象本身的属性：\n　　doctor.career = \'医生\';\n// 这时，子对象已经继承了父对象的属性了。\n　　alert(doctor.nation); //中国\n\n\n\n# 2、浅拷贝\n\n除了使用原型链(prototype)以外，还有另一种思路：把父对象的属性，全部拷贝给子对象，也能实现继承。\n\n下面这个函数，就是在做拷贝：\n\nfunction extendcopy(p) {\n　　var c = {};\n　　for (var i in p) {\n　　　　c[i] = p[i];\n　　}\n　　c.uber = p;\n　　return c;\n}\n// 使用\nvar doctor = extendcopy(chinese);\ndoctor.career = \'医生\';\nalert(doctor.nation); // 中国\n\n\n这样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址"浅拷贝"，而不是真正拷贝，因此存在父对象被篡改的可能。\n\n\n# 3、深拷贝\n\n所谓"深拷贝"，就是能够实现真正意义上的数组和对象的拷贝。它的实现并不难，只要递归调用"浅拷贝"就行了。\n\nfunction deepcopy(p, c) {\n　　var c = c || {};\n　　for (var i in p) {\n　　　　if (typeof p[i] === \'object\') {\n　　　　　　c[i] = (p[i].constructor === array) ? [] : {};\n　　　　　　deepcopy(p[i], c[i]);\n　　　　} else {\n　　　　　　　c[i] = p[i];\n　　　　}\n　　}\n　　return c;\n}\n// 使用的时候这样写：\nvar doctor = deepcopy(chinese);\n// 给父对象加一个属性，值为数组。然后，在子对象上修改这个属性：\nchinese.birthplaces = [\'北京\',\'上海\',\'香港\'];\ndoctor.birthplaces.push(\'厦门\');\n// 这时，父对象就不会受到影响了。\nalert(doctor.birthplaces); //北京, 上海, 香港, 厦门\nalert(chinese.birthplaces); //北京, 上海, 香港\n\n\n目前，jquery库使用的就是这种继承方法。\n\n参考:2分钟让你明白什么是面向对象编程、 javascript 面向对象编程',charsets:{cjk:!0}},{title:"3.8.1基本概念",frontmatter:{},regularPath:"/frontend/javascript/math/",relativePath:"frontend/javascript/math/README.md",key:"v-c2c8c786",path:"/frontend/javascript/math/",headers:[{level:2,title:"3.8.1基本概念",slug:"_3-8-1基本概念",normalizedTitle:"3.8.1基本概念",charIndex:2},{level:2,title:"3.8.2算数值",slug:"_3-8-2算数值",normalizedTitle:"3.8.2算数值",charIndex:85},{level:2,title:"3.8.3数值取整",slug:"_3-8-3数值取整",normalizedTitle:"3.8.3数值取整",charIndex:384},{level:2,title:"3.8.4随机数",slug:"_3-8-4随机数",normalizedTitle:"3.8.4随机数",charIndex:460},{level:2,title:"3.8.5三角函数",slug:"_3-8-5三角函数",normalizedTitle:"3.8.5三角函数",charIndex:622},{level:2,title:"3.8.6其他方法",slug:"_3-8-6其他方法",normalizedTitle:"3.8.6其他方法",charIndex:772}],headersStr:"3.8.1基本概念 3.8.2算数值 3.8.3数值取整 3.8.4随机数 3.8.5三角函数 3.8.6其他方法",content:"# 3.8.1基本概念\n\nMath 对象用于执行数学任务。\n\nMath 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()。\n\n\n# 3.8.2算数值\n\nMath.PI 返回圆周率（约等于3.14159）。\n\nMath.E 返回算术常量 e，即自然对数的底数（约等于2.718）。\n\nMath.SQRT2 返回 2 的平方根（约等于 1.414）。\n\nMath.SQRT1_2 返回返回 1/2 的平方根（约等于 0.707）。\n\nMath.LN2 返回 2 的自然对数（约等于0.693）。\n\nMath.LN10 返回 10 的自然对数（约等于2.302）。\n\nMath.LOG2E 返回以 2 为底的 e 的对数（约等于 1.443）。\n\nMath.LOG10E 返回以 10 为底的 e 的对数（约等于0.434）。\n\n\n# 3.8.3数值取整\n\nceil(x) 对数进行上舍入。\n\nfloor(x) 对数进行下舍入。\n\nround(x) 把数四舍五入为最接近的整数。\n\n\n# 3.8.4随机数\n\nrandom() 返回 0 ~ 1 之间的随机数。\n\n注意并不包括0和1\n\n生成low,high之间的随机数：\n\nfunction selec(low,high){\n\nvar ch=high-low+1;\n\nreturn Math.floor(Math.random()*ch+low);\n\n}\n\n\n# 3.8.5三角函数\n\ncos(x) 返回数的余弦。\n\nacos(x) 返回 x 的反余弦值。\n\nsin(x) 返回数的正弦。\n\nasin(x) 返回 x 的反正弦值。\n\ntan(x) 返回角的正切。\n\natan(x) 以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。\n\n\n# 3.8.6其他方法\n\nmax(x,y) 返回 x 和 y 中的最高值。\n\nmin(x,y) 返回 x 和 y 中的最低值。\n\nabs(x) 返回 x 的绝对值。\n\natan2(y,x) 返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。\n\nexp(x) 返回 e 的指数。\n\nlog(x) 返回数的自然对数（底为e）。\n\npow(x,y) 返回 x 的 y 次幂。\n\nvalueOf() 返回 Math 对象的原始值。",normalizedContent:"# 3.8.1基本概念\n\nmath 对象用于执行数学任务。\n\nmath 对象并不像 date 和 string 那样是对象的类，因此没有构造函数 math()。\n\n\n# 3.8.2算数值\n\nmath.pi 返回圆周率（约等于3.14159）。\n\nmath.e 返回算术常量 e，即自然对数的底数（约等于2.718）。\n\nmath.sqrt2 返回 2 的平方根（约等于 1.414）。\n\nmath.sqrt1_2 返回返回 1/2 的平方根（约等于 0.707）。\n\nmath.ln2 返回 2 的自然对数（约等于0.693）。\n\nmath.ln10 返回 10 的自然对数（约等于2.302）。\n\nmath.log2e 返回以 2 为底的 e 的对数（约等于 1.443）。\n\nmath.log10e 返回以 10 为底的 e 的对数（约等于0.434）。\n\n\n# 3.8.3数值取整\n\nceil(x) 对数进行上舍入。\n\nfloor(x) 对数进行下舍入。\n\nround(x) 把数四舍五入为最接近的整数。\n\n\n# 3.8.4随机数\n\nrandom() 返回 0 ~ 1 之间的随机数。\n\n注意并不包括0和1\n\n生成low,high之间的随机数：\n\nfunction selec(low,high){\n\nvar ch=high-low+1;\n\nreturn math.floor(math.random()*ch+low);\n\n}\n\n\n# 3.8.5三角函数\n\ncos(x) 返回数的余弦。\n\nacos(x) 返回 x 的反余弦值。\n\nsin(x) 返回数的正弦。\n\nasin(x) 返回 x 的反正弦值。\n\ntan(x) 返回角的正切。\n\natan(x) 以介于 -pi/2 与 pi/2 弧度之间的数值来返回 x 的反正切值。\n\n\n# 3.8.6其他方法\n\nmax(x,y) 返回 x 和 y 中的最高值。\n\nmin(x,y) 返回 x 和 y 中的最低值。\n\nabs(x) 返回 x 的绝对值。\n\natan2(y,x) 返回从 x 轴到点 (x,y) 的角度（介于 -pi/2 与 pi/2 弧度之间）。\n\nexp(x) 返回 e 的指数。\n\nlog(x) 返回数的自然对数（底为e）。\n\npow(x,y) 返回 x 的 y 次幂。\n\nvalueof() 返回 math 对象的原始值。",charsets:{cjk:!0}},{title:"3.6.1对象:Object",frontmatter:{},regularPath:"/frontend/javascript/object/",relativePath:"frontend/javascript/object/README.md",key:"v-492b269d",path:"/frontend/javascript/object/",headers:[{level:2,title:"3.6.1对象:Object",slug:"_3-6-1对象-object",normalizedTitle:"3.6.1对象:object",charIndex:2},{level:3,title:"对象的声明",slug:"对象的声明",normalizedTitle:"对象的声明",charIndex:238},{level:3,title:"对象的访问",slug:"对象的访问",normalizedTitle:"对象的访问",charIndex:578},{level:3,title:"对象的方法",slug:"对象的方法",normalizedTitle:"对象的方法",charIndex:650},{level:2,title:"3.6.2数组:Array",slug:"_3-6-2数组-array",normalizedTitle:"3.6.2数组:array",charIndex:771},{level:3,title:"对数组的声明",slug:"对数组的声明",normalizedTitle:"对数组的声明",charIndex:789},{level:3,title:"数组的访问",slug:"数组的访问",normalizedTitle:"数组的访问",charIndex:1070},{level:3,title:"数组的方法",slug:"数组的方法",normalizedTitle:"数组的方法",charIndex:1115},{level:2,title:"3.6.3Json",slug:"_3-6-3json",normalizedTitle:"3.6.3json",charIndex:3267},{level:3,title:"json的方法",slug:"json的方法",normalizedTitle:"json的方法",charIndex:3313},{level:3,title:"json的访问：",slug:"json的访问",normalizedTitle:"json的访问：",charIndex:4633}],headersStr:"3.6.1对象:Object 对象的声明 对象的访问 对象的方法 3.6.2数组:Array 对数组的声明 数组的访问 数组的方法 3.6.3Json json的方法 json的访问：",content:'# 3.6.1对象:Object\n\nJavaScript 中的所有事物都是对象：字符串、数值、数组、函数...\n\n对象是属性的集合，每个属性都有名字和值，对象可以通过属性的名字存取属性的值。\n\n对象的属性既可以存放基本数据类型也可以存放其他对象的引用值或者函数的引用值，如果存储的是函数的的引用值则该属性称为方法\n\n对象可以看做带有属性和方法的特殊数据类型。\n\n对象包含两个基本要素：属性-值，也称作键-值/名-值;当属性值为方法时也称作：属性(字段)和方法(函数)\n\n\n# 对象的声明\n\n * 通过new运算符声明\n\nvar person = new Object();\n    person.name = "lisi";\n    person.age = 21;\n    person.family = ["lida","lier","wangwu"];\n\n\n * new关键字可以省略,属性可以用引号包含也可以不用\n\nvar people={\n\nname:\'宋江\',\n\nsex:\'男\',\n\nage:40\n\n}\n\n\n * ES6解构\n\nlet { foo, bar } = { foo: \'aaa\', bar: \'bbb\' };\nlet { bar, foo } = { foo: \'aaa\', bar: \'bbb\' };\n\n\n详见ES6专题\n\n\n# 对象的访问\n\n * 可以用点符号访问对象属性值也可以通过数组的方式，即用["属性名称"]\n\nalert(people[\'age\'])\n\n\n\n# 对象的方法\n\n * delete删除对象的属性。\n\ndelete people.age;\n\n\ndelete people[\'age\']\n\n\n * toUpperCase把文本转换为大写\n\nmessage.toUpperCase()\n\n\n\n# 3.6.2数组:Array\n\n\n# 对数组的声明\n\n * new关键字创建空数组\n\nvar arr=new Array();\n\n\n * new关键字创建包含元素的数组\n\nvar arr=new Array("html","css","javascript);\n\n\n * new关键字创建指定2个元素的数组\n\nvar arr=new Array(2);\n\n\n * 使用[]直接创建数组\n\nvar arr=[];\n\n\n * ES6解构\n\nlet [a, b, c] = [1, 2, 3];\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\n\n\n详见ES6专题\n\n\n# 数组的访问\n\n * 可以使用索引查询获取数组元素和添加数组元素\n\narr[0]\n\n\n\n# 数组的方法\n\n * length获取数组的长度，并且可以给一个数组赋值。\n\narr.length\n\n\n * push将新元素添加到数组尾部，返回新数据长度\n\narr.push("html"); \n\n\n * unshift将新元素添加到数组首位，返回新数据长度（IE不兼容）\n\narr.unshift("html");  \n\n\n * delete删除指定的元素，不改变数组长度\n\ndelete arr[1];arr[1]=undefined\n\n\n * pop删除并返回数组的末尾元素\n\narr.pop()\n\n\n * shift删除并返回数组的第一个元素\n\narr.shift()\n\n\n * toString将数组表示为字符串。\n\narr.toString()\n\n\n * join数组转字符串并通过\'\'符合分割\n\narr.join(\',\')//转成字符串，并通过逗号分割\n\n\nTIP\n\n * split通过\'\'将字符串分割成数组组\n\nstring.split(","); //通过逗号分割，转成数组\n\n\n * reverse颠倒数组元素的顺序，返回逆序后的新数组：\n\n  arr.reverse()\n\n\n * sort数组排序：\n\narr.sort(sortfunction)  //sortfunction排序函数（若省略则按照ASII字符顺序进行升序排列）\n\n\n * concat连接数组，将多个数组的元素合并为一个新的数组。\n\narr3=arr1.concat(arr2);\n\n\n * splice方法：删除、替换、插入元素(会更改原数组，返回值为裁切掉的数组)\n\n> splice(起始坐标，切去个数，插入元素1，插入元素2)\n> \n> > 第一参数为起始位置索引(包含起始位置)\n> > 第二参数为切取元素个数\n> > 第三个参数为插入元素，可选项\n\n[1,2,3,4,5,6].splice(3,2,4,4)  //[1,2,3,4,4,6]\n\n\n * slice切取数组的一段元素（不改变原数组，返回值为切取的新数组）：\n\n> slice(起始坐标，结束坐标)\n> \n> > 第一参数为起始位置索引 第二参数为结束位置索引（不包含结束位置，若省略则切取到结尾）\n\n[1,2,3,4,5,6].selice(2,4) //[3,4]\n\n\n * indexOf指定字符串在数组中首次出现的位置（从头找）\n\nvar fruits = ["苹果","香蕉", "橙子", "苹果", "甜瓜"];\n\tvar a = fruits.indexOf("苹果") // =0\n\n\n * lastIndexOf()指定字符串在数组中最后出现的位置\n\nvar fruits = ["苹果","香蕉", "橙子", "苹果", "甜瓜"];\n\tvar a = fruits.lastIndexOf("苹果") // =0\n\n\nTIP\n\n识别空格，如果没有找到匹配的字符串则返回 -1。\n\n * every检测数组所有元素是否都符合指定条件（函数），有一个元素不满足则返回false ，且剩余的元素不会再进行检测。所有元素都满足条件返回true\n\nvar ages = [32, 33, 16, 40];\nfunction checkAdult(age) {\n    return age >= 18;\n}\nages.every(checkAdult);\n\n\n * some用于检测数组中的元素是否满足指定条件（函数），一个元素满足则表达式返回true , 剩余的元素不会再执行检测。没有一个满足返回false。\n\nvar ages = [3, 10, 18, 20];\nfunction checkAdult(age) {\n    return age >= 18;\n}\nages.some(checkAdult);\n\n\nES6 箭头函数写法：\n\nvar ages = [3, 10, 18, 20];\nages.some(item=>item>8)\n\n\n * filter检测数组所有元素是否都符合指定条件（通过函数提供），并返回符合条件所有元素的数组。\n\nvar ages = [32, 33, 16, 40];\nfunction checkAdult(age) {\n    return age >= 18;\n}\nfunction myFunction() {\n    ages.filter(checkAdult);\n}\n\n\n * forEach用于调用数组的每个元素，并将元素传递给回调函数,详见3.4.7\n\narr.forEach(function () {})\n\n\n * map返回一个新数组，数组中的元素为原始数组元素调用函数处理后的，详见3.4.7\n\narr.map(function () {})\n\n\n * reduce将数组元素计算为一个值（从左到右）\n\nvar numbers = [65, 44, 12, 4];\nfunction getSum(total, num) {\n    return total + num;\n}\n numbers.reduce(getSum);\n\n\n\n\n# 3.6.3Json\n\nJson标准的数据交换格式：对象格式加“”\n“属性”，“值”\n\n\n# json的方法\n\n# string转json\n\n * eval\n\nvar json = eval("("+string+")")\n\n\n * JSON.parse\n\nvar json = JSON.parse(string);\n\n\nJSON.parse(text,reviver)的其他参数\n\nreviver\n\n> 一个转换结果的函数，将为对象的每个成员调用此函数\n\nvar text = \'{ "name":"Runoob", "initDate":"2013-12-14", "site":"www.runoob.com"}\';\nvar obj = JSON.parse(text, function (key, value) {\n\tif (key == "initDate") {\n\t    return new Date(value);\n\t} else {\n\t    return value;\n}});\n\nconsole.log(obj) \n// name: \'Runoob\', \n// initDate: Sat Dec 14 2013 08:00:00 GMT+0800 (中国标准时间), \n// site: \'www.runoob.com\'\n\n\n# json遍历\n\n * for/in,详见3.4.7\n\nlet obj = {a: \'1\', b: \'2\', c: \'3\', d: \'4\'}\nfor (let key in obj) {\n    console.log(key)    //对象的属性名称 a,b,c,d\n    console.log(key[o])  //对象的属性值1，2，3，4\n}\n\n\n# json转string\n\n * JSON.stringify\n\nvar string = JSON.stringify(json);\n\n\nJSON.stringify(value,replacer,space)的其他参数\n\nreplacer\n\n> 如果是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理\n> 如果是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的JSON字符串中\n> 如果该参数为null或者未提供，则对象所有的属性都会被序列化\n\nspace指定缩进用的空白字符串，用于美化输出；\n\n> 如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格\n> 如果该参数为字符串（当字符串长度超过10个字母，取其前10个字母），该字符串将被作为空格\n> 如果该参数没有提供（或者为 null），将没有空格\n\nvar data = {\n\tname: \'jaqi\',\n\tinfo: {\n\t\tage: 24,\n\t\tsex: \'male\'\n\t}\n}\n\nvar shy = JSON.stringify(data, null, 4)\n\n// {\n//    "name": "jaqi",\n//    "info": {\n//        "age": 18b,\n//        "sex": "male"\n//    }\n// }\n\n\n\n# json的访问：\n\nsuccess\n\nalert(object.ob); //访问属性\nalert(["ob"]); //=object.Ob访问属性\nalert([k])//访问属性\nalert(k)//访问属性名\n\n\nerror\n\nalert([ob]);\n\n\nTIP\n\n对象、数组、Json指向的是地址，而不是存储数据。\n\nvar obj1={name:”luck”};\n\nvar obj2=obj1; //obj1,obj2指向同一地址\n\nobj2.name=”lily”; //地址内容变成lily\n\nobj1.name→lily',normalizedContent:'# 3.6.1对象:object\n\njavascript 中的所有事物都是对象：字符串、数值、数组、函数...\n\n对象是属性的集合，每个属性都有名字和值，对象可以通过属性的名字存取属性的值。\n\n对象的属性既可以存放基本数据类型也可以存放其他对象的引用值或者函数的引用值，如果存储的是函数的的引用值则该属性称为方法\n\n对象可以看做带有属性和方法的特殊数据类型。\n\n对象包含两个基本要素：属性-值，也称作键-值/名-值;当属性值为方法时也称作：属性(字段)和方法(函数)\n\n\n# 对象的声明\n\n * 通过new运算符声明\n\nvar person = new object();\n    person.name = "lisi";\n    person.age = 21;\n    person.family = ["lida","lier","wangwu"];\n\n\n * new关键字可以省略,属性可以用引号包含也可以不用\n\nvar people={\n\nname:\'宋江\',\n\nsex:\'男\',\n\nage:40\n\n}\n\n\n * es6解构\n\nlet { foo, bar } = { foo: \'aaa\', bar: \'bbb\' };\nlet { bar, foo } = { foo: \'aaa\', bar: \'bbb\' };\n\n\n详见es6专题\n\n\n# 对象的访问\n\n * 可以用点符号访问对象属性值也可以通过数组的方式，即用["属性名称"]\n\nalert(people[\'age\'])\n\n\n\n# 对象的方法\n\n * delete删除对象的属性。\n\ndelete people.age;\n\n\ndelete people[\'age\']\n\n\n * touppercase把文本转换为大写\n\nmessage.touppercase()\n\n\n\n# 3.6.2数组:array\n\n\n# 对数组的声明\n\n * new关键字创建空数组\n\nvar arr=new array();\n\n\n * new关键字创建包含元素的数组\n\nvar arr=new array("html","css","javascript);\n\n\n * new关键字创建指定2个元素的数组\n\nvar arr=new array(2);\n\n\n * 使用[]直接创建数组\n\nvar arr=[];\n\n\n * es6解构\n\nlet [a, b, c] = [1, 2, 3];\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\n\n\n详见es6专题\n\n\n# 数组的访问\n\n * 可以使用索引查询获取数组元素和添加数组元素\n\narr[0]\n\n\n\n# 数组的方法\n\n * length获取数组的长度，并且可以给一个数组赋值。\n\narr.length\n\n\n * push将新元素添加到数组尾部，返回新数据长度\n\narr.push("html"); \n\n\n * unshift将新元素添加到数组首位，返回新数据长度（ie不兼容）\n\narr.unshift("html");  \n\n\n * delete删除指定的元素，不改变数组长度\n\ndelete arr[1];arr[1]=undefined\n\n\n * pop删除并返回数组的末尾元素\n\narr.pop()\n\n\n * shift删除并返回数组的第一个元素\n\narr.shift()\n\n\n * tostring将数组表示为字符串。\n\narr.tostring()\n\n\n * join数组转字符串并通过\'\'符合分割\n\narr.join(\',\')//转成字符串，并通过逗号分割\n\n\ntip\n\n * split通过\'\'将字符串分割成数组组\n\nstring.split(","); //通过逗号分割，转成数组\n\n\n * reverse颠倒数组元素的顺序，返回逆序后的新数组：\n\n  arr.reverse()\n\n\n * sort数组排序：\n\narr.sort(sortfunction)  //sortfunction排序函数（若省略则按照asii字符顺序进行升序排列）\n\n\n * concat连接数组，将多个数组的元素合并为一个新的数组。\n\narr3=arr1.concat(arr2);\n\n\n * splice方法：删除、替换、插入元素(会更改原数组，返回值为裁切掉的数组)\n\n> splice(起始坐标，切去个数，插入元素1，插入元素2)\n> \n> > 第一参数为起始位置索引(包含起始位置)\n> > 第二参数为切取元素个数\n> > 第三个参数为插入元素，可选项\n\n[1,2,3,4,5,6].splice(3,2,4,4)  //[1,2,3,4,4,6]\n\n\n * slice切取数组的一段元素（不改变原数组，返回值为切取的新数组）：\n\n> slice(起始坐标，结束坐标)\n> \n> > 第一参数为起始位置索引 第二参数为结束位置索引（不包含结束位置，若省略则切取到结尾）\n\n[1,2,3,4,5,6].selice(2,4) //[3,4]\n\n\n * indexof指定字符串在数组中首次出现的位置（从头找）\n\nvar fruits = ["苹果","香蕉", "橙子", "苹果", "甜瓜"];\n\tvar a = fruits.indexof("苹果") // =0\n\n\n * lastindexof()指定字符串在数组中最后出现的位置\n\nvar fruits = ["苹果","香蕉", "橙子", "苹果", "甜瓜"];\n\tvar a = fruits.lastindexof("苹果") // =0\n\n\ntip\n\n识别空格，如果没有找到匹配的字符串则返回 -1。\n\n * every检测数组所有元素是否都符合指定条件（函数），有一个元素不满足则返回false ，且剩余的元素不会再进行检测。所有元素都满足条件返回true\n\nvar ages = [32, 33, 16, 40];\nfunction checkadult(age) {\n    return age >= 18;\n}\nages.every(checkadult);\n\n\n * some用于检测数组中的元素是否满足指定条件（函数），一个元素满足则表达式返回true , 剩余的元素不会再执行检测。没有一个满足返回false。\n\nvar ages = [3, 10, 18, 20];\nfunction checkadult(age) {\n    return age >= 18;\n}\nages.some(checkadult);\n\n\nes6 箭头函数写法：\n\nvar ages = [3, 10, 18, 20];\nages.some(item=>item>8)\n\n\n * filter检测数组所有元素是否都符合指定条件（通过函数提供），并返回符合条件所有元素的数组。\n\nvar ages = [32, 33, 16, 40];\nfunction checkadult(age) {\n    return age >= 18;\n}\nfunction myfunction() {\n    ages.filter(checkadult);\n}\n\n\n * foreach用于调用数组的每个元素，并将元素传递给回调函数,详见3.4.7\n\narr.foreach(function () {})\n\n\n * map返回一个新数组，数组中的元素为原始数组元素调用函数处理后的，详见3.4.7\n\narr.map(function () {})\n\n\n * reduce将数组元素计算为一个值（从左到右）\n\nvar numbers = [65, 44, 12, 4];\nfunction getsum(total, num) {\n    return total + num;\n}\n numbers.reduce(getsum);\n\n\n\n\n# 3.6.3json\n\njson标准的数据交换格式：对象格式加“”\n“属性”，“值”\n\n\n# json的方法\n\n# string转json\n\n * eval\n\nvar json = eval("("+string+")")\n\n\n * json.parse\n\nvar json = json.parse(string);\n\n\njson.parse(text,reviver)的其他参数\n\nreviver\n\n> 一个转换结果的函数，将为对象的每个成员调用此函数\n\nvar text = \'{ "name":"runoob", "initdate":"2013-12-14", "site":"www.runoob.com"}\';\nvar obj = json.parse(text, function (key, value) {\n\tif (key == "initdate") {\n\t    return new date(value);\n\t} else {\n\t    return value;\n}});\n\nconsole.log(obj) \n// name: \'runoob\', \n// initdate: sat dec 14 2013 08:00:00 gmt+0800 (中国标准时间), \n// site: \'www.runoob.com\'\n\n\n# json遍历\n\n * for/in,详见3.4.7\n\nlet obj = {a: \'1\', b: \'2\', c: \'3\', d: \'4\'}\nfor (let key in obj) {\n    console.log(key)    //对象的属性名称 a,b,c,d\n    console.log(key[o])  //对象的属性值1，2，3，4\n}\n\n\n# json转string\n\n * json.stringify\n\nvar string = json.stringify(json);\n\n\njson.stringify(value,replacer,space)的其他参数\n\nreplacer\n\n> 如果是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理\n> 如果是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的json字符串中\n> 如果该参数为null或者未提供，则对象所有的属性都会被序列化\n\nspace指定缩进用的空白字符串，用于美化输出；\n\n> 如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格\n> 如果该参数为字符串（当字符串长度超过10个字母，取其前10个字母），该字符串将被作为空格\n> 如果该参数没有提供（或者为 null），将没有空格\n\nvar data = {\n\tname: \'jaqi\',\n\tinfo: {\n\t\tage: 24,\n\t\tsex: \'male\'\n\t}\n}\n\nvar shy = json.stringify(data, null, 4)\n\n// {\n//    "name": "jaqi",\n//    "info": {\n//        "age": 18b,\n//        "sex": "male"\n//    }\n// }\n\n\n\n# json的访问：\n\nsuccess\n\nalert(object.ob); //访问属性\nalert(["ob"]); //=object.ob访问属性\nalert([k])//访问属性\nalert(k)//访问属性名\n\n\nerror\n\nalert([ob]);\n\n\ntip\n\n对象、数组、json指向的是地址，而不是存储数据。\n\nvar obj1={name:”luck”};\n\nvar obj2=obj1; //obj1,obj2指向同一地址\n\nobj2.name=”lily”; //地址内容变成lily\n\nobj1.name→lily',charsets:{cjk:!0}},{title:"3.13.1基本概念",frontmatter:{},regularPath:"/frontend/javascript/reg/",relativePath:"frontend/javascript/reg/README.md",key:"v-0f5372b2",path:"/frontend/javascript/reg/",headers:[{level:2,title:"3.13.1基本概念",slug:"_3-13-1基本概念",normalizedTitle:"3.13.1基本概念",charIndex:2},{level:2,title:"3.13.2事例：",slug:"_3-13-2事例",normalizedTitle:"3.13.2事例：",charIndex:1162},{level:2,title:"3.13.3正则表达式方法",slug:"_3-13-3正则表达式方法",normalizedTitle:"3.13.3正则表达式方法",charIndex:2135}],headersStr:"3.13.1基本概念 3.13.2事例： 3.13.3正则表达式方法",content:"# 3.13.1基本概念\n\n# 正则：处理字符串的一种规则。\n\n# 正则匹配：验证当前字符串是否符合该规则的子串。\n\n# 正则捕获：获取符合规则的字符。\n\n# 修饰符：\n\n * /后的表示修饰符\n\n> i(ignoreCase)忽略大小写\n> g(global)全局匹配\n> m(multiline)多行匹配\n\n# 元字符：\n\n * / /中的内容\n\n# 特殊的元字符\n\n * \\d 0~9任意一个数字\n\n * \\D 非0~9之间的任意字符\n\n * \\w 字母、数字或者下划线\n\n * \\W 非字母、数字下划线\n\n * \\s 匹配任意一个空白字符（包括制表符tab键）\n\n * \\b 匹配边界符（\"hello\"\"\"为hello的左右边界符）\n\n * \\n 匹配一个换行符\n\n * \\ 转义字符 可以把一个普通字符转换成特殊字符，也可以把特殊的转成普通的 (.小数点)\n\n * . 表示除了\\n之外的任意字符\n\n * ^ 以某个字符开头\n\n * $ 以某个字符结尾\n\n * a|b a或者b任意个\n\n * [abc] a或b或c任意个\n\n * [^abc] 除了a/b/c之外的\n\n * [a-z] a到z任意一个字母（[0-9]→\\d）\n\n * [^a-z]a到z之外的任意字符\n\n# 捕获贪婪性：\n\n * ()分组\n\n * ? 表示阻止正则捕获\n\n * (?:)分组捕获,当前分组只匹配不捕获\n\n * (?=)前瞻*ES6新增\n\n// 查找以5结尾的a\nlet str = '1a2a3a4a5a6a'\nvar n=str.replace(/a(?=5)/,'替换'); //  1a2a3a4替换5a6a  \n\n\n * (?<=)后瞻*ES2018新增，除chrome以外大部分浏览器都不支持，谨慎使用！\n\n// 查找以5开头的a\nlet str = '1a2a3a4a5a6a'\nvar n=str.replace(/(?<=5)a/,'替换'); //  1a2a3a4a5替换6a  \n\n\n * (?!)反向预查\n\n# 量词元字符\n\n * * 出现零到多次→{0，}\n\n * ? 出现零到一次→{0，1}(?取消贪婪性、?:只匹配不捕获、?=)\n\n * + 出现一次到多次→{1，}\n\n * {m}出现m次\n\n * {m,} 出现至少m次\n\n * {m,n} 出现m到n次\n\n# 普通元字符\n\n正则定义： var arr= [] 或 var arr = new Array();\n\n1.正则字面量：var reg=/\\d/g; /d 表示元字符，/表示修饰符\n\n2.new创建：var reg2 = new RegExp(\"\\d\",\"g\");\n\n必须是一个符号并且是x： var reg = /^x$/;\n\n\n# 3.13.2事例：\n\n 1. 以m开头 至少2个n 最多5个n\n\nvar reg = /^mn{2,5}$/;\n\n\n 2. 6个5：\n\nvar reg = /^5{6}$/;\n\n\n 3. 邮编：\n\nvar reg = /^[0-9]{6}$/; \n\n\n 4. 判断用户名字母数字下划线长度范围6~16：\n\nvar reg = /^\\w{6,16}$/;\n\n\n 5. 判断用户名字母数字下划线不能以数字开头长度范围6~16：\n\nvar reg = /^[a-zA-Z_]\\w{5,15}$/;\n\n\n 6. 至少6位密码\n\nvar reg = /^.{6,}$/；\n\n\n 7. 要求输入网址必须是www.sina.com\n\nvar reg = /^www\\.sina\\.com$/;/\n\n\n 8. 要求输入 8+9：\n\nvar reg = /^8\\+9$/;// \n\n\n 9. 手机号码 以13开头或以15开头：\n\nvar reg = /^1[35]\\d{9}$/;  \n//或\nvar reg = /^1(3|5)\\d{9}$/;\n//或\nvar reg = /^(13|15)\\d{9}$/;\n\n\n 10. 请输入汉字（unicode范围）：\n\nvar reg = /^[\\u4e00-\\u9fa5]+$/;\n\n\n 11. 18-65：\n\nvar reg = /^((1[89])|([2-5][0-9])|(6[0-5]))$/; \n\n\n 12. 邮箱：用户名@163.com . .. ... ***--.* 要求：用户名 数字 字母 下划线— 不能以.或-开头 不能连续—或.\n\nvar reg4 = /^\\w+([-.]\\w+)*@[a-zA-Z0-9]+([-.][a-zA-Z0-9]+)(\\.[a-zA-Z0-9]+)$/;\n\n\n 13. 书名号里面的标题\n\n/《([^《|》]*)》/\n\n\n 14. (〔 〕)查询法规标题\n\n/[（\\(][a-zA-Z0-9\\u4e00-\\u9fa5]*?〔{1}.*?〕{1}[a-zA-Z0-9\\u4e00-\\u9fa5]*?[）\\)]/\n\n\n注意：\n\n 1. 中括号里面的字符绝大多数是普通的字符\n 2. 中括号出现的两位数 不是数学的两位数：[18-65]表示1或者8到6或者5\n\n\n# 3.13.3正则表达式方法\n\n * test正则检测,返回true/false\n\nvar reg = new RegExp(/\\s/);\nreg.test(str) \n\n\n * exec正则捕获，有匹配的值返回该匹配值，否则返回 null。\n\nvar reg = new RegExp(/\\s/);\nreg.exec(str)\n\n\n * match返回全部符合的元素\n\n * search返回符合元素的索引（忽略/g）\n\n * replace函数的返回值替换符合正则的元素 详见3.9.1",normalizedContent:"# 3.13.1基本概念\n\n# 正则：处理字符串的一种规则。\n\n# 正则匹配：验证当前字符串是否符合该规则的子串。\n\n# 正则捕获：获取符合规则的字符。\n\n# 修饰符：\n\n * /后的表示修饰符\n\n> i(ignorecase)忽略大小写\n> g(global)全局匹配\n> m(multiline)多行匹配\n\n# 元字符：\n\n * / /中的内容\n\n# 特殊的元字符\n\n * \\d 0~9任意一个数字\n\n * \\d 非0~9之间的任意字符\n\n * \\w 字母、数字或者下划线\n\n * \\w 非字母、数字下划线\n\n * \\s 匹配任意一个空白字符（包括制表符tab键）\n\n * \\b 匹配边界符（\"hello\"\"\"为hello的左右边界符）\n\n * \\n 匹配一个换行符\n\n * \\ 转义字符 可以把一个普通字符转换成特殊字符，也可以把特殊的转成普通的 (.小数点)\n\n * . 表示除了\\n之外的任意字符\n\n * ^ 以某个字符开头\n\n * $ 以某个字符结尾\n\n * a|b a或者b任意个\n\n * [abc] a或b或c任意个\n\n * [^abc] 除了a/b/c之外的\n\n * [a-z] a到z任意一个字母（[0-9]→\\d）\n\n * [^a-z]a到z之外的任意字符\n\n# 捕获贪婪性：\n\n * ()分组\n\n * ? 表示阻止正则捕获\n\n * (?:)分组捕获,当前分组只匹配不捕获\n\n * (?=)前瞻*es6新增\n\n// 查找以5结尾的a\nlet str = '1a2a3a4a5a6a'\nvar n=str.replace(/a(?=5)/,'替换'); //  1a2a3a4替换5a6a  \n\n\n * (?<=)后瞻*es2018新增，除chrome以外大部分浏览器都不支持，谨慎使用！\n\n// 查找以5开头的a\nlet str = '1a2a3a4a5a6a'\nvar n=str.replace(/(?<=5)a/,'替换'); //  1a2a3a4a5替换6a  \n\n\n * (?!)反向预查\n\n# 量词元字符\n\n * * 出现零到多次→{0，}\n\n * ? 出现零到一次→{0，1}(?取消贪婪性、?:只匹配不捕获、?=)\n\n * + 出现一次到多次→{1，}\n\n * {m}出现m次\n\n * {m,} 出现至少m次\n\n * {m,n} 出现m到n次\n\n# 普通元字符\n\n正则定义： var arr= [] 或 var arr = new array();\n\n1.正则字面量：var reg=/\\d/g; /d 表示元字符，/表示修饰符\n\n2.new创建：var reg2 = new regexp(\"\\d\",\"g\");\n\n必须是一个符号并且是x： var reg = /^x$/;\n\n\n# 3.13.2事例：\n\n 1. 以m开头 至少2个n 最多5个n\n\nvar reg = /^mn{2,5}$/;\n\n\n 2. 6个5：\n\nvar reg = /^5{6}$/;\n\n\n 3. 邮编：\n\nvar reg = /^[0-9]{6}$/; \n\n\n 4. 判断用户名字母数字下划线长度范围6~16：\n\nvar reg = /^\\w{6,16}$/;\n\n\n 5. 判断用户名字母数字下划线不能以数字开头长度范围6~16：\n\nvar reg = /^[a-za-z_]\\w{5,15}$/;\n\n\n 6. 至少6位密码\n\nvar reg = /^.{6,}$/；\n\n\n 7. 要求输入网址必须是www.sina.com\n\nvar reg = /^www\\.sina\\.com$/;/\n\n\n 8. 要求输入 8+9：\n\nvar reg = /^8\\+9$/;// \n\n\n 9. 手机号码 以13开头或以15开头：\n\nvar reg = /^1[35]\\d{9}$/;  \n//或\nvar reg = /^1(3|5)\\d{9}$/;\n//或\nvar reg = /^(13|15)\\d{9}$/;\n\n\n 10. 请输入汉字（unicode范围）：\n\nvar reg = /^[\\u4e00-\\u9fa5]+$/;\n\n\n 11. 18-65：\n\nvar reg = /^((1[89])|([2-5][0-9])|(6[0-5]))$/; \n\n\n 12. 邮箱：用户名@163.com . .. ... ***--.* 要求：用户名 数字 字母 下划线— 不能以.或-开头 不能连续—或.\n\nvar reg4 = /^\\w+([-.]\\w+)*@[a-za-z0-9]+([-.][a-za-z0-9]+)(\\.[a-za-z0-9]+)$/;\n\n\n 13. 书名号里面的标题\n\n/《([^《|》]*)》/\n\n\n 14. (〔 〕)查询法规标题\n\n/[（\\(][a-za-z0-9\\u4e00-\\u9fa5]*?〔{1}.*?〕{1}[a-za-z0-9\\u4e00-\\u9fa5]*?[）\\)]/\n\n\n注意：\n\n 1. 中括号里面的字符绝大多数是普通的字符\n 2. 中括号出现的两位数 不是数学的两位数：[18-65]表示1或者8到6或者5\n\n\n# 3.13.3正则表达式方法\n\n * test正则检测,返回true/false\n\nvar reg = new regexp(/\\s/);\nreg.test(str) \n\n\n * exec正则捕获，有匹配的值返回该匹配值，否则返回 null。\n\nvar reg = new regexp(/\\s/);\nreg.exec(str)\n\n\n * match返回全部符合的元素\n\n * search返回符合元素的索引（忽略/g）\n\n * replace函数的返回值替换符合正则的元素 详见3.9.1",charsets:{cjk:!0}},{title:"3.9.1字符串string",frontmatter:{},regularPath:"/frontend/javascript/string/",relativePath:"frontend/javascript/string/README.md",key:"v-5d20935d",path:"/frontend/javascript/string/",headers:[{level:2,title:"3.9.1字符串string",slug:"_3-9-1字符串string",normalizedTitle:"3.9.1字符串string",charIndex:2},{level:2,title:"3.9.2字符串的声明",slug:"_3-9-2字符串的声明",normalizedTitle:"3.9.2字符串的声明",charIndex:76},{level:2,title:"3.9.3对象的方法",slug:"_3-9-3对象的方法",normalizedTitle:"3.9.3对象的方法",charIndex:133}],headersStr:"3.9.1字符串string 3.9.2字符串的声明 3.9.3对象的方法",content:'# 3.9.1字符串string\n\n字符串是非常重要的数据类型，除了基本字符串外，JavaScript还提供了字符串的引用类型--字符串对象。\n\n\n# 3.9.2字符串的声明\n\n可以通过new 关键字创建字符串对象\n\nvar str=new String\n\n\n\n# 3.9.3对象的方法\n\n * length获取字符串的长度。\n\narr.length\n\n\n * toString返回字符串。可以将数值转换成字符串。\n\narr.toString\n\n\nTIP\n\n如果需要获取数值的二进制、八进制、十六进制的字符串表示，则可以给toString传递一个表示进制的的整数\n\n * parseInt将字符串转换成整数。\n\n> parseInt(string, radix)\n> \n> > string必需,要被解析的字符串。\n> > radix可选,表示要解析的数字的基数。 遇到小数点会停止解析 可以把二进制、八进制、十六进制或其他任何进制的字符串转换成整数\n\nparseInt("10.33");\t\t\t//返回 10\nparseInt("19",10);\t\t//返回 19 (10+9)\nparseInt("11",2);\t\t//返回 3 (2+1)\nparseInt("17",8);\t\t//返回 15 (8+7)\nparseInt("1f",16);\t\t//返回 31 (16+15)\nparseInt("010");\t\t//未定：返回 10 或 8\n\n\n * parseFloat将字符串转换浮点数。 如果第一个字符是数字字符，parseInt() 会继续解析第二个字符，直到解析完所有后续字符串或者遇到了一个非数字字符。\n\nparseInt("10.33") //10.33\n\n\nWARNING\n\nparseInt/parseFloat不能转换非数字字符串.遇到非数字字符为止.如果开头是非数字字符串，则返回NaN\n\n * Number将任意类型的值转换数值。\n\n> 布尔值返回0/1 null返回0 undefined返回NaN 字符串：\n> \n> > 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导0 如果字符串中包含有效浮点格式，如"1.1"，将其转换为对应的浮点数字，忽略前导0 如果字符串中包含有效的十六进制格式，如"0xf"，将其转换为相同大小的十进制数值 如果字符串为空，将其转换为0 如果字符串中包含除上述格式之外的字符，则将其转换为NaN 对象：则调用对象的valueOf方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString方法，然后再依照前面的规则转换返回的字符串值。\n\nvar num1 = Number("Hello world");　　//NaN\nvar num2 = Number("");　　　　　　　　//0\nvar num3 = Number("0000011");　　　　//11\n\n\n * isNaN用于检查参数是否是非数字值 NaN=true 其他值=false\n\nisNaN(string)\n\n\n * charAt返回指定索引位置的字符。\n\n\tvar str="HELLO WORLD";\n\tvar n=str.charAt(1);//=E\n\n\n * charCodeAt返回指定索引位置字符的 Unicode 值。\n\nvar str="HELLO WORLD";\nvar n=str.charCodeAt(1); //=69\n\n\n * concat连接字符串。var n = str1.concat(str2,str3);\n\nvar n=txt1.concat(txt2);\n\n\n * slice提取字符串索引n到m之间的片断(不包括m位置的字符串)，并在新的字符串中返回被提取的部分，-1表示最后一个，-2表示最后2个。\n\nvar str="Hello world!";\nvar n=str.slice(2,3));//l\n\n\n * substring提取字符串中两个指定的索引号之间的字符，不包含结尾字符。\n\nvar str="Hello world!";\nvar n=str.substring(2,3));//l\n\n\n * substr从索引号n开始提取字符串中m个字符。\n\nvar str="Hello world!";\nvar n=str.substr(2,3); //llo\n\n\nTIP\n\nslice/substring/substr区别\n\n 1. slice/substring第二次参数指定的是字符串最后一个字符后面的位置（都不包含最后一个字符），substr第二个参数指定返回的字符串个数。\n 2. slice支持复数（-1表示最后一个，-2表示最后2个。），substring填负数，先当与0\n 3. 第二个参数不填默认都是取到结尾\n\n * indexOf检索字符串,返回某个指定的字符串值在字符串中首次出现的位置。如果查找不到会返回 -1\n\nvar str="Hello world, welcome to the universe.";\n\tvar n=str.indexOf("welcome"); // =13\n\n\n * lastIndexOf从后向前检索指定字符串。\n\n\tvar str="Hello world, welcome to the universe.welcome";\n\tvar n=str.indexOf("welcome"); // =37\n\n\nTIP\n\n识别空格，如果没有找到匹配的字符串则返回 -1。\n\n * toLowerCase把字符串转换为小写。\n\nstring.toLowerCase()\n\n\n * toUpperCase把字符串转换为大写。\n\nstring.toUpperCase()\n\n\n * match找到一个或多个正则表达式的匹配。该方法会返回一个数组，数组中包含了所有符合条件的文本。\n\nvar str="The rain in SPAIN stays mainly in the plain"; \nvar n=str.match(/ain/g); v//ain,ain,ain\n\n\n * replace替换与正则表达式匹配的子串，并返回替换后的字符串，注意原字符串不会改变\n\nvar str=document.getElementById("demo").innerHTML; \nvar n=str.replace("Microsoft","Runoob");\n\n\nTIP\n\n# 替换全部\n\n 1. replaceAll\n 2. replace(/RegExp/g, str); //RegExp正则表达式\n\n    var str = "test-test-test".replace(/test/g, "ok");\n\n\n * search检索与正则表达式相匹配的值。查找与参数模式相匹配的文本，并返回该文本的位置。若无则返回null(indexOf会返回-1).与indexOf相似。\n\nvar str="Visit Runoob!"; \nvar n=str.search("Runoob"); //n=6\n\n\n * split把字符串分割为字符串数组。\n\nstring.split(","); //通过逗号分割，转成数组\n\n\n * trim去掉字符串两端的多余空格。\n\nstring.trim();\n\n\nTIP\n\n需要注意的是，JavaScript的字符串是不可变的（immutable），String 类定义的方法都不能改变字符串的内容。像String.toUpperCase这样的方法，返回的是全新的字符串，而不是修改原始字符串。',normalizedContent:'# 3.9.1字符串string\n\n字符串是非常重要的数据类型，除了基本字符串外，javascript还提供了字符串的引用类型--字符串对象。\n\n\n# 3.9.2字符串的声明\n\n可以通过new 关键字创建字符串对象\n\nvar str=new string\n\n\n\n# 3.9.3对象的方法\n\n * length获取字符串的长度。\n\narr.length\n\n\n * tostring返回字符串。可以将数值转换成字符串。\n\narr.tostring\n\n\ntip\n\n如果需要获取数值的二进制、八进制、十六进制的字符串表示，则可以给tostring传递一个表示进制的的整数\n\n * parseint将字符串转换成整数。\n\n> parseint(string, radix)\n> \n> > string必需,要被解析的字符串。\n> > radix可选,表示要解析的数字的基数。 遇到小数点会停止解析 可以把二进制、八进制、十六进制或其他任何进制的字符串转换成整数\n\nparseint("10.33");\t\t\t//返回 10\nparseint("19",10);\t\t//返回 19 (10+9)\nparseint("11",2);\t\t//返回 3 (2+1)\nparseint("17",8);\t\t//返回 15 (8+7)\nparseint("1f",16);\t\t//返回 31 (16+15)\nparseint("010");\t\t//未定：返回 10 或 8\n\n\n * parsefloat将字符串转换浮点数。 如果第一个字符是数字字符，parseint() 会继续解析第二个字符，直到解析完所有后续字符串或者遇到了一个非数字字符。\n\nparseint("10.33") //10.33\n\n\nwarning\n\nparseint/parsefloat不能转换非数字字符串.遇到非数字字符为止.如果开头是非数字字符串，则返回nan\n\n * number将任意类型的值转换数值。\n\n> 布尔值返回0/1 null返回0 undefined返回nan 字符串：\n> \n> > 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导0 如果字符串中包含有效浮点格式，如"1.1"，将其转换为对应的浮点数字，忽略前导0 如果字符串中包含有效的十六进制格式，如"0xf"，将其转换为相同大小的十进制数值 如果字符串为空，将其转换为0 如果字符串中包含除上述格式之外的字符，则将其转换为nan 对象：则调用对象的valueof方法，然后依照前面的规则转换返回的值。如果转换的结果是nan，则调用对象的tostring方法，然后再依照前面的规则转换返回的字符串值。\n\nvar num1 = number("hello world");　　//nan\nvar num2 = number("");　　　　　　　　//0\nvar num3 = number("0000011");　　　　//11\n\n\n * isnan用于检查参数是否是非数字值 nan=true 其他值=false\n\nisnan(string)\n\n\n * charat返回指定索引位置的字符。\n\n\tvar str="hello world";\n\tvar n=str.charat(1);//=e\n\n\n * charcodeat返回指定索引位置字符的 unicode 值。\n\nvar str="hello world";\nvar n=str.charcodeat(1); //=69\n\n\n * concat连接字符串。var n = str1.concat(str2,str3);\n\nvar n=txt1.concat(txt2);\n\n\n * slice提取字符串索引n到m之间的片断(不包括m位置的字符串)，并在新的字符串中返回被提取的部分，-1表示最后一个，-2表示最后2个。\n\nvar str="hello world!";\nvar n=str.slice(2,3));//l\n\n\n * substring提取字符串中两个指定的索引号之间的字符，不包含结尾字符。\n\nvar str="hello world!";\nvar n=str.substring(2,3));//l\n\n\n * substr从索引号n开始提取字符串中m个字符。\n\nvar str="hello world!";\nvar n=str.substr(2,3); //llo\n\n\ntip\n\nslice/substring/substr区别\n\n 1. slice/substring第二次参数指定的是字符串最后一个字符后面的位置（都不包含最后一个字符），substr第二个参数指定返回的字符串个数。\n 2. slice支持复数（-1表示最后一个，-2表示最后2个。），substring填负数，先当与0\n 3. 第二个参数不填默认都是取到结尾\n\n * indexof检索字符串,返回某个指定的字符串值在字符串中首次出现的位置。如果查找不到会返回 -1\n\nvar str="hello world, welcome to the universe.";\n\tvar n=str.indexof("welcome"); // =13\n\n\n * lastindexof从后向前检索指定字符串。\n\n\tvar str="hello world, welcome to the universe.welcome";\n\tvar n=str.indexof("welcome"); // =37\n\n\ntip\n\n识别空格，如果没有找到匹配的字符串则返回 -1。\n\n * tolowercase把字符串转换为小写。\n\nstring.tolowercase()\n\n\n * touppercase把字符串转换为大写。\n\nstring.touppercase()\n\n\n * match找到一个或多个正则表达式的匹配。该方法会返回一个数组，数组中包含了所有符合条件的文本。\n\nvar str="the rain in spain stays mainly in the plain"; \nvar n=str.match(/ain/g); v//ain,ain,ain\n\n\n * replace替换与正则表达式匹配的子串，并返回替换后的字符串，注意原字符串不会改变\n\nvar str=document.getelementbyid("demo").innerhtml; \nvar n=str.replace("microsoft","runoob");\n\n\ntip\n\n# 替换全部\n\n 1. replaceall\n 2. replace(/regexp/g, str); //regexp正则表达式\n\n    var str = "test-test-test".replace(/test/g, "ok");\n\n\n * search检索与正则表达式相匹配的值。查找与参数模式相匹配的文本，并返回该文本的位置。若无则返回null(indexof会返回-1).与indexof相似。\n\nvar str="visit runoob!"; \nvar n=str.search("runoob"); //n=6\n\n\n * split把字符串分割为字符串数组。\n\nstring.split(","); //通过逗号分割，转成数组\n\n\n * trim去掉字符串两端的多余空格。\n\nstring.trim();\n\n\ntip\n\n需要注意的是，javascript的字符串是不可变的（immutable），string 类定义的方法都不能改变字符串的内容。像string.touppercase这样的方法，返回的是全新的字符串，而不是修改原始字符串。',charsets:{cjk:!0}},{title:"3.5.1 基本概念",frontmatter:{},regularPath:"/frontend/javascript/function/",relativePath:"frontend/javascript/function/README.md",key:"v-13ae9fbd",path:"/frontend/javascript/function/",headers:[{level:2,title:"3.5.1 基本概念",slug:"_3-5-1-基本概念",normalizedTitle:"3.5.1 基本概念",charIndex:2},{level:2,title:"3.5.2 函数的声明和调用",slug:"_3-5-2-函数的声明和调用",normalizedTitle:"3.5.2 函数的声明和调用",charIndex:179},{level:2,title:"3.5.3 带有返回值的函数",slug:"_3-5-3-带有返回值的函数",normalizedTitle:"3.5.3 带有返回值的函数",charIndex:432},{level:2,title:"3.5.4 arguments 对象",slug:"_3-5-4-arguments-对象",normalizedTitle:"3.5.4 arguments 对象",charIndex:627},{level:2,title:"3.5.5 函数上下文与this关键字",slug:"_3-5-5-函数上下文与this关键字",normalizedTitle:"3.5.5 函数上下文与this关键字",charIndex:1089},{level:2,title:"3.5.6 call和apply",slug:"_3-5-6-call和apply",normalizedTitle:"3.5.6 call和apply",charIndex:4215}],headersStr:"3.5.1 基本概念 3.5.2 函数的声明和调用 3.5.3 带有返回值的函数 3.5.4 arguments 对象 3.5.5 函数上下文与this关键字 3.5.6 call和apply",content:'# 3.5.1 基本概念\n\n * 函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。\n\n * JavaScript函数语法:函数就是包裹在花括号中的代码块：\n\n> function 函数名()\n> {\n>  这里是要执行的代码\n> }\n\n * 形参(parameter)：函数定义时的变量\n * 实参(argument)：函数调用时的变量\n\n\n# 3.5.2 函数的声明和调用\n\n * 使用关键词function来声明函数\n\n * 关键词function必须是小写的，并且必须以与函数名称相同的大小写来调用函数。\n\n * 函数本身不会自动运行，只有当调用该函数时，才会执行函数内的代码。\n\n * 函数可以通过其名字加上括号中的参数进行调用\n\n * 可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由JavaScript在任何位置进行调用。\n\n * 在调用函数时，您可以向其传递值，这些值被称为参数。带有参数的函数也被称为有参函数。\n\n\n# 3.5.3 带有返回值的函数\n\n * 有时，我们会希望函数将值返回调用它的地方。通过使用return语句就可以实现。\n\n * 在使用return语句时，函数会停止执行，并返回指定的值。\n\n * 可以将返回值赋值给一个变量，然后对变量进行操作\n\n * 当函数遇到第一个return后将终止执行函数后边的语句，直接跳出函数\n\n * 当函数没有return时，返回值是undefined\n\n\n# 3.5.4 arguments 对象\n\n在函数代码中，使用特殊对象arguments存储函数调用传递给该函数的所以参数（只能函数内部使用）。\n\nfunction fn(a,b,c,d){\n  console.log(arguments[0]) //获取函数的第一个参数\n  console.log(arguments.callee) // 获取函数本身\n  console.log(arguments.length) // 获取实参个数\n  console.log(fn.length) // 获取形参个数\n  console.log(arguments.callee.length) // 获取形参个数\n}\n\n\nvar x= 20;\nfunction fn(m,n,x){\n  console.log(x);  // 3\n  arguments[2]=20\n  console.log(x);  // 3\n}\nx= fn(1,2,3);\nconsole.log(x); // fn没有返回值 undefined\n\n\n\n# 3.5.5 函数上下文与this关键字\n\n面向对象语言中this表示当前对象的一个引用、但在JavaScript中this不是固定不变的，它会随着执行环境的改变而改变。\n\n 1. 在对象中，this指向该方法所属的对象。\n\nvar person = {\n  firstName: "John",\n  lastName : "Doe",\n  id: 5566,\n  fullName : function() {\n     console.log(this); \n  }\n};\n\nperson.fullName()  // fullName方法所属的对象是person所以this指向person\n\nwindow.person.fullName()  // this指向person（该方所属的对象是person）\n\nvar i = person.fullName() // this指向person（该方所属的对象是person）\n\nvar j = person.fullName  // j = function(){console.log(this);}\nj()    //   此时j所属对象是window，所以this指向window\n\n\n对象嵌套案例：\n\nvar a = 0\nvar obj1 = {\n  a: 10,\n  fn1: {\n    a: 20,\n    fn2: {\n      a: 30,\n      fn3: function () {\n        console.log(this.a)\n      }\n    }\n  }\n}\n\nvar obj2 = {\n  a: 50,\n  fnA: obj1.fn1.fn2.fn3(),\n  fnB: obj1.fn1.fn2.fn3\n}\n\nobj1.fn1.fn2.fn3() //  a=30  this指向fn3所属对象fn2\n\nobj2.fnA //  a=30   this指向fn3所属对象fn2\n\n// fnB=function(){console.log(this.a)} fnB方法所属的对象是obj2\nobj2.fnB() // this指向obj2 a=50 \n\n// i=function(){console.log(this.a)}  i方法所属的对象是window\nvar i = obj1.fn1.fn2.fn3\ni() // 所以this指向window a=0\n\n\n数组：\n\nfunction fn1(a,b,c,d,e,f){\n  console.log(arguments.callee.length) // fn1的形参个数 6\n  console.log(this) // fn2的arguments数组\n  console.log(this.callee.length) // fn2形参个数 8\n}\n\nfunction fn2(a,b,c,d,e,f,m,n){\n  arguments[0](9,10,11,12,13); //fn1(9,10,11,12,13) 相当于arguments数组元素调用fn1\n}\n\nfn2(fn1,5,6,7)\n\n\nfunction fn1(f,a,b,c){\n\targuments[0](5,8); // fn2(5,8)\n}\n\nfunction fn2(i,j,k,l,,m){\n\tconsole.log(this.length) // fn1的arguments数组长度(实参) 6\n\tconsole.log(this.callee.length) // fn1 形参个数 4 \n\tconsole.log(arguments.length) // fn2的实参个数 2\n\tconsole.log(arguments.callee.length) // fn2的形参个数 5\n}\n\nfn1(fn2,2,4,6,8,10)\n\n\n 2. 如果单独使用，this指向全局对象。\n\nvar x = this; // 在浏览器中指向window\n\n\n 3. 在函数中，this指向调用它的对象。自执行函数指向window，严格模式下是undefined\n\nfunction a(){\n    console.log(this); \n}\n\na();//Window\n\n\n 4. 在箭头函数中，this继承定义时所在作用域链上一层的this\n\n * 箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this，\n * 箭头函数中的this在定义函数时就已经确定了不能更改，\n * 箭头函数不能用call、apply方法修改里面的this,\n\nvar a = 0\nvar obj2 ={\n\ta:10,\n\tfnA:() => { \n\tconsole.log(this.a) \n\t},\n\tb:{\n\t\ta:20,\n\t\tfnB:() => {\n\t\tconsole.log(this.a) \n\t\t},\n\t},\n\tc: function() {\n     return ()=>{\n           console.log(this.a); \n     }\n  }\n}\nobj2.fnA.call() // 箭头函数继承对象的this，对象的this是window a=0\nobj2.b.fnB() // 0 箭头函数继承对象的this，对象和子对象的this都是window a=0\nvar a = 0\nvar obj ={\n\ta:10,\n\tfnA:() => { \n\tconsole.log(this.a) \n\t},\n\tb:{\n\t\ta:20,\n\t\tfnB:() => {\n\t\tconsole.log(this.a) \n\t\t},\n\t},\n\tc: function() {\n     return ()=>{\n           console.log(this.a); \n     }\n  }\n}\nobj.fnA.call() // 箭头函数继承对象的this，对象的this是window a=0\nobj.b.fnB() // 0 箭头函数继承对象的this，对象和子对象的this都是window a=0\nobj.b.fnB.apply(obj) // call apply 不能修改箭头函数的继承\nobj.c()() // 10 // 箭头函数继承c的this，c的this是obj  a=10\nobj2.c()() // 10 // 箭头函数继承c的this，c的this是obj2  a=10\n\n\n箭头函数详见3.16.3\n\n 5. 在事件中，this表示指向接收事件的DOM元素。\n\n<button onclick="console.log(this)">this</button>  \n\n\n 6. 在setTimeout、setInterval中，this指向window。\n\n 7. 类似call()和apply()方法可以将this引用到任何对象。\n\nvar person1 = {\n  fullName: function() {\n  console.log(this); // this指向person2\n  }\n}\n\nvar person2 = {\n  firstName:"John",\n  lastName: "Doe",\n}\n\nvar x = person1.fullName.call(person2);  // call的第一个参数是this的指向\n\n\n\n# 3.5.6 call和apply\n\ncall也可以调用函数,它的参数除了接受实际参数外,还可以接受一个参数代表。\n\nfn.call(obj,1,2,3,4)  // this指向call的第一个参数obj\n\n\napply与call基本功能相同，传参语法不同,实参需要[]括起。\n\nfn.apply (obj,[1,2,3,4]) // this指向apply的第一个参数obj\n\n\n * 案例：\n\nvar length = 10;\n\nfunction fn(){\n  alert(this.length)\n}\n\nvar obj ={\n  length:5,\n  method:function(fn){\n    alert(this===obj) // true\n    fn();  // window.fn() this -> window  10\n    fn.call(this);  // obj  5\n    arguments[0]()  // fn()   this -> arguments  1\n  }\n}\n\nobj.method(fn)\n\n\nfunction A(){\n  this.m = 10; \n}\n\nfunction B(){\n  this.m = 20; \n}\n\nA.call(B); // B.m = 10\nB.call(A); // A.m = 20\n\nvar a = new A(); // 10\nvar b = new B(); // 20\n\nconsole.log(a.m==B.m) // 10  10\nconsole.log(b.m==A.m) // 20 20\n\n\nfunction getLength(){\n  return this.length; \n}\n\nfunction foo(){\n  this.length = 1; // this == winow\n  return(function(){\n    var length = 2;\n    return {\n      length:function(a,b,c){\n        return this.arr.length\n      },\n      arr:[1,2,3,4],\n      info:function(){\n        // this => {length:...,arr:...}\n        // this.length => length:function(a,b,c)... 的形参 3\n        return getLength.call(this.length) \n      }\n    }\n  })();\n}\n\n// foo() {length:...,arr:...}.info()\nvar x = foo().info(); \nconsole.log(x) // x = 3\n',normalizedContent:'# 3.5.1 基本概念\n\n * 函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。\n\n * javascript函数语法:函数就是包裹在花括号中的代码块：\n\n> function 函数名()\n> {\n>  这里是要执行的代码\n> }\n\n * 形参(parameter)：函数定义时的变量\n * 实参(argument)：函数调用时的变量\n\n\n# 3.5.2 函数的声明和调用\n\n * 使用关键词function来声明函数\n\n * 关键词function必须是小写的，并且必须以与函数名称相同的大小写来调用函数。\n\n * 函数本身不会自动运行，只有当调用该函数时，才会执行函数内的代码。\n\n * 函数可以通过其名字加上括号中的参数进行调用\n\n * 可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由javascript在任何位置进行调用。\n\n * 在调用函数时，您可以向其传递值，这些值被称为参数。带有参数的函数也被称为有参函数。\n\n\n# 3.5.3 带有返回值的函数\n\n * 有时，我们会希望函数将值返回调用它的地方。通过使用return语句就可以实现。\n\n * 在使用return语句时，函数会停止执行，并返回指定的值。\n\n * 可以将返回值赋值给一个变量，然后对变量进行操作\n\n * 当函数遇到第一个return后将终止执行函数后边的语句，直接跳出函数\n\n * 当函数没有return时，返回值是undefined\n\n\n# 3.5.4 arguments 对象\n\n在函数代码中，使用特殊对象arguments存储函数调用传递给该函数的所以参数（只能函数内部使用）。\n\nfunction fn(a,b,c,d){\n  console.log(arguments[0]) //获取函数的第一个参数\n  console.log(arguments.callee) // 获取函数本身\n  console.log(arguments.length) // 获取实参个数\n  console.log(fn.length) // 获取形参个数\n  console.log(arguments.callee.length) // 获取形参个数\n}\n\n\nvar x= 20;\nfunction fn(m,n,x){\n  console.log(x);  // 3\n  arguments[2]=20\n  console.log(x);  // 3\n}\nx= fn(1,2,3);\nconsole.log(x); // fn没有返回值 undefined\n\n\n\n# 3.5.5 函数上下文与this关键字\n\n面向对象语言中this表示当前对象的一个引用、但在javascript中this不是固定不变的，它会随着执行环境的改变而改变。\n\n 1. 在对象中，this指向该方法所属的对象。\n\nvar person = {\n  firstname: "john",\n  lastname : "doe",\n  id: 5566,\n  fullname : function() {\n     console.log(this); \n  }\n};\n\nperson.fullname()  // fullname方法所属的对象是person所以this指向person\n\nwindow.person.fullname()  // this指向person（该方所属的对象是person）\n\nvar i = person.fullname() // this指向person（该方所属的对象是person）\n\nvar j = person.fullname  // j = function(){console.log(this);}\nj()    //   此时j所属对象是window，所以this指向window\n\n\n对象嵌套案例：\n\nvar a = 0\nvar obj1 = {\n  a: 10,\n  fn1: {\n    a: 20,\n    fn2: {\n      a: 30,\n      fn3: function () {\n        console.log(this.a)\n      }\n    }\n  }\n}\n\nvar obj2 = {\n  a: 50,\n  fna: obj1.fn1.fn2.fn3(),\n  fnb: obj1.fn1.fn2.fn3\n}\n\nobj1.fn1.fn2.fn3() //  a=30  this指向fn3所属对象fn2\n\nobj2.fna //  a=30   this指向fn3所属对象fn2\n\n// fnb=function(){console.log(this.a)} fnb方法所属的对象是obj2\nobj2.fnb() // this指向obj2 a=50 \n\n// i=function(){console.log(this.a)}  i方法所属的对象是window\nvar i = obj1.fn1.fn2.fn3\ni() // 所以this指向window a=0\n\n\n数组：\n\nfunction fn1(a,b,c,d,e,f){\n  console.log(arguments.callee.length) // fn1的形参个数 6\n  console.log(this) // fn2的arguments数组\n  console.log(this.callee.length) // fn2形参个数 8\n}\n\nfunction fn2(a,b,c,d,e,f,m,n){\n  arguments[0](9,10,11,12,13); //fn1(9,10,11,12,13) 相当于arguments数组元素调用fn1\n}\n\nfn2(fn1,5,6,7)\n\n\nfunction fn1(f,a,b,c){\n\targuments[0](5,8); // fn2(5,8)\n}\n\nfunction fn2(i,j,k,l,,m){\n\tconsole.log(this.length) // fn1的arguments数组长度(实参) 6\n\tconsole.log(this.callee.length) // fn1 形参个数 4 \n\tconsole.log(arguments.length) // fn2的实参个数 2\n\tconsole.log(arguments.callee.length) // fn2的形参个数 5\n}\n\nfn1(fn2,2,4,6,8,10)\n\n\n 2. 如果单独使用，this指向全局对象。\n\nvar x = this; // 在浏览器中指向window\n\n\n 3. 在函数中，this指向调用它的对象。自执行函数指向window，严格模式下是undefined\n\nfunction a(){\n    console.log(this); \n}\n\na();//window\n\n\n 4. 在箭头函数中，this继承定义时所在作用域链上一层的this\n\n * 箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this，\n * 箭头函数中的this在定义函数时就已经确定了不能更改，\n * 箭头函数不能用call、apply方法修改里面的this,\n\nvar a = 0\nvar obj2 ={\n\ta:10,\n\tfna:() => { \n\tconsole.log(this.a) \n\t},\n\tb:{\n\t\ta:20,\n\t\tfnb:() => {\n\t\tconsole.log(this.a) \n\t\t},\n\t},\n\tc: function() {\n     return ()=>{\n           console.log(this.a); \n     }\n  }\n}\nobj2.fna.call() // 箭头函数继承对象的this，对象的this是window a=0\nobj2.b.fnb() // 0 箭头函数继承对象的this，对象和子对象的this都是window a=0\nvar a = 0\nvar obj ={\n\ta:10,\n\tfna:() => { \n\tconsole.log(this.a) \n\t},\n\tb:{\n\t\ta:20,\n\t\tfnb:() => {\n\t\tconsole.log(this.a) \n\t\t},\n\t},\n\tc: function() {\n     return ()=>{\n           console.log(this.a); \n     }\n  }\n}\nobj.fna.call() // 箭头函数继承对象的this，对象的this是window a=0\nobj.b.fnb() // 0 箭头函数继承对象的this，对象和子对象的this都是window a=0\nobj.b.fnb.apply(obj) // call apply 不能修改箭头函数的继承\nobj.c()() // 10 // 箭头函数继承c的this，c的this是obj  a=10\nobj2.c()() // 10 // 箭头函数继承c的this，c的this是obj2  a=10\n\n\n箭头函数详见3.16.3\n\n 5. 在事件中，this表示指向接收事件的dom元素。\n\n<button onclick="console.log(this)">this</button>  \n\n\n 6. 在settimeout、setinterval中，this指向window。\n\n 7. 类似call()和apply()方法可以将this引用到任何对象。\n\nvar person1 = {\n  fullname: function() {\n  console.log(this); // this指向person2\n  }\n}\n\nvar person2 = {\n  firstname:"john",\n  lastname: "doe",\n}\n\nvar x = person1.fullname.call(person2);  // call的第一个参数是this的指向\n\n\n\n# 3.5.6 call和apply\n\ncall也可以调用函数,它的参数除了接受实际参数外,还可以接受一个参数代表。\n\nfn.call(obj,1,2,3,4)  // this指向call的第一个参数obj\n\n\napply与call基本功能相同，传参语法不同,实参需要[]括起。\n\nfn.apply (obj,[1,2,3,4]) // this指向apply的第一个参数obj\n\n\n * 案例：\n\nvar length = 10;\n\nfunction fn(){\n  alert(this.length)\n}\n\nvar obj ={\n  length:5,\n  method:function(fn){\n    alert(this===obj) // true\n    fn();  // window.fn() this -> window  10\n    fn.call(this);  // obj  5\n    arguments[0]()  // fn()   this -> arguments  1\n  }\n}\n\nobj.method(fn)\n\n\nfunction a(){\n  this.m = 10; \n}\n\nfunction b(){\n  this.m = 20; \n}\n\na.call(b); // b.m = 10\nb.call(a); // a.m = 20\n\nvar a = new a(); // 10\nvar b = new b(); // 20\n\nconsole.log(a.m==b.m) // 10  10\nconsole.log(b.m==a.m) // 20 20\n\n\nfunction getlength(){\n  return this.length; \n}\n\nfunction foo(){\n  this.length = 1; // this == winow\n  return(function(){\n    var length = 2;\n    return {\n      length:function(a,b,c){\n        return this.arr.length\n      },\n      arr:[1,2,3,4],\n      info:function(){\n        // this => {length:...,arr:...}\n        // this.length => length:function(a,b,c)... 的形参 3\n        return getlength.call(this.length) \n      }\n    }\n  })();\n}\n\n// foo() {length:...,arr:...}.info()\nvar x = foo().info(); \nconsole.log(x) // x = 3\n',charsets:{cjk:!0}},{title:"3.3.1基本概念",frontmatter:{},regularPath:"/frontend/javascript/symbol/",relativePath:"frontend/javascript/symbol/README.md",key:"v-266de6fd",path:"/frontend/javascript/symbol/",headers:[{level:2,title:"3.3.1基本概念",slug:"_3-3-1基本概念",normalizedTitle:"3.3.1基本概念",charIndex:2},{level:2,title:"3.3.2用于字符串的“+”运算符",slug:"_3-3-2用于字符串的-运算符",normalizedTitle:"3.3.2用于字符串的“+”运算符",charIndex:141},{level:2,title:"3.3.3赋值运算符：",slug:"_3-3-3赋值运算符",normalizedTitle:"3.3.3赋值运算符：",charIndex:246},{level:2,title:"3.3.4算术运算符",slug:"_3-3-4算术运算符",normalizedTitle:"3.3.4算术运算符",charIndex:391},{level:2,title:"3.3.5比较运算符",slug:"_3-3-5比较运算符",normalizedTitle:"3.3.5比较运算符",charIndex:589},{level:2,title:"3.3.6逻辑运算符",slug:"_3-3-6逻辑运算符",normalizedTitle:"3.3.6逻辑运算符",charIndex:964},{level:2,title:"3.3.7条件运算符",slug:"_3-3-7条件运算符",normalizedTitle:"3.3.7条件运算符",charIndex:1039},{level:2,title:"3.3.8运算符优先级",slug:"_3-3-8运算符优先级",normalizedTitle:"3.3.8运算符优先级",charIndex:1172}],headersStr:"3.3.1基本概念 3.3.2用于字符串的“+”运算符 3.3.3赋值运算符： 3.3.4算术运算符 3.3.5比较运算符 3.3.6逻辑运算符 3.3.7条件运算符 3.3.8运算符优先级",content:'# 3.3.1基本概念\n\n表达式：由常量/变量和运算符组成的短语；\n\n操作数：表达式中的常量和变量成为操作数；\n\n运算符：表达式中起运算作用的符合成为运算符；\n\n单目运算符：只能带一个操作数的成为单目运算符；(也叫一元运算符)\n\n多目运算符：带多个操作数的成为多目运算符；\n\n\n# 3.3.2用于字符串的“+”运算符\n\n+运算符用于把文本值或字符串变量加起来（连接起来）。\n\n要想在两个字符串之间增加空格，需要把空格插入一个字符串之中：\n\n如果把数字与字符串相加，结果将成为字符串。\n\n\n# 3.3.3赋值运算符：\n\n赋值运算符用于给 JavaScript 变量赋值。\n\n= x=y\n\n+= x+=y 等价于 x=x+y\n\n-= x-=y 等价于 x=x-y\n\n*= x*=y 等价于 x=x*y\n\n/= x/=y 等价于 x=x/y\n\n%= x%=y 等价于 x=x%y\n\n\n# 3.3.4算术运算符\n\n * 加减乘除：+、-、*、/\n\n * 取模运算符：%\n\n * 正负运算符：+（如果连接的是两个数字字符串，则数字相连） -（字符串能变成数字的自动变成数字后相减）“20”+2-6=196\n\n * 递增递减运算符：++、--:使数字递增/递减1(注意前置和后置的区别)\n\n> 若没有赋值前置和后置没有区别。\n> 若有赋值:前置则先计算递增/减后赋值，后置则相反。\n\n\n# 3.3.5比较运算符\n\n比较运算符是比较两个数的大小的运算符，返回的是一个布尔值。\n\n * 相等运算符 == 判断两个操作数是否相等。不同的数据类型会自动转换为相等的数据类型再做比较。\n\n（"hello"==true） //false\n\n\n * 等同运算符 === 全等（值和类型），严格意义的相等，两个操作数的值和他们的类型必须完全一致。\n\n * 不等于：!=\n\n * 不等同运算符： !==\n\n * 大于：>\n\n * 小于：<\n\n * 大于或等于：>=\n\n * 小于或等于：<=\n\nTIP\n\n * 若一个是数值字符串，一个是数值，字符串会自动转换成数值进行比较。\n * 若两个都是字符串，则比较首个数字的大小。\n * 字母字符串会转换成对应的ASCII码(较少用到，不做讲解，知道即可)\n * 布尔值的false和true会转换成0和1\n\n\n# 3.3.6逻辑运算符\n\n逻辑运算符用于测定变量或值之间的逻辑。\n\n * && and(与)\n\n * || or(或)\n\n * !not(非)\n\n\n# 3.3.7条件运算符\n\n根据条件在两个语句中执行其中的一个，使用符号 ？：语法如下：\n\n条件表达式？语句1：语句2\n\n参数说明：\n\n条件表达式，结果会被作为布尔值处理\n\n语句1：如果条件表达式返回true则执行\n\n语句2：如果条件表达式返回false则执行\n\n\n# 3.3.8运算符优先级\n\n运算符优先级描述了在计算表达式时执行运算的顺序。先执行具有较高优先级的运算，然后执行较低优先级的运算。例如，先执行相乘，再执行相加。\n\n运算符比较多，可以合理使用()来改变表达式的优先级。\n\n()的用法和数学中的()用法相同,()内的会优先计算。',normalizedContent:'# 3.3.1基本概念\n\n表达式：由常量/变量和运算符组成的短语；\n\n操作数：表达式中的常量和变量成为操作数；\n\n运算符：表达式中起运算作用的符合成为运算符；\n\n单目运算符：只能带一个操作数的成为单目运算符；(也叫一元运算符)\n\n多目运算符：带多个操作数的成为多目运算符；\n\n\n# 3.3.2用于字符串的“+”运算符\n\n+运算符用于把文本值或字符串变量加起来（连接起来）。\n\n要想在两个字符串之间增加空格，需要把空格插入一个字符串之中：\n\n如果把数字与字符串相加，结果将成为字符串。\n\n\n# 3.3.3赋值运算符：\n\n赋值运算符用于给 javascript 变量赋值。\n\n= x=y\n\n+= x+=y 等价于 x=x+y\n\n-= x-=y 等价于 x=x-y\n\n*= x*=y 等价于 x=x*y\n\n/= x/=y 等价于 x=x/y\n\n%= x%=y 等价于 x=x%y\n\n\n# 3.3.4算术运算符\n\n * 加减乘除：+、-、*、/\n\n * 取模运算符：%\n\n * 正负运算符：+（如果连接的是两个数字字符串，则数字相连） -（字符串能变成数字的自动变成数字后相减）“20”+2-6=196\n\n * 递增递减运算符：++、--:使数字递增/递减1(注意前置和后置的区别)\n\n> 若没有赋值前置和后置没有区别。\n> 若有赋值:前置则先计算递增/减后赋值，后置则相反。\n\n\n# 3.3.5比较运算符\n\n比较运算符是比较两个数的大小的运算符，返回的是一个布尔值。\n\n * 相等运算符 == 判断两个操作数是否相等。不同的数据类型会自动转换为相等的数据类型再做比较。\n\n（"hello"==true） //false\n\n\n * 等同运算符 === 全等（值和类型），严格意义的相等，两个操作数的值和他们的类型必须完全一致。\n\n * 不等于：!=\n\n * 不等同运算符： !==\n\n * 大于：>\n\n * 小于：<\n\n * 大于或等于：>=\n\n * 小于或等于：<=\n\ntip\n\n * 若一个是数值字符串，一个是数值，字符串会自动转换成数值进行比较。\n * 若两个都是字符串，则比较首个数字的大小。\n * 字母字符串会转换成对应的ascii码(较少用到，不做讲解，知道即可)\n * 布尔值的false和true会转换成0和1\n\n\n# 3.3.6逻辑运算符\n\n逻辑运算符用于测定变量或值之间的逻辑。\n\n * && and(与)\n\n * || or(或)\n\n * !not(非)\n\n\n# 3.3.7条件运算符\n\n根据条件在两个语句中执行其中的一个，使用符号 ？：语法如下：\n\n条件表达式？语句1：语句2\n\n参数说明：\n\n条件表达式，结果会被作为布尔值处理\n\n语句1：如果条件表达式返回true则执行\n\n语句2：如果条件表达式返回false则执行\n\n\n# 3.3.8运算符优先级\n\n运算符优先级描述了在计算表达式时执行运算的顺序。先执行具有较高优先级的运算，然后执行较低优先级的运算。例如，先执行相乘，再执行相加。\n\n运算符比较多，可以合理使用()来改变表达式的优先级。\n\n()的用法和数学中的()用法相同,()内的会优先计算。',charsets:{cjk:!0}},{title:"3.14.1概述",frontmatter:{},regularPath:"/frontend/javascript/sync&asyn/",relativePath:"frontend/javascript/sync&asyn/README.md",key:"v-846e62aa",path:"/frontend/javascript/sync&asyn/",headers:[{level:2,title:"3.14.1概述",slug:"_3-14-1概述",normalizedTitle:"3.14.1概述",charIndex:2},{level:3,title:"单线程与多线程",slug:"单线程与多线程",normalizedTitle:"单线程与多线程",charIndex:15},{level:3,title:"异步与同步",slug:"异步与同步",normalizedTitle:"异步与同步",charIndex:85},{level:3,title:"浏览器的线程",slug:"浏览器的线程",normalizedTitle:"浏览器的线程",charIndex:170},{level:3,title:"JavaScript的线程",slug:"javascript的线程",normalizedTitle:"javascript的线程",charIndex:296},{level:3,title:"eventloop消息队列",slug:"eventloop消息队列",normalizedTitle:"eventloop消息队列",charIndex:378},{level:2,title:"3.14.2Promise",slug:"_3-14-2promise",normalizedTitle:"3.14.2promise",charIndex:788},{level:2,title:"3.14.3async/await",slug:"_3-14-3async-await",normalizedTitle:"3.14.3async/await",charIndex:2392}],headersStr:"3.14.1概述 单线程与多线程 异步与同步 浏览器的线程 JavaScript的线程 eventloop消息队列 3.14.2Promise 3.14.3async/await",content:'# 3.14.1概述\n\n\n# 单线程与多线程\n\n * 单线程：所有任务都需要排队一次执行，JavaScript是单线程的语言。\n * 多线程：任务可以同时进行。\n\n\n# 异步与同步\n\n * 同步：上一个任务执行完毕在执行下一个任务。\n * 异步：上一个任务在等待状态时，先让下一个任务先执行，等待状态结束后在返回来执行原本的任务。\n\n\n# 浏览器的线程\n\n * 渲染线程：负责页面的渲染\n * js引擎线程：负责js的解析和执行\n * 定时触发器线程：处理setInterval和setTimeout\n * 事件触发线程：处理DOM事件\n * 异步http请求线程：处理http请求\n\n\n# JavaScript的线程\n\nJavaScript是单线程语言为解决堵塞问题，因此提出了(eventloop)消息队列模型。\n\n * 主线程：js引擎线程。\n * eventloop消息队列：一些I/O操作，定时器的计时和事件监听由浏览器的定时触发器线程完成\n\n\n# eventloop消息队列\n\n * 宏队列，macrotask，也叫tasks。 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：\n\n> setTimeout\n> setInterval\n> setImmediate(Node)\n> requestAnimationFrame（浏览器）\n> I/O UI rendering（浏览器）\n\n * 微队列，microtask，也叫jobs。 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：\n\n> process.nextTick(Node)\n> Promise\n> Object.observe\n> MutationObserver eventloop消息队列\n\n\n# 3.14.2Promise\n\n * promise对象代表了未来将要发生的事件，用来传递异步操作的消息。\n * promise有三种状态,三者按顺序切换，不能跨状态切换。\n\n> pending:初始状态，不是成功或失败状态。\n> fulfilled:意味着操作成功完成。\n> rejected:意味着操作失败。\n\n * 创建promise对象\n\nlet promise = new Promise(function(resolve,reject){\n    resolve("成功!");// 成功后返回的数据\n    reject("失败!");// 失败后返回的数据\n});\n\n\n * then监听成功或失败回调\n\npromise.then(function(req){\n    console.log(req) // req即resolve/reject返回的值\n});\n\n\n * catch监听失败回调\n\npromise.catch(function(fail){\n    console.log(fail) // fail即reject返回的值\n});\n\n\n * finally监听失败回调\n\npromise.finally(function(fail){\n    console.log(fail) // fail即reject返回的值\n});\n\n\n * Promise.all对多个Promise进行包装。\n\nvar p = Promise.all([p1,p2,p3]);\np.then(function(req){\n    console.log(req)\n});\n\n\np的状态来源\n\n 1. 所有的都是完成(fulfilled)，p的状态才是完成(fulfilled)。此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n 2. 有一个是失败(rejected)，p的状态就变成失败(rejected)，此时第一个失败的(rejected)实例的返回值，会传递给p的回调函数。\n\n * Promise.race对多个Promise进行包装。\n\nvar p = Promise.race([p1,p2,p3]);\np.then(function(req){\n    console.log(req)\n});\n\n\np的状态来源\n\n 1. 有一个最先改变状态，p的状态就跟着改变。最先改变状态的实例就会把值传递给p的回调函数。\n\n * Promise.allSettled对多个Promise进行包装。 *ES2020新增\n\np的状态来源\n\n 1. 不管是完成还是失败，只要所有p的状态都改变，就把值传递给p的回调函数。\n\n * Promise.any对多个Promise进行包装。 *ES2021新增\n\np的状态来源\n\n 1. 有一个p完成，就把值传递给p的回调函数。如果都是失败，则返回失败\n\n * Promise.try对无论是同步还是异步的操作都进行同步操作。\n\n * Promise.resolve将现有对象转为Promise对象\n\n 1. 如果Promise.resolve接收的的参数，不是具有then方法的对象（又称 thenable 对象），则返回一个新的Promise对象，且它的状态为fulfilled，并立即执行。\n 2. 如果Promise.resolve接收的参数是一个Promise对象的实例，则会被原封不动地返回。也会返回一个新的Promise实例，该实例的状态为rejected，Promise.Promise.resolve接收的参数，会被传递给实例的回调函数。\n\nvar p = Promise.resolve(\'Hello\');\np.then(function (s){\n  console.log(s)// Hello\n});\n\n\n\n\n# 3.14.3async/await\n\n * async异步，返回一个Promise对象。\n * await等待async异步的Promise对象返回的状态。如果返回的不是Promise对象则立即执行后面的语句\n * await只能写在async函数里面\n\nfunction takeLongTime() {\n    return new Promise(resolve => {\n        setTimeout(() => resolve("long_time_value"), 1000);\n    });\n}\n\nasync function test() {\n    const v = await takeLongTime(); //等待1000 后再执行log命令\n    console.log(v);\n}\n\ntest();\n\n\nasync/await和promise的执行顺序\n\nasync/await和promise的执行顺序',normalizedContent:'# 3.14.1概述\n\n\n# 单线程与多线程\n\n * 单线程：所有任务都需要排队一次执行，javascript是单线程的语言。\n * 多线程：任务可以同时进行。\n\n\n# 异步与同步\n\n * 同步：上一个任务执行完毕在执行下一个任务。\n * 异步：上一个任务在等待状态时，先让下一个任务先执行，等待状态结束后在返回来执行原本的任务。\n\n\n# 浏览器的线程\n\n * 渲染线程：负责页面的渲染\n * js引擎线程：负责js的解析和执行\n * 定时触发器线程：处理setinterval和settimeout\n * 事件触发线程：处理dom事件\n * 异步http请求线程：处理http请求\n\n\n# javascript的线程\n\njavascript是单线程语言为解决堵塞问题，因此提出了(eventloop)消息队列模型。\n\n * 主线程：js引擎线程。\n * eventloop消息队列：一些i/o操作，定时器的计时和事件监听由浏览器的定时触发器线程完成\n\n\n# eventloop消息队列\n\n * 宏队列，macrotask，也叫tasks。 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：\n\n> settimeout\n> setinterval\n> setimmediate(node)\n> requestanimationframe（浏览器）\n> i/o ui rendering（浏览器）\n\n * 微队列，microtask，也叫jobs。 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：\n\n> process.nexttick(node)\n> promise\n> object.observe\n> mutationobserver eventloop消息队列\n\n\n# 3.14.2promise\n\n * promise对象代表了未来将要发生的事件，用来传递异步操作的消息。\n * promise有三种状态,三者按顺序切换，不能跨状态切换。\n\n> pending:初始状态，不是成功或失败状态。\n> fulfilled:意味着操作成功完成。\n> rejected:意味着操作失败。\n\n * 创建promise对象\n\nlet promise = new promise(function(resolve,reject){\n    resolve("成功!");// 成功后返回的数据\n    reject("失败!");// 失败后返回的数据\n});\n\n\n * then监听成功或失败回调\n\npromise.then(function(req){\n    console.log(req) // req即resolve/reject返回的值\n});\n\n\n * catch监听失败回调\n\npromise.catch(function(fail){\n    console.log(fail) // fail即reject返回的值\n});\n\n\n * finally监听失败回调\n\npromise.finally(function(fail){\n    console.log(fail) // fail即reject返回的值\n});\n\n\n * promise.all对多个promise进行包装。\n\nvar p = promise.all([p1,p2,p3]);\np.then(function(req){\n    console.log(req)\n});\n\n\np的状态来源\n\n 1. 所有的都是完成(fulfilled)，p的状态才是完成(fulfilled)。此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n 2. 有一个是失败(rejected)，p的状态就变成失败(rejected)，此时第一个失败的(rejected)实例的返回值，会传递给p的回调函数。\n\n * promise.race对多个promise进行包装。\n\nvar p = promise.race([p1,p2,p3]);\np.then(function(req){\n    console.log(req)\n});\n\n\np的状态来源\n\n 1. 有一个最先改变状态，p的状态就跟着改变。最先改变状态的实例就会把值传递给p的回调函数。\n\n * promise.allsettled对多个promise进行包装。 *es2020新增\n\np的状态来源\n\n 1. 不管是完成还是失败，只要所有p的状态都改变，就把值传递给p的回调函数。\n\n * promise.any对多个promise进行包装。 *es2021新增\n\np的状态来源\n\n 1. 有一个p完成，就把值传递给p的回调函数。如果都是失败，则返回失败\n\n * promise.try对无论是同步还是异步的操作都进行同步操作。\n\n * promise.resolve将现有对象转为promise对象\n\n 1. 如果promise.resolve接收的的参数，不是具有then方法的对象（又称 thenable 对象），则返回一个新的promise对象，且它的状态为fulfilled，并立即执行。\n 2. 如果promise.resolve接收的参数是一个promise对象的实例，则会被原封不动地返回。也会返回一个新的promise实例，该实例的状态为rejected，promise.promise.resolve接收的参数，会被传递给实例的回调函数。\n\nvar p = promise.resolve(\'hello\');\np.then(function (s){\n  console.log(s)// hello\n});\n\n\n\n\n# 3.14.3async/await\n\n * async异步，返回一个promise对象。\n * await等待async异步的promise对象返回的状态。如果返回的不是promise对象则立即执行后面的语句\n * await只能写在async函数里面\n\nfunction takelongtime() {\n    return new promise(resolve => {\n        settimeout(() => resolve("long_time_value"), 1000);\n    });\n}\n\nasync function test() {\n    const v = await takelongtime(); //等待1000 后再执行log命令\n    console.log(v);\n}\n\ntest();\n\n\nasync/await和promise的执行顺序\n\nasync/await和promise的执行顺序',charsets:{cjk:!0}},{title:"3.1.1常量",frontmatter:{},regularPath:"/frontend/javascript/var/",relativePath:"frontend/javascript/var/README.md",key:"v-2dba9b01",path:"/frontend/javascript/var/",headers:[{level:2,title:"3.1.1常量",slug:"_3-1-1常量",normalizedTitle:"3.1.1常量",charIndex:2},{level:2,title:"3.1.2变量",slug:"_3-1-2变量",normalizedTitle:"3.1.2变量",charIndex:103},{level:2,title:"3.1.3作用域",slug:"_3-1-3作用域",normalizedTitle:"3.1.3作用域",charIndex:320},{level:2,title:"3.1.4作用域链",slug:"_3-1-4作用域链",normalizedTitle:"3.1.4作用域链",charIndex:1063},{level:2,title:"3.1.5闭包",slug:"_3-1-5闭包",normalizedTitle:"3.1.5闭包",charIndex:1466}],headersStr:"3.1.1常量 3.1.2变量 3.1.3作用域 3.1.4作用域链 3.1.5闭包",content:'# 3.1.1常量\n\n常量是从始至终不能被改变的数据。比如: 数字 123 可以是常量，字符串 "hello" 也是一个常量......\n\n常量通常用来表示固定不变的量，比如圆周率，万有引力常量。\n\n\n# 3.1.2变量\n\n变量的值是可以改变的，变量可以看做是存储数据的容器。比如一个瓶子，它既可以装入酱油、醋；也可以装入茅台和二锅头......\n\n在 JavaScript 中创建变量通常称为“声明”变量，使用关键字 var来声明变量。\n\n向变量赋值，使用等号;可以在声明变量时对其赋值，也可以先声明后赋值。\n\n可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可。\n\n当变量名与函数名一致时，保留函数。\n\n\n# 3.1.3作用域\n\n作用域是指有效范围，JS变量的作用域有全局和局部之分\n\n> "全局变量"：申明在函数之外的变量。\n> "局部变量"：申明在函数体中的变量，并且只能在当前函数体内访问。\n\n全局变量的优缺点\n\n>  * 全局变量的优点：可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗。\n>  * 全局变量缺点:使函数的代码可读性降低。由于多个函数都可能使用全局变量，函数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。\n\n*ES6新增块级作用域 3.16.1 let和const命令\n\nTIP\n\n 1. 当局部变量与全部变量同名时，用自己的。\n 2. 如果函数内部有定义变量，即使在定义之前输出但会先执行后面定义语句，然后逐行判断输出结果。（浏览器会先解析var、function（只优先解析定义。）,ES6新增的let和const不存在预解析 ）\n 3. 不加var默认是隐形全局变量，无论在什么位置定义，都是全局的。\n 4. 匿名函数自执行（避免全局污染）：(function(){…})();\n\nvar a =1;  \nfunction test(){  \n    alert(a); // a为undefined! 这个a并不是全局变量  而是 var a的a  因为变量声明提示 \n    a=4  \n    alert(a); //a为4, 这里的a是局部变量  \n    var a;  \n    alert(a);   //a为4, 这里的a是局部变量 \n    alert(window.a); //a为1,这里的a是全局变量  \n}  \ntest()  \nalert(a); //a为1,这里的a是全局变量  \n\n\n\n# 3.1.4作用域链\n\n当访问一个变量时，解释器会首先在当前作用域查找，如果没有找到，就去定义它的父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链。\n\nfunction f1(){\n　　　　var n=999; \n　　　　function f2(){  \n　　　　　　alert(n);  //  通过作用域链 可以使用父元素的变量\n　　　　}\n        f2()\n　　}\n　　f1();\n\n\n对象嵌套函数的作用域链问题\n\nvar name = "The Window";\t\nvar person = {\n  　name : "My Object",\n  \tfn : function() {\n    console.log(name); // The Window   fn作用域链的上层就是window，与对象嵌套的多少无关\n  }\n};\n\nperson.fn() \n\n\n\n# 3.1.5闭包\n\n一个函数和对其周围状态的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包。 本质上是利用作用域链，从而能从外向里获取内容函数的变量的现象。\n\nfunction f1(){\n　　　　var n=999; // 一个局部变量\n　　　　function f2(){   // f2 一个内部函数  形成一个闭包\n            n++; // 闭包可以更新外部变量的值\n　　　　　　alert(n);  //  通过过作用域链 使用父元素的变量\n　　　　}\n　　　　return f2; // f1 执行完 立即执行f2\n　　}\n　　var result=f1();\n　　result(); // 1000\n    result(); // 1001\n\n\n当f1执行完毕,环境栈被销毁，因为f2通过作用域链引用了f1的相关对象n，因此一直保存在内存中。\n\n * 闭包的用途\n\n 1. 读取函数内部的变量\n 2. 让这些变量的值始终保持在内存中\n\n * 闭包的三个特性：\n\n 1. 闭包可以访问当前函数以外的变量。\n 2. 即使外部函数已经返回，闭包仍能访问外部函数定义的变量\n 3. 闭包可以更新外部变量的值\n\nWARNING\n\n 1. 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，会造成网页的性能问题，需要在退出函数之前，将不使用的局部变量全部删除\n\n 2. 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n * this指向、作用域、闭包的比较：\n\n// 对象嵌套函数的this与作用域链\nvar name = "The Window";\t\nvar person = {\n  　name : "My Object",\n  \tfullName : function() {\n    console.log(this.name);  // My Object\n    console.log(name); // The Window  作用域链\n  }\n};\n\nperson.fullName()   // fullName函数是person调用的 因此this指向person\n\t\n\nvar object = {\n    name : "My Object",\n    getNameFunc : function(){\n        return function(){\n\t\t\tconsole.log(this.name); // The Window\n            console.log(name);  // The Window\n        };\n    }\n};\n\nobject.getNameFunc()(); \n/*\n    第一次调用时，相当于把函数体赋给了object\n    object.getNameFunc() == object = function(){console.log(name);};\n\n    第二次调用的时候，相当于调用函数window.object\n*/\n\n// 闭包与作用域链\n\nvar object = {\n    name : "My Object",\n    getNameFunc : function(){\n        var name = "My Object-Son";\n        var that = this;  \n        return function(){\n            console.log(name)  // My Object-Son \n            console.log(that.name)  // My Object\n        };\n    }\n};\n\nobject.getNameFunc()(); \n/*\n    第一次调用时，相当于把函数体赋给了object\n    object.getNameFunc() == object = unction(){console.log(that.name)};\n    此时的that指向调用getNameFunc的object对象。\n\n    第二次调用的时候，相当于调用函数window.object\n    而此时因为闭包原因，that未被销毁 依旧指向object对象，所以打印object对象name属性\n*/\n',normalizedContent:'# 3.1.1常量\n\n常量是从始至终不能被改变的数据。比如: 数字 123 可以是常量，字符串 "hello" 也是一个常量......\n\n常量通常用来表示固定不变的量，比如圆周率，万有引力常量。\n\n\n# 3.1.2变量\n\n变量的值是可以改变的，变量可以看做是存储数据的容器。比如一个瓶子，它既可以装入酱油、醋；也可以装入茅台和二锅头......\n\n在 javascript 中创建变量通常称为“声明”变量，使用关键字 var来声明变量。\n\n向变量赋值，使用等号;可以在声明变量时对其赋值，也可以先声明后赋值。\n\n可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可。\n\n当变量名与函数名一致时，保留函数。\n\n\n# 3.1.3作用域\n\n作用域是指有效范围，js变量的作用域有全局和局部之分\n\n> "全局变量"：申明在函数之外的变量。\n> "局部变量"：申明在函数体中的变量，并且只能在当前函数体内访问。\n\n全局变量的优缺点\n\n>  * 全局变量的优点：可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗。\n>  * 全局变量缺点:使函数的代码可读性降低。由于多个函数都可能使用全局变量，函数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。\n\n*es6新增块级作用域 3.16.1 let和const命令\n\ntip\n\n 1. 当局部变量与全部变量同名时，用自己的。\n 2. 如果函数内部有定义变量，即使在定义之前输出但会先执行后面定义语句，然后逐行判断输出结果。（浏览器会先解析var、function（只优先解析定义。）,es6新增的let和const不存在预解析 ）\n 3. 不加var默认是隐形全局变量，无论在什么位置定义，都是全局的。\n 4. 匿名函数自执行（避免全局污染）：(function(){…})();\n\nvar a =1;  \nfunction test(){  \n    alert(a); // a为undefined! 这个a并不是全局变量  而是 var a的a  因为变量声明提示 \n    a=4  \n    alert(a); //a为4, 这里的a是局部变量  \n    var a;  \n    alert(a);   //a为4, 这里的a是局部变量 \n    alert(window.a); //a为1,这里的a是全局变量  \n}  \ntest()  \nalert(a); //a为1,这里的a是全局变量  \n\n\n\n# 3.1.4作用域链\n\n当访问一个变量时，解释器会首先在当前作用域查找，如果没有找到，就去定义它的父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链。\n\nfunction f1(){\n　　　　var n=999; \n　　　　function f2(){  \n　　　　　　alert(n);  //  通过作用域链 可以使用父元素的变量\n　　　　}\n        f2()\n　　}\n　　f1();\n\n\n对象嵌套函数的作用域链问题\n\nvar name = "the window";\t\nvar person = {\n  　name : "my object",\n  \tfn : function() {\n    console.log(name); // the window   fn作用域链的上层就是window，与对象嵌套的多少无关\n  }\n};\n\nperson.fn() \n\n\n\n# 3.1.5闭包\n\n一个函数和对其周围状态的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包。 本质上是利用作用域链，从而能从外向里获取内容函数的变量的现象。\n\nfunction f1(){\n　　　　var n=999; // 一个局部变量\n　　　　function f2(){   // f2 一个内部函数  形成一个闭包\n            n++; // 闭包可以更新外部变量的值\n　　　　　　alert(n);  //  通过过作用域链 使用父元素的变量\n　　　　}\n　　　　return f2; // f1 执行完 立即执行f2\n　　}\n　　var result=f1();\n　　result(); // 1000\n    result(); // 1001\n\n\n当f1执行完毕,环境栈被销毁，因为f2通过作用域链引用了f1的相关对象n，因此一直保存在内存中。\n\n * 闭包的用途\n\n 1. 读取函数内部的变量\n 2. 让这些变量的值始终保持在内存中\n\n * 闭包的三个特性：\n\n 1. 闭包可以访问当前函数以外的变量。\n 2. 即使外部函数已经返回，闭包仍能访问外部函数定义的变量\n 3. 闭包可以更新外部变量的值\n\nwarning\n\n 1. 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，会造成网页的性能问题，需要在退出函数之前，将不使用的局部变量全部删除\n\n 2. 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（public method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n * this指向、作用域、闭包的比较：\n\n// 对象嵌套函数的this与作用域链\nvar name = "the window";\t\nvar person = {\n  　name : "my object",\n  \tfullname : function() {\n    console.log(this.name);  // my object\n    console.log(name); // the window  作用域链\n  }\n};\n\nperson.fullname()   // fullname函数是person调用的 因此this指向person\n\t\n\nvar object = {\n    name : "my object",\n    getnamefunc : function(){\n        return function(){\n\t\t\tconsole.log(this.name); // the window\n            console.log(name);  // the window\n        };\n    }\n};\n\nobject.getnamefunc()(); \n/*\n    第一次调用时，相当于把函数体赋给了object\n    object.getnamefunc() == object = function(){console.log(name);};\n\n    第二次调用的时候，相当于调用函数window.object\n*/\n\n// 闭包与作用域链\n\nvar object = {\n    name : "my object",\n    getnamefunc : function(){\n        var name = "my object-son";\n        var that = this;  \n        return function(){\n            console.log(name)  // my object-son \n            console.log(that.name)  // my object\n        };\n    }\n};\n\nobject.getnamefunc()(); \n/*\n    第一次调用时，相当于把函数体赋给了object\n    object.getnamefunc() == object = unction(){console.log(that.name)};\n    此时的that指向调用getnamefunc的object对象。\n\n    第二次调用的时候，相当于调用函数window.object\n    而此时因为闭包原因，that未被销毁 依旧指向object对象，所以打印object对象name属性\n*/\n',charsets:{cjk:!0}},{title:"4.1.1基本介绍",frontmatter:{},regularPath:"/frontend/jquery/",relativePath:"frontend/jquery/README.md",key:"v-a51ce83c",path:"/frontend/jquery/",headers:[{level:2,title:"4.1.1基本介绍",slug:"_4-1-1基本介绍",normalizedTitle:"4.1.1基本介绍",charIndex:2},{level:2,title:"4.1.2选择器",slug:"_4-1-2选择器",normalizedTitle:"4.1.2选择器",charIndex:319},{level:2,title:"4.1.3jQuery与原生js转化",slug:"_4-1-3jquery与原生js转化",normalizedTitle:"4.1.3jquery与原生js转化",charIndex:414},{level:2,title:"4.1.3jQuery常用方法",slug:"_4-1-3jquery常用方法",normalizedTitle:"4.1.3jquery常用方法",charIndex:509},{level:2,title:"4.1.4jQuery下的Ajax",slug:"_4-1-4jquery下的ajax",normalizedTitle:"4.1.4jquery下的ajax",charIndex:2398},{level:2,title:"4.1.5表单序列化",slug:"_4-1-5表单序列化",normalizedTitle:"4.1.5表单序列化",charIndex:2738}],headersStr:"4.1.1基本介绍 4.1.2选择器 4.1.3jQuery与原生js转化 4.1.3jQuery常用方法 4.1.4jQuery下的Ajax 4.1.5表单序列化",content:'# 4.1.1基本介绍\n\njQuery不是新的语言，由原生js封装的js类库，常用于大量直接操作DOM\n\n * 类库：jQuery/ZEPTO(移动端)提供一些常用方法，任何项目可以导入该库去使用里面的方法，完成我们自己的业务逻辑。\n\n * 插件：有一定的业务功能的 例如轮播图插件、选项卡插件、模态框等（插件规定了当前这个功能的样式和结构，实现的功能用js封装）。\n\n * UI组件：把结构、样式、行为全部封装好，我们想实现一个功能，直接导入进来（Bootstrap）。\n\n * 框架：具备一定的变成思想 开发者按照其思想开发，一般框架提供了常用的类库、插件、UI组件（vue/react/angular/backbone）。\n\n\n# 4.1.2选择器\n\n$("p")\n$(".demo")\n$("#one")\n$("*")\n$(".box1 p")\n$(".box1 p.cur")\n$(".box1,#p1")\n\n\n\n# 4.1.3jQuery与原生js转化\n\njQuery对象---\x3e原生js对象\n\n$("div")[0]\n\n\n原生js对象---\x3ejQuery对象 $(原生对象)\n\n$(this)\n\n\n\n# 4.1.3jQuery常用方法\n\n * 设置：\n\n.html("") // === innerHTML\n\n\n * 获取：.html()\n\nelement.html() \n\n\n * 设置/获取：\n\n  $("img").attr("width","180"); // === obj.style.width\n\n\n * 添加：\n\n $("div").addClass("box") // === obj.className\n\n\n * 移除：removeClass\n\n $("div").removeClass("box")\n\n\n * 切换：\n\n $("div").toggleClass("box")\n\n\n * 事件：\n\nclick(fn(){}) \non("click",function(){})\nmouseover(fn(){}) \nmouseout(fn(){}) \nmousemove(fn(){})\n\n\non()和click()的区别:\n\n二者在绑定静态控件时没有区别，但是如果面对动态产生的控件，只有 on() 能成功的绑定到动态控件中。\n\n * 样式：\n\ncss("width","200px")\ncss({"width":"500px","height":"500px"})  \ncss("width") // 只写一个参数 表示获取\n\n\n * 获取元素内容宽度 $("div").width()\n * 获取元素内容宽度\n\n$("div").innerWidth() \n\n\ninnerWidth()：\n\n * 获取元素外部宽度\n\n$("div").outerWidth() //元素内容宽度+padding+border\n$("div").outerWidth(true)//元素内容宽度+padding+border+margin\n\n\n * 动画：\n\n显示：show(time) 隐藏hide(time) 切换toggle(time) 长宽透明度同时变换\n\n显示：slideUp(time) 隐藏slideDown(time) 切换slideToggle(time) 高度变换\n\n淡入：fadeIn() 淡出：fadeOut() 切换淡入淡出fadeToggle()透明度调整到：fadeTo()\n\n * 节点：\n\n获取子元素：\n\n$("div:(0)"); // 访问第一个div元素\n\n\nparent()必须是亲父亲\n\nchildren()必须是亲儿子\n\nsiblings()兄弟（除自己之外的亲兄弟）\n\nfind()查找后代\n\nnext()下一个兄弟\n\nprev()一个兄弟\n\nnextAll()后面的所以兄弟\n\nnextAll("p")\n\n\nprev()上一个兄弟\n\nprevAll()前面所以兄弟\n\nparents()所以祖先元素\n\neq()将所有符合的元素按照取出顺序排列\n\nindex()元素在父元素中的位置\n\neach(function(index,element)) 为每个匹配元素规定运行的函数。（返回 false 可用于及早停止循环。）\n\n$("tr").each(function(){\n\n$(this).children(":even").css("background","pink");\n\n}) //隔列操作\n\n\n * 链式编程：\n\n点击一个元素，自己变紫，父亲蓝，兄弟黄，父亲的兄弟粉，父亲兄弟的儿子红\n\n$("div").children().click(function(){\n\nvar el = $(this).css("background","purple")  //自己\n\n .siblings().css("background","yellow")  //自己的兄弟\n\n .parent().css("background","blue")  //自己的父亲\n\n .siblings().css("background","pink") //父亲的兄弟 \n\n .children().css("background","red") //父亲的儿子\n\n});\n```js\n$(function(){});\n$(document).ready() //入口函数同window.onload\n\n\nmouseenter/mouseleave代替mouseover/mouseout 创建元素\n\n$("<h1>标题</h1>");\n\n\n父亲加儿子：.append();\n\n儿子被加到父亲在：.appendTo();\n\n\n# 4.1.4jQuery下的Ajax\n\nPOST：\n\n$.post("1.php",{"k":"v"},function(data){ });//请求路径、传到服务器的数据、回调函数\n\n\nGET：\n\n$.get("1.txt",{"k":"v"},function(data){ });//请求路径、传到服务器的数据、回调函数\n\n\nAJAX：\n\n$.ajax(1.txt,{\n"type":"get",//请求路径、请求类型\n"data":{"k":v }, //传到服务器的数据\n"success":function(data){},//回调函数\n"error":function(xhr,textStatus,errorThrown){}//错误时的回调\n},{})\n\n\n\n# 4.1.5表单序列化\n\n表单序列化：把表单信息序列化成一个字符串。\n\nSerialize：把form的表单信息转换成以URL 编码的字符串。\n\n$("form").serialize()',normalizedContent:'# 4.1.1基本介绍\n\njquery不是新的语言，由原生js封装的js类库，常用于大量直接操作dom\n\n * 类库：jquery/zepto(移动端)提供一些常用方法，任何项目可以导入该库去使用里面的方法，完成我们自己的业务逻辑。\n\n * 插件：有一定的业务功能的 例如轮播图插件、选项卡插件、模态框等（插件规定了当前这个功能的样式和结构，实现的功能用js封装）。\n\n * ui组件：把结构、样式、行为全部封装好，我们想实现一个功能，直接导入进来（bootstrap）。\n\n * 框架：具备一定的变成思想 开发者按照其思想开发，一般框架提供了常用的类库、插件、ui组件（vue/react/angular/backbone）。\n\n\n# 4.1.2选择器\n\n$("p")\n$(".demo")\n$("#one")\n$("*")\n$(".box1 p")\n$(".box1 p.cur")\n$(".box1,#p1")\n\n\n\n# 4.1.3jquery与原生js转化\n\njquery对象---\x3e原生js对象\n\n$("div")[0]\n\n\n原生js对象---\x3ejquery对象 $(原生对象)\n\n$(this)\n\n\n\n# 4.1.3jquery常用方法\n\n * 设置：\n\n.html("") // === innerhtml\n\n\n * 获取：.html()\n\nelement.html() \n\n\n * 设置/获取：\n\n  $("img").attr("width","180"); // === obj.style.width\n\n\n * 添加：\n\n $("div").addclass("box") // === obj.classname\n\n\n * 移除：removeclass\n\n $("div").removeclass("box")\n\n\n * 切换：\n\n $("div").toggleclass("box")\n\n\n * 事件：\n\nclick(fn(){}) \non("click",function(){})\nmouseover(fn(){}) \nmouseout(fn(){}) \nmousemove(fn(){})\n\n\non()和click()的区别:\n\n二者在绑定静态控件时没有区别，但是如果面对动态产生的控件，只有 on() 能成功的绑定到动态控件中。\n\n * 样式：\n\ncss("width","200px")\ncss({"width":"500px","height":"500px"})  \ncss("width") // 只写一个参数 表示获取\n\n\n * 获取元素内容宽度 $("div").width()\n * 获取元素内容宽度\n\n$("div").innerwidth() \n\n\ninnerwidth()：\n\n * 获取元素外部宽度\n\n$("div").outerwidth() //元素内容宽度+padding+border\n$("div").outerwidth(true)//元素内容宽度+padding+border+margin\n\n\n * 动画：\n\n显示：show(time) 隐藏hide(time) 切换toggle(time) 长宽透明度同时变换\n\n显示：slideup(time) 隐藏slidedown(time) 切换slidetoggle(time) 高度变换\n\n淡入：fadein() 淡出：fadeout() 切换淡入淡出fadetoggle()透明度调整到：fadeto()\n\n * 节点：\n\n获取子元素：\n\n$("div:(0)"); // 访问第一个div元素\n\n\nparent()必须是亲父亲\n\nchildren()必须是亲儿子\n\nsiblings()兄弟（除自己之外的亲兄弟）\n\nfind()查找后代\n\nnext()下一个兄弟\n\nprev()一个兄弟\n\nnextall()后面的所以兄弟\n\nnextall("p")\n\n\nprev()上一个兄弟\n\nprevall()前面所以兄弟\n\nparents()所以祖先元素\n\neq()将所有符合的元素按照取出顺序排列\n\nindex()元素在父元素中的位置\n\neach(function(index,element)) 为每个匹配元素规定运行的函数。（返回 false 可用于及早停止循环。）\n\n$("tr").each(function(){\n\n$(this).children(":even").css("background","pink");\n\n}) //隔列操作\n\n\n * 链式编程：\n\n点击一个元素，自己变紫，父亲蓝，兄弟黄，父亲的兄弟粉，父亲兄弟的儿子红\n\n$("div").children().click(function(){\n\nvar el = $(this).css("background","purple")  //自己\n\n .siblings().css("background","yellow")  //自己的兄弟\n\n .parent().css("background","blue")  //自己的父亲\n\n .siblings().css("background","pink") //父亲的兄弟 \n\n .children().css("background","red") //父亲的儿子\n\n});\n```js\n$(function(){});\n$(document).ready() //入口函数同window.onload\n\n\nmouseenter/mouseleave代替mouseover/mouseout 创建元素\n\n$("<h1>标题</h1>");\n\n\n父亲加儿子：.append();\n\n儿子被加到父亲在：.appendto();\n\n\n# 4.1.4jquery下的ajax\n\npost：\n\n$.post("1.php",{"k":"v"},function(data){ });//请求路径、传到服务器的数据、回调函数\n\n\nget：\n\n$.get("1.txt",{"k":"v"},function(data){ });//请求路径、传到服务器的数据、回调函数\n\n\najax：\n\n$.ajax(1.txt,{\n"type":"get",//请求路径、请求类型\n"data":{"k":v }, //传到服务器的数据\n"success":function(data){},//回调函数\n"error":function(xhr,textstatus,errorthrown){}//错误时的回调\n},{})\n\n\n\n# 4.1.5表单序列化\n\n表单序列化：把表单信息序列化成一个字符串。\n\nserialize：把form的表单信息转换成以url 编码的字符串。\n\n$("form").serialize()',charsets:{cjk:!0}},{title:"8.1 概览",frontmatter:{},regularPath:"/frontend/miniprogram/",relativePath:"frontend/miniprogram/README.md",key:"v-503b66f0",path:"/frontend/miniprogram/",headers:[{level:2,title:"8.1 概览",slug:"_8-1-概览",normalizedTitle:"8.1 概览",charIndex:2},{level:2,title:"8.2 wxml特性",slug:"_8-2-wxml特性",normalizedTitle:"8.2 wxml特性",charIndex:309},{level:2,title:"8.3 wxss特性",slug:"_8-3-wxss特性",normalizedTitle:"8.3 wxss特性",charIndex:1262},{level:2,title:"8.4 wxs特性",slug:"_8-4-wxs特性",normalizedTitle:"8.4 wxs特性",charIndex:1502},{level:2,title:"8.5 运行机制",slug:"_8-5-运行机制",normalizedTitle:"8.5 运行机制",charIndex:1827},{level:2,title:"8.6 路由",slug:"_8-6-路由",normalizedTitle:"8.6 路由",charIndex:1997},{level:2,title:"8.7 事件",slug:"_8-7-事件",normalizedTitle:"8.7 事件",charIndex:2010},{level:2,title:"8.8 组件",slug:"_8-8-组件",normalizedTitle:"8.8 组件",charIndex:2118},{level:3,title:"8.8.1 视图",slug:"_8-8-1-视图",normalizedTitle:"8.8.1 视图",charIndex:2129},{level:3,title:"8.8.2 基础内容",slug:"_8-8-2-基础内容",normalizedTitle:"8.8.2 基础内容",charIndex:2238},{level:3,title:"8.8.3 表单",slug:"_8-8-3-表单",normalizedTitle:"8.8.3 表单",charIndex:2312},{level:3,title:"8.8.4 导航",slug:"_8-8-4-导航",normalizedTitle:"8.8.4 导航",charIndex:2440},{level:3,title:"8.8.5 媒体组件",slug:"_8-8-5-媒体组件",normalizedTitle:"8.8.5 媒体组件",charIndex:2467},{level:3,title:"8.8.6 地图组件",slug:"_8-8-6-地图组件",normalizedTitle:"8.8.6 地图组件",charIndex:2601},{level:3,title:"8.8.7 Canvas",slug:"_8-8-7-canvas",normalizedTitle:"8.8.7 canvas",charIndex:2624},{level:3,title:"8.8.8 开发能力",slug:"_8-8-8-开发能力",normalizedTitle:"8.8.8 开发能力",charIndex:2641},{level:2,title:"8.9 API",slug:"_8-9-api",normalizedTitle:"8.9 api",charIndex:2703},{level:3,title:"8.9.1 网络",slug:"_8-9-1-网络",normalizedTitle:"8.9.1 网络",charIndex:2849},{level:3,title:"8.9.2 媒体",slug:"_8-9-2-媒体",normalizedTitle:"8.9.2 媒体",charIndex:3064},{level:3,title:"8.9.3 文件",slug:"_8-9-3-文件",normalizedTitle:"8.9.3 文件",charIndex:3365},{level:3,title:"8.9.4 数据缓存",slug:"_8-9-4-数据缓存",normalizedTitle:"8.9.4 数据缓存",charIndex:3499},{level:3,title:"8.9.5 位置",slug:"_8-9-5-位置",normalizedTitle:"8.9.5 位置",charIndex:3731},{level:3,title:"8.9.6 设备",slug:"_8-9-6-设备",normalizedTitle:"8.9.6 设备",charIndex:3826},{level:3,title:"8.9.7 界面",slug:"_8-9-7-界面",normalizedTitle:"8.9.7 界面",charIndex:4217},{level:3,title:"8.9.8 路由",slug:"_8-9-8-路由",normalizedTitle:"8.9.8 路由",charIndex:5145},{level:3,title:"8.9.9 动画",slug:"_8-9-9-动画",normalizedTitle:"8.9.9 动画",charIndex:5419},{level:3,title:"8.9.10 绘图",slug:"_8-9-10-绘图",normalizedTitle:"8.9.10 绘图",charIndex:5465},{level:3,title:"8.9.11 开放接口",slug:"_8-9-11-开放接口",normalizedTitle:"8.9.11 开放接口",charIndex:5518},{level:3,title:"8.9.12 WXML",slug:"_8-9-12-wxml",normalizedTitle:"8.9.12 wxml",charIndex:6522}],headersStr:"8.1 概览 8.2 wxml特性 8.3 wxss特性 8.4 wxs特性 8.5 运行机制 8.6 路由 8.7 事件 8.8 组件 8.8.1 视图 8.8.2 基础内容 8.8.3 表单 8.8.4 导航 8.8.5 媒体组件 8.8.6 地图组件 8.8.7 Canvas 8.8.8 开发能力 8.9 API 8.9.1 网络 8.9.2 媒体 8.9.3 文件 8.9.4 数据缓存 8.9.5 位置 8.9.6 设备 8.9.7 界面 8.9.8 路由 8.9.9 动画 8.9.10 绘图 8.9.11 开放接口 8.9.12 WXML",content:'# 8.1 概览\n\n微信开放文档\n\n * 小程序代码构成\n\n> .json后缀的JSON配置文件\n> \n> > app.json小程序的全局配置文件\n> > project.config.json工具配置文件\n> > page.json页面配置文件\n> > .wxml后缀的WXML模板文件\n> > 标签必须闭合、大小写敏感\n> > .wxss后缀的WXSS样式文件\n> > app.wxss公共样式配置文件\n> > .js后缀的JS脚本逻辑文件\n> > app.js入口逻辑文件\n> > .wxs后缀的WeiXinScript脚本逻辑文件\n\n * 小程序版本发布流程 预览版→开发版→体验版→审核版→正式版\n\n\n# 8.2 wxml特性\n\n * 支持的标签、组件：详见视图容器|微信开放文档\n * 支持的属性：id、class、style、hidden、data-、bind/catch*\n * 数据绑定：详见数据绑定|微信开放文档\n\n    <view hidden="{{flag ? true : false}}"> {{"hello" + message}} </view>\n\n\n * 列表渲染：详见列表渲染|微信开放文档\n\n    <block wx:for="{{item}}" wx:for-item="item" wx:key="index">\n        <view>{{index}}:{{item.name}}</view>\n    </block>\n\n\n*条件渲染：详见条件渲染|微信开放文档\n\n<view wx:if="{{length > 5}}">大于五</view>\n<view wx:elif="{{length > 2}}">大于二小于五</view>\n<view wx:else>其他 </view>\n\n\n * 模板：详见模板|微信开放文档\n\n\x3c!-- 定义： --\x3e\n<template name="msgItem">\n  <view>\n    <text> {{index}}: {{msg}} </text>\n    <text> Time: {{time}} </text>\n  </view>\n</template>\n\n\x3c!-- 使用： --\x3e\n <template is="msgItem" data="{{...item}}"/> \x3c!-- 只能通过data传参数 --\x3e\n\n\n引用：详见引用|微信开放文档 import：只能引入根节点的template include：可以引入template内的全部template\n\n\x3c!-- 定义item.wxml --\x3e\n<template name="item">\n  <text>{{text}}</text>\n</template>\n\x3c!-- 引用 --\x3e\n<import src="item.wxml"/>\n<template is="item" data="{{text: \'forbar\'}}"/>\n\n\n\n# 8.3 wxss特性\n\n * rpx单位：设备像素（dp设备的物理像素）、CSS像素、PPI/DPI（每英寸像素数）、DPR（设备像素与CSS像素的比）、rpx（规定屏幕宽度750px，根据DPR进行计算自动适配）\n * 外链样式导入：\n\n@import \'./assets.wxss\'\n\n\n * 选择器：id选择器、类选择器、标签选择器、after/before伪类\n * 选择器优先级：important最高、行内1000、id选择器100、类选择器10、标签选择器\n\n\n# 8.4 wxs特性\n\nJS运行环境：ios→JavaScriptCore、android→X5内核、IED→nwjs WXS：运行环境不依赖于运行时的基础库版本，可以在所有版本的小程序中运行\n\n\x3c!-- 定义 --\x3e\n<wxs module="m1">\nvar msg = "hello world";\nmodule.exports.message = msg;\n</wxs>\n\x3c!-- 使用 --\x3e\n<view> {{m1.message}} </view>\n\n\nWXS数据类型：number、string、boolean、object、arrary、function、date、regexp\n\nTIP\n\nwxs不支持try/catch\n\n\n\n# 8.5 运行机制\n\n * 运行机制：视图层→逻辑层→CDM（查看是否有更新）→网络请求\n * 生命周期\n\n# 应用生命周期：\n\nonLaunch\nonShow\nonHide\nonError\n\n# 页面生命周期：\n\nonLoad\nonShow\nonReady\nonHide\nonUnload\n\nTIP\n\n挂起5min后自动删除进程。\n\n\n# 8.6 路由\n\n\n\n\n# 8.7 事件\n\n * touchstart、\n * touchmove、\n * touchcancel（被打断）、\n * touchend、\n * tap、\n * logpress、\n * longtap、\n\n\n# 8.8 组件\n\n\n# 8.8.1 视图\n\n * view（相当于DIV）\n * scroll-view（滚动）\n * swiper（轮播）\n * movable-view（移动缩放）\n * cover-view（用户覆盖原生组件）\n\n\n# 8.8.2 基础内容\n\n * icon（图标）\n * text（文本）\n * rich-text（符文本）\n * percent（进度条）\n\n\n# 8.8.3 表单\n\n * button\n * checkbox\n * form\n * input\n * label\n * picker\n * picker-view\n * radio\n * slider\n * switch\n * textarea\n\n\n# 8.8.4 导航\n\n * navigator\n\n\n# 8.8.5 媒体组件\n\n * audio（音频）\n * video（视频）\n * camera（相机）\n * image（图片 ）\n * live-player（实时播放）\n * live-pusher（实时录制）\n * voip-room（多人音视频对话）\n\n\n# 8.8.6 地图组件\n\n * map\n\n\n# 8.8.7 Canvas\n\n\n# 8.8.8 开发能力\n\n * open-data\n * web-view 需要配置业务域名，必须是HTTPS协议。\n\n\n# 8.9 API\n\n前缀：wx.\n方法：wx.get（获取）、wx.set（写入）\n回调函数：success（成功）、fail（失败）、complete（完成）\n回调函数类型：直调函数（程序运行时立即执行被调函数）、回调函数（程序运行之后执行被调函数。包括登记回调函数和执行回调函数）\n\n\n# 8.9.1 网络\n\n * 发起请求：\n\n> wx.request（发起请求）：需要配置request白名单，必须的HTTPS协议，且通过ICP备案。\n\n * 上传、下载类：\n\n> wx.uploadFile（上传）：需要配置uploadFile白名单。\n> wx.downloadFile（下载）需要配置downloadFile白名单。\n\n * websocket websocket：需要配置websocket白名单。\n\n\n# 8.9.2 媒体\n\n# 图片类：\n\n * wx.chooseImage（选择图片）\n * wx.previewImage（预览图片）\n * wx.getImage（查看图片信息）\n * wx.saveImageToPhotosAlbum（保存图片）\n\nTIP\n\n 1. 必须是本地路径，远程地址可以使用downloadFile下载到本地再保存到相册。\n\n# 录音：\n\n * wx.startRecord（开始录音），不再维护，但可使用\n * wx.stopRecord（停止录音），不再维护，但可使用\n * wx.getRecorderManager（录音管理器）\n\n# 音频：\n\n# 视频：\n\n\n# 8.9.3 文件\n\n * wx.savaFile\n * wx.getFileInfo\n * wx.getSavedFileList\n * wx.getSavedFileInfo\n * wx.removeSavedFile\n * wx.openDocument\n\n\n# 8.9.4 数据缓存\n\n * wx.setStorage\n * wx.setStorageSync\n * wx.getStorage\n * wx.getStorageSync\n * wx.getStorageInfo\n * wx.getStorageInfoSync\n * wx.removeStorage\n * wx.removeStorageInfoSync\n * wx.clearStorage\n * wx.clearStorageInfoSync\n\n\n# 8.9.5 位置\n\n * wx.getLocation\n * wx.chooseLocation\n * wx.openLocation\n * wx.createMapContext\n\n\n# 8.9.6 设备\n\n * wx.canIUse\n   判断小程序的API，回调，参数，组件等是否在当前版本可用。\n   ${API}.${method}.${param}.${option}或${component}.${attribute}.${option}\n   \n   wx.canIUse(\'console.log\')\n   wx.canIUse(\'getSystemInfo.success.screenWidth\')\n   \n\n# 设备信息：\n\n * wx.getSystemInfoSync(同步获取设备信息)\n * wx.getSystemInfoAsync(异步获取设备信息)\n\n# 网络状态：\n\n * wx.getNetworkType(获取网络类型)\n * wx.onNetworkStatusChange(监听网络状态变化事件)\n\n# 网络状态：\n\n\n# 8.9.7 界面\n\n# 交互：\n\n * wx.showToast(提示框)、wx.hideToast(隐藏示框)\n * wx.showModal(模态框\n * wx.showLoading(加载动画)、wx.hideLoading(隐藏加载动画)\n * wx.showActionSheet(显示操作菜单)\n * wx.enableAlertBeforeUnload(开启小程序页面返回询问对话框)、wx.disableAlertBeforeUnload(关闭小程序页面返回询问对话框)\n\nWARNING\n\nwx.showLoading和wx.showToast同时只能显示一个。\n\n# 导航栏：\n\n * wx.showNavigationBarLoading(导航条加载动画)、wx.hideNavigationBarLoading(隐藏导航条加载动画)\n * wx.setNavigationBarTitle(导航条标题)\n * wx.setNavigationBarColor(导航条颜色)\n * wx.hideHomeButton(隐藏返回首页按钮)\n\n# 背景：\n\n * wx.setBackgroundTextStyle(下拉背景字体、loading 图的样式)\n * wx.setBackgroundColor(背景色)\n\n# Tab Bar：\n\n * wx.showTabBar(显示tabBar)、wx.hideTabBar(隐藏tabBar)\n * wx.setTabBarStyle(设置tabBar的整体样式)\n * wx.setTabBarItem(设置tabBar某一项的内容)\n * wx.setTabBarBadge(为tabBar某一项的右上角添加文本)、wx.removeTabBarBadge(移除tabBar某一项右上角的文本)\n * wx.showTabBarRedDot(显示tabBar某一项的右上角的红点)、wx.hideTabBarRedDot(隐藏tabBar某一项的右上角的红点)\n\n# 置顶栏\n\n * wx.setTopBarText(动态设置置顶栏文字内容)\n   只有小程序被置顶时生效\n\n\n# 8.9.8 路由\n\n * wx.reLaunch(关闭所有页面，打开到应用内的某个页面)\n * wx.redirectTo(关闭当前页面，跳转到应用内的某个页面。不能跳tabbar 页面)\n * wx.navigateTo(保留当前页面，跳转到应用内的某个页面。不能跳tabbar页面)\n * wx.navigateBack(关闭当前页面，返回到原页面)\n   可通过 getCurrentPages 获取当前的页面栈，决定需要返回几层\n * wx.switchTab(跳转到tabBar页面，并关闭其他所有非tabBar页面,不能传参)\n\n\n# 8.9.9 动画\n\n * wx.createAnimation(创建一个动画实例)\n\n\n# 8.9.10 绘图\n\n * wx.createCanvasContext(创建canvas对象)\n\n\n# 8.9.11 开放接口\n\n# 登录\n\n * wx.login(接口获取登录凭证code)\n   发送code给后端服务器，获取session_key(有时效性)。\n\nwx.login({\n  success (res) {\n    if (res.code) {\n      //发起网络请求\n      wx.request({\n        url: \'https://example.com/onLogin\',\n        data: {\n          code: res.code\n        }\n      })\n    } else {\n      console.log(\'登录失败！\' + res.errMsg)\n    }\n  }\n})\n\n\n * wx.checkSession(检查session_key是否过期)\n\nwx.checkSession({\n  success () {\n    //session_key 未过期，并且在本生命周期一直有效\n  },\n  fail () {\n    // session_key 已经失效，需要重新执行登录流程\n    wx.login() //重新登录\n  }\n})\n\n\n# 账号信息\n\n * wx.getAccountInfoSync(获取当前帐号信息，只能在正式版中获取)\n\n# 用户信息\n\n * wx.getUserProfile(获取授权、和当前用户信息)\n * wx.getUserInfo(已授权的情况下，获取用户信息)\n\n# 授权\n\n * wx.authorize(提前向用户发起授权请求)\n\nuni.authorize({\n  scope: \'scope.writePhotosAlbum\',// 要获取的权限名\n  success() {},\n  fail (error) {},\n})\n\n\n# 设置\n\n * wx.getSetting(获取用户的当前设置)\n\nwx.getSetting({\n  success (res) {},\n  fail(error) {},\n})\n\n\n * wx.openSetting(查看设置界面)\n\nwx.openSetting({\n  success (res) {},\n  fail (error) {},\n})\n\n\n# 微信支付\n\n小程序账号必须是商户账号\n\n\n# 8.9.12 WXML\n\n * wx.createSelectorQuery(创建获取DOM节点信息对象) 查看DOM信息\n\nconst query = wx.createSelectorQuery()\nquery.select(\'#the-id\').boundingClientRect()\nquery.selectViewport().scrollOffset()\nquery.exec(function(res){\n  res[0].top       // #the-id节点的上边界坐标\n  res[1].scrollTop // 显示区域的竖直滚动位置\n})\n',normalizedContent:'# 8.1 概览\n\n微信开放文档\n\n * 小程序代码构成\n\n> .json后缀的json配置文件\n> \n> > app.json小程序的全局配置文件\n> > project.config.json工具配置文件\n> > page.json页面配置文件\n> > .wxml后缀的wxml模板文件\n> > 标签必须闭合、大小写敏感\n> > .wxss后缀的wxss样式文件\n> > app.wxss公共样式配置文件\n> > .js后缀的js脚本逻辑文件\n> > app.js入口逻辑文件\n> > .wxs后缀的weixinscript脚本逻辑文件\n\n * 小程序版本发布流程 预览版→开发版→体验版→审核版→正式版\n\n\n# 8.2 wxml特性\n\n * 支持的标签、组件：详见视图容器|微信开放文档\n * 支持的属性：id、class、style、hidden、data-、bind/catch*\n * 数据绑定：详见数据绑定|微信开放文档\n\n    <view hidden="{{flag ? true : false}}"> {{"hello" + message}} </view>\n\n\n * 列表渲染：详见列表渲染|微信开放文档\n\n    <block wx:for="{{item}}" wx:for-item="item" wx:key="index">\n        <view>{{index}}:{{item.name}}</view>\n    </block>\n\n\n*条件渲染：详见条件渲染|微信开放文档\n\n<view wx:if="{{length > 5}}">大于五</view>\n<view wx:elif="{{length > 2}}">大于二小于五</view>\n<view wx:else>其他 </view>\n\n\n * 模板：详见模板|微信开放文档\n\n\x3c!-- 定义： --\x3e\n<template name="msgitem">\n  <view>\n    <text> {{index}}: {{msg}} </text>\n    <text> time: {{time}} </text>\n  </view>\n</template>\n\n\x3c!-- 使用： --\x3e\n <template is="msgitem" data="{{...item}}"/> \x3c!-- 只能通过data传参数 --\x3e\n\n\n引用：详见引用|微信开放文档 import：只能引入根节点的template include：可以引入template内的全部template\n\n\x3c!-- 定义item.wxml --\x3e\n<template name="item">\n  <text>{{text}}</text>\n</template>\n\x3c!-- 引用 --\x3e\n<import src="item.wxml"/>\n<template is="item" data="{{text: \'forbar\'}}"/>\n\n\n\n# 8.3 wxss特性\n\n * rpx单位：设备像素（dp设备的物理像素）、css像素、ppi/dpi（每英寸像素数）、dpr（设备像素与css像素的比）、rpx（规定屏幕宽度750px，根据dpr进行计算自动适配）\n * 外链样式导入：\n\n@import \'./assets.wxss\'\n\n\n * 选择器：id选择器、类选择器、标签选择器、after/before伪类\n * 选择器优先级：important最高、行内1000、id选择器100、类选择器10、标签选择器\n\n\n# 8.4 wxs特性\n\njs运行环境：ios→javascriptcore、android→x5内核、ied→nwjs wxs：运行环境不依赖于运行时的基础库版本，可以在所有版本的小程序中运行\n\n\x3c!-- 定义 --\x3e\n<wxs module="m1">\nvar msg = "hello world";\nmodule.exports.message = msg;\n</wxs>\n\x3c!-- 使用 --\x3e\n<view> {{m1.message}} </view>\n\n\nwxs数据类型：number、string、boolean、object、arrary、function、date、regexp\n\ntip\n\nwxs不支持try/catch\n\n\n\n# 8.5 运行机制\n\n * 运行机制：视图层→逻辑层→cdm（查看是否有更新）→网络请求\n * 生命周期\n\n# 应用生命周期：\n\nonlaunch\nonshow\nonhide\nonerror\n\n# 页面生命周期：\n\nonload\nonshow\nonready\nonhide\nonunload\n\ntip\n\n挂起5min后自动删除进程。\n\n\n# 8.6 路由\n\n\n\n\n# 8.7 事件\n\n * touchstart、\n * touchmove、\n * touchcancel（被打断）、\n * touchend、\n * tap、\n * logpress、\n * longtap、\n\n\n# 8.8 组件\n\n\n# 8.8.1 视图\n\n * view（相当于div）\n * scroll-view（滚动）\n * swiper（轮播）\n * movable-view（移动缩放）\n * cover-view（用户覆盖原生组件）\n\n\n# 8.8.2 基础内容\n\n * icon（图标）\n * text（文本）\n * rich-text（符文本）\n * percent（进度条）\n\n\n# 8.8.3 表单\n\n * button\n * checkbox\n * form\n * input\n * label\n * picker\n * picker-view\n * radio\n * slider\n * switch\n * textarea\n\n\n# 8.8.4 导航\n\n * navigator\n\n\n# 8.8.5 媒体组件\n\n * audio（音频）\n * video（视频）\n * camera（相机）\n * image（图片 ）\n * live-player（实时播放）\n * live-pusher（实时录制）\n * voip-room（多人音视频对话）\n\n\n# 8.8.6 地图组件\n\n * map\n\n\n# 8.8.7 canvas\n\n\n# 8.8.8 开发能力\n\n * open-data\n * web-view 需要配置业务域名，必须是https协议。\n\n\n# 8.9 api\n\n前缀：wx.\n方法：wx.get（获取）、wx.set（写入）\n回调函数：success（成功）、fail（失败）、complete（完成）\n回调函数类型：直调函数（程序运行时立即执行被调函数）、回调函数（程序运行之后执行被调函数。包括登记回调函数和执行回调函数）\n\n\n# 8.9.1 网络\n\n * 发起请求：\n\n> wx.request（发起请求）：需要配置request白名单，必须的https协议，且通过icp备案。\n\n * 上传、下载类：\n\n> wx.uploadfile（上传）：需要配置uploadfile白名单。\n> wx.downloadfile（下载）需要配置downloadfile白名单。\n\n * websocket websocket：需要配置websocket白名单。\n\n\n# 8.9.2 媒体\n\n# 图片类：\n\n * wx.chooseimage（选择图片）\n * wx.previewimage（预览图片）\n * wx.getimage（查看图片信息）\n * wx.saveimagetophotosalbum（保存图片）\n\ntip\n\n 1. 必须是本地路径，远程地址可以使用downloadfile下载到本地再保存到相册。\n\n# 录音：\n\n * wx.startrecord（开始录音），不再维护，但可使用\n * wx.stoprecord（停止录音），不再维护，但可使用\n * wx.getrecordermanager（录音管理器）\n\n# 音频：\n\n# 视频：\n\n\n# 8.9.3 文件\n\n * wx.savafile\n * wx.getfileinfo\n * wx.getsavedfilelist\n * wx.getsavedfileinfo\n * wx.removesavedfile\n * wx.opendocument\n\n\n# 8.9.4 数据缓存\n\n * wx.setstorage\n * wx.setstoragesync\n * wx.getstorage\n * wx.getstoragesync\n * wx.getstorageinfo\n * wx.getstorageinfosync\n * wx.removestorage\n * wx.removestorageinfosync\n * wx.clearstorage\n * wx.clearstorageinfosync\n\n\n# 8.9.5 位置\n\n * wx.getlocation\n * wx.chooselocation\n * wx.openlocation\n * wx.createmapcontext\n\n\n# 8.9.6 设备\n\n * wx.caniuse\n   判断小程序的api，回调，参数，组件等是否在当前版本可用。\n   ${api}.${method}.${param}.${option}或${component}.${attribute}.${option}\n   \n   wx.caniuse(\'console.log\')\n   wx.caniuse(\'getsysteminfo.success.screenwidth\')\n   \n\n# 设备信息：\n\n * wx.getsysteminfosync(同步获取设备信息)\n * wx.getsysteminfoasync(异步获取设备信息)\n\n# 网络状态：\n\n * wx.getnetworktype(获取网络类型)\n * wx.onnetworkstatuschange(监听网络状态变化事件)\n\n# 网络状态：\n\n\n# 8.9.7 界面\n\n# 交互：\n\n * wx.showtoast(提示框)、wx.hidetoast(隐藏示框)\n * wx.showmodal(模态框\n * wx.showloading(加载动画)、wx.hideloading(隐藏加载动画)\n * wx.showactionsheet(显示操作菜单)\n * wx.enablealertbeforeunload(开启小程序页面返回询问对话框)、wx.disablealertbeforeunload(关闭小程序页面返回询问对话框)\n\nwarning\n\nwx.showloading和wx.showtoast同时只能显示一个。\n\n# 导航栏：\n\n * wx.shownavigationbarloading(导航条加载动画)、wx.hidenavigationbarloading(隐藏导航条加载动画)\n * wx.setnavigationbartitle(导航条标题)\n * wx.setnavigationbarcolor(导航条颜色)\n * wx.hidehomebutton(隐藏返回首页按钮)\n\n# 背景：\n\n * wx.setbackgroundtextstyle(下拉背景字体、loading 图的样式)\n * wx.setbackgroundcolor(背景色)\n\n# tab bar：\n\n * wx.showtabbar(显示tabbar)、wx.hidetabbar(隐藏tabbar)\n * wx.settabbarstyle(设置tabbar的整体样式)\n * wx.settabbaritem(设置tabbar某一项的内容)\n * wx.settabbarbadge(为tabbar某一项的右上角添加文本)、wx.removetabbarbadge(移除tabbar某一项右上角的文本)\n * wx.showtabbarreddot(显示tabbar某一项的右上角的红点)、wx.hidetabbarreddot(隐藏tabbar某一项的右上角的红点)\n\n# 置顶栏\n\n * wx.settopbartext(动态设置置顶栏文字内容)\n   只有小程序被置顶时生效\n\n\n# 8.9.8 路由\n\n * wx.relaunch(关闭所有页面，打开到应用内的某个页面)\n * wx.redirectto(关闭当前页面，跳转到应用内的某个页面。不能跳tabbar 页面)\n * wx.navigateto(保留当前页面，跳转到应用内的某个页面。不能跳tabbar页面)\n * wx.navigateback(关闭当前页面，返回到原页面)\n   可通过 getcurrentpages 获取当前的页面栈，决定需要返回几层\n * wx.switchtab(跳转到tabbar页面，并关闭其他所有非tabbar页面,不能传参)\n\n\n# 8.9.9 动画\n\n * wx.createanimation(创建一个动画实例)\n\n\n# 8.9.10 绘图\n\n * wx.createcanvascontext(创建canvas对象)\n\n\n# 8.9.11 开放接口\n\n# 登录\n\n * wx.login(接口获取登录凭证code)\n   发送code给后端服务器，获取session_key(有时效性)。\n\nwx.login({\n  success (res) {\n    if (res.code) {\n      //发起网络请求\n      wx.request({\n        url: \'https://example.com/onlogin\',\n        data: {\n          code: res.code\n        }\n      })\n    } else {\n      console.log(\'登录失败！\' + res.errmsg)\n    }\n  }\n})\n\n\n * wx.checksession(检查session_key是否过期)\n\nwx.checksession({\n  success () {\n    //session_key 未过期，并且在本生命周期一直有效\n  },\n  fail () {\n    // session_key 已经失效，需要重新执行登录流程\n    wx.login() //重新登录\n  }\n})\n\n\n# 账号信息\n\n * wx.getaccountinfosync(获取当前帐号信息，只能在正式版中获取)\n\n# 用户信息\n\n * wx.getuserprofile(获取授权、和当前用户信息)\n * wx.getuserinfo(已授权的情况下，获取用户信息)\n\n# 授权\n\n * wx.authorize(提前向用户发起授权请求)\n\nuni.authorize({\n  scope: \'scope.writephotosalbum\',// 要获取的权限名\n  success() {},\n  fail (error) {},\n})\n\n\n# 设置\n\n * wx.getsetting(获取用户的当前设置)\n\nwx.getsetting({\n  success (res) {},\n  fail(error) {},\n})\n\n\n * wx.opensetting(查看设置界面)\n\nwx.opensetting({\n  success (res) {},\n  fail (error) {},\n})\n\n\n# 微信支付\n\n小程序账号必须是商户账号\n\n\n# 8.9.12 wxml\n\n * wx.createselectorquery(创建获取dom节点信息对象) 查看dom信息\n\nconst query = wx.createselectorquery()\nquery.select(\'#the-id\').boundingclientrect()\nquery.selectviewport().scrolloffset()\nquery.exec(function(res){\n  res[0].top       // #the-id节点的上边界坐标\n  res[1].scrolltop // 显示区域的竖直滚动位置\n})\n',charsets:{cjk:!0}},{title:"全局配置(Vue.config)",frontmatter:{},regularPath:"/frontend/vue/api/",relativePath:"frontend/vue/api/README.md",key:"v-7db95ea3",path:"/frontend/vue/api/",headers:[{level:3,title:"全局配置(Vue.config)",slug:"全局配置-vue-config",normalizedTitle:"全局配置(vue.config)",charIndex:2},{level:3,title:"全局API",slug:"全局api",normalizedTitle:"全局api",charIndex:1218},{level:3,title:"实例选项",slug:"实例选项",normalizedTitle:"实例选项",charIndex:2099},{level:3,title:"实例方法",slug:"实例方法",normalizedTitle:"实例方法",charIndex:2354}],headersStr:"全局配置(Vue.config) 全局API 实例选项 实例方法",content:"# 全局配置(Vue.config)\n\nVue.config是一个对象，包含Vue的全局配置。\n\n * Vue.config.silent:是否显示Vue所有的日志与警告\n\n> Vue.config.silent = true // 取消 Vue 所有的日志与警告。\n\n * Vue.config.optionMergeStrategies:混入的自定义合并策略\n\n> Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n>   return child + 1\n> }\n> \n> const Profile = Vue.extend({\n>   _my_option: 1\n> })\n> \n> // Profile.options._my_option = 2\n\n * Vue.config.devtools:配置是否允许vue-devtools检查代码\n\n> // 务必在加载 Vue 之后，立即同步设置以下内容\n> Vue.config.devtools = true\n\n * Vue.config.errorHandler:捕获指定组件的渲染和观察期间错误\n\n> Vue.config.errorHandler = function (err, vm, info) {}\n> // `info` 是Vue特定的错误信息，比如错误所在的生命周期钩子\n\n * Vue.config.warnHandler:为Vue运行时的警告赋予一个自定义处理函数\n * Vue.config.ignoredElements:忽略在Vue之外的自定义元素。*Vue 3.x中移除替换为 config.isCustomElement\n * Vue.config.keyCodes:给v-on自定义键位别名.*Vue 3.x中移除\n\n> Vue.config.keyCodes = {\n>   v: 86,\n>   f1: 112,\n>   // camelCase 不可用\n>   mediaPlayPause: 179,\n>   // 取而代之的是 kebab-case 且用双引号括起来\n>   \"media-play-pause\": 179,\n>   up: [38, 87]\n> }\n> \n> \n> <input type=\"text\" @keyup.media-play-pause=\"method\">\n\n * Vue.config.performance:在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于开发模式和支持performance.mark API的浏览器上。\n * Vue.config.productionTip:阻止vue在启动时生成生产提示。*Vue 3.x中移除\n\n\n# 全局API\n\n * Vue.extend():在Vue实例中创建一个“子类” 详见6.4.6 。*Vue 3.x中移除\n * Vue.nextTick():在下次DOM更新循环结束之后执行延迟回调,详见6.9.1\n * Vue.set()修改数组或对象并触发视图更新,详见6.4.6\n * Vue.delete()删除数组或对象并触发视图更新\n * Vue.directive()注册或获取全局自定义指令,详见6.2.14\n * Vue.filter()注册或获取全局过滤器\n * Vue.component()注册或获取全局组件\n * Vue.use()使用已安装的vue插件\n * Vue.mixin()全局注册一个混入,详见6.4.6\n * Vue.compile()将一个模板字符串编译成render函数\n * *Vue 3.x新增： createApp创建应用实例\n * *Vue 3.x新增： mount挂载应用实例\n\n> var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n> \n> new Vue({\n>   data: {\n>     msg: 'hello'\n>   },\n>   render: res.render,\n>   staticRenderFns: res.staticRenderFns\n> })\n\n * Vue.observable()让一个对象可响应\n * Vue.version当前使用的vue版本号（读取package.json中的version字段）\n * Vue.globalProperties:轻易全局对象。*Vue 3.x中移除替换为 config.isCustomElement\n\n// Vue 2.x\nVue.prototype.$http = () => {}\n// Vue 3.x\nconst app = createApp({})\napp.config.globalProperties.$http = () => {}\n\n\n\n# 实例选项\n\n * *Vue 3.x新增： emits定义一个组件可以向其父组件触发的事件\n\n<template>\n  <div>\n    <p>{{ text }}</p>\n    <button v-on:click=\"$emit('accepted')\">OK</button>\n  </div>\n</template>\n<script>\n  export default {\n    props: ['text'],\n    emits: ['accepted']\n  }\n<\/script>\n\n\n\n# 实例方法\n\n# property\n\n * Vue.$data:实例的data对象\n * Vue.$props:当前组件接收到的props对象\n * Vue.$el:Vue根实例的DOM元素\n * Vue.$options:初始化实例选项\n\n> new Vue({\n>   customOption: 'foo',\n>   created: function () {\n>     console.log(this.$options.customOption) // => 'foo'\n>   }\n> })\n\n * Vue.$parent:查看父组件实例\n * Vue.$root::查看根组件实例\n * Vue.$children:查看子组件实例。*Vue 3.x中移除，如需访问子组件请使用$refs\n * Vue.$slots:查看被插槽分发的内容(v-slot:foo -> vm.$slots.foo ,匿名 -> vm.$slots.default)\n * Vue.$scopedSlots:查看作用域插槽\n * Vue.$refs:查看注册过ref属性的dom元素数组。*Vue 3.x不再自动创建$ref数组\n * Vue.$isServer:当前 Vue 实例是否运行于服务器\n * Vue.$attrs:获取父组件中不被prop识别，且不是class和style的数据，并且可以通过v-bind=\"$attrs\"向下传入。*Vue 3.x中包含class和style\n * Vue.$listeners:监听父组件中(不含 .native 修饰器的) v-on 事件监听器的时间，并且可以通过v-bind=\"$listeners\"向下传入。*Vue 3.x中移除\n\n# 数据\n\n * Vue.$watch:监听Vue实例上的一个表达式或者一个函数计算结果的变化\n * Vue.$set:全局Vue.set的别名\n * Vue.$delete:全局Vue.delete的别名\n\n# 事件\n\n * Vue.$on:监听当前实例上的自定义事件.*Vue 3.x中移除\n\n> vm.$on('test', function (msg) {\n>   console.log(msg)\n> })\n> vm.$emit('test', 'hi')\n> // => \"hi\"\n\n * Vue.$once:监听一个自定义事件，但是只触发一次。一旦触发之后，监听器就会被移除.*Vue 3.x中移除\n * Vue.$off:移除自定义事件监听器,如果没有提供参数，则移除所有的事件监听器.*Vue 3.x中移除\n * Vue.$emit:触发当前实例上的事件\n\n# 生命周期\n\n * Vue.$mount:手动挂载一个未挂载的实例\n * Vue.$forceUpdate:迫使Vue实例重新渲染\n * Vue.$nextTick:将回调延迟到下次DOM更新循环之后执行\n * Vue.$destroy:完全销毁一个实例，会触发beforeDestroy和destroyed钩子\n\nTIP\n\n组件与实例的关系：Vue是由一个个实例构建而成的，一个组件就是一个Vue的实例，每个组件内部都可以写属性，因此每一个组件都是一个Vue的实例。”\n\n * 具体使用方法详见：VUE|API",normalizedContent:"# 全局配置(vue.config)\n\nvue.config是一个对象，包含vue的全局配置。\n\n * vue.config.silent:是否显示vue所有的日志与警告\n\n> vue.config.silent = true // 取消 vue 所有的日志与警告。\n\n * vue.config.optionmergestrategies:混入的自定义合并策略\n\n> vue.config.optionmergestrategies._my_option = function (parent, child, vm) {\n>   return child + 1\n> }\n> \n> const profile = vue.extend({\n>   _my_option: 1\n> })\n> \n> // profile.options._my_option = 2\n\n * vue.config.devtools:配置是否允许vue-devtools检查代码\n\n> // 务必在加载 vue 之后，立即同步设置以下内容\n> vue.config.devtools = true\n\n * vue.config.errorhandler:捕获指定组件的渲染和观察期间错误\n\n> vue.config.errorhandler = function (err, vm, info) {}\n> // `info` 是vue特定的错误信息，比如错误所在的生命周期钩子\n\n * vue.config.warnhandler:为vue运行时的警告赋予一个自定义处理函数\n * vue.config.ignoredelements:忽略在vue之外的自定义元素。*vue 3.x中移除替换为 config.iscustomelement\n * vue.config.keycodes:给v-on自定义键位别名.*vue 3.x中移除\n\n> vue.config.keycodes = {\n>   v: 86,\n>   f1: 112,\n>   // camelcase 不可用\n>   mediaplaypause: 179,\n>   // 取而代之的是 kebab-case 且用双引号括起来\n>   \"media-play-pause\": 179,\n>   up: [38, 87]\n> }\n> \n> \n> <input type=\"text\" @keyup.media-play-pause=\"method\">\n\n * vue.config.performance:在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于开发模式和支持performance.mark api的浏览器上。\n * vue.config.productiontip:阻止vue在启动时生成生产提示。*vue 3.x中移除\n\n\n# 全局api\n\n * vue.extend():在vue实例中创建一个“子类” 详见6.4.6 。*vue 3.x中移除\n * vue.nexttick():在下次dom更新循环结束之后执行延迟回调,详见6.9.1\n * vue.set()修改数组或对象并触发视图更新,详见6.4.6\n * vue.delete()删除数组或对象并触发视图更新\n * vue.directive()注册或获取全局自定义指令,详见6.2.14\n * vue.filter()注册或获取全局过滤器\n * vue.component()注册或获取全局组件\n * vue.use()使用已安装的vue插件\n * vue.mixin()全局注册一个混入,详见6.4.6\n * vue.compile()将一个模板字符串编译成render函数\n * *vue 3.x新增： createapp创建应用实例\n * *vue 3.x新增： mount挂载应用实例\n\n> var res = vue.compile('<div><span>{{ msg }}</span></div>')\n> \n> new vue({\n>   data: {\n>     msg: 'hello'\n>   },\n>   render: res.render,\n>   staticrenderfns: res.staticrenderfns\n> })\n\n * vue.observable()让一个对象可响应\n * vue.version当前使用的vue版本号（读取package.json中的version字段）\n * vue.globalproperties:轻易全局对象。*vue 3.x中移除替换为 config.iscustomelement\n\n// vue 2.x\nvue.prototype.$http = () => {}\n// vue 3.x\nconst app = createapp({})\napp.config.globalproperties.$http = () => {}\n\n\n\n# 实例选项\n\n * *vue 3.x新增： emits定义一个组件可以向其父组件触发的事件\n\n<template>\n  <div>\n    <p>{{ text }}</p>\n    <button v-on:click=\"$emit('accepted')\">ok</button>\n  </div>\n</template>\n<script>\n  export default {\n    props: ['text'],\n    emits: ['accepted']\n  }\n<\/script>\n\n\n\n# 实例方法\n\n# property\n\n * vue.$data:实例的data对象\n * vue.$props:当前组件接收到的props对象\n * vue.$el:vue根实例的dom元素\n * vue.$options:初始化实例选项\n\n> new vue({\n>   customoption: 'foo',\n>   created: function () {\n>     console.log(this.$options.customoption) // => 'foo'\n>   }\n> })\n\n * vue.$parent:查看父组件实例\n * vue.$root::查看根组件实例\n * vue.$children:查看子组件实例。*vue 3.x中移除，如需访问子组件请使用$refs\n * vue.$slots:查看被插槽分发的内容(v-slot:foo -> vm.$slots.foo ,匿名 -> vm.$slots.default)\n * vue.$scopedslots:查看作用域插槽\n * vue.$refs:查看注册过ref属性的dom元素数组。*vue 3.x不再自动创建$ref数组\n * vue.$isserver:当前 vue 实例是否运行于服务器\n * vue.$attrs:获取父组件中不被prop识别，且不是class和style的数据，并且可以通过v-bind=\"$attrs\"向下传入。*vue 3.x中包含class和style\n * vue.$listeners:监听父组件中(不含 .native 修饰器的) v-on 事件监听器的时间，并且可以通过v-bind=\"$listeners\"向下传入。*vue 3.x中移除\n\n# 数据\n\n * vue.$watch:监听vue实例上的一个表达式或者一个函数计算结果的变化\n * vue.$set:全局vue.set的别名\n * vue.$delete:全局vue.delete的别名\n\n# 事件\n\n * vue.$on:监听当前实例上的自定义事件.*vue 3.x中移除\n\n> vm.$on('test', function (msg) {\n>   console.log(msg)\n> })\n> vm.$emit('test', 'hi')\n> // => \"hi\"\n\n * vue.$once:监听一个自定义事件，但是只触发一次。一旦触发之后，监听器就会被移除.*vue 3.x中移除\n * vue.$off:移除自定义事件监听器,如果没有提供参数，则移除所有的事件监听器.*vue 3.x中移除\n * vue.$emit:触发当前实例上的事件\n\n# 生命周期\n\n * vue.$mount:手动挂载一个未挂载的实例\n * vue.$forceupdate:迫使vue实例重新渲染\n * vue.$nexttick:将回调延迟到下次dom更新循环之后执行\n * vue.$destroy:完全销毁一个实例，会触发beforedestroy和destroyed钩子\n\ntip\n\n组件与实例的关系：vue是由一个个实例构建而成的，一个组件就是一个vue的实例，每个组件内部都可以写属性，因此每一个组件都是一个vue的实例。”\n\n * 具体使用方法详见：vue|api",charsets:{cjk:!0}},{title:"6.9.1nextTick",frontmatter:{},regularPath:"/frontend/vue/async/",relativePath:"frontend/vue/async/README.md",key:"v-29ca1f63",path:"/frontend/vue/async/",headers:[{level:2,title:"6.9.1nextTick",slug:"_6-9-1nexttick",normalizedTitle:"6.9.1nexttick",charIndex:2},{level:2,title:"7.9.2Promise",slug:"_7-9-2promise",normalizedTitle:"7.9.2promise",charIndex:337},{level:2,title:"7.9.3async/await",slug:"_7-9-3async-await",normalizedTitle:"7.9.3async/await",charIndex:354}],headersStr:"6.9.1nextTick 7.9.2Promise 7.9.3async/await",content:"# 6.9.1nextTick\n\nVue在更新DOM时是异步执行的。当数据发生变化，Vue将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新。\n\n为了在更新DOM后能立即拿的修改后的数据就需要nextTick方法。nextTick会在DOM更新结束后立即执行。\n\ncreated(){\n    this.$nextTick(() => {})\n}\n\n\nTIP\n\n在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中.\n\n*Vue 3.x写法\n\nimport { nextTick  } from 'vue'\ncreated(){\n    nextTick(() => {})\n}\n\n\n\n# 7.9.2Promise\n\n\n# 7.9.3async/await",normalizedContent:"# 6.9.1nexttick\n\nvue在更新dom时是异步执行的。当数据发生变化，vue将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新。\n\n为了在更新dom后能立即拿的修改后的数据就需要nexttick方法。nexttick会在dom更新结束后立即执行。\n\ncreated(){\n    this.$nexttick(() => {})\n}\n\n\ntip\n\n在vue生命周期的created()钩子函数进行的dom操作一定要放在vue.nexttick()的回调函数中.\n\n*vue 3.x写法\n\nimport { nexttick  } from 'vue'\ncreated(){\n    nexttick(() => {})\n}\n\n\n\n# 7.9.2promise\n\n\n# 7.9.3async/await",charsets:{cjk:!0}},{frontmatter:{},regularPath:"/frontend/vue/axios/",relativePath:"frontend/vue/axios/README.md",key:"v-54e92d23",path:"/frontend/vue/axios/",headersStr:null,content:"Axios是一个基于promise(es6)的HTTP库，用于取代ajax，可以用在浏览器和node.js\n\n# GET请求\n\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n// 上面的请求也可以这样做\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n# POST请求\n\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n# 执行多个并发请求\n\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // 两个请求现在都执行完成\n  }));\n\n\n# 请求配置\n\n{\n   // `url` 是用于请求的服务器 URL\n  url: '/user',\n\n  // `method` 是创建请求时使用的方法\n  method: 'get', // default\n\n  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n  // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n  baseURL: 'https://jaqi.gitee.io/api/',\n\n  // `transformRequest` 允许在向服务器发送前，修改请求数据\n  // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\n  transformRequest: [function (data, headers) {\n    // 对 data 进行任意转换处理\n    return data;\n  }],\n\n  // `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n  transformResponse: [function (data) {\n    // 对 data 进行任意转换处理\n    return data;\n  }],\n\n  // `headers` 是即将被发送的自定义请求头\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` 是即将与请求一起发送的 URL 参数\n  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象\n  params: {\n    ID: 12345\n  },\n\n   // `paramsSerializer` 是一个负责 `params` 序列化的函数\n  // qs表单序列化插件\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` 是作为请求主体被发送的数据\n  // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n  // 在没有设置 `transformRequest` 时，必须是以下类型之一：\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - 浏览器专属：FormData, File, Blob\n  // - Node 专属： Stream\n  data: {\n    firstName: 'Fred'\n  },\n\n  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n  // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n  timeout: 1000,\n\n   // `withCredentials` 表示跨域请求时是否需要使用凭证\n  withCredentials: false, // default\n\n  // `adapter` 允许自定义处理请求，以使测试更轻松\n  // 返回一个 promise 并应用一个有效的响应\n  adapter: function (config) {\n    /* ... */\n  },\n\n // `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n  // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n   // `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n   // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n   // `onUploadProgress` 允许为上传处理进度事件\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` 允许为下载处理进度事件\n  onDownloadProgress: function (progressEvent) {\n    // 对原生进度事件的处理\n  },\n\n   // `maxContentLength` 定义允许的响应内容的最大尺寸\n  maxContentLength: 2000,\n\n  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n  // 如果设置为0，将不会 follow 任何重定向\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：\n  // `keepAlive` 默认没有启用\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' 定义代理服务器的主机名称和端口\n  // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n  // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` 指定用于取消请求的 cancel token\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n\n\n# 响应结构\n\n{\n  // `data` 由服务器提供的响应\n  data: {},\n\n  // `status` 来自服务器响应的 HTTP 状态码\n  status: 200,\n\n  // `statusText` 来自服务器响应的 HTTP 状态信息\n  statusText: 'OK',\n\n  // `headers` 服务器响应的头\n  headers: {},\n\n   // `config` 是为请求提供的配置信息\n  config: {},\n // 'request'\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance the browser\n  request: {}\n}\n\n\n# 全局的默认值\n\naxios.defaults.baseURL = 'https://jaqi.gitee.io';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\n\n# 拦截器\n\n * 请求拦截器\n\naxios.interceptors.request.use(function (config) {\n    // 在发送请求之前做些什么\n    return config;\n  }, function (error) {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n\n\n * 响应拦截器\n\n// 添加响应拦截器\naxios.interceptors.response.use(function (response) {\n    // 对响应数据做点什么\n    return response;\n  }, function (error) {\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n",normalizedContent:"axios是一个基于promise(es6)的http库，用于取代ajax，可以用在浏览器和node.js\n\n# get请求\n\naxios.get('/user?id=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n// 上面的请求也可以这样做\naxios.get('/user', {\n    params: {\n      id: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n# post请求\n\naxios.post('/user', {\n    firstname: 'fred',\n    lastname: 'flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n# 执行多个并发请求\n\nfunction getuseraccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getuserpermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\naxios.all([getuseraccount(), getuserpermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // 两个请求现在都执行完成\n  }));\n\n\n# 请求配置\n\n{\n   // `url` 是用于请求的服务器 url\n  url: '/user',\n\n  // `method` 是创建请求时使用的方法\n  method: 'get', // default\n\n  // `baseurl` 将自动加在 `url` 前面，除非 `url` 是一个绝对 url。\n  // 它可以通过设置一个 `baseurl` 便于为 axios 实例的方法传递相对 url\n  baseurl: 'https://jaqi.gitee.io/api/',\n\n  // `transformrequest` 允许在向服务器发送前，修改请求数据\n  // 只能用在 'put', 'post' 和 'patch' 这几个请求方法\n  // 后面数组中的函数必须返回一个字符串，或 arraybuffer，或 stream\n  transformrequest: [function (data, headers) {\n    // 对 data 进行任意转换处理\n    return data;\n  }],\n\n  // `transformresponse` 在传递给 then/catch 前，允许修改响应数据\n  transformresponse: [function (data) {\n    // 对 data 进行任意转换处理\n    return data;\n  }],\n\n  // `headers` 是即将被发送的自定义请求头\n  headers: {'x-requested-with': 'xmlhttprequest'},\n\n  // `params` 是即将与请求一起发送的 url 参数\n  // 必须是一个无格式对象(plain object)或 urlsearchparams 对象\n  params: {\n    id: 12345\n  },\n\n   // `paramsserializer` 是一个负责 `params` 序列化的函数\n  // qs表单序列化插件\n  paramsserializer: function(params) {\n    return qs.stringify(params, {arrayformat: 'brackets'})\n  },\n\n  // `data` 是作为请求主体被发送的数据\n  // 只适用于这些请求方法 'put', 'post', 和 'patch'\n  // 在没有设置 `transformrequest` 时，必须是以下类型之一：\n  // - string, plain object, arraybuffer, arraybufferview, urlsearchparams\n  // - 浏览器专属：formdata, file, blob\n  // - node 专属： stream\n  data: {\n    firstname: 'fred'\n  },\n\n  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n  // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n  timeout: 1000,\n\n   // `withcredentials` 表示跨域请求时是否需要使用凭证\n  withcredentials: false, // default\n\n  // `adapter` 允许自定义处理请求，以使测试更轻松\n  // 返回一个 promise 并应用一个有效的响应\n  adapter: function (config) {\n    /* ... */\n  },\n\n // `auth` 表示应该使用 http 基础验证，并提供凭据\n  // 这将设置一个 `authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `authorization`头\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n   // `responsetype` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responsetype: 'json', // default\n\n  // `responseencoding` indicates encoding to use for decoding responses\n  // note: ignored for `responsetype` of 'stream' or client-side requests\n  responseencoding: 'utf8', // default\n\n   // `xsrfcookiename` 是用作 xsrf token 的值的cookie的名称\n  xsrfcookiename: 'xsrf-token', // default\n\n  // `xsrfheadername` is the name of the http header that carries the xsrf token value\n  xsrfheadername: 'x-xsrf-token', // default\n\n   // `onuploadprogress` 允许为上传处理进度事件\n  onuploadprogress: function (progressevent) {\n    // do whatever you want with the native progress event\n  },\n\n  // `ondownloadprogress` 允许为下载处理进度事件\n  ondownloadprogress: function (progressevent) {\n    // 对原生进度事件的处理\n  },\n\n   // `maxcontentlength` 定义允许的响应内容的最大尺寸\n  maxcontentlength: 2000,\n\n  // `validatestatus` 定义对于给定的http 响应状态码是 resolve 或 reject  promise 。如果 `validatestatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte\n  validatestatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxredirects` 定义在 node.js 中 follow 的最大重定向数目\n  // 如果设置为0，将不会 follow 任何重定向\n  maxredirects: 5, // default\n\n  // `socketpath` defines a unix socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // only either `socketpath` or `proxy` can be specified.\n  // if both are specified, `socketpath` is used.\n  socketpath: null, // default\n\n  // `httpagent` 和 `httpsagent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：\n  // `keepalive` 默认没有启用\n  httpagent: new http.agent({ keepalive: true }),\n  httpsagent: new https.agent({ keepalive: true }),\n\n  // 'proxy' 定义代理服务器的主机名称和端口\n  // `auth` 表示 http 基础验证应当用于连接代理，并提供凭据\n  // 这将会设置一个 `proxy-authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `proxy-authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `canceltoken` 指定用于取消请求的 cancel token\n  canceltoken: new canceltoken(function (cancel) {\n  })\n}\n\n\n# 响应结构\n\n{\n  // `data` 由服务器提供的响应\n  data: {},\n\n  // `status` 来自服务器响应的 http 状态码\n  status: 200,\n\n  // `statustext` 来自服务器响应的 http 状态信息\n  statustext: 'ok',\n\n  // `headers` 服务器响应的头\n  headers: {},\n\n   // `config` 是为请求提供的配置信息\n  config: {},\n // 'request'\n  // `request` is the request that generated this response\n  // it is the last clientrequest instance in node.js (in redirects)\n  // and an xmlhttprequest instance the browser\n  request: {}\n}\n\n\n# 全局的默认值\n\naxios.defaults.baseurl = 'https://jaqi.gitee.io';\naxios.defaults.headers.common['authorization'] = auth_token;\naxios.defaults.headers.post['content-type'] = 'application/x-www-form-urlencoded';\n\n\n# 拦截器\n\n * 请求拦截器\n\naxios.interceptors.request.use(function (config) {\n    // 在发送请求之前做些什么\n    return config;\n  }, function (error) {\n    // 对请求错误做些什么\n    return promise.reject(error);\n  });\n\n\n * 响应拦截器\n\n// 添加响应拦截器\naxios.interceptors.response.use(function (response) {\n    // 对响应数据做点什么\n    return response;\n  }, function (error) {\n    // 对响应错误做点什么\n    return promise.reject(error);\n  });\n",charsets:{cjk:!0}},{title:"6.4.1 组件注册",frontmatter:{},regularPath:"/frontend/vue/component/",relativePath:"frontend/vue/component/README.md",key:"v-56dbb37a",path:"/frontend/vue/component/",headers:[{level:2,title:"6.4.1 组件注册",slug:"_6-4-1-组件注册",normalizedTitle:"6.4.1 组件注册",charIndex:2},{level:3,title:"组件名",slug:"组件名",normalizedTitle:"组件名",charIndex:17},{level:3,title:"组件的作用域",slug:"组件的作用域",normalizedTitle:"组件的作用域",charIndex:197},{level:3,title:"模块系统",slug:"模块系统",normalizedTitle:"模块系统",charIndex:270},{level:2,title:"6.4.2 全局组件",slug:"_6-4-2-全局组件",normalizedTitle:"6.4.2 全局组件",charIndex:604},{level:2,title:"6.4.3 局部组件",slug:"_6-4-3-局部组件",normalizedTitle:"6.4.3 局部组件",charIndex:895},{level:2,title:"6.4.4 动态组件与异步组件",slug:"_6-4-4-动态组件与异步组件",normalizedTitle:"6.4.4 动态组件与异步组件",charIndex:1223},{level:2,title:"6.4.5 组件通信",slug:"_6-4-5-组件通信",normalizedTitle:"6.4.5 组件通信",charIndex:2857},{level:3,title:"父传子props",slug:"父传子props",normalizedTitle:"父传子props",charIndex:2872},{level:3,title:"父传孙attrs",slug:"父传孙attrs",normalizedTitle:"父传孙attrs",charIndex:4129},{level:3,title:"子传父emit",slug:"子传父emit",normalizedTitle:"子传父emit",charIndex:4925},{level:3,title:"子传父listeners",slug:"子传父listeners",normalizedTitle:"子传父listeners",charIndex:5887},{level:3,title:"兄弟传值$emit与$on",slug:"兄弟传值-emit与-on",normalizedTitle:"兄弟传值$emit与$on",charIndex:5917},{level:3,title:"父传后代provide与inject（依赖注入）",slug:"父传后代provide与inject-依赖注入",normalizedTitle:"父传后代provide与inject（依赖注入）",charIndex:6886},{level:2,title:"6.4.6 组件其他方法",slug:"_6-4-6-组件其他方法",normalizedTitle:"6.4.6 组件其他方法",charIndex:7581},{level:3,title:"在组件上使用v-model",slug:"在组件上使用v-model",normalizedTitle:"在组件上使用v-model",charIndex:7598},{level:3,title:"混入(mixin)",slug:"混入-mixin",normalizedTitle:"混入(mixin)",charIndex:8740},{level:3,title:"函数式组件(render)",slug:"函数式组件-render",normalizedTitle:"函数式组件(render)",charIndex:9899},{level:3,title:"模板扩展",slug:"模板扩展",normalizedTitle:"模板扩展",charIndex:11103},{level:3,title:"控制更新",slug:"控制更新",normalizedTitle:"控制更新",charIndex:11932}],headersStr:"6.4.1 组件注册 组件名 组件的作用域 模块系统 6.4.2 全局组件 6.4.3 局部组件 6.4.4 动态组件与异步组件 6.4.5 组件通信 父传子props 父传孙attrs 子传父emit 子传父listeners 兄弟传值$emit与$on 父传后代provide与inject（依赖注入） 6.4.6 组件其他方法 在组件上使用v-model 混入(mixin) 函数式组件(render) 模板扩展 控制更新",content:"# 6.4.1 组件注册\n\n\n# 组件名\n\n * kebab-case\n   使用kebab-case(短横线分隔命名)定义组件时，你也必须在引用这个自定义元素时使用kebab-case\n   例如:<my-component-name>\n * PascalCase 当使用PascalCase(首字母大写命名)定义一个组件时,引用是kebab-case/PascalCase都可以。\n\n\n# 组件的作用域\n\n * 全局注册\n   可以用在任何新创建的Vue根实例\n * 局部注册\n   只能用在当前组件内，且不能用在其子组件中。\n\n\n# 模块系统\n\n将每个组件放置在其各自的文件中。\n通过import/require引入组件。（ES6 Module详见7.16.20 CommonJS详见7.1.6）\n全局注册的行为必须在根Vue实例(通过 new Vue)创建之前发生. 局部注册：\n\nimport BaseButton from './BaseButton.vue'\nimport BaseIcon from './BaseIcon.vue'\nimport BaseInput from './BaseInput.vue'\n\nexport default {\n  components: {\n    BaseButton,\n    BaseIcon,\n    BaseInput\n  }\n}\n\n\n\n# 6.4.2 全局组件\n\n 1. 第一步声明\n\nnew Vue({el:`#app`}) \n\n\n 2. 第二步全局注册挂载\n\nVue.component(\"Vheader\",{template:`<div>我是模板</div>`});\n //Vue.component(组件名称 template:`模板（需要一个根元素，否则只能渲染第一个元素）`)\n\n\n 3. 第三步使用\n\n<div id=\"app\">\n<Vheader></Vheader>\x3c!--双标签 --\x3e\n<Vheader/>\x3c!--单标签（用于全局组件，el标记的组件只会渲染第一个） --\x3e\n</div>\n\n\n\n# 6.4.3 局部组件\n\n 1. 第一步声明\n\nnew Vue({el:\"#app\"});\n\n\n 2. 第二步局部注册挂载，仅用于#app下局部使用\n\nnew Vue({\n    el:\"#app\",\n    components: {\n        Vheader:{template:`<div>子组件</div>`}//3.组件描述\n    },\n});\n\n\n 3. 第三步使用组件\n\n<div id=\"app\">\n    <Vheader></Vheader>\n</div>\n\n\nWARNING\n\n 1. 如果子组件在外部描述需要先声明，然后再父组件中注册挂载\n 2. 子组件的data必须是一个函数,否则在复用组件时，将公用一个data\n\n\n# 6.4.4 动态组件与异步组件\n\n * 动态组件\n\n<component :is=\"currentTabComponent\"></component>\n<button @click=\"change\">切换页面</button>\n\n\n// 组件名称组成的数组或一个组件的选项对象\ndata:{\n    index:0,\n    currentTabComponent:[\n      template1,template2,template3\n    ],\n methods:{\n    change(){\n      this.index++\n      this.currentTabComponent[this.index%3]\n    }\n  }\n\n\n * keep-alive组件缓存\n\n<keep-alive>\n  <component v-bind:is=\"currentTabComponent\"></component>\n</keep-alive>\n\n\nWARNING\n\nkeep-alive要求被切换到的组件都有自己name\n\n * 异步组件\n\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    // 向 `resolve` 回调传递组件定义\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n\n\n异步引用模块化组件\n\n  <component :is=\"currentComponent\"></component>\n\n\nimport Home from \"./components/home.vue\";\nimport News from \"./components/news.vue\";\nexport default {\n  name:\"App\",\n  data(){\n    return{\n    //默认值显示Home,通过修改currentComponent异步加载不同的组件\n      currentComponent:Home ,\n    }\n  },\n  components:{\n    Home,\n    News \n  },\n\n\n*Vue 3.x语法\n\n通过新增的defineAsyncComponent方法异步引入组件\n\nimport { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(\n  () =>\n    new Promise((resolve, reject) => {\n      resolve({\n        template: '<div>I am async!</div>'\n      })\n    })\n)\n\n\nimport { defineAsyncComponent } from 'vue'\nconst Home = defineAsyncComponent(() => import('@/components/home.vue'))\nconst News = defineAsyncComponent(() => import('@/components/News.vue'))\nexport default {\n  name:\"App\",\n  data(){\n    return{\n    //默认值显示Home,通过修改currentComponent异步加载不同的组件\n      currentComponent:Home ,\n    }\n  },\n  components:{\n    Home,\n    News \n  },\n\n\n\n# 6.4.5 组件通信\n\n\n# 父传子props\n\n * 父组件\n\n<template>\n  <div>\n    <input type=\"text\" v-model=\"name\">\n    \x3c!-- 引入子组件,通过自定义属性inputName传递数据name --\x3e\n    <child :inputName=\"name\"></child>\n  </div>\n</template>\n<script>\n  import child from './child'\n  export default {\n    components: {\n      child\n    },\n    data () {\n      return {\n        name: 'jaqi'\n      }\n    }\n  }\n<\/script>\n\n\n * 子组件\n\n<template>\n  <div>\n    <span>{{inputName}}</span>  \x3c!-- jaqi --\x3e\n  </div>\n</template>\n<script>\n  export default { \n    props: {\n      inputName: String, // 通过自定义的inputName属性接受父组件传来的字符串(String)类型的name\n    }\n  }\n<\/script>\n\n\nprops\n\nprops是单向下行绑定，父组件更新回传给子组件，反之不行\nProp可以验证，并设置默认值。如果验证失败开发环境回产生一个控制台警告\n\n props: {\n    // Number类型验证\n    propA: Number,\n    // 多个类型验证\n    propB: [String, Number],\n    // 必填的String类型\n    propC: {\n      type: String,\n      required: true\n    },\n    // 带有默认值的Number类型\n    propD: {\n      type: Number,\n      default: 100\n    },\n    // 带有默认值的Object\n    propE: {\n      type: Object,\n      // 对象或数组默认值必须从一个工厂函数获取\n      default: function () {\n        return { message: 'hello' }\n      }\n    },\n    // 自定义验证函数\n    propF: {\n      validator: function (value) {\n        // 这个值必须匹配下列字符串中的一个\n        return ['success', 'warning', 'danger'].indexOf(value) !== -1\n      }\n    }\n  }\n\n\n\n# 父传孙attrs\n\n * 父组件\n\n<template>\n  <div>\n    <input type=\"text\" v-model=\"name\">\n    <br>\n    <br>\n    \x3c!-- 引入子组件,通过自定义属性inputName传递数据name --\x3e\n    <child :inputName=\"name\"></child>\n  </div>\n</template>\n<script>\n  import child from './child'\n  export default {\n    components: {\n      child\n    },\n    data () {\n      return {\n        name: 'jaqi'\n      }\n    }\n  }\n<\/script>\n\n\n * 子组件\n\n<template>\n  <div>\n       <grandson v-bind=\"$attrs\"/>\n  </div>\n</template>\n<script>\n import grandson from './grandson'\n  export default { \n      components: {\n      grandson\n    },\n  }\n<\/script>\n\n\n * 孙组件\n\n<template>\n  <div>\n    <span>{{inputName}}</span>  \x3c!-- jaqi --\x3e\n  </div>\n</template>\n<script>\n  export default { \n    props: {\n      inputName: String, // 通过自定义的inputName属性接受父组件传来的name\n    }\n  }\n<\/script>\n\n\n\n# 子传父emit\n\n * 子组件\n\n<template>\n  <div>\n    <span>{{childValue}}</span>\n    \x3c!-- 定义一个子组件传值的方法 --\x3e\n    <input type=\"button\" value=\"点击触发\" @click=\"childClick\">\n  </div>\n</template>\n<script>\n  export default {\n    data () {\n      return {\n        childValue: '我是子组件的数据'\n      }\n    },\n    methods: {\n      childClick () {\n        // childByValue是在父组件on监听的方法\n        // 第二个参数this.childValue是需要传的值\n        this.$emit('childByValue', this.childValue)\n      }\n    }\n  }\n<\/script>\n\n\n * 父组件\n\n<template>\n  <div>\n    <span>{{name}}</span>\n    <br>\n    <br>\n    \x3c!-- 引入子组件 定义一个on的方法监听子组件的状态--\x3e\n    <child v-on:childByValue=\"childByValue\"></child>\n  </div>\n</template>\n<script>\n  import child from './child'\n  export default {\n    components: {\n      child\n    },\n    data () {\n      return {\n        name: ''\n      }\n    },\n    methods: {\n      childByValue: function (childValue) {\n        // childValue就是子组件传过来的值\n        this.name = childValue\n      }\n    }\n  }\n<\/script>\n\n\n\n# 子传父listeners\n\n*Vue 3.x中移除\n\n\n# 兄弟传值$emit与$on\n\n * 组件A\n\n<template>\n  <div>\n    <span>{{elementValue}}</span>\n    <input type=\"button\" value=\"点击触发\" @click=\"elementByValue\">\n  </div>\n</template>\n<script>\n  // 引入公共的bug，来做为中间传达的工具\n  import Bus from './bus.js'\n  export default {\n    data () {\n      return {\n        elementValue: 4\n      }\n    },\n    methods: {\n      elementByValue: function () {\n        Bus.$emit('val', this.elementValue) // 通过$emit存入Bus\n      }\n    }\n  }\n<\/script>\n\n\n * 组件B\n\n<template>\n  <div>\n    B组件:\n    <input type=\"button\" value=\"点击触发\" @click=\"getData\">\n    <span>{{name}}</span>\n  </div>\n</template>\n<script>\n  import Bus from './bus.js'\n  export default {\n    data () {\n      return {\n        name: 0\n      }\n    },\n    mounted: function () {\n      var vm = this\n      // 通过$on从Bus取\n      Bus.$on('val', (data) => {\n        console.log(data)\n        vm.name = data\n      })\n    },\n    methods: {\n      getData: function () {\n        this.name++\n      }\n    }\n  }\n<\/script>\n\n\n\n# 父传后代provide与inject（依赖注入）\n\n * 父组件\n\n<template>\n  <div>\n    <input type=\"text\" v-model=\"name\">\n    <br>\n    <my-child></my-child>\n  </div>\n</template>\n<script>\n  import mychild from './child'\n  export default {\n    components: {\n      mychild\n    },\n    // 父组件通过provide方法想数据分发给后代组件\n     provide() { \n        return {\n            name: 'jaqi'\n        };\n    },\n  }\n<\/script>\n\n\n * 后代组件\n\n<template>\n <div class=\"views__home__my-children\">\n        <my-grandson></my-grandson>\n    </div>\n</template>\n<script>\n  import mygrandson from './grandson'\n  export default {\n    components: {\n      mygrandson\n    },\n    // 后代组件直接通过inject获取父组件分发的数据\n    inject: ['name'],\n  }\n<\/script>\n\n\nWARNING\n\n依赖注入是非响应式的。\n\n\n# 6.4.6 组件其他方法\n\n\n# 在组件上使用v-model\n\n<ChildComponent v-model=\"searchText\"/>\n\n\n子组件props必须绑定名为value的变量。并在input事件中通过$emit返回给父组件\n\nVue.component('ChildComponent ', {\n  props: ['value'],\n  template: `\n    <input\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n\n\n * 使用model选项 允许一个自定义组件在使用v-model时定制prop和event命名\n\nVue.component('ChildComponent ', {\n  model: {\n    prop: 'searchText',\n    event: 'change'\n  },\n  props: {\n    // 这将允许 `value` 属性用于其他用途\n    value: String,\n    // 使用searchText代替value作为model的prop\n    searchText: {\n      type: Number,\n      default: 0\n    }\n  },\n  // ...\n})\n\n\n * *Vue 3.x中语法\n\n# 有参数的v-model\n\n\x3c!-- 使用searchText代替value作为model的prop --\x3e\n\x3c!-- 使用update:searchText作为$event的事件名 --\x3e\n<ChildComponent v-model:searchText=\"title\" />\n\n\n# 无参数的v-model\n\nprop和event命名更改为modelValue和update:modelValue\n\n<ChildComponent v-model=\"title\" />\n\n\n// ChildComponent.vue\nexport default {\n  props: {\n    modelValue: String // Vue 2.x是`value：String`\n  },\n  emits: ['update:modelValue'],\n  methods: {\n    changePageTitle(title) {\n      this.$emit('update:modelValue', title) // Vue 2.x是 `this.$emit('input', title)`\n    }\n  }\n}\n\n\n\n# 混入(mixin)\n\n将任意组件通过mixin包装成混入对象，插入另一个组件,\n\n// 定义一个混入对象\nvar mixin = {\n  created: function () {\n    console.log('混入对象的钩子被调用')\n  }\n}\n// 使用混入对象\nnew Vue({\n  mixins: [mixin],\n  created: function () {\n    console.log('组件钩子被调用')\n  }\n})\n\n\n * 使用Vue.extend进行混入\n\n// 定义一个混入对象\nvar myMixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n\n// 定义一个使用混入对象的组件\nvar Component = Vue.extend({\n  mixins: [myMixin]\n})\n\nvar component = new Component() // => \"hello from mixin!\"\n\n\nTIP\n\n 1. 当组件和混入对象含有同名选项时,methods、components和directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。\n 2. *Vue 3.x中合并操作将被浅层次地执行，详见mixin-合并行为变更\n\n * 全局混入\n\nVue.mixin({\n  created: function () {\n    console.log('全局混入')\n  }\n})\n\n\n * 自定义选项合并策略 Vue.config.optionMergeStrategies自定义合并策略\n\nconst merge = Vue.config.optionMergeStrategies.computed\nVue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\n  if (!toVal) return fromVal\n  if (!fromVal) return toVal\n  return {\n    getters: merge(toVal.getters, fromVal.getters),\n    state: merge(toVal.state, fromVal.state),\n    actions: merge(toVal.actions, fromVal.actions)\n  }\n}\n\n\n\n# 函数式组件(render)\n\n * render函数，\n\n> 有一个参数createElement函数\n> 返回createElement创建的VNode虚拟节点\n\n * createElement函数\n\n> 第一个参数HTML标签字符串\n> 第二个参数HTML标签的属性对象\n> \n> > style样式、attrs属性、on事件、props接收参数、domProps传递参数\n> > 第三个参数子虚拟节点数组，返回VNode虚拟节点\n\n * props接收上级传来的参数\n\n完整示例\n\nVue.component('example', {\n  render: function (createElement) {\n    return createElement(\n      'h' + this.level, //h1,h2...标签\n      {  // 属性\n       style: {\n         border: '1px solid #ccc',\n         ':hover': {  // 设置伪类\n                    background: 'yellow'\n          },\n       }\n      },\n      [  // 添加子节点\n        createElement(\n          'a', // 标签\n          { // 属性\n            attrs: { \n              name: this.$slots.default.headingId,\n              href: '#' + this.$slots.default.headingId\n            },\n            style: {\n              border: '1px solid #ccc',\n              fontSize:'10px'\n            },\n            on: { // 添加事件\n                  click: () => {\n                  },\n                  mouseover: () => {\n                  }\n            }\n        }, \n        this.$slots.default // 子节点\n        )\n      ]\n    )\n  },\n  // 接收传给example组件的的数据\n  props: { \n    level: {\n      type: Number,\n      required: true\n    }\n  }\n)}\n\n\n\n# 模板扩展\n\n * inline-template内联模板\n   内联模板不会把子组件的内容分发渲染到父组件中而是需要在父组件中实现其内容的渲染\n\n<my-component inline-template>\n  <div>\n    <p>These are compiled as the component's own template.</p>\n    <p>Not parent's transclusion content.</p>\n  </div>\n</my-component>\n\n\nWARNING\n\n 1. 内联模板的作用域是子组件自身。\n 2. *Vue 3.x中移除\n\n * X-Template\n\n <div id=\"app\">\n        \x3c!-- 使用 --\x3e\n        <my-component></my-component>\n        \x3c!-- 定义 --\x3e\n        <script type=\"text/x-template\" id=\"my-component\">\n                <div>\n                <p>This is the content of component</p>\n                <p>Hello Vue!</p>\n            </div>\n        \n        <\/script>\n    </div>\n    <script>\n        // 注册\n        Vue.component('my-component', {\n            template: '#my-component'\n        });\n        var app = new Vue({\n            el: \"#app\"\n        });\n    <\/script>\n\n\n\n# 控制更新\n\n由于JavaScript的限制，Vue不能检测数组和对象的变化。 因此在变更数组和对象的时候可以使用以下两种方法触发视图更新：\n\n 1. $forceUpdate强制视图更新。（只会影响实例本身和插入插槽内容的子组件，而不是所有子组件）\n\nthis.$forceUpdate(); \n\n\n 2. 通过$set方法修改数组或对象触发视图更新。\n\nthis.$set(target,key,value); // target = Object | Array\n",normalizedContent:"# 6.4.1 组件注册\n\n\n# 组件名\n\n * kebab-case\n   使用kebab-case(短横线分隔命名)定义组件时，你也必须在引用这个自定义元素时使用kebab-case\n   例如:<my-component-name>\n * pascalcase 当使用pascalcase(首字母大写命名)定义一个组件时,引用是kebab-case/pascalcase都可以。\n\n\n# 组件的作用域\n\n * 全局注册\n   可以用在任何新创建的vue根实例\n * 局部注册\n   只能用在当前组件内，且不能用在其子组件中。\n\n\n# 模块系统\n\n将每个组件放置在其各自的文件中。\n通过import/require引入组件。（es6 module详见7.16.20 commonjs详见7.1.6）\n全局注册的行为必须在根vue实例(通过 new vue)创建之前发生. 局部注册：\n\nimport basebutton from './basebutton.vue'\nimport baseicon from './baseicon.vue'\nimport baseinput from './baseinput.vue'\n\nexport default {\n  components: {\n    basebutton,\n    baseicon,\n    baseinput\n  }\n}\n\n\n\n# 6.4.2 全局组件\n\n 1. 第一步声明\n\nnew vue({el:`#app`}) \n\n\n 2. 第二步全局注册挂载\n\nvue.component(\"vheader\",{template:`<div>我是模板</div>`});\n //vue.component(组件名称 template:`模板（需要一个根元素，否则只能渲染第一个元素）`)\n\n\n 3. 第三步使用\n\n<div id=\"app\">\n<vheader></vheader>\x3c!--双标签 --\x3e\n<vheader/>\x3c!--单标签（用于全局组件，el标记的组件只会渲染第一个） --\x3e\n</div>\n\n\n\n# 6.4.3 局部组件\n\n 1. 第一步声明\n\nnew vue({el:\"#app\"});\n\n\n 2. 第二步局部注册挂载，仅用于#app下局部使用\n\nnew vue({\n    el:\"#app\",\n    components: {\n        vheader:{template:`<div>子组件</div>`}//3.组件描述\n    },\n});\n\n\n 3. 第三步使用组件\n\n<div id=\"app\">\n    <vheader></vheader>\n</div>\n\n\nwarning\n\n 1. 如果子组件在外部描述需要先声明，然后再父组件中注册挂载\n 2. 子组件的data必须是一个函数,否则在复用组件时，将公用一个data\n\n\n# 6.4.4 动态组件与异步组件\n\n * 动态组件\n\n<component :is=\"currenttabcomponent\"></component>\n<button @click=\"change\">切换页面</button>\n\n\n// 组件名称组成的数组或一个组件的选项对象\ndata:{\n    index:0,\n    currenttabcomponent:[\n      template1,template2,template3\n    ],\n methods:{\n    change(){\n      this.index++\n      this.currenttabcomponent[this.index%3]\n    }\n  }\n\n\n * keep-alive组件缓存\n\n<keep-alive>\n  <component v-bind:is=\"currenttabcomponent\"></component>\n</keep-alive>\n\n\nwarning\n\nkeep-alive要求被切换到的组件都有自己name\n\n * 异步组件\n\nvue.component('async-example', function (resolve, reject) {\n  settimeout(function () {\n    // 向 `resolve` 回调传递组件定义\n    resolve({\n      template: '<div>i am async!</div>'\n    })\n  }, 1000)\n})\n\n\n异步引用模块化组件\n\n  <component :is=\"currentcomponent\"></component>\n\n\nimport home from \"./components/home.vue\";\nimport news from \"./components/news.vue\";\nexport default {\n  name:\"app\",\n  data(){\n    return{\n    //默认值显示home,通过修改currentcomponent异步加载不同的组件\n      currentcomponent:home ,\n    }\n  },\n  components:{\n    home,\n    news \n  },\n\n\n*vue 3.x语法\n\n通过新增的defineasynccomponent方法异步引入组件\n\nimport { defineasynccomponent } from 'vue'\n\nconst asynccomp = defineasynccomponent(\n  () =>\n    new promise((resolve, reject) => {\n      resolve({\n        template: '<div>i am async!</div>'\n      })\n    })\n)\n\n\nimport { defineasynccomponent } from 'vue'\nconst home = defineasynccomponent(() => import('@/components/home.vue'))\nconst news = defineasynccomponent(() => import('@/components/news.vue'))\nexport default {\n  name:\"app\",\n  data(){\n    return{\n    //默认值显示home,通过修改currentcomponent异步加载不同的组件\n      currentcomponent:home ,\n    }\n  },\n  components:{\n    home,\n    news \n  },\n\n\n\n# 6.4.5 组件通信\n\n\n# 父传子props\n\n * 父组件\n\n<template>\n  <div>\n    <input type=\"text\" v-model=\"name\">\n    \x3c!-- 引入子组件,通过自定义属性inputname传递数据name --\x3e\n    <child :inputname=\"name\"></child>\n  </div>\n</template>\n<script>\n  import child from './child'\n  export default {\n    components: {\n      child\n    },\n    data () {\n      return {\n        name: 'jaqi'\n      }\n    }\n  }\n<\/script>\n\n\n * 子组件\n\n<template>\n  <div>\n    <span>{{inputname}}</span>  \x3c!-- jaqi --\x3e\n  </div>\n</template>\n<script>\n  export default { \n    props: {\n      inputname: string, // 通过自定义的inputname属性接受父组件传来的字符串(string)类型的name\n    }\n  }\n<\/script>\n\n\nprops\n\nprops是单向下行绑定，父组件更新回传给子组件，反之不行\nprop可以验证，并设置默认值。如果验证失败开发环境回产生一个控制台警告\n\n props: {\n    // number类型验证\n    propa: number,\n    // 多个类型验证\n    propb: [string, number],\n    // 必填的string类型\n    propc: {\n      type: string,\n      required: true\n    },\n    // 带有默认值的number类型\n    propd: {\n      type: number,\n      default: 100\n    },\n    // 带有默认值的object\n    prope: {\n      type: object,\n      // 对象或数组默认值必须从一个工厂函数获取\n      default: function () {\n        return { message: 'hello' }\n      }\n    },\n    // 自定义验证函数\n    propf: {\n      validator: function (value) {\n        // 这个值必须匹配下列字符串中的一个\n        return ['success', 'warning', 'danger'].indexof(value) !== -1\n      }\n    }\n  }\n\n\n\n# 父传孙attrs\n\n * 父组件\n\n<template>\n  <div>\n    <input type=\"text\" v-model=\"name\">\n    <br>\n    <br>\n    \x3c!-- 引入子组件,通过自定义属性inputname传递数据name --\x3e\n    <child :inputname=\"name\"></child>\n  </div>\n</template>\n<script>\n  import child from './child'\n  export default {\n    components: {\n      child\n    },\n    data () {\n      return {\n        name: 'jaqi'\n      }\n    }\n  }\n<\/script>\n\n\n * 子组件\n\n<template>\n  <div>\n       <grandson v-bind=\"$attrs\"/>\n  </div>\n</template>\n<script>\n import grandson from './grandson'\n  export default { \n      components: {\n      grandson\n    },\n  }\n<\/script>\n\n\n * 孙组件\n\n<template>\n  <div>\n    <span>{{inputname}}</span>  \x3c!-- jaqi --\x3e\n  </div>\n</template>\n<script>\n  export default { \n    props: {\n      inputname: string, // 通过自定义的inputname属性接受父组件传来的name\n    }\n  }\n<\/script>\n\n\n\n# 子传父emit\n\n * 子组件\n\n<template>\n  <div>\n    <span>{{childvalue}}</span>\n    \x3c!-- 定义一个子组件传值的方法 --\x3e\n    <input type=\"button\" value=\"点击触发\" @click=\"childclick\">\n  </div>\n</template>\n<script>\n  export default {\n    data () {\n      return {\n        childvalue: '我是子组件的数据'\n      }\n    },\n    methods: {\n      childclick () {\n        // childbyvalue是在父组件on监听的方法\n        // 第二个参数this.childvalue是需要传的值\n        this.$emit('childbyvalue', this.childvalue)\n      }\n    }\n  }\n<\/script>\n\n\n * 父组件\n\n<template>\n  <div>\n    <span>{{name}}</span>\n    <br>\n    <br>\n    \x3c!-- 引入子组件 定义一个on的方法监听子组件的状态--\x3e\n    <child v-on:childbyvalue=\"childbyvalue\"></child>\n  </div>\n</template>\n<script>\n  import child from './child'\n  export default {\n    components: {\n      child\n    },\n    data () {\n      return {\n        name: ''\n      }\n    },\n    methods: {\n      childbyvalue: function (childvalue) {\n        // childvalue就是子组件传过来的值\n        this.name = childvalue\n      }\n    }\n  }\n<\/script>\n\n\n\n# 子传父listeners\n\n*vue 3.x中移除\n\n\n# 兄弟传值$emit与$on\n\n * 组件a\n\n<template>\n  <div>\n    <span>{{elementvalue}}</span>\n    <input type=\"button\" value=\"点击触发\" @click=\"elementbyvalue\">\n  </div>\n</template>\n<script>\n  // 引入公共的bug，来做为中间传达的工具\n  import bus from './bus.js'\n  export default {\n    data () {\n      return {\n        elementvalue: 4\n      }\n    },\n    methods: {\n      elementbyvalue: function () {\n        bus.$emit('val', this.elementvalue) // 通过$emit存入bus\n      }\n    }\n  }\n<\/script>\n\n\n * 组件b\n\n<template>\n  <div>\n    b组件:\n    <input type=\"button\" value=\"点击触发\" @click=\"getdata\">\n    <span>{{name}}</span>\n  </div>\n</template>\n<script>\n  import bus from './bus.js'\n  export default {\n    data () {\n      return {\n        name: 0\n      }\n    },\n    mounted: function () {\n      var vm = this\n      // 通过$on从bus取\n      bus.$on('val', (data) => {\n        console.log(data)\n        vm.name = data\n      })\n    },\n    methods: {\n      getdata: function () {\n        this.name++\n      }\n    }\n  }\n<\/script>\n\n\n\n# 父传后代provide与inject（依赖注入）\n\n * 父组件\n\n<template>\n  <div>\n    <input type=\"text\" v-model=\"name\">\n    <br>\n    <my-child></my-child>\n  </div>\n</template>\n<script>\n  import mychild from './child'\n  export default {\n    components: {\n      mychild\n    },\n    // 父组件通过provide方法想数据分发给后代组件\n     provide() { \n        return {\n            name: 'jaqi'\n        };\n    },\n  }\n<\/script>\n\n\n * 后代组件\n\n<template>\n <div class=\"views__home__my-children\">\n        <my-grandson></my-grandson>\n    </div>\n</template>\n<script>\n  import mygrandson from './grandson'\n  export default {\n    components: {\n      mygrandson\n    },\n    // 后代组件直接通过inject获取父组件分发的数据\n    inject: ['name'],\n  }\n<\/script>\n\n\nwarning\n\n依赖注入是非响应式的。\n\n\n# 6.4.6 组件其他方法\n\n\n# 在组件上使用v-model\n\n<childcomponent v-model=\"searchtext\"/>\n\n\n子组件props必须绑定名为value的变量。并在input事件中通过$emit返回给父组件\n\nvue.component('childcomponent ', {\n  props: ['value'],\n  template: `\n    <input\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n\n\n * 使用model选项 允许一个自定义组件在使用v-model时定制prop和event命名\n\nvue.component('childcomponent ', {\n  model: {\n    prop: 'searchtext',\n    event: 'change'\n  },\n  props: {\n    // 这将允许 `value` 属性用于其他用途\n    value: string,\n    // 使用searchtext代替value作为model的prop\n    searchtext: {\n      type: number,\n      default: 0\n    }\n  },\n  // ...\n})\n\n\n * *vue 3.x中语法\n\n# 有参数的v-model\n\n\x3c!-- 使用searchtext代替value作为model的prop --\x3e\n\x3c!-- 使用update:searchtext作为$event的事件名 --\x3e\n<childcomponent v-model:searchtext=\"title\" />\n\n\n# 无参数的v-model\n\nprop和event命名更改为modelvalue和update:modelvalue\n\n<childcomponent v-model=\"title\" />\n\n\n// childcomponent.vue\nexport default {\n  props: {\n    modelvalue: string // vue 2.x是`value：string`\n  },\n  emits: ['update:modelvalue'],\n  methods: {\n    changepagetitle(title) {\n      this.$emit('update:modelvalue', title) // vue 2.x是 `this.$emit('input', title)`\n    }\n  }\n}\n\n\n\n# 混入(mixin)\n\n将任意组件通过mixin包装成混入对象，插入另一个组件,\n\n// 定义一个混入对象\nvar mixin = {\n  created: function () {\n    console.log('混入对象的钩子被调用')\n  }\n}\n// 使用混入对象\nnew vue({\n  mixins: [mixin],\n  created: function () {\n    console.log('组件钩子被调用')\n  }\n})\n\n\n * 使用vue.extend进行混入\n\n// 定义一个混入对象\nvar mymixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n\n// 定义一个使用混入对象的组件\nvar component = vue.extend({\n  mixins: [mymixin]\n})\n\nvar component = new component() // => \"hello from mixin!\"\n\n\ntip\n\n 1. 当组件和混入对象含有同名选项时,methods、components和directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。\n 2. *vue 3.x中合并操作将被浅层次地执行，详见mixin-合并行为变更\n\n * 全局混入\n\nvue.mixin({\n  created: function () {\n    console.log('全局混入')\n  }\n})\n\n\n * 自定义选项合并策略 vue.config.optionmergestrategies自定义合并策略\n\nconst merge = vue.config.optionmergestrategies.computed\nvue.config.optionmergestrategies.vuex = function (toval, fromval) {\n  if (!toval) return fromval\n  if (!fromval) return toval\n  return {\n    getters: merge(toval.getters, fromval.getters),\n    state: merge(toval.state, fromval.state),\n    actions: merge(toval.actions, fromval.actions)\n  }\n}\n\n\n\n# 函数式组件(render)\n\n * render函数，\n\n> 有一个参数createelement函数\n> 返回createelement创建的vnode虚拟节点\n\n * createelement函数\n\n> 第一个参数html标签字符串\n> 第二个参数html标签的属性对象\n> \n> > style样式、attrs属性、on事件、props接收参数、domprops传递参数\n> > 第三个参数子虚拟节点数组，返回vnode虚拟节点\n\n * props接收上级传来的参数\n\n完整示例\n\nvue.component('example', {\n  render: function (createelement) {\n    return createelement(\n      'h' + this.level, //h1,h2...标签\n      {  // 属性\n       style: {\n         border: '1px solid #ccc',\n         ':hover': {  // 设置伪类\n                    background: 'yellow'\n          },\n       }\n      },\n      [  // 添加子节点\n        createelement(\n          'a', // 标签\n          { // 属性\n            attrs: { \n              name: this.$slots.default.headingid,\n              href: '#' + this.$slots.default.headingid\n            },\n            style: {\n              border: '1px solid #ccc',\n              fontsize:'10px'\n            },\n            on: { // 添加事件\n                  click: () => {\n                  },\n                  mouseover: () => {\n                  }\n            }\n        }, \n        this.$slots.default // 子节点\n        )\n      ]\n    )\n  },\n  // 接收传给example组件的的数据\n  props: { \n    level: {\n      type: number,\n      required: true\n    }\n  }\n)}\n\n\n\n# 模板扩展\n\n * inline-template内联模板\n   内联模板不会把子组件的内容分发渲染到父组件中而是需要在父组件中实现其内容的渲染\n\n<my-component inline-template>\n  <div>\n    <p>these are compiled as the component's own template.</p>\n    <p>not parent's transclusion content.</p>\n  </div>\n</my-component>\n\n\nwarning\n\n 1. 内联模板的作用域是子组件自身。\n 2. *vue 3.x中移除\n\n * x-template\n\n <div id=\"app\">\n        \x3c!-- 使用 --\x3e\n        <my-component></my-component>\n        \x3c!-- 定义 --\x3e\n        <script type=\"text/x-template\" id=\"my-component\">\n                <div>\n                <p>this is the content of component</p>\n                <p>hello vue!</p>\n            </div>\n        \n        <\/script>\n    </div>\n    <script>\n        // 注册\n        vue.component('my-component', {\n            template: '#my-component'\n        });\n        var app = new vue({\n            el: \"#app\"\n        });\n    <\/script>\n\n\n\n# 控制更新\n\n由于javascript的限制，vue不能检测数组和对象的变化。 因此在变更数组和对象的时候可以使用以下两种方法触发视图更新：\n\n 1. $forceupdate强制视图更新。（只会影响实例本身和插入插槽内容的子组件，而不是所有子组件）\n\nthis.$forceupdate(); \n\n\n 2. 通过$set方法修改数组或对象触发视图更新。\n\nthis.$set(target,key,value); // target = object | array\n",charsets:{cjk:!0}},{title:"6.2.1 v-text",frontmatter:{},regularPath:"/frontend/vue/control/",relativePath:"frontend/vue/control/README.md",key:"v-4b5f59fa",path:"/frontend/vue/control/",headers:[{level:2,title:"6.2.1 v-text",slug:"_6-2-1-v-text",normalizedTitle:"6.2.1 v-text",charIndex:2},{level:2,title:"6.2.2 v-html",slug:"_6-2-2-v-html",normalizedTitle:"6.2.2 v-html",charIndex:55},{level:2,title:"6.2.3 v-pre",slug:"_6-2-3-v-pre",normalizedTitle:"6.2.3 v-pre",charIndex:146},{level:2,title:"6.2.4 v-if/v-else/v-else-if",slug:"_6-2-4-v-if-v-else-v-else-if",normalizedTitle:"6.2.4 v-if/v-else/v-else-if",charIndex:267},{level:2,title:"6.2.5 v-show",slug:"_6-2-5-v-show",normalizedTitle:"6.2.5 v-show",charIndex:478},{level:2,title:"6.2.6 v-bind",slug:"_6-2-6-v-bind",normalizedTitle:"6.2.6 v-bind",charIndex:792},{level:2,title:"6.2.7 v-model",slug:"_6-2-7-v-model",normalizedTitle:"6.2.7 v-model",charIndex:1075},{level:2,title:"6.2.8 v-on",slug:"_6-2-8-v-on",normalizedTitle:"6.2.8 v-on",charIndex:1232},{level:2,title:"6.2.9 v-for",slug:"_6-2-9-v-for",normalizedTitle:"6.2.9 v-for",charIndex:1438},{level:2,title:"6.2.10 v-once",slug:"_6-2-10-v-once",normalizedTitle:"6.2.10 v-once",charIndex:1898},{level:2,title:"6.2.11 :class",slug:"_6-2-11-class",normalizedTitle:"6.2.11 :class",charIndex:1981},{level:2,title:"6.2.12 :style",slug:"_6-2-12-style",normalizedTitle:"6.2.12 :style",charIndex:2127},{level:2,title:"6.2.13 动态参数",slug:"_6-2-13-动态参数",normalizedTitle:"6.2.13 动态参数",charIndex:2433},{level:2,title:"6.2.14 自定义指令 directive",slug:"_6-2-14-自定义指令-directive",normalizedTitle:"6.2.14 自定义指令 directive",charIndex:2632},{level:3,title:"动态指令参数：",slug:"动态指令参数",normalizedTitle:"动态指令参数：",charIndex:3066},{level:3,title:"相关钩子函数",slug:"相关钩子函数",normalizedTitle:"相关钩子函数",charIndex:3459},{level:3,title:"相关参数：",slug:"相关参数",normalizedTitle:"相关参数：",charIndex:3723},{level:3,title:"Vue 3.x语法",slug:"vue-3-x语法",normalizedTitle:"vue 3.x语法",charIndex:4172},{level:2,title:"6.2.15 数据修饰符",slug:"_6-2-15-数据修饰符",normalizedTitle:"6.2.15 数据修饰符",charIndex:4844},{level:3,title:"lazy",slug:"lazy",normalizedTitle:"lazy",charIndex:4861},{level:3,title:"number",slug:"number",normalizedTitle:"number",charIndex:4920},{level:3,title:"trim",slug:"trim",normalizedTitle:"trim",charIndex:4978},{level:2,title:"6.2.16 事件修饰符",slug:"_6-2-16-事件修饰符",normalizedTitle:"6.2.16 事件修饰符",charIndex:5036},{level:3,title:"once",slug:"once",normalizedTitle:"once",charIndex:1907},{level:3,title:"stop",slug:"stop",normalizedTitle:"stop",charIndex:5100},{level:3,title:"capture",slug:"capture",normalizedTitle:"capture",charIndex:5146},{level:3,title:"self",slug:"self",normalizedTitle:"self",charIndex:5328},{level:3,title:"prevent",slug:"prevent",normalizedTitle:"prevent",charIndex:5497},{level:3,title:"passive",slug:"passive",normalizedTitle:"passive",charIndex:5551},{level:3,title:"native",slug:"native",normalizedTitle:"native",charIndex:5605},{level:3,title:"sync",slug:"sync",normalizedTitle:"sync",charIndex:5739},{level:3,title:"按键修饰符",slug:"按键修饰符",normalizedTitle:"按键修饰符",charIndex:6010},{level:3,title:"exact",slug:"exact",normalizedTitle:"exact",charIndex:6250}],headersStr:"6.2.1 v-text 6.2.2 v-html 6.2.3 v-pre 6.2.4 v-if/v-else/v-else-if 6.2.5 v-show 6.2.6 v-bind 6.2.7 v-model 6.2.8 v-on 6.2.9 v-for 6.2.10 v-once 6.2.11 :class 6.2.12 :style 6.2.13 动态参数 6.2.14 自定义指令 directive 动态指令参数： 相关钩子函数 相关参数： Vue 3.x语法 6.2.15 数据修饰符 lazy number trim 6.2.16 事件修饰符 once stop capture self prevent passive native sync 按键修饰符 exact",content:'# 6.2.1 v-text\n\nv-text把数据渲染在视图中与{{}}、innerText作用类似\n\n\n# 6.2.2 v-html\n\nv-html把数据渲染在视图中,支持渲染标签与innerHTML作用类似\n\n<div id="app" v-html="msg"></div>\n\n\n\n# 6.2.3 v-pre\n\nv-pre跳过Mustache直接渲染静态内容\n\n<div id="app" v-pre>{{ item }}</div> \x3c!-- <div id="app">{{ item }}</div>  --\x3e\n\n\n\n# 6.2.4 v-if/v-else/v-else-if\n\nv-if/v-else/v-else-if 决定元素是否显示true显示false移除 原理是依靠的是元素增加与删除appendChild()/removeChild()\n\n<template class="demo" v-if="true" ></template>\n<template class="demo"v-else ></template>\n\n\n\n# 6.2.5 v-show\n\nv-show决定元素是否显示true显示false隐藏,靠的是改变样式display:none适用于频繁切换DOM元素\n\n<template class="demo" v-show="true" ></template>\n\n\nTIP\n\n * v-show页面首次加载乱码 v-cloak指令可以隐藏未编译的Mustache标签直到实例准备完毕\n\n<template class="demo" v-show="true" v-cloak ></template>\n\n\n[v-cloak]{display:none;}\n\n\n * v-show不支持<template>元素，也不支持v-else\n\n\n# 6.2.6 v-bind\n\nv-bind绑定属性(自定义的属性或元素系统属性)单向数据绑定\n\n<div v-bind:class="className">\n<div v-bind:url="{url}">\n  \x3c!-- 动态绑定属性 --\x3e\n<div v-bind="{ id: \'blue\' }"></div> \n\x3c!-- 简写 --\x3e\n<div :mydata="data">\n\n\nWARNING\n\n动态绑定同名属性时的覆盖问题：\n\n * Vue 2.x：固定绑定的属性总是覆盖动态绑定的属性\n * *Vue 3.x：从左至右，后绑定的覆盖前绑定的属性\n\n\n# 6.2.7 v-model\n\nv-model双向数据绑定 一般只用于表单控件input、select、textarea、components\n\n<input type="text" v-model="msg">\n\n\nTIP\n\nv-model会忽略所有表单元素的value、checked、selected\n\n\n# 6.2.8 v-on\n\nv-on事件绑定\n\n<button v-on:click="click"></button>\n\x3c!-- 简写 --\x3e\n<button @click="fn"></button>\n\n\n * $event获取当前事件的dom\n\n<button @click="fn($event)"></button>\n\n\n  fn(event) {\n    alert(message)\n  }\n\n\n\n# 6.2.9 v-for\n\nin遍历key,在遍历对象时使用。\n\n<ul v-for="(item,index) in arr" :key="index" >\n<li>{{index}}-{{item.subject}}-{{item.score}}</li>\n</ul>\n\n\nof遍历value，在遍历数组时使用。\n\n<ul v-for="(item,key,index) of arr" >\n<li>{{item}}-{{key}}-{{index}}</li>\n</ul>\n\n\nin/of在Vue的v-for中使用效果并无差别。\n\nWARNING\n\n 1. :key="index"将项目的索引与项目的唯一项绑定以避免因为就地复用引起项目混乱。\n    key的作用详解s\n 2. v-for与v-if一同使用时，v-for优先级高，因此每次循环都会重复执行v-if。\n 3. *Vue 3.x中key不再是必须的，Vue会自动生成唯一的key\n 4. *Vue 3.x中v-if总是优先于v-for生效。\n\n\n# 6.2.10 v-once\n\n只渲染一次，不随数据更新而重新渲染。与Object.freeze()方法类似。\n\n<p v-once>{{msg}}</p>\n\n\n\n# 6.2.11 :class\n\n<div :class="class">变量</div>\n<div :class="class ? \'class-a\' : \'class-b\' ">三目运算符</div>\n<div :class="[classA, classB]">数组</div>\n\n\n\n# 6.2.12 :style\n\n<p :style="{color:FontColor}">变量</p>\n<p :style="{color:(index==0?arr.conFontColor:\'#000\')}">三目运算符</p>\n<p :style="[arr.styles.conTitleStyle,arr.styles.conLiStyle]">数组</p>\n\n\n * 多重值 常用语浏览器兼容问题，Vue会渲染数组中最后一个被浏览器支持的值\n\n<div :style="{ display: [\'-webkit-box\', \'-ms-flexbox\', \'flex\'] }"></div>\n\n\n\n# 6.2.13 动态参数\n\n<a v-bind:[attributeName]="url">attributeName是一个变量</a>\n\x3c!-- 简写 --\x3e\n<a :[attributeName]="url">attributeName是一个变量</a>\n\x3c!-- v-on简写 --\x3e\n<a @[eventName]="doSomething">eventName是一个变量</a>\n\n\n\n# 6.2.14 自定义指令 directive\n\n * 局部注册：\n\nVue.directive(\'myfocus\', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n\n\n * 局部注册：\n\n export default {\n    el:\'app\',\n    directives:{\n            myfocus:{\n              //  inserted 当被绑定的元素插入到 DOM 中时\n                inserted (el,binding) {\n                   el.focus() // 获取焦点\n                }\n            }\n    },\n  }\n\n\n<input type="text" v-myfocus>\n\n\n\n# 动态指令参数：\n\n<p v-color="{ color: \'white\', text: \'hello!\' }"></p>\n\n\n export default {\n    el:\'app\',\n    directives:{\n            color:{\n              //  inserted 当被绑定的元素插入到 DOM 中时\n                inserted (el,binding) {\n                   el.style.color = binding.value.color //设置字体颜色\n                   el.innerHTML = binding.value.text //设置字体颜色\n                }\n            }\n    },\n  }\n\n\n\n# 相关钩子函数\n\ninserted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。\nbind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\nupdate：所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\ncomponentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。\nunbind：只调用一次，指令与元素解绑时调用。\n\n\n# 相关参数：\n\nel：指令所绑定的元素，可以用来直接操作DOM。\nbinding：一个对象，包含以下属性：\n\n> name：指令名，不包括 v- 前缀\n> value：指令的绑定值，例如：v-my-directive="1+1" 中，绑定值为2\n> oldValue：指令绑定的前一个值，仅在update和componentUpdated钩子中可用。无论值是否改变都可用\n> expression：字符串形式的指令表达式。例如v-my-directive="1+1"中，表达式为"1+1"\n> arg：传给指令的参数，可选。例如v-my-directive:foo中，参数为"foo"\n> modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar中，修饰符对象为{ foo: true, bar: true }\n> vnodeVue：编译生成的虚拟节点\n> oldVnode：上一个虚拟节点，仅在update和componentUpdated钩子中可用\n\n\n# *Vue 3.x语法\n\n# 相关钩子函数的变化：\n\ncreated新增！在元素的 attribute 或事件监听器被应用之前调用\nbind → beforeMount\ninserted → mounted\nbeforeUpdate：新增！在元素本身被更新之前调用，与组件的生命周期钩子十分相似\nupdate → 移除！该钩子与 updated 有太多相似之处。请改用 updated\ncomponentUpdated → updated\nbeforeUnmount：新增！与组件的生命周期钩子类似，它将在元素被卸载之前调用\nunbind -> unmounted\n\n<p v-color="{ color: \'white\', text: \'hello!\' }"></p>\n\n\n export default {\n    el:\'app\',\n    directives:{\n            color:{\n              //  mounted 当被绑定的元素插入到 DOM 中时\n                mounted (el, binding, vnode) {\n                   el.style.color = binding.value.color //设置字体颜色\n                   el.innerHTML = binding.value.text //设置字体颜色\n                }\n            }\n    },\n  }\n\n\n\n# 6.2.15 数据修饰符\n\n\n# lazy\n\n在change时而非input时更新\n\n<input v-model.lazy="msg" >\n\n\n\n# number\n\n将用户的输入值转为数值类型\n\n<input v-model.number="age" >\n\n\n\n# trim\n\n过滤用户输入的首尾空白字符\n\n<input v-model.trim="nickname">\n\n\n\n# 6.2.16 事件修饰符\n\n\n# once\n\n只执行一次\n\n<a v-on:click.once="fn"></a>\n\n\n\n# stop\n\n阻止冒泡\n\n<a v-on:click.stop="fn"></a>\n\n\n\n# capture\n\n冒泡顺序，设置capture的最先冒泡\n\n<div id="app" v-on:click="show">1</div>\n<div id="app2" v-on:click.capture="show2">2</div>\n<div id="app3" v-on:click="show3">3</div>\n\x3c!-- 2→3→1 --\x3e\n\n\n\n# self\n\n只有设置了self的才能触发事件,既阻止捕获又阻止冒泡\n\n<div id="app" v-on:click="show">1</div>\n<div id="app2" v-on:click.self="show2">2</div>\n<div id="app3" v-on:click="show3">3</div>\n\n\n\n# prevent\n\n阻止默认事件\n\n<a v-on:click.prevent="fn"></a>\n\n\n\n# passive\n\n执行默认方法\n\n<a v-on:click.passive="fn"></a>\n\n\n\n# native\n\n监听组件子组件元素的原生事件*Vue 3.x中移除\n\n  <my-compoent @click.native="fn()"></my-compoent>\n\n\n  <button @click="btn()">buttom</button>\n\n\n\n# sync\n\n子组件修改父组件的\n\n  <button @click="show = true">显示</button>\n  <dialog :show.sync="show" v-show="show"></dialog>\n\n\n * *Vue 3.x语法\n\n  <button @click="show = true">显示</button>\n  <dialog v-model:show="show" /></dialog>\n\n\n子组件修改父组件的show值\n\n  this.$emit(\'update:show\',false)\n\n\n\n# 按键修饰符\n\n按下按键时执行\n\n<input v-on:keyup.enter="submit">\n\n\n * 按键编码 keyCode已被主流浏览器废弃，因此vue提供如下按键码别名：\n\n.enter/.tab/.delete(捕获“删除”和“退格”键)/.esc/.space/.up /.down /.left/.right/.ctrl/.alt/.shift/.meta\n\n你还可以通过全局config.keyCodes(Vue 2.x)对象自定义按键修饰符别名：\n\n\n# exact\n\n组合修饰符\n允许精确的使用组合修饰符触发的事件。\n\n\x3c!-- 即使 Alt 或 Shift 被一同按下时也会触发 --\x3e\n<button v-on:click.ctrl="onClick">A</button>\n\n\x3c!-- 有且只有 Ctrl 被按下的时候才触发 --\x3e\n<button v-on:click.ctrl.exact="onCtrlClick">A</button>\n\n\x3c!-- 没有任何系统修饰符被按下的时候才触发 --\x3e\n<button v-on:click.exact="onClick">A</button>\n\n\nTIP\n\n * 浏览器只有等内核线程执行到事件监听器对应的JavaScript代码时，才能知道内部是否会调用preventDefault函数来阻止事件的默认行为,因此使用prevent提前告知浏览器。一般用于监听@scoll/@touchmove\n\n * 串联使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。例如：v-on:click.prevent.self会阻止所有的点击，而 v-on:click.self.prevent只会阻止对元素自身的点击。',normalizedContent:'# 6.2.1 v-text\n\nv-text把数据渲染在视图中与{{}}、innertext作用类似\n\n\n# 6.2.2 v-html\n\nv-html把数据渲染在视图中,支持渲染标签与innerhtml作用类似\n\n<div id="app" v-html="msg"></div>\n\n\n\n# 6.2.3 v-pre\n\nv-pre跳过mustache直接渲染静态内容\n\n<div id="app" v-pre>{{ item }}</div> \x3c!-- <div id="app">{{ item }}</div>  --\x3e\n\n\n\n# 6.2.4 v-if/v-else/v-else-if\n\nv-if/v-else/v-else-if 决定元素是否显示true显示false移除 原理是依靠的是元素增加与删除appendchild()/removechild()\n\n<template class="demo" v-if="true" ></template>\n<template class="demo"v-else ></template>\n\n\n\n# 6.2.5 v-show\n\nv-show决定元素是否显示true显示false隐藏,靠的是改变样式display:none适用于频繁切换dom元素\n\n<template class="demo" v-show="true" ></template>\n\n\ntip\n\n * v-show页面首次加载乱码 v-cloak指令可以隐藏未编译的mustache标签直到实例准备完毕\n\n<template class="demo" v-show="true" v-cloak ></template>\n\n\n[v-cloak]{display:none;}\n\n\n * v-show不支持<template>元素，也不支持v-else\n\n\n# 6.2.6 v-bind\n\nv-bind绑定属性(自定义的属性或元素系统属性)单向数据绑定\n\n<div v-bind:class="classname">\n<div v-bind:url="{url}">\n  \x3c!-- 动态绑定属性 --\x3e\n<div v-bind="{ id: \'blue\' }"></div> \n\x3c!-- 简写 --\x3e\n<div :mydata="data">\n\n\nwarning\n\n动态绑定同名属性时的覆盖问题：\n\n * vue 2.x：固定绑定的属性总是覆盖动态绑定的属性\n * *vue 3.x：从左至右，后绑定的覆盖前绑定的属性\n\n\n# 6.2.7 v-model\n\nv-model双向数据绑定 一般只用于表单控件input、select、textarea、components\n\n<input type="text" v-model="msg">\n\n\ntip\n\nv-model会忽略所有表单元素的value、checked、selected\n\n\n# 6.2.8 v-on\n\nv-on事件绑定\n\n<button v-on:click="click"></button>\n\x3c!-- 简写 --\x3e\n<button @click="fn"></button>\n\n\n * $event获取当前事件的dom\n\n<button @click="fn($event)"></button>\n\n\n  fn(event) {\n    alert(message)\n  }\n\n\n\n# 6.2.9 v-for\n\nin遍历key,在遍历对象时使用。\n\n<ul v-for="(item,index) in arr" :key="index" >\n<li>{{index}}-{{item.subject}}-{{item.score}}</li>\n</ul>\n\n\nof遍历value，在遍历数组时使用。\n\n<ul v-for="(item,key,index) of arr" >\n<li>{{item}}-{{key}}-{{index}}</li>\n</ul>\n\n\nin/of在vue的v-for中使用效果并无差别。\n\nwarning\n\n 1. :key="index"将项目的索引与项目的唯一项绑定以避免因为就地复用引起项目混乱。\n    key的作用详解s\n 2. v-for与v-if一同使用时，v-for优先级高，因此每次循环都会重复执行v-if。\n 3. *vue 3.x中key不再是必须的，vue会自动生成唯一的key\n 4. *vue 3.x中v-if总是优先于v-for生效。\n\n\n# 6.2.10 v-once\n\n只渲染一次，不随数据更新而重新渲染。与object.freeze()方法类似。\n\n<p v-once>{{msg}}</p>\n\n\n\n# 6.2.11 :class\n\n<div :class="class">变量</div>\n<div :class="class ? \'class-a\' : \'class-b\' ">三目运算符</div>\n<div :class="[classa, classb]">数组</div>\n\n\n\n# 6.2.12 :style\n\n<p :style="{color:fontcolor}">变量</p>\n<p :style="{color:(index==0?arr.confontcolor:\'#000\')}">三目运算符</p>\n<p :style="[arr.styles.contitlestyle,arr.styles.conlistyle]">数组</p>\n\n\n * 多重值 常用语浏览器兼容问题，vue会渲染数组中最后一个被浏览器支持的值\n\n<div :style="{ display: [\'-webkit-box\', \'-ms-flexbox\', \'flex\'] }"></div>\n\n\n\n# 6.2.13 动态参数\n\n<a v-bind:[attributename]="url">attributename是一个变量</a>\n\x3c!-- 简写 --\x3e\n<a :[attributename]="url">attributename是一个变量</a>\n\x3c!-- v-on简写 --\x3e\n<a @[eventname]="dosomething">eventname是一个变量</a>\n\n\n\n# 6.2.14 自定义指令 directive\n\n * 局部注册：\n\nvue.directive(\'myfocus\', {\n  // 当被绑定的元素插入到 dom 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n\n\n * 局部注册：\n\n export default {\n    el:\'app\',\n    directives:{\n            myfocus:{\n              //  inserted 当被绑定的元素插入到 dom 中时\n                inserted (el,binding) {\n                   el.focus() // 获取焦点\n                }\n            }\n    },\n  }\n\n\n<input type="text" v-myfocus>\n\n\n\n# 动态指令参数：\n\n<p v-color="{ color: \'white\', text: \'hello!\' }"></p>\n\n\n export default {\n    el:\'app\',\n    directives:{\n            color:{\n              //  inserted 当被绑定的元素插入到 dom 中时\n                inserted (el,binding) {\n                   el.style.color = binding.value.color //设置字体颜色\n                   el.innerhtml = binding.value.text //设置字体颜色\n                }\n            }\n    },\n  }\n\n\n\n# 相关钩子函数\n\ninserted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。\nbind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\nupdate：所在组件的vnode更新时调用，但是可能发生在其子vnode更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\ncomponentupdated：指令所在组件的 vnode 及其子 vnode 全部更新后调用。\nunbind：只调用一次，指令与元素解绑时调用。\n\n\n# 相关参数：\n\nel：指令所绑定的元素，可以用来直接操作dom。\nbinding：一个对象，包含以下属性：\n\n> name：指令名，不包括 v- 前缀\n> value：指令的绑定值，例如：v-my-directive="1+1" 中，绑定值为2\n> oldvalue：指令绑定的前一个值，仅在update和componentupdated钩子中可用。无论值是否改变都可用\n> expression：字符串形式的指令表达式。例如v-my-directive="1+1"中，表达式为"1+1"\n> arg：传给指令的参数，可选。例如v-my-directive:foo中，参数为"foo"\n> modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar中，修饰符对象为{ foo: true, bar: true }\n> vnodevue：编译生成的虚拟节点\n> oldvnode：上一个虚拟节点，仅在update和componentupdated钩子中可用\n\n\n# *vue 3.x语法\n\n# 相关钩子函数的变化：\n\ncreated新增！在元素的 attribute 或事件监听器被应用之前调用\nbind → beforemount\ninserted → mounted\nbeforeupdate：新增！在元素本身被更新之前调用，与组件的生命周期钩子十分相似\nupdate → 移除！该钩子与 updated 有太多相似之处。请改用 updated\ncomponentupdated → updated\nbeforeunmount：新增！与组件的生命周期钩子类似，它将在元素被卸载之前调用\nunbind -> unmounted\n\n<p v-color="{ color: \'white\', text: \'hello!\' }"></p>\n\n\n export default {\n    el:\'app\',\n    directives:{\n            color:{\n              //  mounted 当被绑定的元素插入到 dom 中时\n                mounted (el, binding, vnode) {\n                   el.style.color = binding.value.color //设置字体颜色\n                   el.innerhtml = binding.value.text //设置字体颜色\n                }\n            }\n    },\n  }\n\n\n\n# 6.2.15 数据修饰符\n\n\n# lazy\n\n在change时而非input时更新\n\n<input v-model.lazy="msg" >\n\n\n\n# number\n\n将用户的输入值转为数值类型\n\n<input v-model.number="age" >\n\n\n\n# trim\n\n过滤用户输入的首尾空白字符\n\n<input v-model.trim="nickname">\n\n\n\n# 6.2.16 事件修饰符\n\n\n# once\n\n只执行一次\n\n<a v-on:click.once="fn"></a>\n\n\n\n# stop\n\n阻止冒泡\n\n<a v-on:click.stop="fn"></a>\n\n\n\n# capture\n\n冒泡顺序，设置capture的最先冒泡\n\n<div id="app" v-on:click="show">1</div>\n<div id="app2" v-on:click.capture="show2">2</div>\n<div id="app3" v-on:click="show3">3</div>\n\x3c!-- 2→3→1 --\x3e\n\n\n\n# self\n\n只有设置了self的才能触发事件,既阻止捕获又阻止冒泡\n\n<div id="app" v-on:click="show">1</div>\n<div id="app2" v-on:click.self="show2">2</div>\n<div id="app3" v-on:click="show3">3</div>\n\n\n\n# prevent\n\n阻止默认事件\n\n<a v-on:click.prevent="fn"></a>\n\n\n\n# passive\n\n执行默认方法\n\n<a v-on:click.passive="fn"></a>\n\n\n\n# native\n\n监听组件子组件元素的原生事件*vue 3.x中移除\n\n  <my-compoent @click.native="fn()"></my-compoent>\n\n\n  <button @click="btn()">buttom</button>\n\n\n\n# sync\n\n子组件修改父组件的\n\n  <button @click="show = true">显示</button>\n  <dialog :show.sync="show" v-show="show"></dialog>\n\n\n * *vue 3.x语法\n\n  <button @click="show = true">显示</button>\n  <dialog v-model:show="show" /></dialog>\n\n\n子组件修改父组件的show值\n\n  this.$emit(\'update:show\',false)\n\n\n\n# 按键修饰符\n\n按下按键时执行\n\n<input v-on:keyup.enter="submit">\n\n\n * 按键编码 keycode已被主流浏览器废弃，因此vue提供如下按键码别名：\n\n.enter/.tab/.delete(捕获“删除”和“退格”键)/.esc/.space/.up /.down /.left/.right/.ctrl/.alt/.shift/.meta\n\n你还可以通过全局config.keycodes(vue 2.x)对象自定义按键修饰符别名：\n\n\n# exact\n\n组合修饰符\n允许精确的使用组合修饰符触发的事件。\n\n\x3c!-- 即使 alt 或 shift 被一同按下时也会触发 --\x3e\n<button v-on:click.ctrl="onclick">a</button>\n\n\x3c!-- 有且只有 ctrl 被按下的时候才触发 --\x3e\n<button v-on:click.ctrl.exact="onctrlclick">a</button>\n\n\x3c!-- 没有任何系统修饰符被按下的时候才触发 --\x3e\n<button v-on:click.exact="onclick">a</button>\n\n\ntip\n\n * 浏览器只有等内核线程执行到事件监听器对应的javascript代码时，才能知道内部是否会调用preventdefault函数来阻止事件的默认行为,因此使用prevent提前告知浏览器。一般用于监听@scoll/@touchmove\n\n * 串联使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。例如：v-on:click.prevent.self会阻止所有的点击，而 v-on:click.self.prevent只会阻止对元素自身的点击。',charsets:{cjk:!0}},{frontmatter:{},regularPath:"/frontend/vue/filter/",relativePath:"frontend/vue/filter/README.md",key:"v-eb0d6762",path:"/frontend/vue/filter/",headersStr:null,content:'过滤器只改变展示的形式，不改变原数据，并通过return返回处理后的数据。\n\n * 全局过滤器\n\nVue.filter("formatData",function (olddata) {     \n    return   newdata  \n})\n\n\n * 局部过滤器\n\nfilters: {\n    formatData: function (olddata) {\n        return  newdata\n    }\n}\n\n\n * 使用\n\n<p>{{olddata | newdata}}</p>\n\n\nWARNING\n\n*Vue 3.x中移除,建议使用计算属性或方法代替',normalizedContent:'过滤器只改变展示的形式，不改变原数据，并通过return返回处理后的数据。\n\n * 全局过滤器\n\nvue.filter("formatdata",function (olddata) {     \n    return   newdata  \n})\n\n\n * 局部过滤器\n\nfilters: {\n    formatdata: function (olddata) {\n        return  newdata\n    }\n}\n\n\n * 使用\n\n<p>{{olddata | newdata}}</p>\n\n\nwarning\n\n*vue 3.x中移除,建议使用计算属性或方法代替',charsets:{cjk:!0}},{title:"6.1.1 前端三大框架",frontmatter:{},regularPath:"/frontend/vue/introduction/",relativePath:"frontend/vue/introduction/README.md",key:"v-7325490b",path:"/frontend/vue/introduction/",headers:[{level:2,title:"6.1.1 前端三大框架",slug:"_6-1-1-前端三大框架",normalizedTitle:"6.1.1 前端三大框架",charIndex:2},{level:2,title:"6.1.2 vue 是什么？",slug:"_6-1-2-vue-是什么",normalizedTitle:"6.1.2 vue 是什么？",charIndex:38},{level:2,title:"6.1.3 MVVM",slug:"_6-1-3-mvvm",normalizedTitle:"6.1.3 mvvm",charIndex:152},{level:2,title:"6.1.5 引入",slug:"_6-1-5-引入",normalizedTitle:"6.1.5 引入",charIndex:303},{level:2,title:"6.1.5 基本结构",slug:"_6-1-5-基本结构",normalizedTitle:"6.1.5 基本结构",charIndex:517},{level:2,title:"6.1.6 响应式",slug:"_6-1-6-响应式",normalizedTitle:"6.1.6 响应式",charIndex:1231}],headersStr:"6.1.1 前端三大框架 6.1.2 vue 是什么？ 6.1.3 MVVM 6.1.5 引入 6.1.5 基本结构 6.1.6 响应式",content:'# 6.1.1 前端三大框架\n\nvue/react/angular\n\n\n# 6.1.2 vue 是什么？\n\nJavaScript框架 操作数据 彻底解放DOM操作 组件化\n\njQuery库 直接操作DOM\n\nVue 不支持 IE8 及以下版本但它支持所有兼容 ECMAScript 5 的浏览器\n\n\n# 6.1.3 MVVM\n\nMVVM：Model-View-ViewModel 数据-视图-视图模型。\n\n响应式数据原理（发布订阅模式）：通过ES5提供的Object.defineProper（数据劫持）来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。\n\n\n# 6.1.5 引入\n\n * 通过用<script>引入\n\n<script src="https://cdn.jsdelivr.net/npm/vue"><\/script> \n\x3c!-- 锁定版本号避免不可预期的风险 --\x3e\n<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"><\/script> \n\n\n * 通过NPM引入\n\n    npm install vue\n\n\n\n# 6.1.5 基本结构\n\n\x3c!-- 视图 HTML结构 --\x3e\n\x3c!-- 插值表达式：支持数据/函数调用/简单表达式（加减乘除、三目运算符）--\x3e \n<div id="app">\n     {{a}}   {{ 5 < 4 ? "ok" : "wrong" }} {{ fn() }}  \n</div>\n\n\n<script src="https://cdn.jsdelivr.net/npm/vue"><\/script> \n\n\n//2.创建vue实例\n\nnew Vue({\n        el:"#app", //元素 不能使用body、html标签\n        //数据      \n        //1.对象方法\n        data:{  \n            a:100,\n            b:200,\n        },\n    //2.函数方法\n    data:function(){    \n        return{\n            a:100,\n            b:200\n        }\n    }, \n    //3.函数简化方法(常用)\n    data (){\n        return{\n            a:100,\n            b:200\n        }\n    },\n    methods:{\n        fn(){\n            return "hello vue.js"\n        }\n    }\n});\n<\/script>\n\n\nWARNING\n\n*Vue 3.x中只能使用函数方法\n\n\n# 6.1.6 响应式\n\n当一个Vue实例被创建时，它将data对象中的所有的property加入到Vue的响应式系统中。当这些property的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。\n\n只有当实例被创建时就已经存在于data中的property才是响应式的。\n\n使用Object.freeze(property)阻止修改现有的property的“响应”',normalizedContent:'# 6.1.1 前端三大框架\n\nvue/react/angular\n\n\n# 6.1.2 vue 是什么？\n\njavascript框架 操作数据 彻底解放dom操作 组件化\n\njquery库 直接操作dom\n\nvue 不支持 ie8 及以下版本但它支持所有兼容 ecmascript 5 的浏览器\n\n\n# 6.1.3 mvvm\n\nmvvm：model-view-viewmodel 数据-视图-视图模型。\n\n响应式数据原理（发布订阅模式）：通过es5提供的object.defineproper（数据劫持）来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。\n\n\n# 6.1.5 引入\n\n * 通过用<script>引入\n\n<script src="https://cdn.jsdelivr.net/npm/vue"><\/script> \n\x3c!-- 锁定版本号避免不可预期的风险 --\x3e\n<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"><\/script> \n\n\n * 通过npm引入\n\n    npm install vue\n\n\n\n# 6.1.5 基本结构\n\n\x3c!-- 视图 html结构 --\x3e\n\x3c!-- 插值表达式：支持数据/函数调用/简单表达式（加减乘除、三目运算符）--\x3e \n<div id="app">\n     {{a}}   {{ 5 < 4 ? "ok" : "wrong" }} {{ fn() }}  \n</div>\n\n\n<script src="https://cdn.jsdelivr.net/npm/vue"><\/script> \n\n\n//2.创建vue实例\n\nnew vue({\n        el:"#app", //元素 不能使用body、html标签\n        //数据      \n        //1.对象方法\n        data:{  \n            a:100,\n            b:200,\n        },\n    //2.函数方法\n    data:function(){    \n        return{\n            a:100,\n            b:200\n        }\n    }, \n    //3.函数简化方法(常用)\n    data (){\n        return{\n            a:100,\n            b:200\n        }\n    },\n    methods:{\n        fn(){\n            return "hello vue.js"\n        }\n    }\n});\n<\/script>\n\n\nwarning\n\n*vue 3.x中只能使用函数方法\n\n\n# 6.1.6 响应式\n\n当一个vue实例被创建时，它将data对象中的所有的property加入到vue的响应式系统中。当这些property的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。\n\n只有当实例被创建时就已经存在于data中的property才是响应式的。\n\n使用object.freeze(property)阻止修改现有的property的“响应”',charsets:{cjk:!0}},{title:"生命周期",frontmatter:{},regularPath:"/frontend/vue/lifecycle/",relativePath:"frontend/vue/lifecycle/README.md",key:"v-8e3aceba",path:"/frontend/vue/lifecycle/",headers:[{level:3,title:"生命周期",slug:"生命周期",normalizedTitle:"生命周期",charIndex:2},{level:3,title:"生命周期事件",slug:"生命周期事件",normalizedTitle:"生命周期事件",charIndex:489}],headersStr:"生命周期 生命周期事件",content:'# 生命周期\n\n创建前/后、载入前/后、更新前/后、销毁前/销毁后。\n\n\n\n 1.  beforeCreate组件创建之千\n 2.  created组件创建之后（通常放Ajax请求）\n 3.  beforeMount数据挂载到DOM之前\n 4.  mounted数据挂载到DOM之后（不会等到所以子组件渲染之后， $nextTick全部渲染完毕后调用）\n 5.  beforeUpdate数据属性更改前调用\n 6.  updated数据属性更改后调用\n 7.  activated被keep-alive 缓存的组件激活时调用\n 8.  deactivated被keep-alive 缓存的组件停用时调用\n 9.  beforeDestroy实例销毁之前调用 此时还有可以用实例。*Vue 3.x中替换为beforeUnmount\n 10. destroyed实例销毁之后调用*Vue 3.x中替换为unmouted\n 11. errorHandler指定组件的渲染和观察期间未捕获错误的处理函数\n 12. errorCaptured当捕获一个来自子孙组件的错误时被调用\n\n\n# 生命周期事件\n\n * Vue 2.x语法 以hook:开头\n\n<template>\n  <child-component @hook:updated="onUpdated">\n</template>\n\n\n * Vue 3.x语法 以vnode-开头\n\n<template>\n    <child-component @vnode-updated="onUpdated">\n    \x3c!-- 驼峰命名法 --\x3e\n    <child-component @vnodeUpdated="onUpdated">\n</template>\n',normalizedContent:'# 生命周期\n\n创建前/后、载入前/后、更新前/后、销毁前/销毁后。\n\n\n\n 1.  beforecreate组件创建之千\n 2.  created组件创建之后（通常放ajax请求）\n 3.  beforemount数据挂载到dom之前\n 4.  mounted数据挂载到dom之后（不会等到所以子组件渲染之后， $nexttick全部渲染完毕后调用）\n 5.  beforeupdate数据属性更改前调用\n 6.  updated数据属性更改后调用\n 7.  activated被keep-alive 缓存的组件激活时调用\n 8.  deactivated被keep-alive 缓存的组件停用时调用\n 9.  beforedestroy实例销毁之前调用 此时还有可以用实例。*vue 3.x中替换为beforeunmount\n 10. destroyed实例销毁之后调用*vue 3.x中替换为unmouted\n 11. errorhandler指定组件的渲染和观察期间未捕获错误的处理函数\n 12. errorcaptured当捕获一个来自子孙组件的错误时被调用\n\n\n# 生命周期事件\n\n * vue 2.x语法 以hook:开头\n\n<template>\n  <child-component @hook:updated="onupdated">\n</template>\n\n\n * vue 3.x语法 以vnode-开头\n\n<template>\n    <child-component @vnode-updated="onupdated">\n    \x3c!-- 驼峰命名法 --\x3e\n    <child-component @vnodeupdated="onupdated">\n</template>\n',charsets:{cjk:!0}},{title:"6.6.1 methods",frontmatter:{},regularPath:"/frontend/vue/methods/",relativePath:"frontend/vue/methods/README.md",key:"v-e512ecba",path:"/frontend/vue/methods/",headers:[{level:2,title:"6.6.1 methods",slug:"_6-6-1-methods",normalizedTitle:"6.6.1 methods",charIndex:2},{level:2,title:"6.6.2 computed",slug:"_6-6-2-computed",normalizedTitle:"6.6.2 computed",charIndex:80},{level:2,title:"6.6.3 watch",slug:"_6-6-3-watch",normalizedTitle:"6.6.3 watch",charIndex:354},{level:2,title:"6.6.3 三者的区别",slug:"_6-6-3-三者的区别",normalizedTitle:"6.6.3 三者的区别",charIndex:774}],headersStr:"6.6.1 methods 6.6.2 computed 6.6.3 watch 6.6.3 三者的区别",content:"# 6.6.1 methods\n\n在vue项目中定义的函数需要放在methods方法里。\n\nmethods:{\n    loadData(){}\n}\n\n\n\n# 6.6.2 computed\n\ncomputed计算属性：将复杂的逻辑从模板中提取出来便于维护。并根据数据的改变重新进行逻辑处理。如果数据没有改变就不会重新处理。\n\n<p>Reversed message: \"{{ reversedMessage() }}\"</p>\n\n\ncomputed:{\n// 对reversedMessage进行逻辑处理\n      reversedMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n\n\n\n# 6.6.3 watch\n\nwatch监听属性：监听数据的改变\n\n// 监听data属性的改版\nwatch: {\n    data(val, oldVal) {\n    }\n} \n\n\n * 深度监听\n\n// 监听data属性的改版\nwatch: {\n    docData: {\n        handler(val, oldVal) {\n        },\n        deep: true, //深度监听\n         immediate: true //对初始值进行监听\n    }\n}\n\n\n * 监听子属性\n\nwatch: {\n            'data.rows': {\n                handler(val, oldVal) {\n                },\n                immediate: true\n            }\n        },\n\n\n\n# 6.6.3 三者的区别\n\n 1. methods方法不会自执行。\n 2. computed方法有缓存，如果监听的数据没有改变，不会重新计算。适合复杂的逻辑处理\n 3. watch擅长处理一个数据影响多个数据、computed擅长处理一个数据受多个数据影响\n\nnew Vue({\n  el: '#app',\n  data: {\n    fullName: '',\n    firstName: 'jaqi',\n    lastdName: 'l'\n  },\n  //一个数据(fullName)受(firstName、lastdName)两个数据的影响\n    computed:{\n        this.fullName = firstName + this.lastdName\n  },\n  //如果使用watch就需要对每个改变的数据进行监听，非常繁琐\n    watch: {\n        firstName: function (newValue) {\n            this.fullName = firstName + this.lastdName\n    },\n        lastdName: function (newValue) {\n            this.fullName = firstName + this.lastdName\n    },\n  },\n})\n\n\n * 【Vue】谈Vue的依赖追踪系统 ——搞懂methods watch和compute的区别和联系\n * vue computed正确使用方式",normalizedContent:"# 6.6.1 methods\n\n在vue项目中定义的函数需要放在methods方法里。\n\nmethods:{\n    loaddata(){}\n}\n\n\n\n# 6.6.2 computed\n\ncomputed计算属性：将复杂的逻辑从模板中提取出来便于维护。并根据数据的改变重新进行逻辑处理。如果数据没有改变就不会重新处理。\n\n<p>reversed message: \"{{ reversedmessage() }}\"</p>\n\n\ncomputed:{\n// 对reversedmessage进行逻辑处理\n      reversedmessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}\n\n\n\n# 6.6.3 watch\n\nwatch监听属性：监听数据的改变\n\n// 监听data属性的改版\nwatch: {\n    data(val, oldval) {\n    }\n} \n\n\n * 深度监听\n\n// 监听data属性的改版\nwatch: {\n    docdata: {\n        handler(val, oldval) {\n        },\n        deep: true, //深度监听\n         immediate: true //对初始值进行监听\n    }\n}\n\n\n * 监听子属性\n\nwatch: {\n            'data.rows': {\n                handler(val, oldval) {\n                },\n                immediate: true\n            }\n        },\n\n\n\n# 6.6.3 三者的区别\n\n 1. methods方法不会自执行。\n 2. computed方法有缓存，如果监听的数据没有改变，不会重新计算。适合复杂的逻辑处理\n 3. watch擅长处理一个数据影响多个数据、computed擅长处理一个数据受多个数据影响\n\nnew vue({\n  el: '#app',\n  data: {\n    fullname: '',\n    firstname: 'jaqi',\n    lastdname: 'l'\n  },\n  //一个数据(fullname)受(firstname、lastdname)两个数据的影响\n    computed:{\n        this.fullname = firstname + this.lastdname\n  },\n  //如果使用watch就需要对每个改变的数据进行监听，非常繁琐\n    watch: {\n        firstname: function (newvalue) {\n            this.fullname = firstname + this.lastdname\n    },\n        lastdname: function (newvalue) {\n            this.fullname = firstname + this.lastdname\n    },\n  },\n})\n\n\n * 【vue】谈vue的依赖追踪系统 ——搞懂methods watch和compute的区别和联系\n * vue computed正确使用方式",charsets:{cjk:!0}},{title:"6.8.1路由基础",frontmatter:{},regularPath:"/frontend/vue/router/",relativePath:"frontend/vue/router/README.md",key:"v-52f7f4ad",path:"/frontend/vue/router/",headers:[{level:2,title:"6.8.1路由基础",slug:"_6-8-1路由基础",normalizedTitle:"6.8.1路由基础",charIndex:2},{level:3,title:"动态路由",slug:"动态路由",normalizedTitle:"动态路由",charIndex:791},{level:3,title:"路由捕获",slug:"路由捕获",normalizedTitle:"路由捕获",charIndex:1431},{level:3,title:"路由嵌套",slug:"路由嵌套",normalizedTitle:"路由嵌套",charIndex:1620},{level:3,title:"命名视图与嵌套命名视图",slug:"命名视图与嵌套命名视图",normalizedTitle:"命名视图与嵌套命名视图",charIndex:2074},{level:3,title:"重定向与别名",slug:"重定向与别名",normalizedTitle:"重定向与别名",charIndex:2983},{level:3,title:"路由组件传参",slug:"路由组件传参",normalizedTitle:"路由组件传参",charIndex:3370},{level:3,title:"响应路由参数的变化",slug:"响应路由参数的变化",normalizedTitle:"响应路由参数的变化",charIndex:4004},{level:3,title:"替换历史栈",slug:"替换历史栈",normalizedTitle:"替换历史栈",charIndex:4488},{level:3,title:"历史模式",slug:"历史模式",normalizedTitle:"历史模式",charIndex:4679},{level:2,title:"6.8.2导航卫士",slug:"_6-8-2导航卫士",normalizedTitle:"6.8.2导航卫士",charIndex:5540}],headersStr:"6.8.1路由基础 动态路由 路由捕获 路由嵌套 命名视图与嵌套命名视图 重定向与别名 路由组件传参 响应路由参数的变化 替换历史栈 历史模式 6.8.2导航卫士",content:"# 6.8.1路由基础\n\n * 安装\n\nnpm install vue-router\n\n\n * 全局引用\n\n# Vue Router 3.x语法:\n\nmain.js\n\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n// 或\nnew Vue({\n    render: h => h(App),\n    router,\n}).$mount('#app')\n\n\n# *Vue Router 4.x语法:\n\nimport { createRouter, createWebHistory } from 'vue-router'\n// 还有 createWebHashHistory 和 createMemoryHistory\n\ncreateRouter({\n  history: createWebHistory(),\n  routes: [],\n})\n\n\n * 使用\n\n# js文件中：\n\n    router.push('/index') \n\n\n# vue文件中：\n\n<router-link to=\"/index\">首页</router-link> \n\x3c!-- router-link被渲染成a元素，to属性被渲染成href属性 --\x3e\n\n\n methods: {\n    go() {\n      this.$router.push('/index')\n    },\n    goBack(){\n        this.$router.go(-1)// 后退一步记录，等同于 history.back()\n    },\n     goForward(){\n        this.$router.go(1) // 在浏览器记录中前进一步，等同于 history.forward()\n    }\n  }\n\n\n\n# 动态路由\n\n * query方法（查询路由）\n\n# 编程式:\n\nthis.$router.push({ path: \"/index\", query: data })// 发送 -> /index\nthis.$route.query // 接收\n\n\n# 声明式:\n\n<router-link :to=\"{ path: '/news', query: data}\">新闻</router-link>\n\n\n * params方法(命名路由)\n\n# 编程式:\n\n this.$router.push({ name: \"index\", params: data })// 发送 -> /index?data\n tthis.$route.params // 接收\n\n\n# 声明式:\n\n<router-link :to=\"{ name: 'news', params: data}\">新闻</router-link>\n\n\n * 路径传参\n\n# 编程式:\n\nthis.$router.push({ path: \"/index/:id\"})\n\n\n# 声明式:\n\n<router-link to=\"/index/+'data'+\">首页</router-link> \n\n\nTIP\n\n 1. query要用(path)路径传参，params要用(name)命名路由传参。\n 2. 通过命名路由(params)传递的参数，刷新页面参数会丢失。\n 3. 发送是$router,接收使是$route\n\n\n# 路由捕获\n\npath: '*' // 会匹配所有路径，通常用于404错误\npath: '/user-*' // 会匹配以 `/user-` 开头的任意路径\n\n\n * 在参数中自定义正则：\n\npath: '/:orderId(\\\\d+)' // 仅匹配数字\npath: '/:chapters(\\\\d+)*'  // 匹配 /, /1, /1/2, /1/2/3, 等\n\n\n\n# 路由嵌套\n\n  routes: [\n    { path: '/user/:id', component: User,\n      children: [\n        {\n          // 当 /user/:id/profile 匹配成功，\n          // UserProfile 会被渲染在 User 的 <router-view> 中\n          path: 'profile',\n          component: UserProfile\n        },\n        {\n          // 当 /user/:id/posts 匹配成功\n          // UserPosts 会被渲染在 User 的 <router-view> 中\n          path: 'posts',\n          children: []\n        }\n      ]\n    }\n  ]\n\n\nTIP\n\n以/开头的嵌套路径会被当作根路径\n\n\n# 命名视图与嵌套命名视图\n\n * 命名视图\n\n<router-view class=\"view left-sidebar\" name=\"LeftSidebar\"></router-view>\n<router-view class=\"view main-content\"></router-view>\n<router-view class=\"view right-sidebar\" name=\"RightSidebar\"></router-view>\n\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Home,\n        // LeftSidebar: LeftSidebar 的缩写\n        LeftSidebar,\n        // 它们与 `<router-view>` 上的 `name` 属性匹配\n        RightSidebar,\n      },\n    },\n  ],\n})\n\n\n * 嵌套命名视图\n\n<div>\n  <h1>User Settings</h1>\n  <NavBar />\n  <router-view />\n  <router-view name=\"helper\" />\n</div>\n\n\n{\n  path: '/settings',\n  // 你也可以在顶级路由就配置命名视图\n  component: UserSettings,\n  children: [{\n    path: 'emails',\n    component: UserEmailsSubscriptions\n  }, {\n    path: 'profile',\n    components: {\n      default: UserProfile,\n      helper: UserProfilePreview\n    }\n  }]\n}\n\n\n\n# 重定向与别名\n\n# 从/a重定向到/b：\n\n routes: [\n   { path: '/a', redirect: '/b' }\n ]\n\n\n# 重定向另一个命名路由\n\n routes: [\n  { path: '/a', redirect: { name: 'foo' }}\n]\n\n\n# 重定向一个方法\n\nroutes: [\n  { path: '/a', redirect: to => {\n    // 方法接收 目标路由 作为参数\n    // return 重定向的 字符串路径/路径对象\n  }}\n]\n\n\n# 别名\n\n/a的别名是/b，意味着，当用户访问/b 时，URL会保持为 /b，但是路由匹配则为/a，就像用户访问 /a 一样。\n\nroutes: [\n  { path: '/a', component: A, alias: '/b' }\n]\n\n\n\n# 路由组件传参\n\n使组件只能在某些特定的URL上使用\n\n# 取代与$route的耦合：\n\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n   { path: '/user/:id', component: User }\n  ]\n})\n\n\n# 通过props解耦：\n\nconst User = {\n    props: ['id'],\n    template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true }, // 当props=true，route.params将会被设置为组件属性\n\n    // 对于包含命名视图的路由，必须分别为每个命名视图添加 `props` 选项：\n    {\n      path: '/user/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n\n\n\n# 响应路由参数的变化\n\n当使用带有参数的路由时需要注意的是相同的组件实例将被重复使用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会被调用。 要对同一个组件中参数的变化做出响应的话，可以使用一下方法：\n\n * wacth监听\n\n// 写法一：\nwatch:{\n  $router(to,from){\n       console.log(to.path)\n  }\n},\n// 写法二：\nwatch: {\n   $route: {\n     handler:  function (val, oldVal){\n       console.log(val);\n     },\n     // 深度观察监听\n     deep:  true\n   }\n},\n\n\n * beforeRouteUpdate拦截\n\n  async beforeRouteUpdate (to, from, next) {\n    his.userData = await fetchUser(to.params.id)\n  },\n\n\n\n# 替换历史栈\n\n# 编程式:\n\nrouter.push({ path: '/home', replace: true })\n// 相当于\nrouter.replace({ path: '/home' })\n\n\n# 声明式:\n\n<router-link :to=\"{ path: '/news', query: data}\" replace>新闻</router-link>\n\n\n\n# 历史模式\n\n * Hash模式 通过createWebHashHistory()创建\n\nimport { createRouter, createWebHashHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes: [\n    //...\n  ],\n})\n\n\n什么是Hash模式\n\n这里的hash是指url尾巴后的#号及后面的字符。这里的#和css里的#是一个意思。hash也称作锚点，本身是用来做页面定位的，她可以使对应id的元素显示在可是区域内。由于hash值变化不会导致浏览器向服务器发出请求，而且hash改变会触发hashchange事件，浏览器的进后退也能对其进行控制，所以人们在 html5的history出现前，基本都是使用 hash 来实现前端路由的。Hash模式兼容到IE8,使用Hash模式做路由则不能使用锚点功能。\n\n * history(HTML5)模式 通过createWebHistory()创建\n\nimport { createRouter, createWebHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    //...\n  ],\n})\n\n\n什么是history(HTML5)模式\n\nHTML5规范提供了history.pushState和history.replaceState来进行路由控制。通过这两个方法可以改变url且不向服务器发送请求。同时不会像hash有一个#,更加的美观。但是history路由需要服务器的支持，并且需将所有的路由重定向倒根页面。history(HTML5)模式兼容到IE10。history(HTML5)模式可以传递体积更大的数据包。\n\n\n# 6.8.2导航卫士\n\n# 局部卫士：\n\nbeforeRouteEnter进入当前路由前\nbeforeRouteUpdate当前路由更新前\nbeforeRouteLeave离开当前路由前\n\n# 全局卫士：\n\n在main.js或router.js配置\nbeforeEach进入路由时\nbeforeResolve路由解析后\nafterEach进入路由后，不接受next参数\n\n# 独享卫士：\n\n在router.js配置\nbeforeEnter进入路由配置时\n\n# 参数：\n\nfrom从哪个路由进入\nto去哪个路由\nnext组件渲染完毕后回调\n\n# 触发顺序：\n\nbeforeEach→beforeEnter→beforeRouteEnter→beforeRouteUpdate→beforeRouteLeave →beforeResolve→afterEach→beforeRouteEnter的回调函数\n\n# 案例\n\n 1. 守卫模块（作用于VueRouter）:\n\nroutes:[{\n  path:\"/Blog\",\n  component:Blog,\n  meta:{ // 路由元信息\n  auth:true// 表示用户访问该组件是否需要登陆\n}]\n\n\n 2. 登录模块（作用于登录模块）:\n\nhandleLogin(){   //保存用户名和密码\n  localStorage.setItem(\"username\",{name:this.uname,psw:this.psw});\n  this.$router.push(\"/blog\")}//给VueRouter添加一个历史记录 目的是渲染blog\n}\n\n\n 3. 守卫判断:\n\nrouter.beforeEach((to,from,next)=>{\n  if (to.meta.auth) {//判断有没有用户名和密码\n      if (localStorage.getItem(\"username\")) {//有用户名说明已经登录\n        next();\n      }else{//没有登录 渲染登录组件\n        next({path:\"/login\"});\n      };\n    }else{\n    next();\n  };\n});\n\n\n 4. 注销模块（作用域实例）：\n\nclearOut(){\n  localStorage.removeItem(\"username\"); // 移除本地用户名密码\n  this.$router.push(\"/login\") \n}//给VueRouter添加一个历史记录 目的是渲染blog\n\n",normalizedContent:"# 6.8.1路由基础\n\n * 安装\n\nnpm install vue-router\n\n\n * 全局引用\n\n# vue router 3.x语法:\n\nmain.js\n\nimport vuerouter from 'vue-router'\n\nvue.use(vuerouter)\n// 或\nnew vue({\n    render: h => h(app),\n    router,\n}).$mount('#app')\n\n\n# *vue router 4.x语法:\n\nimport { createrouter, createwebhistory } from 'vue-router'\n// 还有 createwebhashhistory 和 creatememoryhistory\n\ncreaterouter({\n  history: createwebhistory(),\n  routes: [],\n})\n\n\n * 使用\n\n# js文件中：\n\n    router.push('/index') \n\n\n# vue文件中：\n\n<router-link to=\"/index\">首页</router-link> \n\x3c!-- router-link被渲染成a元素，to属性被渲染成href属性 --\x3e\n\n\n methods: {\n    go() {\n      this.$router.push('/index')\n    },\n    goback(){\n        this.$router.go(-1)// 后退一步记录，等同于 history.back()\n    },\n     goforward(){\n        this.$router.go(1) // 在浏览器记录中前进一步，等同于 history.forward()\n    }\n  }\n\n\n\n# 动态路由\n\n * query方法（查询路由）\n\n# 编程式:\n\nthis.$router.push({ path: \"/index\", query: data })// 发送 -> /index\nthis.$route.query // 接收\n\n\n# 声明式:\n\n<router-link :to=\"{ path: '/news', query: data}\">新闻</router-link>\n\n\n * params方法(命名路由)\n\n# 编程式:\n\n this.$router.push({ name: \"index\", params: data })// 发送 -> /index?data\n tthis.$route.params // 接收\n\n\n# 声明式:\n\n<router-link :to=\"{ name: 'news', params: data}\">新闻</router-link>\n\n\n * 路径传参\n\n# 编程式:\n\nthis.$router.push({ path: \"/index/:id\"})\n\n\n# 声明式:\n\n<router-link to=\"/index/+'data'+\">首页</router-link> \n\n\ntip\n\n 1. query要用(path)路径传参，params要用(name)命名路由传参。\n 2. 通过命名路由(params)传递的参数，刷新页面参数会丢失。\n 3. 发送是$router,接收使是$route\n\n\n# 路由捕获\n\npath: '*' // 会匹配所有路径，通常用于404错误\npath: '/user-*' // 会匹配以 `/user-` 开头的任意路径\n\n\n * 在参数中自定义正则：\n\npath: '/:orderid(\\\\d+)' // 仅匹配数字\npath: '/:chapters(\\\\d+)*'  // 匹配 /, /1, /1/2, /1/2/3, 等\n\n\n\n# 路由嵌套\n\n  routes: [\n    { path: '/user/:id', component: user,\n      children: [\n        {\n          // 当 /user/:id/profile 匹配成功，\n          // userprofile 会被渲染在 user 的 <router-view> 中\n          path: 'profile',\n          component: userprofile\n        },\n        {\n          // 当 /user/:id/posts 匹配成功\n          // userposts 会被渲染在 user 的 <router-view> 中\n          path: 'posts',\n          children: []\n        }\n      ]\n    }\n  ]\n\n\ntip\n\n以/开头的嵌套路径会被当作根路径\n\n\n# 命名视图与嵌套命名视图\n\n * 命名视图\n\n<router-view class=\"view left-sidebar\" name=\"leftsidebar\"></router-view>\n<router-view class=\"view main-content\"></router-view>\n<router-view class=\"view right-sidebar\" name=\"rightsidebar\"></router-view>\n\n\nconst router = createrouter({\n  history: createwebhashhistory(),\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: home,\n        // leftsidebar: leftsidebar 的缩写\n        leftsidebar,\n        // 它们与 `<router-view>` 上的 `name` 属性匹配\n        rightsidebar,\n      },\n    },\n  ],\n})\n\n\n * 嵌套命名视图\n\n<div>\n  <h1>user settings</h1>\n  <navbar />\n  <router-view />\n  <router-view name=\"helper\" />\n</div>\n\n\n{\n  path: '/settings',\n  // 你也可以在顶级路由就配置命名视图\n  component: usersettings,\n  children: [{\n    path: 'emails',\n    component: useremailssubscriptions\n  }, {\n    path: 'profile',\n    components: {\n      default: userprofile,\n      helper: userprofilepreview\n    }\n  }]\n}\n\n\n\n# 重定向与别名\n\n# 从/a重定向到/b：\n\n routes: [\n   { path: '/a', redirect: '/b' }\n ]\n\n\n# 重定向另一个命名路由\n\n routes: [\n  { path: '/a', redirect: { name: 'foo' }}\n]\n\n\n# 重定向一个方法\n\nroutes: [\n  { path: '/a', redirect: to => {\n    // 方法接收 目标路由 作为参数\n    // return 重定向的 字符串路径/路径对象\n  }}\n]\n\n\n# 别名\n\n/a的别名是/b，意味着，当用户访问/b 时，url会保持为 /b，但是路由匹配则为/a，就像用户访问 /a 一样。\n\nroutes: [\n  { path: '/a', component: a, alias: '/b' }\n]\n\n\n\n# 路由组件传参\n\n使组件只能在某些特定的url上使用\n\n# 取代与$route的耦合：\n\nconst user = {\n  template: '<div>user {{ $route.params.id }}</div>'\n}\nconst router = new vuerouter({\n  routes: [\n   { path: '/user/:id', component: user }\n  ]\n})\n\n\n# 通过props解耦：\n\nconst user = {\n    props: ['id'],\n    template: '<div>user {{ id }}</div>'\n}\nconst router = new vuerouter({\n  routes: [\n    { path: '/user/:id', component: user, props: true }, // 当props=true，route.params将会被设置为组件属性\n\n    // 对于包含命名视图的路由，必须分别为每个命名视图添加 `props` 选项：\n    {\n      path: '/user/:id',\n      components: { default: user, sidebar: sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n\n\n\n# 响应路由参数的变化\n\n当使用带有参数的路由时需要注意的是相同的组件实例将被重复使用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会被调用。 要对同一个组件中参数的变化做出响应的话，可以使用一下方法：\n\n * wacth监听\n\n// 写法一：\nwatch:{\n  $router(to,from){\n       console.log(to.path)\n  }\n},\n// 写法二：\nwatch: {\n   $route: {\n     handler:  function (val, oldval){\n       console.log(val);\n     },\n     // 深度观察监听\n     deep:  true\n   }\n},\n\n\n * beforerouteupdate拦截\n\n  async beforerouteupdate (to, from, next) {\n    his.userdata = await fetchuser(to.params.id)\n  },\n\n\n\n# 替换历史栈\n\n# 编程式:\n\nrouter.push({ path: '/home', replace: true })\n// 相当于\nrouter.replace({ path: '/home' })\n\n\n# 声明式:\n\n<router-link :to=\"{ path: '/news', query: data}\" replace>新闻</router-link>\n\n\n\n# 历史模式\n\n * hash模式 通过createwebhashhistory()创建\n\nimport { createrouter, createwebhashhistory } from 'vue-router'\n\nconst router = createrouter({\n  history: createwebhashhistory(),\n  routes: [\n    //...\n  ],\n})\n\n\n什么是hash模式\n\n这里的hash是指url尾巴后的#号及后面的字符。这里的#和css里的#是一个意思。hash也称作锚点，本身是用来做页面定位的，她可以使对应id的元素显示在可是区域内。由于hash值变化不会导致浏览器向服务器发出请求，而且hash改变会触发hashchange事件，浏览器的进后退也能对其进行控制，所以人们在 html5的history出现前，基本都是使用 hash 来实现前端路由的。hash模式兼容到ie8,使用hash模式做路由则不能使用锚点功能。\n\n * history(html5)模式 通过createwebhistory()创建\n\nimport { createrouter, createwebhistory } from 'vue-router'\n\nconst router = createrouter({\n  history: createwebhistory(),\n  routes: [\n    //...\n  ],\n})\n\n\n什么是history(html5)模式\n\nhtml5规范提供了history.pushstate和history.replacestate来进行路由控制。通过这两个方法可以改变url且不向服务器发送请求。同时不会像hash有一个#,更加的美观。但是history路由需要服务器的支持，并且需将所有的路由重定向倒根页面。history(html5)模式兼容到ie10。history(html5)模式可以传递体积更大的数据包。\n\n\n# 6.8.2导航卫士\n\n# 局部卫士：\n\nbeforerouteenter进入当前路由前\nbeforerouteupdate当前路由更新前\nbeforerouteleave离开当前路由前\n\n# 全局卫士：\n\n在main.js或router.js配置\nbeforeeach进入路由时\nbeforeresolve路由解析后\naftereach进入路由后，不接受next参数\n\n# 独享卫士：\n\n在router.js配置\nbeforeenter进入路由配置时\n\n# 参数：\n\nfrom从哪个路由进入\nto去哪个路由\nnext组件渲染完毕后回调\n\n# 触发顺序：\n\nbeforeeach→beforeenter→beforerouteenter→beforerouteupdate→beforerouteleave →beforeresolve→aftereach→beforerouteenter的回调函数\n\n# 案例\n\n 1. 守卫模块（作用于vuerouter）:\n\nroutes:[{\n  path:\"/blog\",\n  component:blog,\n  meta:{ // 路由元信息\n  auth:true// 表示用户访问该组件是否需要登陆\n}]\n\n\n 2. 登录模块（作用于登录模块）:\n\nhandlelogin(){   //保存用户名和密码\n  localstorage.setitem(\"username\",{name:this.uname,psw:this.psw});\n  this.$router.push(\"/blog\")}//给vuerouter添加一个历史记录 目的是渲染blog\n}\n\n\n 3. 守卫判断:\n\nrouter.beforeeach((to,from,next)=>{\n  if (to.meta.auth) {//判断有没有用户名和密码\n      if (localstorage.getitem(\"username\")) {//有用户名说明已经登录\n        next();\n      }else{//没有登录 渲染登录组件\n        next({path:\"/login\"});\n      };\n    }else{\n    next();\n  };\n});\n\n\n 4. 注销模块（作用域实例）：\n\nclearout(){\n  localstorage.removeitem(\"username\"); // 移除本地用户名密码\n  this.$router.push(\"/login\") \n}//给vuerouter添加一个历史记录 目的是渲染blog\n\n",charsets:{cjk:!0}},{title:"6.5.1 匿名插槽",frontmatter:{},regularPath:"/frontend/vue/slot/",relativePath:"frontend/vue/slot/README.md",key:"v-d99cd77a",path:"/frontend/vue/slot/",headers:[{level:2,title:"6.5.1 匿名插槽",slug:"_6-5-1-匿名插槽",normalizedTitle:"6.5.1 匿名插槽",charIndex:2},{level:2,title:"6.5.2 具名插槽",slug:"_6-5-2-具名插槽",normalizedTitle:"6.5.2 具名插槽",charIndex:124},{level:2,title:"6.5.3 作用域插槽",slug:"_6-5-3-作用域插槽",normalizedTitle:"6.5.3 作用域插槽",charIndex:510}],headersStr:"6.5.1 匿名插槽 6.5.2 具名插槽 6.5.3 作用域插槽",content:'# 6.5.1 匿名插槽\n\n * 定义：\n\n<button>\n    <slot></slot>\x3c!-- name默认default --\x3e\n</button>\n\n\n * 使用：\n\n  <component>登陆</component>\n\n\n\n# 6.5.2 具名插槽\n\n * 定义：\n\n<div>\n  <slot name="two"></slot>\n  <slot name="one"></slot>\n  <slot name="three"></slot>\n</div> \n\n\n * 使用：\n\n\n  <component>\n    <template v-slot:one>\n      <li></li>\n    </template>\n    \x3c!-- 具名插槽缩写 --\x3e\n    <template #two> \n      <li></li>\n    </template>\n    \x3c!-- 动态插槽名 --\x3e\n     <template v-slot:[dynamicSlotName]> \n      <li></li>\n    </template>\n  </component>\n\n\n\n# 6.5.3 作用域插槽\n\n父组件通过插槽prop调用子组件的数据\n\n * 定义：\n\n\n<div>\n  \x3c!-- 插槽名称user 插槽prop参数名user --\x3e\n  <slot v-bind:user="userName" name="user">\n    {{ userName.lastName }}\n  </slot>\n</div>\n\n\n  data() {\n    return {\n      userName: {\n        firstName: "jaqi",\n      },\n    };\n  },\n\n\n * 使用：\n\n  <div id="app">\n  <component>\n    \x3c!-- 获取具名插槽user，的user参数--\x3e\n    <template v-slot:user="slotProps"> \n      {{ slotProps.user.firstName }}\n    </template>\n  </component>\n</div>\n\n\n * 解构插槽Prop:\n\n  <div id="app">\n  <component>\n    \x3c!-- 获取具名插槽user，的user参数并重命名为name--\x3e\n    <template v-slot:user="{user:name}">  \n      {{ name.firstName }}\n    </template>\n  </component>\n</div>\n',normalizedContent:'# 6.5.1 匿名插槽\n\n * 定义：\n\n<button>\n    <slot></slot>\x3c!-- name默认default --\x3e\n</button>\n\n\n * 使用：\n\n  <component>登陆</component>\n\n\n\n# 6.5.2 具名插槽\n\n * 定义：\n\n<div>\n  <slot name="two"></slot>\n  <slot name="one"></slot>\n  <slot name="three"></slot>\n</div> \n\n\n * 使用：\n\n\n  <component>\n    <template v-slot:one>\n      <li></li>\n    </template>\n    \x3c!-- 具名插槽缩写 --\x3e\n    <template #two> \n      <li></li>\n    </template>\n    \x3c!-- 动态插槽名 --\x3e\n     <template v-slot:[dynamicslotname]> \n      <li></li>\n    </template>\n  </component>\n\n\n\n# 6.5.3 作用域插槽\n\n父组件通过插槽prop调用子组件的数据\n\n * 定义：\n\n\n<div>\n  \x3c!-- 插槽名称user 插槽prop参数名user --\x3e\n  <slot v-bind:user="username" name="user">\n    {{ username.lastname }}\n  </slot>\n</div>\n\n\n  data() {\n    return {\n      username: {\n        firstname: "jaqi",\n      },\n    };\n  },\n\n\n * 使用：\n\n  <div id="app">\n  <component>\n    \x3c!-- 获取具名插槽user，的user参数--\x3e\n    <template v-slot:user="slotprops"> \n      {{ slotprops.user.firstname }}\n    </template>\n  </component>\n</div>\n\n\n * 解构插槽prop:\n\n  <div id="app">\n  <component>\n    \x3c!-- 获取具名插槽user，的user参数并重命名为name--\x3e\n    <template v-slot:user="{user:name}">  \n      {{ name.firstname }}\n    </template>\n  </component>\n</div>\n',charsets:{cjk:!0}},{title:"transition单组件过渡、动画",frontmatter:{},regularPath:"/frontend/vue/transitions/",relativePath:"frontend/vue/transitions/README.md",key:"v-05838123",path:"/frontend/vue/transitions/",headers:[{level:3,title:"transition单组件过渡、动画",slug:"transition单组件过渡、动画",normalizedTitle:"transition单组件过渡、动画",charIndex:2},{level:3,title:"transition-group多组件过渡、动画",slug:"transition-group多组件过渡、动画",normalizedTitle:"transition-group多组件过渡、动画",charIndex:143},{level:3,title:"过渡、动画的类名",slug:"过渡、动画的类名",normalizedTitle:"过渡、动画的类名",charIndex:439},{level:3,title:"自定义过渡、动画的类名",slug:"自定义过渡、动画的类名",normalizedTitle:"自定义过渡、动画的类名",charIndex:1293},{level:3,title:"duration属性",slug:"duration属性",normalizedTitle:"duration属性",charIndex:1685},{level:3,title:"appear 属性",slug:"appear属性",normalizedTitle:"appear 属性",charIndex:null},{level:3,title:"钩子",slug:"钩子",normalizedTitle:"钩子",charIndex:2022},{level:3,title:"过度模式",slug:"过度模式",normalizedTitle:"过度模式",charIndex:2630},{level:3,title:"列表过渡",slug:"列表过渡",normalizedTitle:"列表过渡",charIndex:2757}],headersStr:"transition单组件过渡、动画 transition-group多组件过渡、动画 过渡、动画的类名 自定义过渡、动画的类名 duration属性 appear 属性 钩子 过度模式 列表过渡",content:'# transition单组件过渡、动画\n\n触发条件：DOM的显示隐藏或新增移除\n\n * name:过渡的类名\n\n  <transition name="transit">\n      <p v-show="show">transit</p>\n  </transition>\n\n\n\n# transition-group多组件过渡、动画\n\n触发条件：列表项的修改，插入，删除（列表整体修改不会触发）\n\n * name:过渡的类名\n * tag:渲染的根元素标签，默认渲染成span标签。*Vue 3.x不再默认渲染\n\n<transition-group name="list" tag="ul">\n    <li v-for="item in list" :key="item" class="list">\n      {{ item }}\n    </li>\n  </transition-group>\n\n\nWARNING\n\n当有相同标签名的元素切换时，需要实则key\n\n\n# 过渡、动画的类名\n\n * 显示过程开始前的状态 .v-enter*Vue 3.x中替换为v-enter-from\n * 显示过程的过渡效果 .v-enter-active\n * 显示过程结束前一刻的状态 .v-enter-to\n * 隐藏过程开始前的状态 .v-leave*Vue 3.x中替换为v-enter-from\n * 隐藏过程的过渡效果 .v-leave-active\n * 隐藏过程结束前一刻的状态 .v-leave-to\n\nTIP\n\nv是transition标签的name属性定义的类名\n\n <transition name="slide-fade">\n    <p v-if="show">hello</p>\n  </transition>\n\n\n * 过度\n\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-to{\n  transform: translateX(10px);\n  opacity: 0;\n}\n\n\n * 动画\n\n.slide-fade-enter-active {\n  animation: slide-fade-in .5s;\n}\n.slide-fade-leave-active {\n  animation: slide-fade-in .5s reverse;\n}\n@keyframes slide-fade-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n\n\n# 自定义过渡、动画的类名\n\n * 显示过程开始前的类名v-enter-class\n\n * 显示过程中的类名v-enter-active-class\n\n * 显示过程结束前一刻的类名v-enter-to-class\n\n * 隐藏过程开始前的类名v-leave-class\n\n * 隐藏过程中的类名v-leave-active-class\n\n * 隐藏过程结束前一刻的类名v-leave-to-class\n\n<transition\n    name="custom-classes-transition"\n    enter-active-class="animated tada"\n    leave-active-class="animated bounceOutRight"\n  >\n    <p v-if="show">hello</p>\n  </transition>\n\n\n\n# duration属性\n\n设置过度、动画的持续时间\n\n\x3c!-- 设置开始和结束的持续时间 --\x3e\n<transition :duration="{ enter: 500, leave: 800 }">\n</transition>\n\n\n\n# appear属性\n\n设置初始渲染的过渡\n\n<transition\n  appear\n  appear-class="custom-appear-class"\n  appear-to-class="custom-appear-to-class" (2.1.8+)\n  appear-active-class="custom-appear-active-class"\n>\n  \x3c!-- ... --\x3e\n</transition>\n\n\n\n# 钩子\n\n * 初始过程开始前触发before-appear\n\n * 初始过程开始时触发appear\n\n * 初始过程开始后触发after-appear\n\n * 初始过程结束时触发appear-cancelled\n\n * 显示过程开始前触发before-enter\n\n * 显示过程开始时触发enter\n\n * 显示过程开始后触发after-enter\n\n * 显示过程结束时触发enter-cancelled\n\n * 隐藏过程开始前触发before-leave\n\n * 隐藏过程开始时触发leave\n\n * 隐藏过程开始后触发after-leave\n\n * 隐藏过程结束时触发leave-cancelled\n\n<transition\n  v-on:before-enter="beforeEnter"\n  v-on:enter="enter"\n  v-on:after-enter="afterEnter"\n  v-on:enter-cancelled="enterCancelled"\n\n  v-on:before-leave="beforeLeave"\n  v-on:leave="leave"\n  v-on:after-leave="afterLeave"\n  v-on:leave-cancelled="leaveCancelled"\n>\n  \x3c!-- ... --\x3e\n</transition>\n\n\n\n# 过度模式\n\n * 新元素先进行过度，完成之后当前元素过度离开in-out\n * 当前元素先进行过渡，完成之后新元素过渡进入out-in\n\n<transition name="fade" mode="out-in">\n</transition>\n\n\n\n# 列表过渡\n\n * 排序过渡\n * 交错过渡',normalizedContent:'# transition单组件过渡、动画\n\n触发条件：dom的显示隐藏或新增移除\n\n * name:过渡的类名\n\n  <transition name="transit">\n      <p v-show="show">transit</p>\n  </transition>\n\n\n\n# transition-group多组件过渡、动画\n\n触发条件：列表项的修改，插入，删除（列表整体修改不会触发）\n\n * name:过渡的类名\n * tag:渲染的根元素标签，默认渲染成span标签。*vue 3.x不再默认渲染\n\n<transition-group name="list" tag="ul">\n    <li v-for="item in list" :key="item" class="list">\n      {{ item }}\n    </li>\n  </transition-group>\n\n\nwarning\n\n当有相同标签名的元素切换时，需要实则key\n\n\n# 过渡、动画的类名\n\n * 显示过程开始前的状态 .v-enter*vue 3.x中替换为v-enter-from\n * 显示过程的过渡效果 .v-enter-active\n * 显示过程结束前一刻的状态 .v-enter-to\n * 隐藏过程开始前的状态 .v-leave*vue 3.x中替换为v-enter-from\n * 隐藏过程的过渡效果 .v-leave-active\n * 隐藏过程结束前一刻的状态 .v-leave-to\n\ntip\n\nv是transition标签的name属性定义的类名\n\n <transition name="slide-fade">\n    <p v-if="show">hello</p>\n  </transition>\n\n\n * 过度\n\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-to{\n  transform: translatex(10px);\n  opacity: 0;\n}\n\n\n * 动画\n\n.slide-fade-enter-active {\n  animation: slide-fade-in .5s;\n}\n.slide-fade-leave-active {\n  animation: slide-fade-in .5s reverse;\n}\n@keyframes slide-fade-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n\n\n# 自定义过渡、动画的类名\n\n * 显示过程开始前的类名v-enter-class\n\n * 显示过程中的类名v-enter-active-class\n\n * 显示过程结束前一刻的类名v-enter-to-class\n\n * 隐藏过程开始前的类名v-leave-class\n\n * 隐藏过程中的类名v-leave-active-class\n\n * 隐藏过程结束前一刻的类名v-leave-to-class\n\n<transition\n    name="custom-classes-transition"\n    enter-active-class="animated tada"\n    leave-active-class="animated bounceoutright"\n  >\n    <p v-if="show">hello</p>\n  </transition>\n\n\n\n# duration属性\n\n设置过度、动画的持续时间\n\n\x3c!-- 设置开始和结束的持续时间 --\x3e\n<transition :duration="{ enter: 500, leave: 800 }">\n</transition>\n\n\n\n# appear属性\n\n设置初始渲染的过渡\n\n<transition\n  appear\n  appear-class="custom-appear-class"\n  appear-to-class="custom-appear-to-class" (2.1.8+)\n  appear-active-class="custom-appear-active-class"\n>\n  \x3c!-- ... --\x3e\n</transition>\n\n\n\n# 钩子\n\n * 初始过程开始前触发before-appear\n\n * 初始过程开始时触发appear\n\n * 初始过程开始后触发after-appear\n\n * 初始过程结束时触发appear-cancelled\n\n * 显示过程开始前触发before-enter\n\n * 显示过程开始时触发enter\n\n * 显示过程开始后触发after-enter\n\n * 显示过程结束时触发enter-cancelled\n\n * 隐藏过程开始前触发before-leave\n\n * 隐藏过程开始时触发leave\n\n * 隐藏过程开始后触发after-leave\n\n * 隐藏过程结束时触发leave-cancelled\n\n<transition\n  v-on:before-enter="beforeenter"\n  v-on:enter="enter"\n  v-on:after-enter="afterenter"\n  v-on:enter-cancelled="entercancelled"\n\n  v-on:before-leave="beforeleave"\n  v-on:leave="leave"\n  v-on:after-leave="afterleave"\n  v-on:leave-cancelled="leavecancelled"\n>\n  \x3c!-- ... --\x3e\n</transition>\n\n\n\n# 过度模式\n\n * 新元素先进行过度，完成之后当前元素过度离开in-out\n * 当前元素先进行过渡，完成之后新元素过渡进入out-in\n\n<transition name="fade" mode="out-in">\n</transition>\n\n\n\n# 列表过渡\n\n * 排序过渡\n * 交错过渡',charsets:{cjk:!0}},{title:"概述",frontmatter:{},regularPath:"/frontend/vue/vuex/",relativePath:"frontend/vue/vuex/README.md",key:"v-08341bdb",path:"/frontend/vue/vuex/",headers:[{level:3,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:2},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:350},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:420},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:682}],headersStr:"概述 安装 配置 使用",content:"# 概述\n\n\n\n# State\n\n * 数据源载体，是唯一的数据源，单一的状态树。\n\n# Getters\n\n * 通过Getters可以派生出一些新的状态（类似于计算属性或者是过滤器）\n * 根据State的状态创建一个新的数据，不改变state里的状态\n\n# Mutations\n\n * 数据操作（State中的状态只能通过Mutations进行修改）\n * 更改Vuex的store中的状态的唯一方法是提交mutation\n\n# Actions\n\n主要用法是对Mutations的操作进行异步处理\n\n# Modules\n\n面对复杂的应用程序，当管理的状态比较多时，我们需要将Vuex的store对象分割成模块,每个模块拥有自己的state、mutation、action、getter。\n\n\n# 安装\n\n    npm install vuex --save\n    npm i -S vuex-persistedstate\n\n\n\n# 配置\n\n# Vuex 3.x语法:\n\n手动创建src/store/index.js文件\n\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport createPersistedState from 'vuex-persistedstate' //持久化插件\nVue.use(Vuex)\nexport default new Vuex.Store({\n\tnamespaced:true //命名空间 \n\tplugins: [createPersistedState()],//使用持久化插件\n\tstate: {    //初始数据源\n\t\tloginStatus: [],\n\t},\n\tmutations: {    //修改数据源\n\t\tloginStatus: (state, info) => { \n            state.loginStatus = info\n\t\t},\n\t},\n\tactions: {   //触发事件\n\t\tloginStatus: ({commit}, info) => { \n\t\t\tsetTimeout(()=）{\n\t\t\t\tcommit('loginStatus',info)\n\t\t\t},2000)\n\t\t},\n}\n})\n\n\nsrc/main.js\n\nimport store from './store' // 在main.js中注入store，每个实例都会存在一个$stroe属性\nindex.vue\n\n\n# Vuex 4.x语法:\n\n手动创建src/store/index.js文件\n\nimport { createStore } from 'vuex'\nexport const store = createStore({\n  state () {\n    return {\n      count: 1\n    }\n  }\n})\n\n\nsrc/main.js\n\nimport { createApp } from 'vue'\nimport { store } from './store'\nimport App from './App.vue'\nconst app = createApp(App)\napp.use(store)\napp.mount('#app')\n\n\n\n# 使用\n\nthis.$store.commit('loginStatus', that.loginStatus) //存储\nthis.$store.state.loginStatus // 读取\n$store.getters.loginStatus，// 读取过滤后的属性值（namespaced == false）\n$store.getters[\"loginStatus\"]// 读取过滤后的属性值（namespaced == trur）\n$store.dispatch('loginStatus')// 读取异步操作的值\n\n\n辅助函数： mapState/mapGetters/ mapActions（vuex中使用模块，最好使用此方法，把属性变成函数）\n\nimport { mapState,mapGetters, mapActions } from './store'\n...mapState('user',['userName']) // 把user模块里的userName转成函数\n\n\n调用数据\n\n   {{userName}}\n   this.userName\n",normalizedContent:"# 概述\n\n\n\n# state\n\n * 数据源载体，是唯一的数据源，单一的状态树。\n\n# getters\n\n * 通过getters可以派生出一些新的状态（类似于计算属性或者是过滤器）\n * 根据state的状态创建一个新的数据，不改变state里的状态\n\n# mutations\n\n * 数据操作（state中的状态只能通过mutations进行修改）\n * 更改vuex的store中的状态的唯一方法是提交mutation\n\n# actions\n\n主要用法是对mutations的操作进行异步处理\n\n# modules\n\n面对复杂的应用程序，当管理的状态比较多时，我们需要将vuex的store对象分割成模块,每个模块拥有自己的state、mutation、action、getter。\n\n\n# 安装\n\n    npm install vuex --save\n    npm i -s vuex-persistedstate\n\n\n\n# 配置\n\n# vuex 3.x语法:\n\n手动创建src/store/index.js文件\n\nimport vue from 'vue'\nimport vuex from 'vuex'\nimport createpersistedstate from 'vuex-persistedstate' //持久化插件\nvue.use(vuex)\nexport default new vuex.store({\n\tnamespaced:true //命名空间 \n\tplugins: [createpersistedstate()],//使用持久化插件\n\tstate: {    //初始数据源\n\t\tloginstatus: [],\n\t},\n\tmutations: {    //修改数据源\n\t\tloginstatus: (state, info) => { \n            state.loginstatus = info\n\t\t},\n\t},\n\tactions: {   //触发事件\n\t\tloginstatus: ({commit}, info) => { \n\t\t\tsettimeout(()=）{\n\t\t\t\tcommit('loginstatus',info)\n\t\t\t},2000)\n\t\t},\n}\n})\n\n\nsrc/main.js\n\nimport store from './store' // 在main.js中注入store，每个实例都会存在一个$stroe属性\nindex.vue\n\n\n# vuex 4.x语法:\n\n手动创建src/store/index.js文件\n\nimport { createstore } from 'vuex'\nexport const store = createstore({\n  state () {\n    return {\n      count: 1\n    }\n  }\n})\n\n\nsrc/main.js\n\nimport { createapp } from 'vue'\nimport { store } from './store'\nimport app from './app.vue'\nconst app = createapp(app)\napp.use(store)\napp.mount('#app')\n\n\n\n# 使用\n\nthis.$store.commit('loginstatus', that.loginstatus) //存储\nthis.$store.state.loginstatus // 读取\n$store.getters.loginstatus，// 读取过滤后的属性值（namespaced == false）\n$store.getters[\"loginstatus\"]// 读取过滤后的属性值（namespaced == trur）\n$store.dispatch('loginstatus')// 读取异步操作的值\n\n\n辅助函数： mapstate/mapgetters/ mapactions（vuex中使用模块，最好使用此方法，把属性变成函数）\n\nimport { mapstate,mapgetters, mapactions } from './store'\n...mapstate('user',['username']) // 把user模块里的username转成函数\n\n\n调用数据\n\n   {{username}}\n   this.username\n",charsets:{cjk:!0}},{title:"安装",frontmatter:{},regularPath:"/frontend/vue/vuecli/",relativePath:"frontend/vue/vuecli/README.md",key:"v-628b5f8b",path:"/frontend/vue/vuecli/",headersStr:null,content:'# 安装\n\n    npm install -g @vue/cli\n\n\n# 项目创建\n\n    vue create hello-world\n\n\n# 目录结构\n\n> |- /node_modules //依赖包\n> |- /public // 静态资源    |-- index.html //入口页面 |- /src //目标文件夹\n>    |-- /assets //静态资源    |-- /components //公共组件\n>    |-- App.vue //根页面\n>    |-- main.js //根页面js文件\n> |- .env.dev //开发环境全局变量\n> |- .env.prod //生产环境全局变量\n> |- .gitignore //Git配置文件\n> |- babel.config.js //webpack配置文件\n> |- package.json //依赖配置文件 |- package-lock.json //锁定的依赖配置文件\n> |- vue.config.js //项目配置文件（可选）\n\n# Vue.config.js配置\n\nmodule.exports = {\n    //  基本路径\n    publicPath: "./",\n    //  构建时的输出目录\n    outputDir: "dist",\n    //  放置静态资源的目录\n    assetsDir: "static",\n    //  html 的输出路径\n    indexPath: "index.html",\n    //文件名哈希\n    filenameHashing: true,\n    //用于多页配置，默认是 undefined\n    pages: {\n        index: {\n\n            // page 的入口文件\n\n            entry: \'src/index/main.js\',\n\n            // 模板文件\n\n            template: \'public/index.html\',\n\n            // 在 dist/index.html 的输出文件\n\n            filename: \'index.html\',\n\n            // 当使用页面 title 选项时，\n\n            // template 中的 title 标签需要是 <title><%= htmlWebpackPlugin.options.title %></title>\n\n            title: \'Index Page\',\n\n            // 在这个页面中包含的块，默认情况下会包含\n\n            // 提取出来的通用 chunk 和 vendor chunk。\n\n            chunks: [\'chunk-vendors\', \'chunk-common\', \'index\']\n\n        },\n\n        // 当使用只有入口的字符串格式时，\n\n        // 模板文件默认是 `public/subpage.html`\n\n        // 如果不存在，就回退到 `public/index.html`。\n\n        // 输出文件默认是 `subpage.html`。\n\n        subpage: \'src/subpage/main.js\'\n\n    },\n\n    //  是否在保存的时候使用 `eslint-loader` 进行检查。\n\n    lintOnSave: true,\n\n    //  是否使用带有浏览器内编译器的完整构建版本\n\n    runtimeCompiler: false,\n\n    //  babel-loader 默认会跳过 node_modules 依赖。\n\n    transpileDependencies: [ /* string or regex */ ],\n\n    //  是否为生产环境构建生成 source map？\n\n    productionSourceMap: true,\n\n    //  设置生成的 HTML 中 <link rel="stylesheet"> 和 <script> 标签的 crossorigin 属性。\n\n    crossorigin: "",\n\n    //  在生成的 HTML 中的 <link rel="stylesheet"> 和 <script> 标签上启用 Subresource Integrity (SRI)。\n\n    integrity: false,\n\n    //  调整内部的 webpack 配置\n\n    configureWebpack: () => {\n       if (process.env.NODE_ENV === \'production\') {\n      // 为生产环境修改配置...\n      } else {\n        // 为开发环境修改配置...\n      }\n    }, \n\n    chainWebpack: () => {},\n\n    // 配置webpack-dev-server行为(配置代理)。\n\n    devServer: {\n\n        open: process.platform === \'darwin\',\n\n        host: \'0.0.0.0\',\n\n        port: 8080,\n\n        https: false,\n\n        hotOnly: false,\n\n        proxy: {\n\n            \'/api\': {\n                // 代理的API地址\n                target: "http://app.rmsdmedia.com",\n                // 如果target的地址是一个域名 changeOrigin需要设置成true\n                changeOrigin: true,\n                // 不适应安全验证，允许本地使用https协议\n                secure: false,\n                // 路径重写，将替换api\n                pathRewrite: {  \n                    "^/api": ""\n                }\n\n            },\n\n            \'/foo\': {\n\n                target: \'<other_url>\'\n\n            }\n\n        }, // string | Object\n\n        before: app => {}\n\n    },\n\n    // CSS 相关选项\n\n    css: {\n\n        // 将组件内的 CSS 提取到一个单独的 CSS 文件 (只用在生产环境中)\n\n        // 也可以是一个传递给 `extract-text-webpack-plugin` 的选项对象\n\n        extract: true,\n\n        // 是否开启 CSS source map？\n\n        sourceMap: false,\n\n        // 为预处理器的 loader 传递自定义选项。比如传递给\n\n        // Css-loader 时，使用 `{ Css: { ... } }`。\n\n        loaderOptions: {\n\n            css: {\n\n                // 这里的选项会传递给 css-loader\n\n            },\n\n            postcss: {\n\n                // 这里的选项会传递给 postcss-loader\n\n            }\n\n        },\n\n        // 为所有的 CSS 及其预处理文件开启 CSS Modules。\n\n        // 这个选项不会影响 `*.vue` 文件。\n\n        modules: false\n\n    },\n\n    // 在生产环境下为 Babel 和 TypeScript 使用 `thread-loader`\n\n    // 在多核机器下会默认开启。\n\n    parallel: require(\'os\').cpus().length > 1,\n\n    // PWA 插件的选项。\n\n    // 查阅 https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-pwa/README.md\n\n    pwa: {},\n\n    // 三方插件的选项\n\n    pluginOptions: {\n    }\n}\n\n\n# package.json配置\n\n{\n  "name": "jaqi.note",//项目名\n  "version": "0.1.0",//项目版本\n  "author":"jaqi.l"//作者\n  "private": true, //项目是否私有\n  "scripts": { \n// serve 模式配置\n// --open    在服务器启动时打开浏览器\n// --copy    在服务器启动时将 URL 复制到剪切版\n// --mode    指定环境模式 (默认值：development)\n// --host    指定 host (默认值：0.0.0.0)\n// --port    指定 port (默认值：8080)\n// --https   使用 https (默认值：false)\n// build 模式配置\n// --mode        指定环境模式 (默认值：production)\n// --dest        指定输出目录 (默认值：dist)\n// --modern      面向现代浏览器带自动回退地构建应用\n// --target      app | lib | wc | wc-async (默认值：app)\n// --name        库或 Web Components 模式下的名字 (默认值：package.json 中的 "name" 字段或入口文件名)\n// --no-clean    在构建项目之前不清除目标目录\n// --report      生成 report.html 以帮助分析包内容\n// --report-json 生成 report.json 以帮助分析包内容\n// --watch       监听文件变化\n   "serve": "vue-cli-service serve",\n    "build": "vue-cli-service build",\n    "lint": "vue-cli-service lint"\n  },\n  "dependencies": { // 生产依赖\n     "vue": "2.6.11",//使用2.6.11版本\n    "vue-template-compiler": "~2.6.11",//使用2.6.x版本\n    "vuex": "^3.2.0", //使用3.x.x版本\n    "jquery": "latest" //使用latest版本\n  },\n  "devDependencies": { // 开发依赖\n  },\n  "eslintConfig": { // ESLint 规则配置\n    "root": true,\n    "env": {\n      "node": true\n    },\n    "extends": [\n      "plugin:vue/essential",\n      "eslint:recommended"\n    ],\n    "parserOptions": {\n      "parser": "babel-eslint"\n    },\n    "rules": {\n      "no-debugger": "off",//debugger 错误提示\n      "no-console": "off", //console 错误提示\n\n    }\n  },\n  "browserslist": [ // 项目的目标浏览器范围\n    "> 1%",   // 兼容使用率大于1%的版本\n    "last 2 versions", // 兼容最近的2个版本\n    "not dead"\n  ]\n}\n\n\n# .env\n\nNODE_ENV = \'production\' // 运行模式 是 生产还是开发环境\nBASE_URL = \'/\' // 基础路径\n\n\n\nnpm install、npm i与npm ci的区别\n\nnpm install:\n根据package文件安装依赖，根据package-lock确定版本，如果没有package-lock则生成package-lock\nnpm i:\n根据package文件安装依赖，同时依据^或~升级相关依赖，并更新package-lock文件，不会生成npm-debug.log文件，卸载时需要使用npm uninstall i命令。\nnpm ci:\n根据package文件安装依赖，根据package-lock确定版本没有则报错，不会更新依赖，也不会更新package-lock文件。\n\nnpm详见1.1.4 npm（包管理工具）\n\nTIP\n\nVue CLI 4.x',normalizedContent:'# 安装\n\n    npm install -g @vue/cli\n\n\n# 项目创建\n\n    vue create hello-world\n\n\n# 目录结构\n\n> |- /node_modules //依赖包\n> |- /public // 静态资源    |-- index.html //入口页面 |- /src //目标文件夹\n>    |-- /assets //静态资源    |-- /components //公共组件\n>    |-- app.vue //根页面\n>    |-- main.js //根页面js文件\n> |- .env.dev //开发环境全局变量\n> |- .env.prod //生产环境全局变量\n> |- .gitignore //git配置文件\n> |- babel.config.js //webpack配置文件\n> |- package.json //依赖配置文件 |- package-lock.json //锁定的依赖配置文件\n> |- vue.config.js //项目配置文件（可选）\n\n# vue.config.js配置\n\nmodule.exports = {\n    //  基本路径\n    publicpath: "./",\n    //  构建时的输出目录\n    outputdir: "dist",\n    //  放置静态资源的目录\n    assetsdir: "static",\n    //  html 的输出路径\n    indexpath: "index.html",\n    //文件名哈希\n    filenamehashing: true,\n    //用于多页配置，默认是 undefined\n    pages: {\n        index: {\n\n            // page 的入口文件\n\n            entry: \'src/index/main.js\',\n\n            // 模板文件\n\n            template: \'public/index.html\',\n\n            // 在 dist/index.html 的输出文件\n\n            filename: \'index.html\',\n\n            // 当使用页面 title 选项时，\n\n            // template 中的 title 标签需要是 <title><%= htmlwebpackplugin.options.title %></title>\n\n            title: \'index page\',\n\n            // 在这个页面中包含的块，默认情况下会包含\n\n            // 提取出来的通用 chunk 和 vendor chunk。\n\n            chunks: [\'chunk-vendors\', \'chunk-common\', \'index\']\n\n        },\n\n        // 当使用只有入口的字符串格式时，\n\n        // 模板文件默认是 `public/subpage.html`\n\n        // 如果不存在，就回退到 `public/index.html`。\n\n        // 输出文件默认是 `subpage.html`。\n\n        subpage: \'src/subpage/main.js\'\n\n    },\n\n    //  是否在保存的时候使用 `eslint-loader` 进行检查。\n\n    lintonsave: true,\n\n    //  是否使用带有浏览器内编译器的完整构建版本\n\n    runtimecompiler: false,\n\n    //  babel-loader 默认会跳过 node_modules 依赖。\n\n    transpiledependencies: [ /* string or regex */ ],\n\n    //  是否为生产环境构建生成 source map？\n\n    productionsourcemap: true,\n\n    //  设置生成的 html 中 <link rel="stylesheet"> 和 <script> 标签的 crossorigin 属性。\n\n    crossorigin: "",\n\n    //  在生成的 html 中的 <link rel="stylesheet"> 和 <script> 标签上启用 subresource integrity (sri)。\n\n    integrity: false,\n\n    //  调整内部的 webpack 配置\n\n    configurewebpack: () => {\n       if (process.env.node_env === \'production\') {\n      // 为生产环境修改配置...\n      } else {\n        // 为开发环境修改配置...\n      }\n    }, \n\n    chainwebpack: () => {},\n\n    // 配置webpack-dev-server行为(配置代理)。\n\n    devserver: {\n\n        open: process.platform === \'darwin\',\n\n        host: \'0.0.0.0\',\n\n        port: 8080,\n\n        https: false,\n\n        hotonly: false,\n\n        proxy: {\n\n            \'/api\': {\n                // 代理的api地址\n                target: "http://app.rmsdmedia.com",\n                // 如果target的地址是一个域名 changeorigin需要设置成true\n                changeorigin: true,\n                // 不适应安全验证，允许本地使用https协议\n                secure: false,\n                // 路径重写，将替换api\n                pathrewrite: {  \n                    "^/api": ""\n                }\n\n            },\n\n            \'/foo\': {\n\n                target: \'<other_url>\'\n\n            }\n\n        }, // string | object\n\n        before: app => {}\n\n    },\n\n    // css 相关选项\n\n    css: {\n\n        // 将组件内的 css 提取到一个单独的 css 文件 (只用在生产环境中)\n\n        // 也可以是一个传递给 `extract-text-webpack-plugin` 的选项对象\n\n        extract: true,\n\n        // 是否开启 css source map？\n\n        sourcemap: false,\n\n        // 为预处理器的 loader 传递自定义选项。比如传递给\n\n        // css-loader 时，使用 `{ css: { ... } }`。\n\n        loaderoptions: {\n\n            css: {\n\n                // 这里的选项会传递给 css-loader\n\n            },\n\n            postcss: {\n\n                // 这里的选项会传递给 postcss-loader\n\n            }\n\n        },\n\n        // 为所有的 css 及其预处理文件开启 css modules。\n\n        // 这个选项不会影响 `*.vue` 文件。\n\n        modules: false\n\n    },\n\n    // 在生产环境下为 babel 和 typescript 使用 `thread-loader`\n\n    // 在多核机器下会默认开启。\n\n    parallel: require(\'os\').cpus().length > 1,\n\n    // pwa 插件的选项。\n\n    // 查阅 https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli-plugin-pwa/readme.md\n\n    pwa: {},\n\n    // 三方插件的选项\n\n    pluginoptions: {\n    }\n}\n\n\n# package.json配置\n\n{\n  "name": "jaqi.note",//项目名\n  "version": "0.1.0",//项目版本\n  "author":"jaqi.l"//作者\n  "private": true, //项目是否私有\n  "scripts": { \n// serve 模式配置\n// --open    在服务器启动时打开浏览器\n// --copy    在服务器启动时将 url 复制到剪切版\n// --mode    指定环境模式 (默认值：development)\n// --host    指定 host (默认值：0.0.0.0)\n// --port    指定 port (默认值：8080)\n// --https   使用 https (默认值：false)\n// build 模式配置\n// --mode        指定环境模式 (默认值：production)\n// --dest        指定输出目录 (默认值：dist)\n// --modern      面向现代浏览器带自动回退地构建应用\n// --target      app | lib | wc | wc-async (默认值：app)\n// --name        库或 web components 模式下的名字 (默认值：package.json 中的 "name" 字段或入口文件名)\n// --no-clean    在构建项目之前不清除目标目录\n// --report      生成 report.html 以帮助分析包内容\n// --report-json 生成 report.json 以帮助分析包内容\n// --watch       监听文件变化\n   "serve": "vue-cli-service serve",\n    "build": "vue-cli-service build",\n    "lint": "vue-cli-service lint"\n  },\n  "dependencies": { // 生产依赖\n     "vue": "2.6.11",//使用2.6.11版本\n    "vue-template-compiler": "~2.6.11",//使用2.6.x版本\n    "vuex": "^3.2.0", //使用3.x.x版本\n    "jquery": "latest" //使用latest版本\n  },\n  "devdependencies": { // 开发依赖\n  },\n  "eslintconfig": { // eslint 规则配置\n    "root": true,\n    "env": {\n      "node": true\n    },\n    "extends": [\n      "plugin:vue/essential",\n      "eslint:recommended"\n    ],\n    "parseroptions": {\n      "parser": "babel-eslint"\n    },\n    "rules": {\n      "no-debugger": "off",//debugger 错误提示\n      "no-console": "off", //console 错误提示\n\n    }\n  },\n  "browserslist": [ // 项目的目标浏览器范围\n    "> 1%",   // 兼容使用率大于1%的版本\n    "last 2 versions", // 兼容最近的2个版本\n    "not dead"\n  ]\n}\n\n\n# .env\n\nnode_env = \'production\' // 运行模式 是 生产还是开发环境\nbase_url = \'/\' // 基础路径\n\n\n\nnpm install、npm i与npm ci的区别\n\nnpm install:\n根据package文件安装依赖，根据package-lock确定版本，如果没有package-lock则生成package-lock\nnpm i:\n根据package文件安装依赖，同时依据^或~升级相关依赖，并更新package-lock文件，不会生成npm-debug.log文件，卸载时需要使用npm uninstall i命令。\nnpm ci:\n根据package文件安装依赖，根据package-lock确定版本没有则报错，不会更新依赖，也不会更新package-lock文件。\n\nnpm详见1.1.4 npm（包管理工具）\n\ntip\n\nvue cli 4.x',charsets:{cjk:!0}},{frontmatter:{},regularPath:"/other/FreeMarker/",relativePath:"other/FreeMarker/README.md",key:"v-9879566c",path:"/other/FreeMarker/",headers:[{level:3,title:"assign定义变量",slug:"assign定义变量",normalizedTitle:"assign定义变量",charIndex:53},{level:3,title:"${...}输出变量",slug:"输出变量",normalizedTitle:"${...}输出变量",charIndex:96},{level:3,title:"控制语句",slug:"控制语句",normalizedTitle:"控制语句",charIndex:204},{level:3,title:"list遍历",slug:"list遍历",normalizedTitle:"list遍历",charIndex:489},{level:3,title:"include引用模板",slug:"include引用模板",normalizedTitle:"include引用模板",charIndex:853},{level:3,title:"常用属性",slug:"常用属性",normalizedTitle:"常用属性",charIndex:894}],headersStr:"assign定义变量 ${...}输出变量 控制语句 list遍历 include引用模板 常用属性",content:'FreeMarker是一款模板语言：即一种基于模板和要改变的数据，并用来生成输出文本的通用工具。\n\n\n# assign定义变量\n\n<#assign userName="jaqi">\n\n\n\n# ${...}输出变量\n\n<p>${userName}</p>\n\x3c!-- 如果为空不执行 --\x3e\n<p>${user!}</p>\n\x3c!-- !后设置默认值 --\x3e\n<p>${user!"jaqi"}</p>\n\n\n\n# 控制语句\n\n# if\n\n<#if userName="jaqi">\n\n<#elseif userName="lijiaqi">\n\n<#else>  \n\n</#if>\n\n\n# switch\n\n<#switch value> \n<#case refValue1> \n    ... \n    <#break> \n<#case refValue2> \n    ... \n    <#break> \n    ... \n<#case refValueN> \n    ... \n    <#break> \n<#default> \n    ... \n</#switch> \n\n\n\n# list遍历\n\n<#list goodsList as item>\n  ${item_index+1} 商品名称： ${item.name} 价格：${item.price}\n \x3c!-- 不在最后一项添加换行标签 --\x3e\n  <#sep><br><#sep> \n</#list>\n\n\nTIP\n\n 1. 循环体+_index返回索引\n 2. <#sep>不在第一项之前或最后一项之后显示的内容。\n\n * 根据name排序\n\n<#assign userNameArr=[{"name":1},{"name":6},{"name":4}]>\n<#list userNameArr?sort_by(["name"])?reverse as user>\n   ${user.name}   //  6 4 1\n</#list>\n\n\n\n# include引用模板\n\n<#include "head.html">\n\n\n\n# 常用属性\n\n * size返回数组长度\n\n${(userName?size)}\n\n\n * length返回字符串长度\n\n${(userName?length)}\n\n\n * ??判断变量是否存在,不判断变量的值。\n\n${userName??}\n\n\n * !!忽略list中的空值\n\n<#list lists!! as list>\n</#list>\n\n\n * has_content判断变量是否为空\n\n${userName?has_content}\n\n\n * ?cNumber类型转字符串\n\n${Num?c}\n\n\n * 比较运算符\n\n大于:gt\\小于:lt\\大于等于:gte小于等于:lte',normalizedContent:'freemarker是一款模板语言：即一种基于模板和要改变的数据，并用来生成输出文本的通用工具。\n\n\n# assign定义变量\n\n<#assign username="jaqi">\n\n\n\n# ${...}输出变量\n\n<p>${username}</p>\n\x3c!-- 如果为空不执行 --\x3e\n<p>${user!}</p>\n\x3c!-- !后设置默认值 --\x3e\n<p>${user!"jaqi"}</p>\n\n\n\n# 控制语句\n\n# if\n\n<#if username="jaqi">\n\n<#elseif username="lijiaqi">\n\n<#else>  \n\n</#if>\n\n\n# switch\n\n<#switch value> \n<#case refvalue1> \n    ... \n    <#break> \n<#case refvalue2> \n    ... \n    <#break> \n    ... \n<#case refvaluen> \n    ... \n    <#break> \n<#default> \n    ... \n</#switch> \n\n\n\n# list遍历\n\n<#list goodslist as item>\n  ${item_index+1} 商品名称： ${item.name} 价格：${item.price}\n \x3c!-- 不在最后一项添加换行标签 --\x3e\n  <#sep><br><#sep> \n</#list>\n\n\ntip\n\n 1. 循环体+_index返回索引\n 2. <#sep>不在第一项之前或最后一项之后显示的内容。\n\n * 根据name排序\n\n<#assign usernamearr=[{"name":1},{"name":6},{"name":4}]>\n<#list usernamearr?sort_by(["name"])?reverse as user>\n   ${user.name}   //  6 4 1\n</#list>\n\n\n\n# include引用模板\n\n<#include "head.html">\n\n\n\n# 常用属性\n\n * size返回数组长度\n\n${(username?size)}\n\n\n * length返回字符串长度\n\n${(username?length)}\n\n\n * ??判断变量是否存在,不判断变量的值。\n\n${username??}\n\n\n * !!忽略list中的空值\n\n<#list lists!! as list>\n</#list>\n\n\n * has_content判断变量是否为空\n\n${username?has_content}\n\n\n * ?cnumber类型转字符串\n\n${num?c}\n\n\n * 比较运算符\n\n大于:gt\\小于:lt\\大于等于:gte小于等于:lte',charsets:{cjk:!0}},{title:"其他文档",frontmatter:{},regularPath:"/other/",relativePath:"other/README.md",key:"v-5d165376",path:"/other/",headersStr:null,content:"# 其他文档\n\n * 更新日志：\n\n>  * 更新第九章Docker内容\n>  * 更新第二章Nginx内容\n>  * 修正第一章Linux内容\n>  * 更新至第六章FreeMarker\n>  * 修正第五章git内容",normalizedContent:"# 其他文档\n\n * 更新日志：\n\n>  * 更新第九章docker内容\n>  * 更新第二章nginx内容\n>  * 修正第一章linux内容\n>  * 更新至第六章freemarker\n>  * 修正第五章git内容",charsets:{cjk:!0}},{title:"4.1 SEO规则",frontmatter:{},regularPath:"/other/SEO/",relativePath:"other/SEO/README.md",key:"v-00233e96",path:"/other/SEO/",headers:[{level:2,title:"4.1 SEO规则",slug:"_4-1-seo规则",normalizedTitle:"4.1 seo规则",charIndex:2},{level:3,title:"4.1.1 基本概念",slug:"_4-1-1-基本概念",normalizedTitle:"4.1.1 基本概念",charIndex:16},{level:3,title:"4.1.1 TDK优化",slug:"_4-1-1-tdk优化",normalizedTitle:"4.1.1 tdk优化",charIndex:111},{level:3,title:"4.1.2 网站结构优化",slug:"_4-1-2-网站结构优化",normalizedTitle:"4.1.2 网站结构优化",charIndex:444},{level:3,title:"4.1.3 百度检索技巧",slug:"_4-1-3-百度检索技巧",normalizedTitle:"4.1.3 百度检索技巧",charIndex:952}],headersStr:"4.1 SEO规则 4.1.1 基本概念 4.1.1 TDK优化 4.1.2 网站结构优化 4.1.3 百度检索技巧",content:"# 4.1 SEO规则\n\n\n# 4.1.1 基本概念\n\n权重：页面重要程度\n收录：量被百度收录的页面数\n蜘蛛：爬取工具\n索引量：参与排名的页面\n指数：关键词搜索情况 快照：搜索引擎上保存的被收录的网页的纯文本备份\n\n\n# 4.1.1 TDK优化\n\nT = title标题关键字描述\nD = description描述\nK = keywords关键字\n\n * 百度分词原理:\n\n 1. 基于空格\n 2. 百度词典\n 3. 用户行为（大数据）\n 4. 大于四个字符才分\n\n * title编写规则：\n\n 1. 标题不要过长最多30/32字符。\n 2. 标题不重复（内部竞争）\n 3. 第一个分词权重最高\n\n * keywords编写规则：\n\n 2. 关键词不宜太多推荐2-3个最近，且与内容相符\n 3. 关键词不重复（内部竞争）\n 4. 第一个关键词权重最高\n\n * description编写规则:\n\n 1. 提供更多相近的关键词\n 2. 长度200字符内\n 3. 不参与权重计算\n\n\n# 4.1.2 网站结构优化\n\n * 页面结构类型：\n\n 1. 扁平结构：权重趋向于首页\n 2. 树状结构：权重趋向于栏目\n\n * 域名权重：\n\n 1. 主域名qq.com权重最高\n 2. 二级域名weixin.qq.com\n 3. 二级目录www.qq.com/bbs/ 其次\n\n * URL： 使用静态（伪静态）URL：不带有？、%、=、&、php、asp的URL，也就是URL不能带有任何参数\n\n * 网页标签：\n\n 1. 使用语义化标签\n 2. 使用H1...H6标签，依次使用，不要跳用。\n 3. a标签填写alt属性\n 4. img标签填写title属性\n 5. 少用iframe\n\n * robots.txt\n\n# 网页抓取工具的名称。*表示允许全部\nUser-agent: *     \n# 不应抓取的目录或网页\nDisallow: /nogooglebot/   \n# 允许抓取的目录或网页  / 允许爬墙全部页面\nAllow: /                 \n# 生成并填写网站地图\nSitemap: http://www.wangxiaokai.vip/sitemap.xml  \n\n\n\n# 4.1.3 百度检索技巧\n\n 1. 收录条数：site:网址\n 2. 外链：Domain:网址\n 3. 网址中包含X：Inurl:X\n 4. 标题中包含X：Intitle:X\n 5. 相关的网页类型PDF：Filetype:pdf",normalizedContent:"# 4.1 seo规则\n\n\n# 4.1.1 基本概念\n\n权重：页面重要程度\n收录：量被百度收录的页面数\n蜘蛛：爬取工具\n索引量：参与排名的页面\n指数：关键词搜索情况 快照：搜索引擎上保存的被收录的网页的纯文本备份\n\n\n# 4.1.1 tdk优化\n\nt = title标题关键字描述\nd = description描述\nk = keywords关键字\n\n * 百度分词原理:\n\n 1. 基于空格\n 2. 百度词典\n 3. 用户行为（大数据）\n 4. 大于四个字符才分\n\n * title编写规则：\n\n 1. 标题不要过长最多30/32字符。\n 2. 标题不重复（内部竞争）\n 3. 第一个分词权重最高\n\n * keywords编写规则：\n\n 2. 关键词不宜太多推荐2-3个最近，且与内容相符\n 3. 关键词不重复（内部竞争）\n 4. 第一个关键词权重最高\n\n * description编写规则:\n\n 1. 提供更多相近的关键词\n 2. 长度200字符内\n 3. 不参与权重计算\n\n\n# 4.1.2 网站结构优化\n\n * 页面结构类型：\n\n 1. 扁平结构：权重趋向于首页\n 2. 树状结构：权重趋向于栏目\n\n * 域名权重：\n\n 1. 主域名qq.com权重最高\n 2. 二级域名weixin.qq.com\n 3. 二级目录www.qq.com/bbs/ 其次\n\n * url： 使用静态（伪静态）url：不带有？、%、=、&、php、asp的url，也就是url不能带有任何参数\n\n * 网页标签：\n\n 1. 使用语义化标签\n 2. 使用h1...h6标签，依次使用，不要跳用。\n 3. a标签填写alt属性\n 4. img标签填写title属性\n 5. 少用iframe\n\n * robots.txt\n\n# 网页抓取工具的名称。*表示允许全部\nuser-agent: *     \n# 不应抓取的目录或网页\ndisallow: /nogooglebot/   \n# 允许抓取的目录或网页  / 允许爬墙全部页面\nallow: /                 \n# 生成并填写网站地图\nsitemap: http://www.wangxiaokai.vip/sitemap.xml  \n\n\n\n# 4.1.3 百度检索技巧\n\n 1. 收录条数：site:网址\n 2. 外链：domain:网址\n 3. 网址中包含x：inurl:x\n 4. 标题中包含x：intitle:x\n 5. 相关的网页类型pdf：filetype:pdf",charsets:{cjk:!0}},{title:"8.1 数据库概述",frontmatter:{},regularPath:"/other/database/",relativePath:"other/database/README.md",key:"v-2c0726ea",path:"/other/database/",headers:[{level:2,title:"8.1 数据库概述",slug:"_8-1-数据库概述",normalizedTitle:"8.1 数据库概述",charIndex:2},{level:3,title:"8.2 MySQL",slug:"_8-2-mysql",normalizedTitle:"8.2 mysql",charIndex:121},{level:3,title:"8.3 MongoDB",slug:"_8-3-mongodb",normalizedTitle:"8.3 mongodb",charIndex:1240},{level:3,title:"8.4 SQLite",slug:"_8-4-sqlite",normalizedTitle:"8.4 sqlite",charIndex:1256},{level:3,title:"8.5 WebSQL",slug:"_8-5-websql",normalizedTitle:"8.5 websql",charIndex:1271},{level:3,title:"8.6 IndexedDB",slug:"_8-6-indexeddb",normalizedTitle:"8.6 indexeddb",charIndex:1286}],headersStr:"8.1 数据库概述 8.2 MySQL 8.3 MongoDB 8.4 SQLite 8.5 WebSQL 8.6 IndexedDB",content:"# 8.1 数据库概述\n\n * 数据库分类\n\n> 文件型：SQLite``WebSQL、IndexedDB 关系型：Access、MySQL、Oracle 分布式：MongoDB 非关系型(NoSQL)：Redis、MemCache\n\n\n# 8.2 MySQL\n\n# 8.2.1 概述\n\n * 表：\n\n开始标签   元素内容   结束标签\n列      字段1    字段2\n列      字段3    字段4\n\n * 数据类型： varchar text\n\n# 8.2.2 库与表的创建\n\n库的创建： CREATE DATABASE <库> CHARACTER SET <字符集> COLLATE <排序规则>;\n\nCREATE DATABASE `myDataBase` CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci';\n\n\n表的创建： CREATE TABLE <表.库> (表头);\n\nCREATE TABLE `myDataBase`.`student`\n( `id` int NOT NULL, `name` varchar(255) NULL, `psw` varchar(255) NULL, PRIMARY KEY (`id`));\n\n\n# 8.2.3 SQL结构化查询语句\n\n * INSETR插入数据\n\nINSETR INTO <表.库> (key1,key2,key3...) VALUES (value1,value2,value3...);\n\n INSETR INTO `myDataBase`.`student` (id,name,password) VALUES ('0422','jaqi','psw123456');\n\n\n * DELETE删除数据\n\nDELETE FROM <表.库> WHERE <条件>;\n\n DELETE FROM `myDataBase`.`student` WHERE id='0422';\n\n\n * UPDATE修改数据\n\nUPDATE <表.库> SET key1=value1,key2=value2... WHERE <条件>\n\n  UPDATE `myDataBase`.`student` SET name=`jaqi.l`,password=`123456psw` WHERE id='0422'\n\n\n * SELECT查询数据\n\nSELECT <key1,key2,key3(返回的字段)> FROM <表.库> WHERE <条件> ORDER BY <排序key> LIMIT <起始位置,条数>\n\nSELECT * FROM `bdm314524665_db`.`jaqi` WHERE `id` > '0' LIMIT 0,1000\n\n\nTIP\n\n 1. 如果SQL语句中的key与MySQL系统关键字重复，需要使用``反引号包裹起来。\n\n\n# 8.3 MongoDB\n\n\n# 8.4 SQLite\n\n\n# 8.5 WebSQL\n\n\n# 8.6 IndexedDB",normalizedContent:"# 8.1 数据库概述\n\n * 数据库分类\n\n> 文件型：sqlite``websql、indexeddb 关系型：access、mysql、oracle 分布式：mongodb 非关系型(nosql)：redis、memcache\n\n\n# 8.2 mysql\n\n# 8.2.1 概述\n\n * 表：\n\n开始标签   元素内容   结束标签\n列      字段1    字段2\n列      字段3    字段4\n\n * 数据类型： varchar text\n\n# 8.2.2 库与表的创建\n\n库的创建： create database <库> character set <字符集> collate <排序规则>;\n\ncreate database `mydatabase` character set 'utf8' collate 'utf8_unicode_ci';\n\n\n表的创建： create table <表.库> (表头);\n\ncreate table `mydatabase`.`student`\n( `id` int not null, `name` varchar(255) null, `psw` varchar(255) null, primary key (`id`));\n\n\n# 8.2.3 sql结构化查询语句\n\n * insetr插入数据\n\ninsetr into <表.库> (key1,key2,key3...) values (value1,value2,value3...);\n\n insetr into `mydatabase`.`student` (id,name,password) values ('0422','jaqi','psw123456');\n\n\n * delete删除数据\n\ndelete from <表.库> where <条件>;\n\n delete from `mydatabase`.`student` where id='0422';\n\n\n * update修改数据\n\nupdate <表.库> set key1=value1,key2=value2... where <条件>\n\n  update `mydatabase`.`student` set name=`jaqi.l`,password=`123456psw` where id='0422'\n\n\n * select查询数据\n\nselect <key1,key2,key3(返回的字段)> from <表.库> where <条件> order by <排序key> limit <起始位置,条数>\n\nselect * from `bdm314524665_db`.`jaqi` where `id` > '0' limit 0,1000\n\n\ntip\n\n 1. 如果sql语句中的key与mysql系统关键字重复，需要使用``反引号包裹起来。\n\n\n# 8.3 mongodb\n\n\n# 8.4 sqlite\n\n\n# 8.5 websql\n\n\n# 8.6 indexeddb",charsets:{cjk:!0}},{title:"7.1概念：",frontmatter:{},regularPath:"/frontend/webpack/",relativePath:"frontend/webpack/README.md",key:"v-c2bd2420",path:"/frontend/webpack/",headers:[{level:2,title:"7.1概念：",slug:"_7-1概念",normalizedTitle:"7.1概念：",charIndex:2},{level:3,title:"7.1.1安装与使用",slug:"_7-1-1安装与使用",normalizedTitle:"7.1.1安装与使用",charIndex:290},{level:2,title:"7.2配置详解",slug:"_7-2配置详解",normalizedTitle:"7.2配置详解",charIndex:849},{level:3,title:"7.2.1入口entry",slug:"_7-2-1入口entry",normalizedTitle:"7.2.1入口entry",charIndex:6401},{level:3,title:"7.2.2输出output",slug:"_7-2-2输出output",normalizedTitle:"7.2.2输出output",charIndex:6732},{level:3,title:"7.2.3加载器loader",slug:"_7-2-3加载器loader",normalizedTitle:"7.2.3加载器loader",charIndex:7410},{level:3,title:"7.2.4插件plugins",slug:"_7-2-4插件plugins",normalizedTitle:"7.2.4插件plugins",charIndex:8375},{level:3,title:"7.2.5模式mode",slug:"_7-2-5模式mode",normalizedTitle:"7.2.5模式mode",charIndex:9060},{level:3,title:"7.2.6浏览器兼容性browser compatibility",slug:"_7-2-6浏览器兼容性browser-compatibility",normalizedTitle:"7.2.6浏览器兼容性browser compatibility",charIndex:9317},{level:3,title:"7.2.7文件监听watch及",slug:"_7-2-7文件监听watch及",normalizedTitle:"7.2.7文件监听watch及",charIndex:9488},{level:3,title:"7.2.8 文件指纹",slug:"_7-2-8-文件指纹",normalizedTitle:"7.2.8 文件指纹",charIndex:9811},{level:3,title:"7.2.9 摇树优化tree shaking",slug:"_7-2-9-摇树优化tree-shaking",normalizedTitle:"7.2.9 摇树优化tree shaking",charIndex:10835},{level:3,title:"7.4.10 ScopeHoisting",slug:"_7-4-10-scopehoisting",normalizedTitle:"7.4.10 scopehoisting",charIndex:11049},{level:3,title:"7.4.11 代码分割",slug:"_7-4-11-代码分割",normalizedTitle:"7.4.11 代码分割",charIndex:11177},{level:3,title:"7.4.12 构建日志、构建异常和中断处理",slug:"_7-4-12-构建日志、构建异常和中断处理",normalizedTitle:"7.4.12 构建日志、构建异常和中断处理",charIndex:11446},{level:2,title:"7.3常用lader指南",slug:"_7-3常用lader指南",normalizedTitle:"7.3常用lader指南",charIndex:11706},{level:3,title:"7.3.1打包ES6：",slug:"_7-3-1打包es6",normalizedTitle:"7.3.1打包es6：",charIndex:11723},{level:3,title:"7.3.2打包css：",slug:"_7-3-2打包css",normalizedTitle:"7.3.2打包css：",charIndex:12266},{level:3,title:"7.3.3打包less：",slug:"_7-3-3打包less",normalizedTitle:"7.3.3打包less：",charIndex:12449},{level:3,title:"7.3.3打包图片/字体：",slug:"_7-3-3打包图片-字体",normalizedTitle:"7.3.3打包图片/字体：",charIndex:12654},{level:3,title:"7.3.4自动补齐浏览器前缀：",slug:"_7-3-4自动补齐浏览器前缀",normalizedTitle:"7.3.4自动补齐浏览器前缀：",charIndex:13637},{level:3,title:"7.3.5rem转换px2rem-loader、lib-flexible库：",slug:"_7-3-5rem转换px2rem-loader、lib-flexible库",normalizedTitle:"7.3.5rem转换px2rem-loader、lib-flexible库：",charIndex:14012},{level:3,title:"7.3.6资源的内联raw-loader",slug:"_7-3-6资源的内联raw-loader",normalizedTitle:"7.3.6资源的内联raw-loader",charIndex:14548},{level:3,title:"7.3.7ESLint规范eslint-loader",slug:"_7-3-7eslint规范eslint-loader",normalizedTitle:"7.3.7eslint规范eslint-loader",charIndex:14862},{level:3,title:"7.3.8SSR打包",slug:"_7-3-8ssr打包",normalizedTitle:"7.3.8ssr打包",charIndex:15452},{level:3,title:"打包Vue：",slug:"打包vue",normalizedTitle:"打包vue：",charIndex:16175},{level:3,title:"7.3.6自定义插件",slug:"_7-3-6自定义插件",normalizedTitle:"7.3.6自定义插件",charIndex:16608},{level:3,title:"7.3.7常用插件",slug:"_7-3-7常用插件",normalizedTitle:"7.3.7常用插件",charIndex:17056},{level:2,title:"7.4常用plugins指南",slug:"_7-4常用plugins指南",normalizedTitle:"7.4常用plugins指南",charIndex:17070},{level:3,title:"7.4.1 热更新webpack-dev-server",slug:"_7-4-1-热更新webpack-dev-server",normalizedTitle:"7.4.1 热更新webpack-dev-server",charIndex:17089},{level:3,title:"7.4.2 html文件的编译、压缩Html-webpack-plugin",slug:"_7-4-2-html文件的编译、压缩html-webpack-plugin",normalizedTitle:"7.4.2 html文件的编译、压缩html-webpack-plugin",charIndex:17408},{level:3,title:"7.4.3 多页面打包html-webpack-plugin、glob",slug:"_7-4-3-多页面打包html-webpack-plugin、glob",normalizedTitle:"7.4.3 多页面打包html-webpack-plugin、glob",charIndex:18215},{level:3,title:"7.4.4 js文件压缩terser-webpack-plugin",slug:"_7-4-4-js文件压缩terser-webpack-plugin",normalizedTitle:"7.4.4 js文件压缩terser-webpack-plugin",charIndex:19702},{level:3,title:"7.4.5 css文件压缩optimize-css-assets-webpack-plugin/cssnano",slug:"_7-4-5-css文件压缩optimize-css-assets-webpack-plugin-cssnano",normalizedTitle:"7.4.5 css文件压缩optimize-css-assets-webpack-plugin/cssnano",charIndex:20195},{level:3,title:"7.4.6 自动清理构建目录clean-webpack-plugin",slug:"_7-4-6-自动清理构建目录clean-webpack-plugin",normalizedTitle:"7.4.6 自动清理构建目录clean-webpack-plugin",charIndex:20731},{level:3,title:"7.4.7 source map",slug:"_7-4-7-source-map",normalizedTitle:"7.4.7 source map",charIndex:21085},{level:3,title:"7.4.8 基础库的分离html-webpack-externals-plugin/SplitChunksPlugin",slug:"_7-4-8-基础库的分离html-webpack-externals-plugin-splitchunksplugin",normalizedTitle:"7.4.8 基础库的分离html-webpack-externals-plugin/splitchunksplugin",charIndex:21774},{level:2,title:"7.5进阶用法",slug:"_7-5进阶用法",normalizedTitle:"7.5进阶用法",charIndex:23066},{level:3,title:"7.5.1构建配置抽离成npm包",slug:"_7-5-1构建配置抽离成npm包",normalizedTitle:"7.5.1构建配置抽离成npm包",charIndex:23078},{level:3,title:"7.5.2构建测试",slug:"_7-5-2构建测试",normalizedTitle:"7.5.2构建测试",charIndex:23445},{level:3,title:"7.5.3构建优化",slug:"_7-5-3构建优化",normalizedTitle:"7.5.3构建优化",charIndex:24201}],headersStr:"7.1概念： 7.1.1安装与使用 7.2配置详解 7.2.1入口entry 7.2.2输出output 7.2.3加载器loader 7.2.4插件plugins 7.2.5模式mode 7.2.6浏览器兼容性browser compatibility 7.2.7文件监听watch及 7.2.8 文件指纹 7.2.9 摇树优化tree shaking 7.4.10 ScopeHoisting 7.4.11 代码分割 7.4.12 构建日志、构建异常和中断处理 7.3常用lader指南 7.3.1打包ES6： 7.3.2打包css： 7.3.3打包less： 7.3.3打包图片/字体： 7.3.4自动补齐浏览器前缀： 7.3.5rem转换px2rem-loader、lib-flexible库： 7.3.6资源的内联raw-loader 7.3.7ESLint规范eslint-loader 7.3.8SSR打包 打包Vue： 7.3.6自定义插件 7.3.7常用插件 7.4常用plugins指南 7.4.1 热更新webpack-dev-server 7.4.2 html文件的编译、压缩Html-webpack-plugin 7.4.3 多页面打包html-webpack-plugin、glob 7.4.4 js文件压缩terser-webpack-plugin 7.4.5 css文件压缩optimize-css-assets-webpack-plugin/cssnano 7.4.6 自动清理构建目录clean-webpack-plugin 7.4.7 source map 7.4.8 基础库的分离html-webpack-externals-plugin/SplitChunksPlugin 7.5进阶用法 7.5.1构建配置抽离成npm包 7.5.2构建测试 7.5.3构建优化",content:"# 7.1概念：\n\n * 构建工具的作用：\n\n> 转换ES6语法 转换JXS CSS前缀不全、预处理器 压缩混淆 图片压缩\n\n * 常用构建工具的演变\n   ant+YUI Tool → grunt → fis3/gulp → rollup/parcel/webpack\n * webpack的优势\n   webpack是一个现代JavaScript应用程序的静态模块打包工具。当webpack处理应用程序时，它会在内部构建一个依赖图(dependency graph)，此依赖图会映射项目所需的每个模块，并生成一个或多个bundle\n\nTIP\n\nwebpack 4.x\n\n\n# 7.1.1安装与使用\n\n# 安装：\n\n * 5.x\n\nmkdir webpack-demo && cd webpack-demo\nnpm init -y\nnpm install --save-dev webpack\n\n\n * 4.x\n\nmkdir webpack-demo && cd webpack-demo\nnpm init -y\nnpm install --save-dev webpack-cli\n\n\n# 目录：\n\nwebpack-demo\n\n> |- package.json //模块描述文件\n> |- webpack.config.js //插件配置文件\n> |- index.html //页面入口\n> |- /dist //打包存储文件夹\n>    |-- bundle.js //目标文件\n> |- /src //目标文件夹\n>    |-- index.js //目标文件\n\n# 使用：\n\n * 直接运行 node_modules/.bin/webpack.cmd 双击运行\n * 通过npx命令运行\n\nnpx webpack\n\n\n * 在package.json中设置\n\n \"scripts\": {\n    \"build\":\"webpack\"\n  }\n\n\nnpm run build\n\n\n\n# 7.2配置详解\n\nwebpack可以无需使用任何配置文件。webpack会假定项目的入口起点为src/index，然后会在dist/main.js输出结果，并且在生产环境开启压缩和优化。 你的项目还需要继续扩展此能力，为此你可以在项目根目录下创建一个webpack.config.js 文件，webpack会自动使用它。 完整示例：\n\nconst path = require('path');\nmodule.exports = {\n  mode: \"production\", // 模块\n  entry: { //多入口配置\n        index:'./src/index.js', \n        nav:'./src/nav.js',\n    }, \n  output: { // 输出\n    path: path.resolve(__dirname, \"dist\"), \n    // 输出目录dirnam表示当前目录，必须是绝对路径（使用Node.js 的path模块）\n    filename: \"bundle.js\", // 入口文件名\n    // 「入口分块(entry chunk)」的文件名模板\n    publicPath: \"/assets/\", // 输出解析文件的目录，url 相对于 HTML 页面\n    library: \"MyLibrary\", // 打包出的库名称,import引用时的名称\n    libraryTarget: \"umd\", // 打包出的库类型\n    libraryExport: \"default\",\n  },\n  module: {\n    // 关于模块配置\n    rules: [\n      // 模块规则（配置 loader、解析器等选项）\n      {\n        test: /\\.jsx?$/,\n        include: [\n          path.resolve(__dirname, \"app\")\n        ],\n        exclude: [\n          path.resolve(__dirname, \"app/demo-files\")\n        ],\n        // 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n        // test 和 include 具有相同的作用，都是必须匹配选项\n        // exclude 是必不匹配选项（优先于 test 和 include）\n        // 最佳实践：\n        // - 只在 test 和 文件名匹配 中使用正则表达式\n        // - 在 include 和 exclude 中使用绝对路径数组\n        // - 尽量避免 exclude，更倾向于使用 include\n        issuer: { test, include, exclude },\n        // issuer 条件（导入源）\n        enforce: \"pre\",\n        enforce: \"post\",\n        // 标识应用这些规则，即使规则覆盖（高级选项）\n        loader: \"babel-loader\",\n        // 应该应用的 loader，它相对上下文解析\n        // 为了更清晰，`-loader` 后缀在 webpack 2 中不再是可选的\n        // 查看 webpack 1 升级指南。\n        options: {\n          presets: [\"es2015\"]\n        },\n        // loader 的可选项\n      },\n      {\n        test: /\\.html$/,\n        use: [\n          // 应用多个 loader 和选项\n          \"htmllint-loader\",\n          {\n            loader: \"html-loader\",\n            options: {\n              /* ... */\n            }\n          }\n        ]\n      },\n      { oneOf: [ /* rules */ ] },\n      // 只使用这些嵌套规则之一\n      { rules: [ /* rules */ ] },\n      // 使用所有这些嵌套规则（合并可用条件）\n      { resource: { and: [ /* 条件 */ ] } },\n      // 仅当所有条件都匹配时才匹配\n      { resource: { or: [ /* 条件 */ ] } },\n      { resource: [ /* 条件 */ ] },\n      // 任意条件匹配时匹配（默认为数组）\n      { resource: { not: /* 条件 */ } }\n      // 条件不匹配时匹配\n    ],\n    /* 高级模块配置（点击展示） */\n  },\n  resolve: {\n    // 解析模块请求的选项\n    // （不适用于对 loader 解析）\n    modules: [\n      \"node_modules\",\n      path.resolve(__dirname, \"app\")\n    ],\n    // 用于查找模块的目录\n    extensions: [\".js\", \".json\", \".jsx\", \".css\"],\n    // 使用的扩展名\n    alias: {\n      // 模块别名列表\n      \"module\": \"new-module\",\n      // 起别名：\"module\" -> \"new-module\" 和 \"module/path/file\" -> \"new-module/path/file\"\n      \"only-module$\": \"new-module\",\n      // 起别名 \"only-module\" -> \"new-module\"，但不匹配 \"only-module/path/file\" -> \"new-module/path/file\"\n      \"module\": path.resolve(__dirname, \"app/third/module.js\"),\n      // 起别名 \"module\" -> \"./app/third/module.js\" 和 \"module/file\" 会导致错误\n      // 模块别名相对于当前上下文导入\n    },\n    /* 可供选择的别名语法（点击展示） */\n    /* 高级解析选项（点击展示） */\n  },\n  performance: {\n    hints: \"warning\", // 枚举\n    maxAssetSize: 200000, // 整数类型（以字节为单位）\n    maxEntrypointSize: 400000, // 整数类型（以字节为单位）\n    assetFilter: function(assetFilename) {\n      // 提供资源文件名的断言函数\n      return assetFilename.endsWith('.css') || assetFilename.endsWith('.js');\n    }\n  },\n  devtool: \"source-map\", // enum\n  // 通过在浏览器调试工具(browser devtools)中添加元信息(meta info)增强调试\n  // 牺牲了构建速度的 `source-map' 是最详细的。\n  context: __dirname, // string（绝对路径！）\n  // webpack 的主目录\n  // entry 和 module.rules.loader 选项\n  // 相对于此目录解析\n  target: \"web\", // 枚举\n  // bundle 应该运行的环境\n  // 更改 块加载行为(chunk loading behavior) 和 可用模块(available module)\n  externals: [\"react\", /^@angular\\//],\n  // 不要遵循/打包这些模块，而是在运行时从环境中请求他们\n  serve: { //object\n    port: 1337,\n    content: './dist',\n    // ...\n  },\n  // 构建日志配置\n  stats: \"errors-only\",\n  // 精确控制要显示的 bundle 信息\n  devServer: {\n    proxy: { // proxy URLs to backend development server\n      '/api': 'http://localhost:3000'\n    },\n    contentBase: path.join(__dirname, 'public'), // boolean | string | array, static file location\n    compress: true, // enable gzip compression\n    historyApiFallback: true, // true for index.html upon 404, object for multiple paths\n    hot: true, // hot module replacement. Depends on HotModuleReplacementPlugin\n    https: false, // true for self-signed, object for cert authority\n    noInfo: true, // only errors & warns on hot reload\n    // ...\n  },\n  plugins: [\n    // ...\n  ],\n  // 附加插件列表\n  /* 高级配置（点击展示） */\n  resolveLoader: { /* 等同于 resolve */ }\n  // 独立解析选项的 loader\n  parallelism: 1, // number\n  // 限制并行处理模块的数量\n  profile: true, // boolean\n  // 捕获时机信息\n  bail: true, //boolean\n  // 在第一个错误出错时抛出，而不是无视错误。\n  cache: false, // boolean\n  // 禁用/启用缓存\n  watch: true, // boolean\n  // 启用观察\n  watchOptions: {\n    aggregateTimeout: 1000, // in ms\n    // 将多个更改聚合到单个重构建(rebuild)\n    poll: true,\n    poll: 500, // 间隔单位 ms\n    // 启用轮询观察模式\n    // 必须用在不通知更改的文件系统中\n    // 即 nfs shares（译者注：Network FileSystem，最大的功能就是可以透過網路，讓不同的機器、不同的作業系統、可以彼此分享個別的檔案 ( share file )）\n  },\n  node: {\n    // Polyfills and mocks to run Node.js-\n    // environment code in non-Node environments.\n    console: false, // boolean | \"mock\"\n    global: true, // boolean | \"mock\"\n    process: true, // boolean\n    __filename: \"mock\", // boolean | \"mock\"\n    __dirname: \"mock\", // boolean | \"mock\"\n    Buffer: true, // boolean | \"mock\"\n    setImmediate: true // boolean | \"mock\" | \"empty\"\n  },\n  recordsPath: path.resolve(__dirname, \"build/records.json\"),\n  recordsInputPath: path.resolve(__dirname, \"build/records.json\"),\n  recordsOutputPath: path.resolve(__dirname, \"build/records.json\"),\n  // TODO\n}\n\n\n\n# 7.2.1入口entry\n\n指示webpack应该使用哪个模块，来作为构建其内部依赖图(dependency graph) 的开始。\n\n * 单入口\n\nmodule.exports = {\n  entry: {\n    main: './path/to/my/entry/file.js'\n  }\n};\n// 单入口可以简写\nmodule.exports = {\n  entry: './path/to/my/entry/file.js'\n};\n\n\n * 多入口\n\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n};\n\n\n\n# 7.2.2输出output\n\n告诉webpack在哪里输出它所创建的bundle，以及如何命名这些文件。主要输出文件的默认值是./dist/main.js，其他生成文件默认放置在./dist文件夹中。注意即使可以存在多个entry起点，但只指定一个output配置。\n\n * 单入口输出\n\nconst path = require('path'); // node核心模块 path 用于用于处理文件路径\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 设置bundle输出路径\n    filename: 'my-first-webpack.bundle.js'// 设置bundle的名称\n  }\n};\n\n\n * 多入口输出\n\nconst path = require('path'); \nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js', // 占位符name为入口文件的名字 例如app、search\n    path:path.resolve(__dirname,'dist'),\n  }\n};\n// 输出：./dist/app.js, ./dist/search.js\n\n\n\n# 7.2.3加载器loader\n\nwebpack只能理解JavaScript和JSON文件。loader让webpack能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。\n\nnpm install --save-dev raw-loader\nnpm install --save-dev css-loader\n\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 设置bundle输出路径\n    filename: 'my-first-webpack.bundle.js'// 设置bundle的名称\n  },\n  module: {\n    rules: [\n      // test属性用于表示那些文件需要转换  use表示需要用哪个loader\n      { test: /\\.txt$/, use: 'raw-loader' },\n      { test: /\\.css$/, use: 'css-loader' }\n    ] \n  }\n};\n\n\n常用的loader：\n\n> babel-loader:转换ES6/ES7等新JS语法\n> css-loader:打包css\n> less-loader:less转换成css\n> ts-loader:ts转换成js\n> file-loader:图片和字体等打包\n> rea-loader:将文件以字符串的形式打包\n> thread-loader:多进程打包js和css\n\nWARNING\n\n相互依赖的loader，要按依赖顺序书写，上至下，左至右。\n\n# 其他引用方式\n\n * 内联 使用!为整个规则添加前缀，可以覆盖配置中的所有loader定义。\n\nimport Styles from 'style-loader!css-loader?modules!./styles.css';\n\n\n * CLI\n\nwebpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'\n\n\n\n# 7.2.4插件plugins\n\nloader用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过npm安装\nconst webpack = require('webpack'); // 用于访问内置插件\n\nmodule.exports = {\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n};\n\n\n常用的plugins：\n\n> CommonsChunkPlugin:将chunks相同的模块代码提取成公共js\n> CleanWebpackPlugin:清理构建目录\n> ExtractTextWebpackPlugin:将css从bundle文件中独立出css文件\n> CopyWebapckPlugin:将文件或者文件夹拷贝到输出目录\n> HtmlWebpackPlugin:创建html文件去承载输出bundle\n> UgligyjsWebpackPlugin:压缩js\n> ZipWebpackPlugin:将打包出的资源生成一个zip包\n> webpack-merge合并webpack.config配置文件\n\n\n# 7.2.5模式mode\n\n通过选择development,production或none之中的一个，来设置mode参数，你可以启用webpack内置在相应环境下的优化。其默认值为production。\n\n * webpack.cofig.js文件\n\nmodule.exports = {\n  mode: 'production'\n};\n\n\n * 也可以在package.json中设置\n\n \"scripts\": {\n    \"build\":\"webpack --mode=production\"\n  }\n\n\n\n# 7.2.6浏览器兼容性browser compatibility\n\nwebpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）。webpack 的 import() 和 require.ensure() 需要 Promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要提前加载polyfill。\n\n\n# 7.2.7文件监听watch及\n\n源代码发生变化是，自动重新构建打包。\n\n * webpack.cofig.js文件\n\nmodule.exports = {\n  watch: 'true'，\n  watchOptions:{\n    ignored:/node_modules/,// 忽略文件，支持正则\n    aggregateTimeout:300, // 监听到变化后的延时时间\n    poll:1000 //监听时间间隔\n  }\n\n};\n\n\n * 也可以在package.json中设置\n\n \"scripts\": {\n    \"build\":\"webpack --watch webpack-dev-server\"\n  }\n\n\n\n# 7.2.8 文件指纹\n\nHash：和整个项目的构建相关，主要项目有文件修改，整个项目构建的hash值就会更改。 Chunkhash：和webpack打包的chunk有关，不同的entry会产生不同的chunkhash值 Contenthash：根据文件内容来定义hash，文件内容不变，则contenthash不变\n\nconst path = require('path')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nmodule.exports = {\n  output: {\n      path: path.resolve(__dirname, 'dist'), \n      filename: '[name]_[chunkhash8].bundle.js' // js文件建议使用chunkhash，:8表示8位hash\n  },\n  module: {\n    rules: [\n      {test: /\\.(png|svg|jpg|gif)$/,\n          use: [{\n                loader: 'file-loader',\n                options: \n                {name:'img/[name]_[hash:8].[ext]'} // 图片字体等建议使用hash\n              }\n          ]\n      }, \n      {\n        test: /\\.css|less$/,\n        // 单独打包css文件时候要使用MiniCssExtractPlugin.loader去替换style-loader\n        use: [MiniCssExtractPlugin.loader,'css-loader']  \n      }\n    ]\n  }，\n  plugins:[\n    // 通过mini-css-extract-plugin插件将css文件单独提取出来\n    new MiniCssExtractPlugin({ \n      filename:`[name]_[contenthash:8].css` //css文件建议使用contenthash\n    })\n  ],\n}\n\n\n\n# 7.2.9 摇树优化tree shaking\n\n概念：一个模块的多个方法，只要有一个被使用了，整个模块就会被打包。tree shaking就是只打包用到的，没用到的，在uglify阶段去除掉。 使用：webpack默认支持，只需要在.babelrc里设置modules:false即可。 要求：必须是ES6的语法，CJS的方法不支持。\n\n>  1. 去除无用的css文件：purgecss-webpack-plugin\n\n\n# 7.4.10 ScopeHoisting\n\n概念：将所有模块的代码根据引用的顺序，适当重命名后放在一个函数作用域里，以减少函数声明代码和内存的开销。 使用：mode为production时默认开启。 要求：必须是ES6的语法，CJS的方法不支持。\n\n\n# 7.4.11 代码分割\n\n概念：将代码分割，当相应的代码运行时再进行代码加载。 使用：\n\n> CJS:require.ensure ES6:动态import（ES2020、需要babel转译）\n> \n> > babel转译:\n> > \n> > > 安装：npm i @babel/plugin-syntax-dynamic-import --save-dev 使用：\n> > > \n> > > > .babelrc js { \"plugins\":[\"@babel/plugin-syntax-dynamic-import\"] }\n\n\n# 7.4.12 构建日志、构建异常和中断处理\n\nstats参数：\n\n> errors-only:只在发生错误时输出 minimal:只在发生错误或有新的编译时输出。 none:没有输出 normal:标准输出 verbose:全部输出\n\nmodule.exports = {\n    stats:'errors-only' // 构建日志配置\n}\n\n\n查看构建错误码：\n\n> 0表示成功,非0失败\n> \n> ECHO $?\n\nTIP\n\nfriendly-errors-webpack-plugin构建日志优化工具\n\n\n# 7.3常用lader指南\n\n\n# 7.3.1打包ES6：\n\n插件：npm i babel-loader @babel/core @babel/preset-env -D 配置：\nwebpack.cofig.js文件：\n\nconst path = require('path')\nmodule.exports = {\n    entry: {\n        app: './src/index.js',\n      },\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:'[name].js'\n    },\n    mode:'production',\n    module: {\n      rules: [\n        { test: /\\.js$/, use: 'babel-loader' }\n      ] \n  }\n}\n\n\n.babelrc：文件\n\n{\n  \"presets\":[\n    \"@babel/preser-env\"，\n     \"@vue/app\"\n  ],\n  \"plugins\":[\n    \"@babel/proposal-class-properties\"\n  ]\n}\n\n\n\n# 7.3.2打包css：\n\n插件：npm i style-loader，css-loader -D\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[{\n  test: /\\.css$/,//正则表达式以css为结尾\n  use: ['style-loader','css-loader']  //按顺序从右往左\n }]\n}\n\n\n\n# 7.3.3打包less：\n\n插件：npm i style-loader css-loader less less-loader -D\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[\n  {\n  test: /\\.less$/,\n  use: ['style-loader','css-loader','less-loader']  //按顺序从右往左\n }]\n}\n\n\n\n# 7.3.3打包图片/字体：\n\n * 通过file-loader打包 插件：npm i file-loader -D\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[\n  {test: /\\.(png|svg|jpg|gif)$/,use:'file-loader'}, //打包图片\n  {test: /\\.(ttf|woff|woff2|otf|eot)$/,use:'file-loader'} //打包字体\n  ]\n}\n\n\n * 通过url-loader转成base64，用于打包较小的资源， 插件：npm i url-loader -D\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n    rules: [\n        {\n            test: /\\.(png|svg|jpg|gif)$/,\n            use: [\n                {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 1024\n                    }\n                }\n            ]\n        }, //打包图片\n        {\n            test: /\\.(ttf|woff|woff2|otf|eot)$/, use: [\n                {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 1024\n                    }\n                }\n            ]\n        } //打包字体\n    ]\n}\n\n\n哈希文件名的好处\n\n * 如果发布新版本，发现用户正在浏览老网页，需要刷新一次才能看见新版本。发布新版时会把老目录删除，然后覆盖新文件。\n * 增量覆盖：保留原来的文件，避免旧文件被覆盖无法访问。\n\n\n# 7.3.4自动补齐浏览器前缀：\n\n插件：npm i postcss-loader autoprefixer -D 配置：\n\nwebpack.cofig.js文件：\n\nmodule: {\n rules:[\n  {\n  test: /\\.css$/,\n  use: ['style-loader',{\n    loader:'postcss-loader',\n    options:{\n      plugins:()=>[\n        require('autoprefixer')({\n          browsers:['last 2 version', '>1%','ios 7'] // 兼容最近的2个版本，兼容使用率大于2%，兼容 ios7 的版本\n        })\n      ]\n    }\n  }]\n }]\n}\n\n\n\n# 7.3.5rem转换px2rem-loader、lib-flexible库：\n\n插件：npm i px2rem-loader -D/npm i lib-flexible -S\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[\n  {\n  test: /\\.css$/,\n  use: ['style-loader','css-loader',{\n    loader:'px2rem-loader',\n    options:{\n      remUnit:75,  // 转换系数，1rem = 75px\n      remPrecesion:8 // 转换时的精准度，小数点后8位\n    }\n  }]\n }]\n}\n\n\nmain.js\n\nimport 'lib-flexible'\n\n\nviewprot设置\n\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=0,minimum-scale=1.0,maximum=scale=1.0\">\n\n\nTIP\n\nlib-flexible库制度根据设备计算font-size\n\n\n# 7.3.6资源的内联raw-loader\n\n插件：npm i raw-loader@0.5.1 -D 优点：减少http请求，避免页面闪动。\n\n * html内联：\n\n<head>${require('raw-loader!babel-loader!./meta.html')}</head>\n\n\n * js内联：\n\n<script>${require('raw-loader!babel-loader!../node_modules/lib-flexible')}<\/script>\n\n\n * css内联：\n\n 1. 通过style-loader\n 2. html-inline-css-webpack-plugin\n\n\n# 7.3.7ESLint规范eslint-loader\n\n插件：npm i eslint-loader babel-eslint --save-dev 配置：\nwebpack.cofig.js文件：\n\nmodule.exports = {\n    module: {\n      rules: [\n        { test: /\\.js$/, use: ['babel-loader','eslint-loader']}\n      ] \n  }\n}\n\n\n.eslintrc.js：文件\n\nmodule.exports = {\n   \"parser\": \"babel-eslint\"\n    \"extends\": [ // 继承基础配置规则\n        'plugin:vue/essential',\n    ],\n    \"env\":{  // 配置环境变量\n      \"browser\":true,\n      \"node\":true,\n    }\n    \"rules\": { // 配置规则\n      \"indent\":[\"error\",4] //配置缩进规则为4个空格\n    },\n}\n\n\n * 进行eslint检查： 在package.json中设置\n\n \"scripts\": {\n    \"eslint\":\"eslint --fix\"\n  }\n\n\n\n# 7.3.8SSR打包\n\nwebpack.ssr.js\n\nif(typeof window === 'undefined'){\n    global.window = {}\n}\nconst path = require('path')\nconst TerserPlugin = require(\"terser-webpack-plugin\");\nmodule.exports = {\n    entry: {\n        app: './src/index.js',\n      },\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:'[name]-server.js',\n        libraryTarget: \"umd\", // 打包出的库类型\n    },\n    mode:'production',\n    module: {\n      rules: [\n        { test: /\\.js$/, use: 'babel-loader' }\n      ] \n  }\n}\n\n\n在package.json中设置\n\n \"scripts\": {\n    \"build:ssr\":\"webpack --config webpack.ssr.js\"\n  }\n\n\n打包SSR存在的问题：\n\nnode.js中没有document,window fetch或ajax请求要改写成isomorphic-fetch或axios style-loader替换成isomorphic-style-loader或直接忽略css的解析\n\n\n# 打包Vue：\n\n插件：vuevue-loadervue-template-compiler\n\n配置：\n\nindex.js文件:\n\nimport Vue from \"vue\";\n\nimport App from \"./App.vue\";\n\nnew Vue({\n\nel:\"#app\",\n\nrender:c=>c(App)\n\n});\n\n\n\nApp.vue文件:\n\n\n<template>\n\n<div>\n\n我是App组件\n\n</div>\n\n</template>\n\n<script>\n\nexport default {\n\ndata(){\n\nreturn {\n\n}\n\n}\n\n}\n\n<\/script>\n\n<style>\n</style>\n\n\nwebpack.config.js文件:\n\nconst VueLoaderPlugin = require(\"vue-loader/lib/plugin\");\n\nplugins:[new VueLoaderPlugin()]\n\n\n\n# 7.3.6自定义插件\n\n# 引用方法一：\n\nwebpack.cofig.js文件：\n\nmodule: {\n\nrules:[{\n\ntest: /\\.js$/,\n\nuse:[path.resolve('./src/loader/myloader')],}\n\n}]\n\n\n# 引用方法二：\n\n将自定义插件的文件放入node_modules文件中\n\nwebpack.cofig.js文件：\n\nmodule: {\n\nrules:[{\n\ntest: /\\.js$/,\n\nuse:['myloader']\n\n}]}\n\n\n# 引用方法三：\n\nwebpack.cofig.js文件：\n\nresolveLoader:{\n  modules:[path.resolve(\"./src/loader\"),path.resolve(\"./node_modules\")],\n}\n\nmodule: {\n  rules:[{\n    test: /\\.js$/,\n    use:['myloader']\n  }]\n}\n\n\n\n# 7.3.7常用插件\n\n\n# 7.4常用plugins指南\n\n\n# 7.4.1 热更新webpack-dev-server\n\n插件：npm i webpack-dev-server -g\n\n * webpack.cofig.js文件\n\n  plugins: [\n      new webpack.HotModuleReplacementPlugin()\n  ],\n  devServer:{\n    contentBase:'./dist',\n    hot:true\n  }\n\n\n在package.json中设置\n\n \"scripts\": {\n    \"dev\":\"webpack-dev-server --open\"\n  }\n\n\n * 远程热更新webpack-dev-middleware\n\n\n# 7.4.2 html文件的编译、压缩Html-webpack-plugin\n\n插件：npm i html-webpack-plugin --save-dev 作用：根据配置的html产生一个引入打包后文件的html 配置：\n\nwebpack.cofig.js文件：\n\nconst Htmlwebpackplugin = require(\"html-webpack-plugin\");//引入插件\nplugins: [\n\tnew Htmlwebpackplugin({\n\t\ttemplate: \"./src/index.html\", //模板\n\t\tfilename: \"index.html\", // 打包出来的文件名\n\t\tinject: 'body', // 路径放置位置 head/body \n\t\ttitle: 'this is index', //打包后的htmltitle\n\t\tminify: {  //html设置压缩参数\n      html5:true,\n      collapseWhitespace: true,\n\t\t\tpreserveLineBreaks:false,\n      minifyCSS:true,\n      minifyJS:true,\n      removeComments: true,\n\t\t},\n\t\tchunks: ['index'],// 指定chunks\n\t\texcludeChunks: [],//排除chunks\n\t}),\n]\n\n\nIndex.html文件：\n\n<%= htmlWebpackPlugin.options.title%> //获取htmlWebpackPlugin下的title的数据 \n<script src=\"<%= htmlWebpackPlugin.files.chunks.index.entry%>\"><\/script>\n\n\n\n# 7.4.3 多页面打包html-webpack-plugin、glob\n\n一个页面对应一个entry、一个html-webpacl-plugin 优势：利于SEO。缺点：每次新增或删除页面都需要配置webpack,利用glob-sync可以解决这个问题。 npm i glob -D\n\n'use strict'\nconst path = require('path')\nconst glob = require('glob')\nconst htmlWebpackPlugin = require('html-webpack-plugin');\nconst setMPA = () => {\n  const entry = {};\n  const htmlWebpackPlugins = []\n  const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js'))\n  Object.keys(entryFiles).map((index) => {\n    const entryFile = entryFiles[index];\n    const match = entryFile.match(/src\\/(.*)\\/index\\.js/);\n    const pageName = match && match[1];\n    entry[pageName] = entryFile;\n    console.log(pageName,1111,entryFile)\n    htmlWebpackPlugins.push(\n      new htmlWebpackPlugin({\n        template: path.join(__dirname,`src/${pageName}/index.html`), //模板\n        filename: `${pageName}.html`, // 打包出来的文件名\n        inject: 'body', // 路径放置位置 head/body \n        minify: {  //html设置压缩参数\n        chunks: [pageName],// 指定chunks\n          html5: true, \n          collapseWhitespace: true,\n          preserveLineBreaks: false,\n          minifyCSS: true,\n          minifyJS: true,\n          removeComments: true,\n        },\n      }),\n    );\n  })\n  return {\n    entry,\n    htmlWebpackPlugins\n  }\n}\nconst {entry,htmlWebpackPlugins} = setMPA(); \nmodule.exports = {\n  entry:entry,\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name]_[hash:8].js'\n  },\n  mode: 'production',\n  plugins: [].concat(htmlWebpackPlugins)\n}\n\n\n\n# 7.4.4 js文件压缩terser-webpack-plugin\n\nuglifyjs-webpack-plugin:webpack4.x已内置，不支持ES6语法,不建议新项目使用。 terser-webpack-plugin5.x已内置,4.x需要单独安装。 插件：npm i terser-webpack-plugin --save-dev\n\nconst TerserPlugin = require(\"terser-webpack-plugin\");\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n       new TerserPlugin({    \n        test: /\\.js(\\?.*)?$/i, // 通过正则匹配要压缩的文件\n        include: /\\/includes/, // 指定要压缩的文件\n         exclude: /\\/excludes/, // 排除文件\n      }),\n    ],\n  },\n};\n\n\n\n# 7.4.5 css文件压缩optimize-css-assets-webpack-plugin/cssnano\n\n插件：npm i optimize-css-assets-webpack-plugin --save-dev/npm i cssnano --save-dev\n\nconst Htmlwebpackplugin = require(\"optimize-css-assets-webpack-plugin\");\nconst Htmlwebpackplugin = require(\"cssnano\");\nmodule.exports={\n\tentry:{\n\t\tapp:'./src/app.js',\n\t\tsearch:'./src/search.js'\n\t},\n\toutput:{\n\t\tfilename:'[name][chunkhash:8].js',\n\t\tpath:__dirname+'./dist'\n\t},\n\tPlugins:[\n\t\tnew OptimizeCssAssetsPlugin({\n\t\t\tassetNameRegExp:/\\.css$/g,\n\t\t\tcssProcessor:require('cssnano')\n\t\t})\n\t]\n}\n\n\n\n# 7.4.6 自动清理构建目录clean-webpack-plugin\n\n插件：npm i clean-webpack-plugin -D\n\nconst Htmlwebpackplugin = require(\"clean-webpack-plugin\");\nmodule.exports={\n\tentry:{\n\t\tapp:'./src/app.js',\n\t\tsearch:'./src/search.js'\n\t},\n\toutput:{\n\t\tfilename:'[name][chunkhash:8].js',\n\t\tpath:__dirname+'./dist'\n\t},\n\tPlugins:[\n\t\tnew CleanWebpackPlugin()\n\t]\n}\n\n\n也可以使用rimraf插件清理构建目录\n\n\n# 7.4.7 source map\n\n作用：通过source map定位到源代码。 source map关键字：\n\n> eval：使用eval包裹模块代码。 source map产生.map文件 cheap不包含代码的所在列信息 inline将.map做为DataURI嵌入，不单独生成.map文件 module包含loader的sourcemap source map类型：\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过npm安装\nconst webpack = require('webpack'); // 用于访问内置插件\n\nmodule.exports = {\n  entry: {\n      app: './src/index.js',\n  },\n  output:{\n      path:path.resolve(__dirname,'dist'),\n      filename:'[name].js'\n  },\n  mode:'production',\n  module: {\n    rules: [\n      { test: /\\.js$/, use: 'babel-loader' }\n    ] \n  },\n  devtool:'eval' // eval\\source-map\\inline-source-map\\cheap-source-map\n};\n\n\nWARNING\n\n线上环境排查问题时可以开启，否则要关闭source map，否则会暴露源代码。\n\n\n# 7.4.8 基础库的分离html-webpack-externals-plugin/SplitChunksPlugin\n\n * html-webpack-externals-plugin 插件：npm i html-webpack-externals-plugin -D\n\nconst HtmlWebpackExternalsPlugin = require('html-webpack-externals-plugin')\nmodule.exports={\n\tPlugins:[\n\t\tnew HtmlWebpackExternalsPlugin({\n      externals:[\n        {\n          module:'react',\n          entry:'dist/jquery.min.js', //可以是本地也可以是cdn文件\n          global:'React',\n        },\n        {\n          module:'react-dom',\n          entry:'dist/jquery.min.js',//可以是本地也可以是cdn文件\n          global:'ReactDom',\n        }\n      ]\n    })\n\t]\n}\n\n\n * SplitChunksPlugin\n\nmodule.exports={\noptimization: {\n    splitChunks: {\n      chunks: 'async', //三选一：\"initial\" 初始化，\"all\"(默认就是all)，\"async\"（动态加载） \n      minSize: 30000,  // 形成一个新代码块最小的体积,只有 >= minSize 的bundle会被拆分出来\n      maxSize: 0, //拆分之前最大的数值，默认为0，即不做限制\n      minChunks: 1, //引入次数，如果为2 那么一个资源最少被引用两次才可以被拆分出来\n      maxAsyncRequests: 5,// 按需加载的最大并行请求数\n      maxInitialRequests: 3, // 一个入口最大并行请求数\n      automaticNameDelimiter: '~', // 文件名的连接符\n      name: true,\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true\n        }\n      }\n    }\n  }\n}\n\n\n\n# 7.5进阶用法\n\n\n# 7.5.1构建配置抽离成npm包\n\n意义：统一构建脚本，开发者无需在关注构建配置。合理的抽离拆分，编辑维护管理。 通过多个配置文件管理不同环境的配置文件。\n\n> webpack.base.js:基础包 webpack.dev.js开发环境包 webpack.prod.js生成环境包 webpack.ssr.jsssr环境包 合并配置包webpack-merge\n\nconst merge = require('webpack-merge');\nconst baseConfig = require('./webpack.base');.\nconst prodConfig = require('./webpack.prod');\nmodule.exports = merge(baseConfig,prodConfig)\n\n\n\n# 7.5.2构建测试\n\n * 冒烟测试 指提交测试之前开发人员进行的预测试。主要排查基本功能是否可用。\n\n> 构建是否成功。 构建目录是否有js、css、html等文件输出。 单元测试工具：mocha+chai\n\n 1. 安装:npm i mocha chai -D\n 2. 创建test目录，增加test.js测试文件\n 3. 在package.json中设置\n\n \"scripts\": {\n    \"test\":\"node_modules/mocha/bin/_mocha\"\n  }\n\n\n 4. 执行测试npm run test\n\n * 持续集成 代码在合并主干之前，根据测试用例进行自动化测试，主要有一个测试用例失败，就不能集成。 优点：快速发现错误，防止分支大幅偏离主干。 持续集成工具：Travis CI\n\n 1. https://travis-ci.org/ 使用github账号登陆\n 2. 在github创建项目、将项目同步到travis-ci。\n 3. 项目的根目录下创建.travis.yml,内容如下：\n\nlanguage:node_js  // 语音\nsudo:false  // 管理员权限\ncache:\n  app:true // 是否需要缓存\n  directories:\n    -node_modules\n\nnode_js:stable  // node版本\n\ninstall:\n  - npm install -D // 安装构建依赖\n  - cd /test/template-project\n  - npm install -D  // 安装模板项目依赖\nscript:\n - npm test\n\n\n 4. 提交代码，travis-ci会自动根据测试用例进行测试。\n\n\n# 7.5.3构建优化\n\n * 构建统计stats（颗粒度比较粗，不容易看出问题） 在package.json中使用stats\n\n \"scripts\": {\n    \"build:stats\":\"webpack--env production --json > stats.json\"\n  }\n\n\n * 构建速度分析speed-measure-webpack-plugin npm i speed-measure-webpack-plugin\n\nconst speedMeasureWebpackPlugin = require('speed-measure-webpack-plugin');\nconst smp = new speedMeasureWebpackPlugin();\nmodule.exports= smp.wrap({\n\tentry:{\n\t\tapp:'./src/app.js',\n\t\tsearch:'./src/search.js'\n\t},\n\toutput:{\n\t\tfilename:'[name][chunkhash:8].js',\n\t\tpath:__dirname+'./dist'\n\t},\n})\n\n\n * 构建体积分析webpack-bundle-analyzer npm i webpack-bundle-analyzer -D\n\nconst {BundleAnalyzerPlugin} = require('webpack-bundle-analyzer');\nconst smp = new speedMeasureWebpackPlugin();\nmodule.exports={\n\t\tPlugins:[\n\t\tnew BundleAnalyzerPlugin()\n\t]\n}\n\n\n * 速度优化\n\n 1. 使用高版本的webpack和node.js\n 2. 多进程多实例构建thread-loader(webpack 4.x内置)/paraller-webpack/HappyPack（不维护了）\n\n> thread-loader:\n> \n> module.exports = {\n>     module: {\n>       rules: [\n>         { test: /\\.js$/, use: 'thread-loader' }\n>       ] \n>   }\n> }\n\n 3. 多进程多实例并行压缩parallel-uglify-plugin/uglifyjs-webpack-plugin(不支持压缩ES6语法)/terser-webpack-plugin(webpack 4.x内置)\n\n> terser-webpack-plugin:详见7.8.4\n\n 4. 分包html-webpack-externals-plugin（对业务包不友善）/DLLPlugin预编译资源模块（将基础包和业务包打包成一个文件）\n\n> html-webpack-externals-plugin:详见[7.4.8](/frontend/webpack/#_7-4-8-基础库的分离html-webpack-externals-plugin-splitchunksplugin DLLPlugin: webpack.config.dll.js文件：\n> \n> const webpack = require('webpack')\n> module.exports = {\n>   entry:{\n>     library:[\n>       'react',\n>       `react-dom`\n>     ]\n>   },\n>   output:{\n>     filename:'[name]-[chunkhash].dll.js',\n>     path:path.join(__dirname,'build/library'),\n>     library:'[name]'\n>   }\n>   plugins:[\n>     new webpack.DLLPlugin({\n>       name:'[name]_[hash]',\n>        path:path.join(__dirname,'build/library/[name].json'),\n>     })\n>   ]\n> }\n> \n> \n> webpack.config.js文件：\n> \n> module.exports = {\n>   plugins:[\n>     new webpack.DLLReferencePlugin({\n>        manifest:require('./build/library/library.json'),\n>     })\n>   ]\n> }\n\n 5. 缓存：提升二次构建速度babel-loader/terser-webpack-plugin/cache-loader或hard-source-webpack-plugin\n\n> babel-loader:\n> \n> module.exports = {\n>     module: {\n>       rules: [\n>         { test: /\\.js$/, use: 'babel-loader?cacheDirectory=true' }\n>       ] \n>   }\n> }\n> \n> \n> terser-webpack-plugin:\n> \n> module.exports = {\n>  optimization: {\n>    minimize: true,\n>    minimizer: [\n>       new TerserPlugin({    \n>        test: /\\.js(\\?.*)?$/i, // 通过正则匹配要压缩的文件\n>        include: /\\/includes/, // 指定要压缩的文件\n>        exclude: /\\/excludes/, // 排除文件\n>        paraller:true, // 开启多进程多实例并行压缩\n>        cache:true // 开启缓存\n>      }),\n>    ],\n>  },\n> };\n> \n> \n> 缓存文件存放在node_modules/.cache\n\n 6. 缩小构建目标\n\n> 利用alias优化路径，减少文件查找。\n\n * 体积优化\n\n 1. 图片压缩基于node库的imagemin或tinypng API\n\n> imagemin优点：定制配置丰富，可以引入第三方插件（例如：pngquant），可以处理多种格式。\n> \n> rules: [{\n>   test: /\\.(gif|png|jpe?g|svg)$/i,\n>   use: [\n>     'file-loader',\n>     {\n>       loader: 'image-webpack-loader',\n>       options: {\n>         mozjpeg: { //jpeg格式\n>           progressive: true,\n>         },\n>         optipng: { //png格式\n>           enabled: false,\n>         },\n>         pngquant: {  //png格式\n>           quality: [0.65, 0.90],\n>           speed: 4\n>         },\n>         gifsicle: {  //gif格式\n>           interlaced: false,\n>         },\n>         webp: {  //webp格式\n>           quality: 75\n>         }\n>       }\n>     },\n>   ],\n> }]\n\n 2. 摇树优化tree shaking详见7.2.9\n 3. 动态Polyfill服务\n\n> polyfill服务原理：识别浏览器User Agent下发不同的polyfill。polyfill在线识别服务\n\n 4. ScopeHoisting7.4.10",normalizedContent:"# 7.1概念：\n\n * 构建工具的作用：\n\n> 转换es6语法 转换jxs css前缀不全、预处理器 压缩混淆 图片压缩\n\n * 常用构建工具的演变\n   ant+yui tool → grunt → fis3/gulp → rollup/parcel/webpack\n * webpack的优势\n   webpack是一个现代javascript应用程序的静态模块打包工具。当webpack处理应用程序时，它会在内部构建一个依赖图(dependency graph)，此依赖图会映射项目所需的每个模块，并生成一个或多个bundle\n\ntip\n\nwebpack 4.x\n\n\n# 7.1.1安装与使用\n\n# 安装：\n\n * 5.x\n\nmkdir webpack-demo && cd webpack-demo\nnpm init -y\nnpm install --save-dev webpack\n\n\n * 4.x\n\nmkdir webpack-demo && cd webpack-demo\nnpm init -y\nnpm install --save-dev webpack-cli\n\n\n# 目录：\n\nwebpack-demo\n\n> |- package.json //模块描述文件\n> |- webpack.config.js //插件配置文件\n> |- index.html //页面入口\n> |- /dist //打包存储文件夹\n>    |-- bundle.js //目标文件\n> |- /src //目标文件夹\n>    |-- index.js //目标文件\n\n# 使用：\n\n * 直接运行 node_modules/.bin/webpack.cmd 双击运行\n * 通过npx命令运行\n\nnpx webpack\n\n\n * 在package.json中设置\n\n \"scripts\": {\n    \"build\":\"webpack\"\n  }\n\n\nnpm run build\n\n\n\n# 7.2配置详解\n\nwebpack可以无需使用任何配置文件。webpack会假定项目的入口起点为src/index，然后会在dist/main.js输出结果，并且在生产环境开启压缩和优化。 你的项目还需要继续扩展此能力，为此你可以在项目根目录下创建一个webpack.config.js 文件，webpack会自动使用它。 完整示例：\n\nconst path = require('path');\nmodule.exports = {\n  mode: \"production\", // 模块\n  entry: { //多入口配置\n        index:'./src/index.js', \n        nav:'./src/nav.js',\n    }, \n  output: { // 输出\n    path: path.resolve(__dirname, \"dist\"), \n    // 输出目录dirnam表示当前目录，必须是绝对路径（使用node.js 的path模块）\n    filename: \"bundle.js\", // 入口文件名\n    // 「入口分块(entry chunk)」的文件名模板\n    publicpath: \"/assets/\", // 输出解析文件的目录，url 相对于 html 页面\n    library: \"mylibrary\", // 打包出的库名称,import引用时的名称\n    librarytarget: \"umd\", // 打包出的库类型\n    libraryexport: \"default\",\n  },\n  module: {\n    // 关于模块配置\n    rules: [\n      // 模块规则（配置 loader、解析器等选项）\n      {\n        test: /\\.jsx?$/,\n        include: [\n          path.resolve(__dirname, \"app\")\n        ],\n        exclude: [\n          path.resolve(__dirname, \"app/demo-files\")\n        ],\n        // 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n        // test 和 include 具有相同的作用，都是必须匹配选项\n        // exclude 是必不匹配选项（优先于 test 和 include）\n        // 最佳实践：\n        // - 只在 test 和 文件名匹配 中使用正则表达式\n        // - 在 include 和 exclude 中使用绝对路径数组\n        // - 尽量避免 exclude，更倾向于使用 include\n        issuer: { test, include, exclude },\n        // issuer 条件（导入源）\n        enforce: \"pre\",\n        enforce: \"post\",\n        // 标识应用这些规则，即使规则覆盖（高级选项）\n        loader: \"babel-loader\",\n        // 应该应用的 loader，它相对上下文解析\n        // 为了更清晰，`-loader` 后缀在 webpack 2 中不再是可选的\n        // 查看 webpack 1 升级指南。\n        options: {\n          presets: [\"es2015\"]\n        },\n        // loader 的可选项\n      },\n      {\n        test: /\\.html$/,\n        use: [\n          // 应用多个 loader 和选项\n          \"htmllint-loader\",\n          {\n            loader: \"html-loader\",\n            options: {\n              /* ... */\n            }\n          }\n        ]\n      },\n      { oneof: [ /* rules */ ] },\n      // 只使用这些嵌套规则之一\n      { rules: [ /* rules */ ] },\n      // 使用所有这些嵌套规则（合并可用条件）\n      { resource: { and: [ /* 条件 */ ] } },\n      // 仅当所有条件都匹配时才匹配\n      { resource: { or: [ /* 条件 */ ] } },\n      { resource: [ /* 条件 */ ] },\n      // 任意条件匹配时匹配（默认为数组）\n      { resource: { not: /* 条件 */ } }\n      // 条件不匹配时匹配\n    ],\n    /* 高级模块配置（点击展示） */\n  },\n  resolve: {\n    // 解析模块请求的选项\n    // （不适用于对 loader 解析）\n    modules: [\n      \"node_modules\",\n      path.resolve(__dirname, \"app\")\n    ],\n    // 用于查找模块的目录\n    extensions: [\".js\", \".json\", \".jsx\", \".css\"],\n    // 使用的扩展名\n    alias: {\n      // 模块别名列表\n      \"module\": \"new-module\",\n      // 起别名：\"module\" -> \"new-module\" 和 \"module/path/file\" -> \"new-module/path/file\"\n      \"only-module$\": \"new-module\",\n      // 起别名 \"only-module\" -> \"new-module\"，但不匹配 \"only-module/path/file\" -> \"new-module/path/file\"\n      \"module\": path.resolve(__dirname, \"app/third/module.js\"),\n      // 起别名 \"module\" -> \"./app/third/module.js\" 和 \"module/file\" 会导致错误\n      // 模块别名相对于当前上下文导入\n    },\n    /* 可供选择的别名语法（点击展示） */\n    /* 高级解析选项（点击展示） */\n  },\n  performance: {\n    hints: \"warning\", // 枚举\n    maxassetsize: 200000, // 整数类型（以字节为单位）\n    maxentrypointsize: 400000, // 整数类型（以字节为单位）\n    assetfilter: function(assetfilename) {\n      // 提供资源文件名的断言函数\n      return assetfilename.endswith('.css') || assetfilename.endswith('.js');\n    }\n  },\n  devtool: \"source-map\", // enum\n  // 通过在浏览器调试工具(browser devtools)中添加元信息(meta info)增强调试\n  // 牺牲了构建速度的 `source-map' 是最详细的。\n  context: __dirname, // string（绝对路径！）\n  // webpack 的主目录\n  // entry 和 module.rules.loader 选项\n  // 相对于此目录解析\n  target: \"web\", // 枚举\n  // bundle 应该运行的环境\n  // 更改 块加载行为(chunk loading behavior) 和 可用模块(available module)\n  externals: [\"react\", /^@angular\\//],\n  // 不要遵循/打包这些模块，而是在运行时从环境中请求他们\n  serve: { //object\n    port: 1337,\n    content: './dist',\n    // ...\n  },\n  // 构建日志配置\n  stats: \"errors-only\",\n  // 精确控制要显示的 bundle 信息\n  devserver: {\n    proxy: { // proxy urls to backend development server\n      '/api': 'http://localhost:3000'\n    },\n    contentbase: path.join(__dirname, 'public'), // boolean | string | array, static file location\n    compress: true, // enable gzip compression\n    historyapifallback: true, // true for index.html upon 404, object for multiple paths\n    hot: true, // hot module replacement. depends on hotmodulereplacementplugin\n    https: false, // true for self-signed, object for cert authority\n    noinfo: true, // only errors & warns on hot reload\n    // ...\n  },\n  plugins: [\n    // ...\n  ],\n  // 附加插件列表\n  /* 高级配置（点击展示） */\n  resolveloader: { /* 等同于 resolve */ }\n  // 独立解析选项的 loader\n  parallelism: 1, // number\n  // 限制并行处理模块的数量\n  profile: true, // boolean\n  // 捕获时机信息\n  bail: true, //boolean\n  // 在第一个错误出错时抛出，而不是无视错误。\n  cache: false, // boolean\n  // 禁用/启用缓存\n  watch: true, // boolean\n  // 启用观察\n  watchoptions: {\n    aggregatetimeout: 1000, // in ms\n    // 将多个更改聚合到单个重构建(rebuild)\n    poll: true,\n    poll: 500, // 间隔单位 ms\n    // 启用轮询观察模式\n    // 必须用在不通知更改的文件系统中\n    // 即 nfs shares（译者注：network filesystem，最大的功能就是可以透過網路，讓不同的機器、不同的作業系統、可以彼此分享個別的檔案 ( share file )）\n  },\n  node: {\n    // polyfills and mocks to run node.js-\n    // environment code in non-node environments.\n    console: false, // boolean | \"mock\"\n    global: true, // boolean | \"mock\"\n    process: true, // boolean\n    __filename: \"mock\", // boolean | \"mock\"\n    __dirname: \"mock\", // boolean | \"mock\"\n    buffer: true, // boolean | \"mock\"\n    setimmediate: true // boolean | \"mock\" | \"empty\"\n  },\n  recordspath: path.resolve(__dirname, \"build/records.json\"),\n  recordsinputpath: path.resolve(__dirname, \"build/records.json\"),\n  recordsoutputpath: path.resolve(__dirname, \"build/records.json\"),\n  // todo\n}\n\n\n\n# 7.2.1入口entry\n\n指示webpack应该使用哪个模块，来作为构建其内部依赖图(dependency graph) 的开始。\n\n * 单入口\n\nmodule.exports = {\n  entry: {\n    main: './path/to/my/entry/file.js'\n  }\n};\n// 单入口可以简写\nmodule.exports = {\n  entry: './path/to/my/entry/file.js'\n};\n\n\n * 多入口\n\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n};\n\n\n\n# 7.2.2输出output\n\n告诉webpack在哪里输出它所创建的bundle，以及如何命名这些文件。主要输出文件的默认值是./dist/main.js，其他生成文件默认放置在./dist文件夹中。注意即使可以存在多个entry起点，但只指定一个output配置。\n\n * 单入口输出\n\nconst path = require('path'); // node核心模块 path 用于用于处理文件路径\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 设置bundle输出路径\n    filename: 'my-first-webpack.bundle.js'// 设置bundle的名称\n  }\n};\n\n\n * 多入口输出\n\nconst path = require('path'); \nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js', // 占位符name为入口文件的名字 例如app、search\n    path:path.resolve(__dirname,'dist'),\n  }\n};\n// 输出：./dist/app.js, ./dist/search.js\n\n\n\n# 7.2.3加载器loader\n\nwebpack只能理解javascript和json文件。loader让webpack能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。\n\nnpm install --save-dev raw-loader\nnpm install --save-dev css-loader\n\n\nmodule.exports = {\n  entry: './src/app.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'), // 设置bundle输出路径\n    filename: 'my-first-webpack.bundle.js'// 设置bundle的名称\n  },\n  module: {\n    rules: [\n      // test属性用于表示那些文件需要转换  use表示需要用哪个loader\n      { test: /\\.txt$/, use: 'raw-loader' },\n      { test: /\\.css$/, use: 'css-loader' }\n    ] \n  }\n};\n\n\n常用的loader：\n\n> babel-loader:转换es6/es7等新js语法\n> css-loader:打包css\n> less-loader:less转换成css\n> ts-loader:ts转换成js\n> file-loader:图片和字体等打包\n> rea-loader:将文件以字符串的形式打包\n> thread-loader:多进程打包js和css\n\nwarning\n\n相互依赖的loader，要按依赖顺序书写，上至下，左至右。\n\n# 其他引用方式\n\n * 内联 使用!为整个规则添加前缀，可以覆盖配置中的所有loader定义。\n\nimport styles from 'style-loader!css-loader?modules!./styles.css';\n\n\n * cli\n\nwebpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'\n\n\n\n# 7.2.4插件plugins\n\nloader用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。\n\nconst htmlwebpackplugin = require('html-webpack-plugin'); // 通过npm安装\nconst webpack = require('webpack'); // 用于访问内置插件\n\nmodule.exports = {\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  },\n  plugins: [\n    new htmlwebpackplugin({template: './src/index.html'})\n  ]\n};\n\n\n常用的plugins：\n\n> commonschunkplugin:将chunks相同的模块代码提取成公共js\n> cleanwebpackplugin:清理构建目录\n> extracttextwebpackplugin:将css从bundle文件中独立出css文件\n> copywebapckplugin:将文件或者文件夹拷贝到输出目录\n> htmlwebpackplugin:创建html文件去承载输出bundle\n> ugligyjswebpackplugin:压缩js\n> zipwebpackplugin:将打包出的资源生成一个zip包\n> webpack-merge合并webpack.config配置文件\n\n\n# 7.2.5模式mode\n\n通过选择development,production或none之中的一个，来设置mode参数，你可以启用webpack内置在相应环境下的优化。其默认值为production。\n\n * webpack.cofig.js文件\n\nmodule.exports = {\n  mode: 'production'\n};\n\n\n * 也可以在package.json中设置\n\n \"scripts\": {\n    \"build\":\"webpack --mode=production\"\n  }\n\n\n\n# 7.2.6浏览器兼容性browser compatibility\n\nwebpack 支持所有符合 es5 标准 的浏览器（不支持 ie8 及以下版本）。webpack 的 import() 和 require.ensure() 需要 promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要提前加载polyfill。\n\n\n# 7.2.7文件监听watch及\n\n源代码发生变化是，自动重新构建打包。\n\n * webpack.cofig.js文件\n\nmodule.exports = {\n  watch: 'true'，\n  watchoptions:{\n    ignored:/node_modules/,// 忽略文件，支持正则\n    aggregatetimeout:300, // 监听到变化后的延时时间\n    poll:1000 //监听时间间隔\n  }\n\n};\n\n\n * 也可以在package.json中设置\n\n \"scripts\": {\n    \"build\":\"webpack --watch webpack-dev-server\"\n  }\n\n\n\n# 7.2.8 文件指纹\n\nhash：和整个项目的构建相关，主要项目有文件修改，整个项目构建的hash值就会更改。 chunkhash：和webpack打包的chunk有关，不同的entry会产生不同的chunkhash值 contenthash：根据文件内容来定义hash，文件内容不变，则contenthash不变\n\nconst path = require('path')\nconst minicssextractplugin = require('mini-css-extract-plugin')\nmodule.exports = {\n  output: {\n      path: path.resolve(__dirname, 'dist'), \n      filename: '[name]_[chunkhash8].bundle.js' // js文件建议使用chunkhash，:8表示8位hash\n  },\n  module: {\n    rules: [\n      {test: /\\.(png|svg|jpg|gif)$/,\n          use: [{\n                loader: 'file-loader',\n                options: \n                {name:'img/[name]_[hash:8].[ext]'} // 图片字体等建议使用hash\n              }\n          ]\n      }, \n      {\n        test: /\\.css|less$/,\n        // 单独打包css文件时候要使用minicssextractplugin.loader去替换style-loader\n        use: [minicssextractplugin.loader,'css-loader']  \n      }\n    ]\n  }，\n  plugins:[\n    // 通过mini-css-extract-plugin插件将css文件单独提取出来\n    new minicssextractplugin({ \n      filename:`[name]_[contenthash:8].css` //css文件建议使用contenthash\n    })\n  ],\n}\n\n\n\n# 7.2.9 摇树优化tree shaking\n\n概念：一个模块的多个方法，只要有一个被使用了，整个模块就会被打包。tree shaking就是只打包用到的，没用到的，在uglify阶段去除掉。 使用：webpack默认支持，只需要在.babelrc里设置modules:false即可。 要求：必须是es6的语法，cjs的方法不支持。\n\n>  1. 去除无用的css文件：purgecss-webpack-plugin\n\n\n# 7.4.10 scopehoisting\n\n概念：将所有模块的代码根据引用的顺序，适当重命名后放在一个函数作用域里，以减少函数声明代码和内存的开销。 使用：mode为production时默认开启。 要求：必须是es6的语法，cjs的方法不支持。\n\n\n# 7.4.11 代码分割\n\n概念：将代码分割，当相应的代码运行时再进行代码加载。 使用：\n\n> cjs:require.ensure es6:动态import（es2020、需要babel转译）\n> \n> > babel转译:\n> > \n> > > 安装：npm i @babel/plugin-syntax-dynamic-import --save-dev 使用：\n> > > \n> > > > .babelrc js { \"plugins\":[\"@babel/plugin-syntax-dynamic-import\"] }\n\n\n# 7.4.12 构建日志、构建异常和中断处理\n\nstats参数：\n\n> errors-only:只在发生错误时输出 minimal:只在发生错误或有新的编译时输出。 none:没有输出 normal:标准输出 verbose:全部输出\n\nmodule.exports = {\n    stats:'errors-only' // 构建日志配置\n}\n\n\n查看构建错误码：\n\n> 0表示成功,非0失败\n> \n> echo $?\n\ntip\n\nfriendly-errors-webpack-plugin构建日志优化工具\n\n\n# 7.3常用lader指南\n\n\n# 7.3.1打包es6：\n\n插件：npm i babel-loader @babel/core @babel/preset-env -d 配置：\nwebpack.cofig.js文件：\n\nconst path = require('path')\nmodule.exports = {\n    entry: {\n        app: './src/index.js',\n      },\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:'[name].js'\n    },\n    mode:'production',\n    module: {\n      rules: [\n        { test: /\\.js$/, use: 'babel-loader' }\n      ] \n  }\n}\n\n\n.babelrc：文件\n\n{\n  \"presets\":[\n    \"@babel/preser-env\"，\n     \"@vue/app\"\n  ],\n  \"plugins\":[\n    \"@babel/proposal-class-properties\"\n  ]\n}\n\n\n\n# 7.3.2打包css：\n\n插件：npm i style-loader，css-loader -d\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[{\n  test: /\\.css$/,//正则表达式以css为结尾\n  use: ['style-loader','css-loader']  //按顺序从右往左\n }]\n}\n\n\n\n# 7.3.3打包less：\n\n插件：npm i style-loader css-loader less less-loader -d\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[\n  {\n  test: /\\.less$/,\n  use: ['style-loader','css-loader','less-loader']  //按顺序从右往左\n }]\n}\n\n\n\n# 7.3.3打包图片/字体：\n\n * 通过file-loader打包 插件：npm i file-loader -d\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[\n  {test: /\\.(png|svg|jpg|gif)$/,use:'file-loader'}, //打包图片\n  {test: /\\.(ttf|woff|woff2|otf|eot)$/,use:'file-loader'} //打包字体\n  ]\n}\n\n\n * 通过url-loader转成base64，用于打包较小的资源， 插件：npm i url-loader -d\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n    rules: [\n        {\n            test: /\\.(png|svg|jpg|gif)$/,\n            use: [\n                {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 1024\n                    }\n                }\n            ]\n        }, //打包图片\n        {\n            test: /\\.(ttf|woff|woff2|otf|eot)$/, use: [\n                {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 1024\n                    }\n                }\n            ]\n        } //打包字体\n    ]\n}\n\n\n哈希文件名的好处\n\n * 如果发布新版本，发现用户正在浏览老网页，需要刷新一次才能看见新版本。发布新版时会把老目录删除，然后覆盖新文件。\n * 增量覆盖：保留原来的文件，避免旧文件被覆盖无法访问。\n\n\n# 7.3.4自动补齐浏览器前缀：\n\n插件：npm i postcss-loader autoprefixer -d 配置：\n\nwebpack.cofig.js文件：\n\nmodule: {\n rules:[\n  {\n  test: /\\.css$/,\n  use: ['style-loader',{\n    loader:'postcss-loader',\n    options:{\n      plugins:()=>[\n        require('autoprefixer')({\n          browsers:['last 2 version', '>1%','ios 7'] // 兼容最近的2个版本，兼容使用率大于2%，兼容 ios7 的版本\n        })\n      ]\n    }\n  }]\n }]\n}\n\n\n\n# 7.3.5rem转换px2rem-loader、lib-flexible库：\n\n插件：npm i px2rem-loader -d/npm i lib-flexible -s\n\n配置：\nwebpack.cofig.js\n\nmodule: {\n rules:[\n  {\n  test: /\\.css$/,\n  use: ['style-loader','css-loader',{\n    loader:'px2rem-loader',\n    options:{\n      remunit:75,  // 转换系数，1rem = 75px\n      remprecesion:8 // 转换时的精准度，小数点后8位\n    }\n  }]\n }]\n}\n\n\nmain.js\n\nimport 'lib-flexible'\n\n\nviewprot设置\n\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=0,minimum-scale=1.0,maximum=scale=1.0\">\n\n\ntip\n\nlib-flexible库制度根据设备计算font-size\n\n\n# 7.3.6资源的内联raw-loader\n\n插件：npm i raw-loader@0.5.1 -d 优点：减少http请求，避免页面闪动。\n\n * html内联：\n\n<head>${require('raw-loader!babel-loader!./meta.html')}</head>\n\n\n * js内联：\n\n<script>${require('raw-loader!babel-loader!../node_modules/lib-flexible')}<\/script>\n\n\n * css内联：\n\n 1. 通过style-loader\n 2. html-inline-css-webpack-plugin\n\n\n# 7.3.7eslint规范eslint-loader\n\n插件：npm i eslint-loader babel-eslint --save-dev 配置：\nwebpack.cofig.js文件：\n\nmodule.exports = {\n    module: {\n      rules: [\n        { test: /\\.js$/, use: ['babel-loader','eslint-loader']}\n      ] \n  }\n}\n\n\n.eslintrc.js：文件\n\nmodule.exports = {\n   \"parser\": \"babel-eslint\"\n    \"extends\": [ // 继承基础配置规则\n        'plugin:vue/essential',\n    ],\n    \"env\":{  // 配置环境变量\n      \"browser\":true,\n      \"node\":true,\n    }\n    \"rules\": { // 配置规则\n      \"indent\":[\"error\",4] //配置缩进规则为4个空格\n    },\n}\n\n\n * 进行eslint检查： 在package.json中设置\n\n \"scripts\": {\n    \"eslint\":\"eslint --fix\"\n  }\n\n\n\n# 7.3.8ssr打包\n\nwebpack.ssr.js\n\nif(typeof window === 'undefined'){\n    global.window = {}\n}\nconst path = require('path')\nconst terserplugin = require(\"terser-webpack-plugin\");\nmodule.exports = {\n    entry: {\n        app: './src/index.js',\n      },\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:'[name]-server.js',\n        librarytarget: \"umd\", // 打包出的库类型\n    },\n    mode:'production',\n    module: {\n      rules: [\n        { test: /\\.js$/, use: 'babel-loader' }\n      ] \n  }\n}\n\n\n在package.json中设置\n\n \"scripts\": {\n    \"build:ssr\":\"webpack --config webpack.ssr.js\"\n  }\n\n\n打包ssr存在的问题：\n\nnode.js中没有document,window fetch或ajax请求要改写成isomorphic-fetch或axios style-loader替换成isomorphic-style-loader或直接忽略css的解析\n\n\n# 打包vue：\n\n插件：vuevue-loadervue-template-compiler\n\n配置：\n\nindex.js文件:\n\nimport vue from \"vue\";\n\nimport app from \"./app.vue\";\n\nnew vue({\n\nel:\"#app\",\n\nrender:c=>c(app)\n\n});\n\n\n\napp.vue文件:\n\n\n<template>\n\n<div>\n\n我是app组件\n\n</div>\n\n</template>\n\n<script>\n\nexport default {\n\ndata(){\n\nreturn {\n\n}\n\n}\n\n}\n\n<\/script>\n\n<style>\n</style>\n\n\nwebpack.config.js文件:\n\nconst vueloaderplugin = require(\"vue-loader/lib/plugin\");\n\nplugins:[new vueloaderplugin()]\n\n\n\n# 7.3.6自定义插件\n\n# 引用方法一：\n\nwebpack.cofig.js文件：\n\nmodule: {\n\nrules:[{\n\ntest: /\\.js$/,\n\nuse:[path.resolve('./src/loader/myloader')],}\n\n}]\n\n\n# 引用方法二：\n\n将自定义插件的文件放入node_modules文件中\n\nwebpack.cofig.js文件：\n\nmodule: {\n\nrules:[{\n\ntest: /\\.js$/,\n\nuse:['myloader']\n\n}]}\n\n\n# 引用方法三：\n\nwebpack.cofig.js文件：\n\nresolveloader:{\n  modules:[path.resolve(\"./src/loader\"),path.resolve(\"./node_modules\")],\n}\n\nmodule: {\n  rules:[{\n    test: /\\.js$/,\n    use:['myloader']\n  }]\n}\n\n\n\n# 7.3.7常用插件\n\n\n# 7.4常用plugins指南\n\n\n# 7.4.1 热更新webpack-dev-server\n\n插件：npm i webpack-dev-server -g\n\n * webpack.cofig.js文件\n\n  plugins: [\n      new webpack.hotmodulereplacementplugin()\n  ],\n  devserver:{\n    contentbase:'./dist',\n    hot:true\n  }\n\n\n在package.json中设置\n\n \"scripts\": {\n    \"dev\":\"webpack-dev-server --open\"\n  }\n\n\n * 远程热更新webpack-dev-middleware\n\n\n# 7.4.2 html文件的编译、压缩html-webpack-plugin\n\n插件：npm i html-webpack-plugin --save-dev 作用：根据配置的html产生一个引入打包后文件的html 配置：\n\nwebpack.cofig.js文件：\n\nconst htmlwebpackplugin = require(\"html-webpack-plugin\");//引入插件\nplugins: [\n\tnew htmlwebpackplugin({\n\t\ttemplate: \"./src/index.html\", //模板\n\t\tfilename: \"index.html\", // 打包出来的文件名\n\t\tinject: 'body', // 路径放置位置 head/body \n\t\ttitle: 'this is index', //打包后的htmltitle\n\t\tminify: {  //html设置压缩参数\n      html5:true,\n      collapsewhitespace: true,\n\t\t\tpreservelinebreaks:false,\n      minifycss:true,\n      minifyjs:true,\n      removecomments: true,\n\t\t},\n\t\tchunks: ['index'],// 指定chunks\n\t\texcludechunks: [],//排除chunks\n\t}),\n]\n\n\nindex.html文件：\n\n<%= htmlwebpackplugin.options.title%> //获取htmlwebpackplugin下的title的数据 \n<script src=\"<%= htmlwebpackplugin.files.chunks.index.entry%>\"><\/script>\n\n\n\n# 7.4.3 多页面打包html-webpack-plugin、glob\n\n一个页面对应一个entry、一个html-webpacl-plugin 优势：利于seo。缺点：每次新增或删除页面都需要配置webpack,利用glob-sync可以解决这个问题。 npm i glob -d\n\n'use strict'\nconst path = require('path')\nconst glob = require('glob')\nconst htmlwebpackplugin = require('html-webpack-plugin');\nconst setmpa = () => {\n  const entry = {};\n  const htmlwebpackplugins = []\n  const entryfiles = glob.sync(path.join(__dirname, './src/*/index.js'))\n  object.keys(entryfiles).map((index) => {\n    const entryfile = entryfiles[index];\n    const match = entryfile.match(/src\\/(.*)\\/index\\.js/);\n    const pagename = match && match[1];\n    entry[pagename] = entryfile;\n    console.log(pagename,1111,entryfile)\n    htmlwebpackplugins.push(\n      new htmlwebpackplugin({\n        template: path.join(__dirname,`src/${pagename}/index.html`), //模板\n        filename: `${pagename}.html`, // 打包出来的文件名\n        inject: 'body', // 路径放置位置 head/body \n        minify: {  //html设置压缩参数\n        chunks: [pagename],// 指定chunks\n          html5: true, \n          collapsewhitespace: true,\n          preservelinebreaks: false,\n          minifycss: true,\n          minifyjs: true,\n          removecomments: true,\n        },\n      }),\n    );\n  })\n  return {\n    entry,\n    htmlwebpackplugins\n  }\n}\nconst {entry,htmlwebpackplugins} = setmpa(); \nmodule.exports = {\n  entry:entry,\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name]_[hash:8].js'\n  },\n  mode: 'production',\n  plugins: [].concat(htmlwebpackplugins)\n}\n\n\n\n# 7.4.4 js文件压缩terser-webpack-plugin\n\nuglifyjs-webpack-plugin:webpack4.x已内置，不支持es6语法,不建议新项目使用。 terser-webpack-plugin5.x已内置,4.x需要单独安装。 插件：npm i terser-webpack-plugin --save-dev\n\nconst terserplugin = require(\"terser-webpack-plugin\");\nmodule.exports = {\n  optimization: {\n    minimize: true,\n    minimizer: [\n       new terserplugin({    \n        test: /\\.js(\\?.*)?$/i, // 通过正则匹配要压缩的文件\n        include: /\\/includes/, // 指定要压缩的文件\n         exclude: /\\/excludes/, // 排除文件\n      }),\n    ],\n  },\n};\n\n\n\n# 7.4.5 css文件压缩optimize-css-assets-webpack-plugin/cssnano\n\n插件：npm i optimize-css-assets-webpack-plugin --save-dev/npm i cssnano --save-dev\n\nconst htmlwebpackplugin = require(\"optimize-css-assets-webpack-plugin\");\nconst htmlwebpackplugin = require(\"cssnano\");\nmodule.exports={\n\tentry:{\n\t\tapp:'./src/app.js',\n\t\tsearch:'./src/search.js'\n\t},\n\toutput:{\n\t\tfilename:'[name][chunkhash:8].js',\n\t\tpath:__dirname+'./dist'\n\t},\n\tplugins:[\n\t\tnew optimizecssassetsplugin({\n\t\t\tassetnameregexp:/\\.css$/g,\n\t\t\tcssprocessor:require('cssnano')\n\t\t})\n\t]\n}\n\n\n\n# 7.4.6 自动清理构建目录clean-webpack-plugin\n\n插件：npm i clean-webpack-plugin -d\n\nconst htmlwebpackplugin = require(\"clean-webpack-plugin\");\nmodule.exports={\n\tentry:{\n\t\tapp:'./src/app.js',\n\t\tsearch:'./src/search.js'\n\t},\n\toutput:{\n\t\tfilename:'[name][chunkhash:8].js',\n\t\tpath:__dirname+'./dist'\n\t},\n\tplugins:[\n\t\tnew cleanwebpackplugin()\n\t]\n}\n\n\n也可以使用rimraf插件清理构建目录\n\n\n# 7.4.7 source map\n\n作用：通过source map定位到源代码。 source map关键字：\n\n> eval：使用eval包裹模块代码。 source map产生.map文件 cheap不包含代码的所在列信息 inline将.map做为datauri嵌入，不单独生成.map文件 module包含loader的sourcemap source map类型：\n\nconst htmlwebpackplugin = require('html-webpack-plugin'); // 通过npm安装\nconst webpack = require('webpack'); // 用于访问内置插件\n\nmodule.exports = {\n  entry: {\n      app: './src/index.js',\n  },\n  output:{\n      path:path.resolve(__dirname,'dist'),\n      filename:'[name].js'\n  },\n  mode:'production',\n  module: {\n    rules: [\n      { test: /\\.js$/, use: 'babel-loader' }\n    ] \n  },\n  devtool:'eval' // eval\\source-map\\inline-source-map\\cheap-source-map\n};\n\n\nwarning\n\n线上环境排查问题时可以开启，否则要关闭source map，否则会暴露源代码。\n\n\n# 7.4.8 基础库的分离html-webpack-externals-plugin/splitchunksplugin\n\n * html-webpack-externals-plugin 插件：npm i html-webpack-externals-plugin -d\n\nconst htmlwebpackexternalsplugin = require('html-webpack-externals-plugin')\nmodule.exports={\n\tplugins:[\n\t\tnew htmlwebpackexternalsplugin({\n      externals:[\n        {\n          module:'react',\n          entry:'dist/jquery.min.js', //可以是本地也可以是cdn文件\n          global:'react',\n        },\n        {\n          module:'react-dom',\n          entry:'dist/jquery.min.js',//可以是本地也可以是cdn文件\n          global:'reactdom',\n        }\n      ]\n    })\n\t]\n}\n\n\n * splitchunksplugin\n\nmodule.exports={\noptimization: {\n    splitchunks: {\n      chunks: 'async', //三选一：\"initial\" 初始化，\"all\"(默认就是all)，\"async\"（动态加载） \n      minsize: 30000,  // 形成一个新代码块最小的体积,只有 >= minsize 的bundle会被拆分出来\n      maxsize: 0, //拆分之前最大的数值，默认为0，即不做限制\n      minchunks: 1, //引入次数，如果为2 那么一个资源最少被引用两次才可以被拆分出来\n      maxasyncrequests: 5,// 按需加载的最大并行请求数\n      maxinitialrequests: 3, // 一个入口最大并行请求数\n      automaticnamedelimiter: '~', // 文件名的连接符\n      name: true,\n      cachegroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        },\n        default: {\n          minchunks: 2,\n          priority: -20,\n          reuseexistingchunk: true\n        }\n      }\n    }\n  }\n}\n\n\n\n# 7.5进阶用法\n\n\n# 7.5.1构建配置抽离成npm包\n\n意义：统一构建脚本，开发者无需在关注构建配置。合理的抽离拆分，编辑维护管理。 通过多个配置文件管理不同环境的配置文件。\n\n> webpack.base.js:基础包 webpack.dev.js开发环境包 webpack.prod.js生成环境包 webpack.ssr.jsssr环境包 合并配置包webpack-merge\n\nconst merge = require('webpack-merge');\nconst baseconfig = require('./webpack.base');.\nconst prodconfig = require('./webpack.prod');\nmodule.exports = merge(baseconfig,prodconfig)\n\n\n\n# 7.5.2构建测试\n\n * 冒烟测试 指提交测试之前开发人员进行的预测试。主要排查基本功能是否可用。\n\n> 构建是否成功。 构建目录是否有js、css、html等文件输出。 单元测试工具：mocha+chai\n\n 1. 安装:npm i mocha chai -d\n 2. 创建test目录，增加test.js测试文件\n 3. 在package.json中设置\n\n \"scripts\": {\n    \"test\":\"node_modules/mocha/bin/_mocha\"\n  }\n\n\n 4. 执行测试npm run test\n\n * 持续集成 代码在合并主干之前，根据测试用例进行自动化测试，主要有一个测试用例失败，就不能集成。 优点：快速发现错误，防止分支大幅偏离主干。 持续集成工具：travis ci\n\n 1. https://travis-ci.org/ 使用github账号登陆\n 2. 在github创建项目、将项目同步到travis-ci。\n 3. 项目的根目录下创建.travis.yml,内容如下：\n\nlanguage:node_js  // 语音\nsudo:false  // 管理员权限\ncache:\n  app:true // 是否需要缓存\n  directories:\n    -node_modules\n\nnode_js:stable  // node版本\n\ninstall:\n  - npm install -d // 安装构建依赖\n  - cd /test/template-project\n  - npm install -d  // 安装模板项目依赖\nscript:\n - npm test\n\n\n 4. 提交代码，travis-ci会自动根据测试用例进行测试。\n\n\n# 7.5.3构建优化\n\n * 构建统计stats（颗粒度比较粗，不容易看出问题） 在package.json中使用stats\n\n \"scripts\": {\n    \"build:stats\":\"webpack--env production --json > stats.json\"\n  }\n\n\n * 构建速度分析speed-measure-webpack-plugin npm i speed-measure-webpack-plugin\n\nconst speedmeasurewebpackplugin = require('speed-measure-webpack-plugin');\nconst smp = new speedmeasurewebpackplugin();\nmodule.exports= smp.wrap({\n\tentry:{\n\t\tapp:'./src/app.js',\n\t\tsearch:'./src/search.js'\n\t},\n\toutput:{\n\t\tfilename:'[name][chunkhash:8].js',\n\t\tpath:__dirname+'./dist'\n\t},\n})\n\n\n * 构建体积分析webpack-bundle-analyzer npm i webpack-bundle-analyzer -d\n\nconst {bundleanalyzerplugin} = require('webpack-bundle-analyzer');\nconst smp = new speedmeasurewebpackplugin();\nmodule.exports={\n\t\tplugins:[\n\t\tnew bundleanalyzerplugin()\n\t]\n}\n\n\n * 速度优化\n\n 1. 使用高版本的webpack和node.js\n 2. 多进程多实例构建thread-loader(webpack 4.x内置)/paraller-webpack/happypack（不维护了）\n\n> thread-loader:\n> \n> module.exports = {\n>     module: {\n>       rules: [\n>         { test: /\\.js$/, use: 'thread-loader' }\n>       ] \n>   }\n> }\n\n 3. 多进程多实例并行压缩parallel-uglify-plugin/uglifyjs-webpack-plugin(不支持压缩es6语法)/terser-webpack-plugin(webpack 4.x内置)\n\n> terser-webpack-plugin:详见7.8.4\n\n 4. 分包html-webpack-externals-plugin（对业务包不友善）/dllplugin预编译资源模块（将基础包和业务包打包成一个文件）\n\n> html-webpack-externals-plugin:详见[7.4.8](/frontend/webpack/#_7-4-8-基础库的分离html-webpack-externals-plugin-splitchunksplugin dllplugin: webpack.config.dll.js文件：\n> \n> const webpack = require('webpack')\n> module.exports = {\n>   entry:{\n>     library:[\n>       'react',\n>       `react-dom`\n>     ]\n>   },\n>   output:{\n>     filename:'[name]-[chunkhash].dll.js',\n>     path:path.join(__dirname,'build/library'),\n>     library:'[name]'\n>   }\n>   plugins:[\n>     new webpack.dllplugin({\n>       name:'[name]_[hash]',\n>        path:path.join(__dirname,'build/library/[name].json'),\n>     })\n>   ]\n> }\n> \n> \n> webpack.config.js文件：\n> \n> module.exports = {\n>   plugins:[\n>     new webpack.dllreferenceplugin({\n>        manifest:require('./build/library/library.json'),\n>     })\n>   ]\n> }\n\n 5. 缓存：提升二次构建速度babel-loader/terser-webpack-plugin/cache-loader或hard-source-webpack-plugin\n\n> babel-loader:\n> \n> module.exports = {\n>     module: {\n>       rules: [\n>         { test: /\\.js$/, use: 'babel-loader?cachedirectory=true' }\n>       ] \n>   }\n> }\n> \n> \n> terser-webpack-plugin:\n> \n> module.exports = {\n>  optimization: {\n>    minimize: true,\n>    minimizer: [\n>       new terserplugin({    \n>        test: /\\.js(\\?.*)?$/i, // 通过正则匹配要压缩的文件\n>        include: /\\/includes/, // 指定要压缩的文件\n>        exclude: /\\/excludes/, // 排除文件\n>        paraller:true, // 开启多进程多实例并行压缩\n>        cache:true // 开启缓存\n>      }),\n>    ],\n>  },\n> };\n> \n> \n> 缓存文件存放在node_modules/.cache\n\n 6. 缩小构建目标\n\n> 利用alias优化路径，减少文件查找。\n\n * 体积优化\n\n 1. 图片压缩基于node库的imagemin或tinypng api\n\n> imagemin优点：定制配置丰富，可以引入第三方插件（例如：pngquant），可以处理多种格式。\n> \n> rules: [{\n>   test: /\\.(gif|png|jpe?g|svg)$/i,\n>   use: [\n>     'file-loader',\n>     {\n>       loader: 'image-webpack-loader',\n>       options: {\n>         mozjpeg: { //jpeg格式\n>           progressive: true,\n>         },\n>         optipng: { //png格式\n>           enabled: false,\n>         },\n>         pngquant: {  //png格式\n>           quality: [0.65, 0.90],\n>           speed: 4\n>         },\n>         gifsicle: {  //gif格式\n>           interlaced: false,\n>         },\n>         webp: {  //webp格式\n>           quality: 75\n>         }\n>       }\n>     },\n>   ],\n> }]\n\n 2. 摇树优化tree shaking详见7.2.9\n 3. 动态polyfill服务\n\n> polyfill服务原理：识别浏览器user agent下发不同的polyfill。polyfill在线识别服务\n\n 4. scopehoisting7.4.10",charsets:{cjk:!0}},{frontmatter:{},regularPath:"/other/git/",relativePath:"other/git/README.md",key:"v-deccdda8",path:"/other/git/",headersStr:null,content:' * 查看配置信息：git config --list\n\n * 设置用户名：git config --global user.name ""\n\n * 设置邮箱：git config --global user.email ""\n\n * 工作区：电脑里能看到的目录（add之前的，不包括add ）\n\n * 暂存区：已经add，且未commit\n\n * 本地快照：已经commit\n\n * init初始化仓库\n\n   git init\n\n\n * clone从当前地址的master分支克隆的到本地\n\n    git clone https://gitHub.com/ master\n\n\n * remote设置远程仓库地址\n\n    git remote -v  // 查看全部远程仓库\n    git remote add origin https://gitHub.com/ master // 增加远程仓库origin并设置其远程地址\n    git remote set-url origin https://gitHub.com/  // 修改远程仓库origin的地址\n    git remote rm origin  // 删除origin仓库   \n\n\n * status查看工作区、暂存区、本地仓库的状态\n\n    git status\n\n\n * add添加的暂存区\n\n    git add .  // 添加所有modified（修改）、new（新增）的文件，不包括delete（删除）的文件\n    git add -u // 添加所有modified（修改）、delete（删除）的文件，不包括new（新增）的文件\n    git add -A  // 添加当前文件夹下的所有modified（修改）、new（新增），delete（删除）的文件\n    git add -f dist // 添加dist文件到暂存区\n\n\n * rm将文件从暂存区和工作区中删除\n\n    git rm runoob.txt   // 从暂存区和工作区中删除 runoob.txt 文件\n    git rm -f runoob.txt  // 强制删除以追踪的暂存区和工作区中的runoob.txt 文件\n    git rm --cached runoob.txt  // 从追踪清单和的暂存区中删除，仍保留在工作区\n    git rm –r *  // 从暂存区和工作区中递归删除该目录下全部文件\n\n\n * mv移动或重命名一个文件、目录或软连接\n\n    git mv  README  README.md  // 改名README ->README.md\n\n\n\n * diff比较暂存区和工作区的差异\n\n    git diff \n\n\n * commit提交说明\n\n    git commit -m"拉取提交的情况说明"\n    git commit -am"拉取提交的情况说明" // 相当于 add . + commit\n\n\n修改刚刚设置的commit\n\n    git commit --amend\n\n\n * fetch拉取分支\n\n    git fetch //拉取远程所以分支的最新代码\n    git fetch https://gitHub.com/ master //拉取当前地址的master分支到本地\n    git fetch origin master //拉取origin仓库master分支到本地\n\n\n * merge合并分支\n\n    git merge dev //合并本地dev分支，并创建新的提交commit\n    git merge origin/dev //合并远程origin仓库的dev分支，并创建新的提交commit\n    git merge --abort   //取消本次合并\n\n\n * rebase 合并分支 git rebase master //将本地分支的提交commit 合并到master后面 git rebase –abort //取消本次合并\n\nWARNING\n\n不要在公共分支使用rebase,因为往后放的这些commit都是新的,这样其他从这个公共分支拉出去的人，都需要再rebase,相当于你rebase东西进来，就都是新的commit了\n\n * pull更新分支\n\n    git pull //拉取当前分支并与当前分支合并\n    git pull origin dev //拉取远程dev分支，并与当前分支合并\n    git push origin --delete dev //直接删除远程dev分支，谨慎使用！\n\n\nTIP\n\n`git pull` = `git fetch `+ `git merge`\n\n\n * push提交分支\n\n    git pull origin dev //提交到远程dev分支的代码\n\n\n * checkout切换分支\n\n    git -b checkout dev //在本地创建dev分支，并切换到dev分支，提交后远程才会生效\n    git checkout dev //切换到dev分支\n\n\nWARNING\n\n如果远程有新增分支，在切换分支之前,需要先fetch拉去一下全部分支\n\n * branch查看分支\n\n    git branch //查看本地全部分支，*为当前分支\n    git branch -r //查看远程全部分支，*为当前分支\n    git branch -a //查看全部分支，*为当前分支\n    git branch dev //在本地创建dev分支，提交后远程才会生效。注意与checkout -b的区别\n    git branch -d dev //删除本地分支\n    git branch -d -r dev //删除远程分支，删除后还需推送到服务器\n    git push origin:dev  //删除后推送至服务器\n    git branch -m <oldname> <newname> //重命名本地分支，如果oldname已存在于远程分支，那么会新建一个newname兵提交，且不会影响oldname分支\n\n\nWARNING\n\n 1. 如果远程有新增分支，在查看远程分支之前,需要先fetch拉去一下全部分支\n\n * log查看提交记录\n\n    git log \n\n\n * blame查看指定文件修改记录\n\n    git blame \n\n\n * reflog查看操作记录\n\n    git reflog \n\n\n * reset撤销本地提交\n\n    git reset --hard <commit_id> //撤销到指定的commit版本\n    git reset --hard HEAD^  //撤销，并切换到最新的一次提交\n    git reset HEAD^  // 保留当前代码，撤销到git add 之前\n    git push origin HEAD --force //\n    git reset HEAD <filename> //撤销当前文件的提交\n$ \n\n\n * revert回滚远程代码\n\n    git revert <commit_id> //保留当前版本，创建一个新的commit并回滚到指定的commit版本，需要填写commit\n\n\n * .gitignore\n\n> # 常用的规则\n> \n> > mtk 忽略当前目录下整个mtk文件夹\n> > *.zip 忽略所有.zip格式的文件\n> > mtk/doc 忽略当前目录下mtk文件里的doc文件\n> \n> # 配置语法：\n> \n> > 以斜杠/开头表示目录；\n> > 以星号*通配多个字符；\n> > 以问号?通配单个字符\n> > 以方括号[]包含单个字符的匹配列表；\n> > 以叹号!表示不忽略(跟踪)匹配到的文件或目录；\n\nTIP\n\ncd切换目录\n\npwd显示当前工作目录\n\nls显示当前目录所以文件\n\nls-a显示所有文件包括隐藏的\n\nmkdir创建目录（文件夹）\n\n↑查看上一条cmd命令\n\n↓查看下一条cmd命令\n\ntab字段补全命令\n\n-ddelete：删除\n\n-Ddelete+force强制\n\n-fforce：强制\n\n-mmove：移动或重命名\n\n-Mmove+force的快捷键\n\n-rremote：远程\n\n-aall全部\n\n!强制\n\nq退出\n\nw保存\n\nwq保存并退出\n\nwq!强制保存并退出.\n\nGit在线演示',normalizedContent:' * 查看配置信息：git config --list\n\n * 设置用户名：git config --global user.name ""\n\n * 设置邮箱：git config --global user.email ""\n\n * 工作区：电脑里能看到的目录（add之前的，不包括add ）\n\n * 暂存区：已经add，且未commit\n\n * 本地快照：已经commit\n\n * init初始化仓库\n\n   git init\n\n\n * clone从当前地址的master分支克隆的到本地\n\n    git clone https://github.com/ master\n\n\n * remote设置远程仓库地址\n\n    git remote -v  // 查看全部远程仓库\n    git remote add origin https://github.com/ master // 增加远程仓库origin并设置其远程地址\n    git remote set-url origin https://github.com/  // 修改远程仓库origin的地址\n    git remote rm origin  // 删除origin仓库   \n\n\n * status查看工作区、暂存区、本地仓库的状态\n\n    git status\n\n\n * add添加的暂存区\n\n    git add .  // 添加所有modified（修改）、new（新增）的文件，不包括delete（删除）的文件\n    git add -u // 添加所有modified（修改）、delete（删除）的文件，不包括new（新增）的文件\n    git add -a  // 添加当前文件夹下的所有modified（修改）、new（新增），delete（删除）的文件\n    git add -f dist // 添加dist文件到暂存区\n\n\n * rm将文件从暂存区和工作区中删除\n\n    git rm runoob.txt   // 从暂存区和工作区中删除 runoob.txt 文件\n    git rm -f runoob.txt  // 强制删除以追踪的暂存区和工作区中的runoob.txt 文件\n    git rm --cached runoob.txt  // 从追踪清单和的暂存区中删除，仍保留在工作区\n    git rm –r *  // 从暂存区和工作区中递归删除该目录下全部文件\n\n\n * mv移动或重命名一个文件、目录或软连接\n\n    git mv  readme  readme.md  // 改名readme ->readme.md\n\n\n\n * diff比较暂存区和工作区的差异\n\n    git diff \n\n\n * commit提交说明\n\n    git commit -m"拉取提交的情况说明"\n    git commit -am"拉取提交的情况说明" // 相当于 add . + commit\n\n\n修改刚刚设置的commit\n\n    git commit --amend\n\n\n * fetch拉取分支\n\n    git fetch //拉取远程所以分支的最新代码\n    git fetch https://github.com/ master //拉取当前地址的master分支到本地\n    git fetch origin master //拉取origin仓库master分支到本地\n\n\n * merge合并分支\n\n    git merge dev //合并本地dev分支，并创建新的提交commit\n    git merge origin/dev //合并远程origin仓库的dev分支，并创建新的提交commit\n    git merge --abort   //取消本次合并\n\n\n * rebase 合并分支 git rebase master //将本地分支的提交commit 合并到master后面 git rebase –abort //取消本次合并\n\nwarning\n\n不要在公共分支使用rebase,因为往后放的这些commit都是新的,这样其他从这个公共分支拉出去的人，都需要再rebase,相当于你rebase东西进来，就都是新的commit了\n\n * pull更新分支\n\n    git pull //拉取当前分支并与当前分支合并\n    git pull origin dev //拉取远程dev分支，并与当前分支合并\n    git push origin --delete dev //直接删除远程dev分支，谨慎使用！\n\n\ntip\n\n`git pull` = `git fetch `+ `git merge`\n\n\n * push提交分支\n\n    git pull origin dev //提交到远程dev分支的代码\n\n\n * checkout切换分支\n\n    git -b checkout dev //在本地创建dev分支，并切换到dev分支，提交后远程才会生效\n    git checkout dev //切换到dev分支\n\n\nwarning\n\n如果远程有新增分支，在切换分支之前,需要先fetch拉去一下全部分支\n\n * branch查看分支\n\n    git branch //查看本地全部分支，*为当前分支\n    git branch -r //查看远程全部分支，*为当前分支\n    git branch -a //查看全部分支，*为当前分支\n    git branch dev //在本地创建dev分支，提交后远程才会生效。注意与checkout -b的区别\n    git branch -d dev //删除本地分支\n    git branch -d -r dev //删除远程分支，删除后还需推送到服务器\n    git push origin:dev  //删除后推送至服务器\n    git branch -m <oldname> <newname> //重命名本地分支，如果oldname已存在于远程分支，那么会新建一个newname兵提交，且不会影响oldname分支\n\n\nwarning\n\n 1. 如果远程有新增分支，在查看远程分支之前,需要先fetch拉去一下全部分支\n\n * log查看提交记录\n\n    git log \n\n\n * blame查看指定文件修改记录\n\n    git blame \n\n\n * reflog查看操作记录\n\n    git reflog \n\n\n * reset撤销本地提交\n\n    git reset --hard <commit_id> //撤销到指定的commit版本\n    git reset --hard head^  //撤销，并切换到最新的一次提交\n    git reset head^  // 保留当前代码，撤销到git add 之前\n    git push origin head --force //\n    git reset head <filename> //撤销当前文件的提交\n$ \n\n\n * revert回滚远程代码\n\n    git revert <commit_id> //保留当前版本，创建一个新的commit并回滚到指定的commit版本，需要填写commit\n\n\n * .gitignore\n\n> # 常用的规则\n> \n> > mtk 忽略当前目录下整个mtk文件夹\n> > *.zip 忽略所有.zip格式的文件\n> > mtk/doc 忽略当前目录下mtk文件里的doc文件\n> \n> # 配置语法：\n> \n> > 以斜杠/开头表示目录；\n> > 以星号*通配多个字符；\n> > 以问号?通配单个字符\n> > 以方括号[]包含单个字符的匹配列表；\n> > 以叹号!表示不忽略(跟踪)匹配到的文件或目录；\n\ntip\n\ncd切换目录\n\npwd显示当前工作目录\n\nls显示当前目录所以文件\n\nls-a显示所有文件包括隐藏的\n\nmkdir创建目录（文件夹）\n\n↑查看上一条cmd命令\n\n↓查看下一条cmd命令\n\ntab字段补全命令\n\n-ddelete：删除\n\n-ddelete+force强制\n\n-fforce：强制\n\n-mmove：移动或重命名\n\n-mmove+force的快捷键\n\n-rremote：远程\n\n-aall全部\n\n!强制\n\nq退出\n\nw保存\n\nwq保存并退出\n\nwq!强制保存并退出.\n\ngit在线演示',charsets:{cjk:!0}},{title:"9.1 Docker概述",frontmatter:{},regularPath:"/other/docker/",relativePath:"other/docker/README.md",key:"v-5df6bd8a",path:"/other/docker/",headers:[{level:2,title:"9.1 Docker概述",slug:"_9-1-docker概述",normalizedTitle:"9.1 docker概述",charIndex:2},{level:2,title:"9.2 Docker安装",slug:"_9-2-docker安装",normalizedTitle:"9.2 docker安装",charIndex:568},{level:2,title:"9.3 Docker命令",slug:"_9-3-docker命令",normalizedTitle:"9.3 docker命令",charIndex:1621},{level:2,title:"9.4 镜像命令",slug:"_9-4-镜像命令",normalizedTitle:"9.4 镜像命令",charIndex:1730},{level:3,title:"docker images查看镜像",slug:"docker-images查看镜像",normalizedTitle:"docker images查看镜像",charIndex:1743},{level:3,title:"docker search搜索镜像",slug:"docker-search搜索镜像",normalizedTitle:"docker search搜索镜像",charIndex:2008},{level:3,title:"docker pull下载镜像",slug:"docker-pull下载镜像",normalizedTitle:"docker pull下载镜像",charIndex:2138},{level:3,title:"docker rmi删除镜像",slug:"docker-rmi删除镜像",normalizedTitle:"docker rmi删除镜像",charIndex:2360},{level:3,title:"docker image prune清理镜像",slug:"docker-image-prune清理镜像",normalizedTitle:"docker image prune清理镜像",charIndex:2561},{level:3,title:"docker tag标记镜像",slug:"docker-tag标记镜像",normalizedTitle:"docker tag标记镜像",charIndex:2609},{level:3,title:"docker image is查看镜像",slug:"docker-image-is查看镜像",normalizedTitle:"docker image is查看镜像",charIndex:2811},{level:3,title:"docker commit从容器创建一个新的镜像",slug:"docker-commit从容器创建一个新的镜像",normalizedTitle:"docker commit从容器创建一个新的镜像",charIndex:2902},{level:3,title:"docker build通过文件构建新镜像",slug:"docker-build通过文件构建新镜像",normalizedTitle:"docker build通过文件构建新镜像",charIndex:3217},{level:3,title:"docker history查看镜像的构建历史",slug:"docker-history查看镜像的构建历史",normalizedTitle:"docker history查看镜像的构建历史",charIndex:3380},{level:3,title:"docker push发布镜像",slug:"docker-push发布镜像",normalizedTitle:"docker push发布镜像",charIndex:3435},{level:3,title:"docker save将指定镜像保存成tar归档文件",slug:"docker-save将指定镜像保存成tar归档文件",normalizedTitle:"docker save将指定镜像保存成tar归档文件",charIndex:3568},{level:3,title:"docker load导入使用docker save命令导出的镜像",slug:"docker-load导入使用docker-save命令导出的镜像",normalizedTitle:"docker load导入使用docker save命令导出的镜像",charIndex:3760},{level:2,title:"9.5 容器命令",slug:"_9-5-容器命令",normalizedTitle:"9.5 容器命令",charIndex:3923},{level:3,title:"docker run运行镜像",slug:"docker-run运行镜像",normalizedTitle:"docker run运行镜像",charIndex:3948},{level:3,title:"dokcer rm删除容器",slug:"dokcer-rm删除容器",normalizedTitle:"dokcer rm删除容器",charIndex:4235},{level:3,title:"dokcer start启动容器",slug:"dokcer-start启动容器",normalizedTitle:"dokcer start启动容器",charIndex:4391},{level:3,title:"dokcer restart重启容器",slug:"dokcer-restart重启容器",normalizedTitle:"dokcer restart重启容器",charIndex:4434},{level:3,title:"dokcer stop停止容器",slug:"dokcer-stop停止容器",normalizedTitle:"dokcer stop停止容器",charIndex:4481},{level:3,title:"dokcer kill强制停止容器",slug:"dokcer-kill强制停止容器",normalizedTitle:"dokcer kill强制停止容器",charIndex:4522},{level:3,title:"dokcer ps查看正在运行的容器",slug:"dokcer-ps查看正在运行的容器",normalizedTitle:"dokcer ps查看正在运行的容器",charIndex:4565},{level:3,title:"docker attach进入容器",slug:"docker-attach进入容器",normalizedTitle:"docker attach进入容器",charIndex:4675},{level:3,title:"docker exec进入容器",slug:"docker-exec进入容器",normalizedTitle:"docker exec进入容器",charIndex:4753},{level:3,title:"docker logs查看容器日志",slug:"docker-logs查看容器日志",normalizedTitle:"docker logs查看容器日志",charIndex:4823},{level:3,title:"docker top查看容器中的进程",slug:"docker-top查看容器中的进程",normalizedTitle:"docker top查看容器中的进程",charIndex:4920},{level:3,title:"docker inspect查看容器内部信息",slug:"docker-inspect查看容器内部信息",normalizedTitle:"docker inspect查看容器内部信息",charIndex:4963},{level:3,title:"docker cp容器与主机之间的数据拷贝",slug:"docker-cp容器与主机之间的数据拷贝",normalizedTitle:"docker cp容器与主机之间的数据拷贝",charIndex:5014},{level:3,title:"exit退出并停止镜像",slug:"exit退出并停止镜像",normalizedTitle:"exit退出并停止镜像",charIndex:5285},{level:3,title:"CTRL+P+Q只退出镜像不停止",slug:"ctrl-p-q只退出镜像不停止",normalizedTitle:"ctrl+p+q只退出镜像不停止",charIndex:5301},{level:2,title:"9.6 DockerFile",slug:"_9-6-dockerfile",normalizedTitle:"9.6 dockerfile",charIndex:5322},{level:2,title:"9.7 Docker镜像",slug:"_9-7-docker镜像",normalizedTitle:"9.7 docker镜像",charIndex:6024},{level:2,title:"9.8 Docker数据卷(volume)",slug:"_9-8-docker数据卷-volume",normalizedTitle:"9.8 docker数据卷(volume)",charIndex:6041},{level:2,title:"9.9 Docker网络",slug:"_9-9-docker网络",normalizedTitle:"9.9 docker网络",charIndex:6588}],headersStr:"9.1 Docker概述 9.2 Docker安装 9.3 Docker命令 9.4 镜像命令 docker images查看镜像 docker search搜索镜像 docker pull下载镜像 docker rmi删除镜像 docker image prune清理镜像 docker tag标记镜像 docker image is查看镜像 docker commit从容器创建一个新的镜像 docker build通过文件构建新镜像 docker history查看镜像的构建历史 docker push发布镜像 docker save将指定镜像保存成tar归档文件 docker load导入使用docker save命令导出的镜像 9.5 容器命令 docker run运行镜像 dokcer rm删除容器 dokcer start启动容器 dokcer restart重启容器 dokcer stop停止容器 dokcer kill强制停止容器 dokcer ps查看正在运行的容器 docker attach进入容器 docker exec进入容器 docker logs查看容器日志 docker top查看容器中的进程 docker inspect查看容器内部信息 docker cp容器与主机之间的数据拷贝 exit退出并停止镜像 CTRL+P+Q只退出镜像不停止 9.6 DockerFile 9.7 Docker镜像 9.8 Docker数据卷(volume) 9.9 Docker网络",content:'# 9.1 Docker概述\n\n# Docker为什么会出现？\n\n * 传统的发布流程：\n\n 1. 发布项目时所有依赖都需要单独配置\n 2. 开发环境、生产环境还要分别配置\n 3. 不能跨平台\n\n * Docker的发布流程： 将业务代码和环境一起打包直接发布到服务器。\n\n 1. 常用的依赖和配置全部打包到Docker镜像仓库\n 2. 发布时直接下载不需要单独配置\n\n# Docker Hub\n\nDocker的官方镜像仓库\n\n# Docker核心概念\n\n 1. "镜像(image)"：依赖的程序和配置文件的集合\n 2. "仓库(repository)"：存放镜像的位置\n 3. "容器(container)"：使用虚拟化技术实现的运行镜像的环境\n 4. "隔离"：容器彼此隔离，互不影响\n\n# 容器的生命周期\n\n 1. created初建状态\n 2. running运行状态\n 3. stopped停止状态\n 4. paused暂停状态\n\n# 底层原理\n\n * Docker的工作原理\n\n> Docker是一个Client-Server结构的系统，Docker的守护进程（一直在后台运行的进程）运行在主机上，通过Socket从客户端访问。 DockerServer接收到Docker-Client的指令,就会执行这个命令。\n\n\n# 9.2 Docker安装\n\n官方文档\n\n 1. 查看centos内核版本（>=3.10）：uname -r\n 2. 安装之前需要卸载旧版：\n\n sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n\n\n 3.  安装docker环境：yum install -y yum-utils\n 4.  配置镜像仓库：\n 5.  更新yum索引：yum makecache fast\n 6.  安装docker：yum install docker-ce docker-ce-cli containerd.io\n 7.  查看版本：docker version\n 8.  启动：systemctl start docker\n 9.  运行：docker run hello-world\n 10. 查看镜像：docker images\n 11. 卸载依赖：yum remove docker-ce docker-ce-cli containerd.io\n 12. 卸载资源：rm -rf /var/lib/docker、rm -rf /var/lib/containerd\n 13. 使用阿里云镜像加速器：\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  "registry-mirrors": ["https://g099lhap.mirror.aliyuncs.com"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n# docker run的运行过程\n\ndocker run <imagesName>\n\n>  1. 判断是否有这个镜像\n>  2. 没有则去DockerHub下载到本地\n>  3. 运行镜像\n\n\n# 9.3 Docker命令\n\n官方命令文档\n\n\n\n\n\n查看Docker版本：docker version\n查看Docker信息：docker info\nDocker帮助命令：docker <命令> --help\n\n\n# 9.4 镜像命令\n\n\n# docker images查看镜像\n\ndocker images [OPTIONS] [REPOSITORY[:TAG]]\n\n> OPTIONS：可选项\n> \n> > -f：过滤条件\n> > -q：只显示ID\n\n> 返回参数\n> \n> > REPOSITORY：镜像仓库\n> > TAG：镜像标签\n> > TMAGE ID：镜像ID\n> > CREATED：镜像创建事件\n> > SIZE：镜像创建大小\n\n * 列出本地镜像中REPOSITORY为ubuntu的镜像列表\n\n docker images  ubuntu\n\n\n\n# docker search搜索镜像\n\ndocker search [OPTIONS] TERM\n\n * 从Docker Hub查找所有镜像名包含node，并且收藏数大于 10 的镜像\n\n docker search -f stars=10 node\n\n\n\n# docker pull下载镜像\n\ndocker pull [Registry]/[Repository]/[Image]:[Tag]\n\n> Registry：注册服务器（用于管理镜像仓库的服务器）\n> Repository：镜像仓库\n> tag：镜像的标签，默认为latest。\n\nTIP\n\n先从本地搜索，没有则从Docker Hub下载镜像。\n\n从Docker Hub下载node最新版镜像。\n\n docker pull node\n\n\n\n# docker rmi删除镜像\n\ndocker rmi [OPTIONS] IMAGE [IMAGE...]\n\n> OPTIONS：可选项\n> \n> > -f：强制删除\n\n * 强制删除本地镜像 runoob/ubuntu:v4。\n\n docker rmi -f runoob/ubuntu:v4 \n\n\n * 删除全部\n\n docker rmi -f $(docker images -aq)\n\n\n\n# docker image prune清理镜像\n\n清理残存、些临时、没有被使用的镜像文件\n\n\n# docker tag标记镜像\n\ndocker tag [SOURCE_IMAGE][:TAG] [TARGET_IMAGE][:TAG]\n\n> SOURCE_IMAGE原始镜像\n> TARGET_IMAGE：标记后的镜像\n\n * 将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。\n\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\n\n\n\n# docker image is查看镜像\n\ndocker tag [Repository][:TAG]\n\n * 查看node镜像\n\ndocker image is node\n\n\n\n# docker commit从容器创建一个新的镜像\n\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n\n> OPTIONS：可选项\n> \n> > -a：提交的镜像作者\n> > -c：使用Dockerfile指令来创建镜 -m：提交时的说明文字 -p：在commit时，将容器暂停\n\n * 将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\n\n docker commit -a "jaqi.l" -m "jaqi.l\'The first image of jaqi.l" a404c6c174a2  jaqi.image:v1.0.0 \n\n\n\n# docker build通过文件构建新镜像\n\ndocker build [OPTIONS] PATH | URL |\n\n> OPTIONS：可选项\n> \n> > -f：dockerfile路径\n> > -t：镜像名\n\ndocker build -f dockerfile -t jaqi/centos:v1.0 .\n\n\n\n# docker history查看镜像的构建历史\n\ndocker history [IMAGE ID]\n\n\n# docker push发布镜像\n\ndocker push [OPTIONS] NAME[:TAG]\n\n发布之前需要登陆Docker Hub或阿里云镜像仓库\n\ndocker login ******\ndocker push jaqi/centos:v1.0\n\n\n\n# docker save将指定镜像保存成tar归档文件\n\ndocker save [OPTIONS] [IMAGE...]\n\n> OPTIONS：可选项\n> \n> > -o：输出到的文件 将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档\n\ndocker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\n\n\n\n# docker load导入使用docker save命令导出的镜像\n\ndocker load [OPTIONS]\n\n> OPTIONS：可选项\n> \n> > -i：指定导入的文件\n> > -q：精简输出信息\n\n导入my_ubuntu_v3.tar\n\ndocker load --i my_ubuntu_v3.tar\n\n\n\n# 9.5 容器命令\n\n有了镜像才能创建容器\n\n\n# docker run运行镜像\n\ndocker run [OPTIONS] [image]\n\n> OPTIONS：可选项\n> \n> > -name：容器名字\n> > -d：后台运行方式\n> > -rt：用完即删\n> > -it：交互方式进行\n> > -v：挂载数据卷\n> > -e：环境配置\n> > -p：指定容器端口\n> > \n> > > ip:主机端口:容器端口\n> > > 主机端口:容器端口\n> > > 容器端口\n\n> > -P：(大写P)随机容器端口\n\n * 启动centos并进入容器\n\n docker run -it centos /bin/bash\n\n\n\n# dokcer rm删除容器\n\ndocker rm [image]\n\n * 批量删除多个\n\n docker rm -f 09d7636201f2 104ea3abc382 c9054809ffad e3ae598e7447 f9ce4763ae59 9d86d1f77623 109b97c45b65 \n\n\n\n# dokcer start启动容器\n\ndocker start [image]\n\n\n# dokcer restart重启容器\n\ndocker restart [image]\n\n\n# dokcer stop停止容器\n\ndocker stop [image]\n\n\n# dokcer kill强制停止容器\n\ndocker kill [image]\n\n\n# dokcer ps查看正在运行的容器\n\ndocker ps [OPTIONS]\n\n> OPTIONS：可选项\n> \n> > -a：查看运行过的容器\n> > -n：查看最近运行的容器\n> > -q：只显示容器编号\n\n\n# docker attach进入容器\n\ndocker attach [image]：进入容器正在运行的终端，不会开启新进程，退出后会自动停止容器服务\n\n\n# docker exec进入容器\n\ndocker exec -it [image] [COMMAND]：进入容器后开启有一个新的终端\n\n\n# docker logs查看容器日志\n\ndocker logs [OPTIONS] [image]\n\n> OPTIONS：可选项\n> \n> > -f：显示日志\n> > -t：显示日志条数\n\n\n# docker top查看容器中的进程\n\ndocker top [image]\n\n\n# docker inspect查看容器内部信息\n\ndocker inspect [image]\n\n\n# docker cp容器与主机之间的数据拷贝\n\ndocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n\n> OPTIONS：可选项\n> \n> > -r：递归\n\n * 将主机/www/jaqi目录拷贝到容器96f7f14e99ab的/www目录下。\n\n docker cp /www/jaqi 96f7f14e99ab:/www/\n\n\n * 将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中\n\n docker cp  96f7f14e99ab:/www /tmp/\n\n\n\n# exit退出并停止镜像\n\n\n# CTRL+P+Q只退出镜像不停止\n\n\n# 9.6 DockerFile\n\nDockerFile就是用来构建docker镜像的构建文件（docker命令脚本）\n\n# DockerFile语法规则：\n\n 1. 每个关键字（指令）都必须是大写字母\n 2. 顺序从上到下\n 3. #表示注释\n 4. 每个指令都会创建一个新的镜像层，并提交\n\n# DockerFile指令：\n\nFROM：基础镜像\nMAINTAINEW：镜像是谁写的，姓名+邮箱\nRUN：镜像构建的时候需要运行的命令\nADD：添加内容\nWORKDIR：镜像的工作目录\nVOLUME：挂载的目录\nEXPOSE：暴露端口\nCMD：指定这个容器启动的时候要运行的命令，只有最后一个会生效\nENTRYPOINT：指定这个容器启动的时候要运行的命令，可以追加命令\nONBUILD：当构建一个被继承DockerFile，这个时候会运行ONBUILD的指令，触发指令\nCOPY：类似ADD，将我们文件拷贝到镜像中\nENV：构建时候设置环境变量\n\n`CMD`与`ENTRYPOINT`的区别\n\nCMD：不能再docker run的时候再追加命令，只能替换。\nENTRYPOINT：可以直接追加命令\n\n * 构建一个Jaqi.L/centos\n\nFROM centos\n\nMAINTAINER Jaqi.L<Jaqi.l@qq.com>\n\nENV MYPATH /usr/local\n\nWORKDIK $MYPATH\n\nRUN yum -y install vim\n\nEXPOSE 80\n\nCMD echo $MYPATH\n\nCMD echo "---end---"\n\nCMD /bin/bash\n\n\n\n# 9.7 Docker镜像\n\n\n# 9.8 Docker数据卷(volume)\n\n# 数据卷联合文件系统\n\n\n\n# 数据共享\n\n容器之间共享数据的一种技术（将docker容器中的目录挂载到外部服务器上【卷名】），实现容器的持久化和同步操作，而且容器间也可以数据共享。\n\ndocker run -v [服务器目录(卷名)]:[容器目录]:[r0/rw]\n\n容器限制权限：\n\n> r0:只读\n> rw或不填:可读可写\n\n * 将容器的home目录挂载到服务器的/home/test目录\n\ndocker run -it -v /home/test:/home\n\n\n# 具名和匿名挂载：\n\n（不指定服务器的目录（卷名），自动挂载到/var/lib/docker/volumes/xxx/_data）\n\n# docker volume查看卷\n\ndocker volume ls查看全部卷\ndocker volume inspect [卷名]查看卷详情\n\n# 数据卷容器\n\n--volume-from通过一个容器给其他容器共享数据。\n\n * docker01的数据同步到docker02\n\ndocker run -it --name docker02 --volume-from docker01 jaqi/centos:v1.0\n\n\n\n# 9.9 Docker网络',normalizedContent:'# 9.1 docker概述\n\n# docker为什么会出现？\n\n * 传统的发布流程：\n\n 1. 发布项目时所有依赖都需要单独配置\n 2. 开发环境、生产环境还要分别配置\n 3. 不能跨平台\n\n * docker的发布流程： 将业务代码和环境一起打包直接发布到服务器。\n\n 1. 常用的依赖和配置全部打包到docker镜像仓库\n 2. 发布时直接下载不需要单独配置\n\n# docker hub\n\ndocker的官方镜像仓库\n\n# docker核心概念\n\n 1. "镜像(image)"：依赖的程序和配置文件的集合\n 2. "仓库(repository)"：存放镜像的位置\n 3. "容器(container)"：使用虚拟化技术实现的运行镜像的环境\n 4. "隔离"：容器彼此隔离，互不影响\n\n# 容器的生命周期\n\n 1. created初建状态\n 2. running运行状态\n 3. stopped停止状态\n 4. paused暂停状态\n\n# 底层原理\n\n * docker的工作原理\n\n> docker是一个client-server结构的系统，docker的守护进程（一直在后台运行的进程）运行在主机上，通过socket从客户端访问。 dockerserver接收到docker-client的指令,就会执行这个命令。\n\n\n# 9.2 docker安装\n\n官方文档\n\n 1. 查看centos内核版本（>=3.10）：uname -r\n 2. 安装之前需要卸载旧版：\n\n sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n\n\n 3.  安装docker环境：yum install -y yum-utils\n 4.  配置镜像仓库：\n 5.  更新yum索引：yum makecache fast\n 6.  安装docker：yum install docker-ce docker-ce-cli containerd.io\n 7.  查看版本：docker version\n 8.  启动：systemctl start docker\n 9.  运行：docker run hello-world\n 10. 查看镜像：docker images\n 11. 卸载依赖：yum remove docker-ce docker-ce-cli containerd.io\n 12. 卸载资源：rm -rf /var/lib/docker、rm -rf /var/lib/containerd\n 13. 使用阿里云镜像加速器：\n\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'eof\'\n{\n  "registry-mirrors": ["https://g099lhap.mirror.aliyuncs.com"]\n}\neof\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n\n# docker run的运行过程\n\ndocker run <imagesname>\n\n>  1. 判断是否有这个镜像\n>  2. 没有则去dockerhub下载到本地\n>  3. 运行镜像\n\n\n# 9.3 docker命令\n\n官方命令文档\n\n\n\n\n\n查看docker版本：docker version\n查看docker信息：docker info\ndocker帮助命令：docker <命令> --help\n\n\n# 9.4 镜像命令\n\n\n# docker images查看镜像\n\ndocker images [options] [repository[:tag]]\n\n> options：可选项\n> \n> > -f：过滤条件\n> > -q：只显示id\n\n> 返回参数\n> \n> > repository：镜像仓库\n> > tag：镜像标签\n> > tmage id：镜像id\n> > created：镜像创建事件\n> > size：镜像创建大小\n\n * 列出本地镜像中repository为ubuntu的镜像列表\n\n docker images  ubuntu\n\n\n\n# docker search搜索镜像\n\ndocker search [options] term\n\n * 从docker hub查找所有镜像名包含node，并且收藏数大于 10 的镜像\n\n docker search -f stars=10 node\n\n\n\n# docker pull下载镜像\n\ndocker pull [registry]/[repository]/[image]:[tag]\n\n> registry：注册服务器（用于管理镜像仓库的服务器）\n> repository：镜像仓库\n> tag：镜像的标签，默认为latest。\n\ntip\n\n先从本地搜索，没有则从docker hub下载镜像。\n\n从docker hub下载node最新版镜像。\n\n docker pull node\n\n\n\n# docker rmi删除镜像\n\ndocker rmi [options] image [image...]\n\n> options：可选项\n> \n> > -f：强制删除\n\n * 强制删除本地镜像 runoob/ubuntu:v4。\n\n docker rmi -f runoob/ubuntu:v4 \n\n\n * 删除全部\n\n docker rmi -f $(docker images -aq)\n\n\n\n# docker image prune清理镜像\n\n清理残存、些临时、没有被使用的镜像文件\n\n\n# docker tag标记镜像\n\ndocker tag [source_image][:tag] [target_image][:tag]\n\n> source_image原始镜像\n> target_image：标记后的镜像\n\n * 将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。\n\ndocker tag ubuntu:15.10 runoob/ubuntu:v3\n\n\n\n# docker image is查看镜像\n\ndocker tag [repository][:tag]\n\n * 查看node镜像\n\ndocker image is node\n\n\n\n# docker commit从容器创建一个新的镜像\n\ndocker commit [options] container [repository[:tag]]\n\n> options：可选项\n> \n> > -a：提交的镜像作者\n> > -c：使用dockerfile指令来创建镜 -m：提交时的说明文字 -p：在commit时，将容器暂停\n\n * 将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\n\n docker commit -a "jaqi.l" -m "jaqi.l\'the first image of jaqi.l" a404c6c174a2  jaqi.image:v1.0.0 \n\n\n\n# docker build通过文件构建新镜像\n\ndocker build [options] path | url |\n\n> options：可选项\n> \n> > -f：dockerfile路径\n> > -t：镜像名\n\ndocker build -f dockerfile -t jaqi/centos:v1.0 .\n\n\n\n# docker history查看镜像的构建历史\n\ndocker history [image id]\n\n\n# docker push发布镜像\n\ndocker push [options] name[:tag]\n\n发布之前需要登陆docker hub或阿里云镜像仓库\n\ndocker login ******\ndocker push jaqi/centos:v1.0\n\n\n\n# docker save将指定镜像保存成tar归档文件\n\ndocker save [options] [image...]\n\n> options：可选项\n> \n> > -o：输出到的文件 将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档\n\ndocker save -o my_ubuntu_v3.tar runoob/ubuntu:v3\n\n\n\n# docker load导入使用docker save命令导出的镜像\n\ndocker load [options]\n\n> options：可选项\n> \n> > -i：指定导入的文件\n> > -q：精简输出信息\n\n导入my_ubuntu_v3.tar\n\ndocker load --i my_ubuntu_v3.tar\n\n\n\n# 9.5 容器命令\n\n有了镜像才能创建容器\n\n\n# docker run运行镜像\n\ndocker run [options] [image]\n\n> options：可选项\n> \n> > -name：容器名字\n> > -d：后台运行方式\n> > -rt：用完即删\n> > -it：交互方式进行\n> > -v：挂载数据卷\n> > -e：环境配置\n> > -p：指定容器端口\n> > \n> > > ip:主机端口:容器端口\n> > > 主机端口:容器端口\n> > > 容器端口\n\n> > -p：(大写p)随机容器端口\n\n * 启动centos并进入容器\n\n docker run -it centos /bin/bash\n\n\n\n# dokcer rm删除容器\n\ndocker rm [image]\n\n * 批量删除多个\n\n docker rm -f 09d7636201f2 104ea3abc382 c9054809ffad e3ae598e7447 f9ce4763ae59 9d86d1f77623 109b97c45b65 \n\n\n\n# dokcer start启动容器\n\ndocker start [image]\n\n\n# dokcer restart重启容器\n\ndocker restart [image]\n\n\n# dokcer stop停止容器\n\ndocker stop [image]\n\n\n# dokcer kill强制停止容器\n\ndocker kill [image]\n\n\n# dokcer ps查看正在运行的容器\n\ndocker ps [options]\n\n> options：可选项\n> \n> > -a：查看运行过的容器\n> > -n：查看最近运行的容器\n> > -q：只显示容器编号\n\n\n# docker attach进入容器\n\ndocker attach [image]：进入容器正在运行的终端，不会开启新进程，退出后会自动停止容器服务\n\n\n# docker exec进入容器\n\ndocker exec -it [image] [command]：进入容器后开启有一个新的终端\n\n\n# docker logs查看容器日志\n\ndocker logs [options] [image]\n\n> options：可选项\n> \n> > -f：显示日志\n> > -t：显示日志条数\n\n\n# docker top查看容器中的进程\n\ndocker top [image]\n\n\n# docker inspect查看容器内部信息\n\ndocker inspect [image]\n\n\n# docker cp容器与主机之间的数据拷贝\n\ndocker cp [options] src_path|- container:dest_path\n\n> options：可选项\n> \n> > -r：递归\n\n * 将主机/www/jaqi目录拷贝到容器96f7f14e99ab的/www目录下。\n\n docker cp /www/jaqi 96f7f14e99ab:/www/\n\n\n * 将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中\n\n docker cp  96f7f14e99ab:/www /tmp/\n\n\n\n# exit退出并停止镜像\n\n\n# ctrl+p+q只退出镜像不停止\n\n\n# 9.6 dockerfile\n\ndockerfile就是用来构建docker镜像的构建文件（docker命令脚本）\n\n# dockerfile语法规则：\n\n 1. 每个关键字（指令）都必须是大写字母\n 2. 顺序从上到下\n 3. #表示注释\n 4. 每个指令都会创建一个新的镜像层，并提交\n\n# dockerfile指令：\n\nfrom：基础镜像\nmaintainew：镜像是谁写的，姓名+邮箱\nrun：镜像构建的时候需要运行的命令\nadd：添加内容\nworkdir：镜像的工作目录\nvolume：挂载的目录\nexpose：暴露端口\ncmd：指定这个容器启动的时候要运行的命令，只有最后一个会生效\nentrypoint：指定这个容器启动的时候要运行的命令，可以追加命令\nonbuild：当构建一个被继承dockerfile，这个时候会运行onbuild的指令，触发指令\ncopy：类似add，将我们文件拷贝到镜像中\nenv：构建时候设置环境变量\n\n`cmd`与`entrypoint`的区别\n\ncmd：不能再docker run的时候再追加命令，只能替换。\nentrypoint：可以直接追加命令\n\n * 构建一个jaqi.l/centos\n\nfrom centos\n\nmaintainer jaqi.l<jaqi.l@qq.com>\n\nenv mypath /usr/local\n\nworkdik $mypath\n\nrun yum -y install vim\n\nexpose 80\n\ncmd echo $mypath\n\ncmd echo "---end---"\n\ncmd /bin/bash\n\n\n\n# 9.7 docker镜像\n\n\n# 9.8 docker数据卷(volume)\n\n# 数据卷联合文件系统\n\n\n\n# 数据共享\n\n容器之间共享数据的一种技术（将docker容器中的目录挂载到外部服务器上【卷名】），实现容器的持久化和同步操作，而且容器间也可以数据共享。\n\ndocker run -v [服务器目录(卷名)]:[容器目录]:[r0/rw]\n\n容器限制权限：\n\n> r0:只读\n> rw或不填:可读可写\n\n * 将容器的home目录挂载到服务器的/home/test目录\n\ndocker run -it -v /home/test:/home\n\n\n# 具名和匿名挂载：\n\n（不指定服务器的目录（卷名），自动挂载到/var/lib/docker/volumes/xxx/_data）\n\n# docker volume查看卷\n\ndocker volume ls查看全部卷\ndocker volume inspect [卷名]查看卷详情\n\n# 数据卷容器\n\n--volume-from通过一个容器给其他容器共享数据。\n\n * docker01的数据同步到docker02\n\ndocker run -it --name docker02 --volume-from docker01 jaqi/centos:v1.0\n\n\n\n# 9.9 docker网络',charsets:{cjk:!0}},{frontmatter:{},regularPath:"/other/linux/",relativePath:"other/linux/README.md",key:"v-0f2ec1a8",path:"/other/linux/",headers:[{level:2,title:"1.1 常用目录结构",slug:"_1-1-常用目录结构",normalizedTitle:"1.1 常用目录结构",charIndex:312},{level:2,title:"1.2 帮助命令",slug:"_1-2-帮助命令",normalizedTitle:"1.2 帮助命令",charIndex:1509},{level:2,title:"1.3 文件管理",slug:"_1-3-文件管理",normalizedTitle:"1.3 文件管理",charIndex:1645},{level:3,title:"1.3.1 文件查看",slug:"_1-3-1-文件查看",normalizedTitle:"1.3.1 文件查看",charIndex:1658},{level:3,title:"1.3.2 目录/文件的创建与删除",slug:"_1-3-2-目录-文件的创建与删除",normalizedTitle:"1.3.2 目录/文件的创建与删除",charIndex:2140},{level:3,title:"1.3.3 文件操作",slug:"_1-3-3-文件操作",normalizedTitle:"1.3.3 文件操作",charIndex:2479},{level:3,title:"1.3.4 文件的权限",slug:"_1-3-4-文件的权限",normalizedTitle:"1.3.4 文件的权限",charIndex:2767},{level:3,title:"1.3.5 文件内容查看",slug:"_1-3-5-文件内容查看",normalizedTitle:"1.3.5 文件内容查看",charIndex:3656},{level:3,title:"1.3.6 打包与压缩",slug:"_1-3-6-打包与压缩",normalizedTitle:"1.3.6 打包与压缩",charIndex:4027},{level:3,title:"1.3.7 查找文件",slug:"_1-3-7-查找文件",normalizedTitle:"1.3.7 查找文件",charIndex:4606},{level:3,title:"1.3.8 查找文件内容",slug:"_1-3-8-查找文件内容",normalizedTitle:"1.3.8 查找文件内容",charIndex:4949},{level:3,title:"1.3.9 文件内容批量处理",slug:"_1-3-9-文件内容批量处理",normalizedTitle:"1.3.9 文件内容批量处理",charIndex:5039},{level:2,title:"1.4 vi文本编辑器",slug:"_1-4-vi文本编辑器",normalizedTitle:"1.4 vi文本编辑器",charIndex:5139},{level:2,title:"1.5 用户与用户管理",slug:"_1-5-用户与用户管理",normalizedTitle:"1.5 用户与用户管理",charIndex:5963},{level:3,title:"1.5.1 用户",slug:"_1-5-1-用户",normalizedTitle:"1.5.1 用户",charIndex:5979},{level:3,title:"1.5.2 用户组",slug:"_1-5-2-用户组",normalizedTitle:"1.5.2 用户组",charIndex:6473},{level:3,title:"1.5.3 用户管理",slug:"_1-5-3-用户管理",normalizedTitle:"1.5.3 用户管理",charIndex:6519},{level:3,title:"1.5.4 用户配置文件",slug:"_1-5-4-用户配置文件",normalizedTitle:"1.5.4 用户配置文件",charIndex:6613},{level:3,title:"1.5.5 SELinux",slug:"_1-5-5-selinux",normalizedTitle:"1.5.5 selinux",charIndex:6643},{level:2,title:"1.6 网络管理",slug:"_1-6-网络管理",normalizedTitle:"1.6 网络管理",charIndex:6690},{level:3,title:"1.6.1 网络信息",slug:"_1-6-1-网络信息",normalizedTitle:"1.6.1 网络信息",charIndex:6703},{level:3,title:"1.6.2 网络状态",slug:"_1-6-2-网络状态",normalizedTitle:"1.6.2 网络状态",charIndex:7033},{level:3,title:"1.6.3 网络配置",slug:"_1-6-3-网络配置",normalizedTitle:"1.6.3 网络配置",charIndex:7266},{level:2,title:"1.7 软件安装",slug:"_1-7-软件安装",normalizedTitle:"1.7 软件安装",charIndex:7425},{level:3,title:"rpm",slug:"rpm",normalizedTitle:"rpm",charIndex:7479},{level:2,title:"1.8 进程管理",slug:"_1-8-进程管理",normalizedTitle:"1.8 进程管理",charIndex:8076},{level:2,title:"1.9 内存与磁盘管理",slug:"_1-9-内存与磁盘管理",normalizedTitle:"1.9 内存与磁盘管理",charIndex:8662},{level:3,title:"1.9.1 内存",slug:"_1-9-1-内存",normalizedTitle:"1.9.1 内存",charIndex:8678},{level:3,title:"1.9.2 磁盘",slug:"_1-9-2-磁盘",normalizedTitle:"1.9.2 磁盘",charIndex:8746},{level:2,title:"1.9.3 文件系统",slug:"_1-9-3-文件系统",normalizedTitle:"1.9.3 文件系统",charIndex:8851},{level:3,title:"ext4",slug:"ext4",normalizedTitle:"ext4",charIndex:3530},{level:2,title:"1.9.4 磁盘分区与挂载",slug:"_1-9-4-磁盘分区与挂载",normalizedTitle:"1.9.4 磁盘分区与挂载",charIndex:9421},{level:2,title:"1.9.5 磁盘配额",slug:"_1-9-5-磁盘配额",normalizedTitle:"1.9.5 磁盘配额",charIndex:9568},{level:3,title:"xfx系统",slug:"xfx系统",normalizedTitle:"xfx系统",charIndex:9583},{level:2,title:"1.9.6 交换（swap）分区",slug:"_1-9-6-交换-swap-分区",normalizedTitle:"1.9.6 交换（swap）分区",charIndex:10254},{level:3,title:"增加交换分区(虚拟内存)",slug:"增加交换分区-虚拟内存",normalizedTitle:"增加交换分区(虚拟内存)",charIndex:10275},{level:2,title:"1.9.7 RAID磁盘阵列",slug:"_1-9-7-raid磁盘阵列",normalizedTitle:"1.9.7 raid磁盘阵列",charIndex:10379},{level:3,title:"RAID卡",slug:"raid卡",normalizedTitle:"raid卡",charIndex:10398},{level:3,title:"软件模拟RAID",slug:"软件模拟raid",normalizedTitle:"软件模拟raid",charIndex:10408},{level:2,title:"1.9.8 逻辑卷管理",slug:"_1-9-8-逻辑卷管理",normalizedTitle:"1.9.8 逻辑卷管理",charIndex:10436},{level:3,title:"逻辑卷的创建",slug:"逻辑卷的创建",normalizedTitle:"逻辑卷的创建",charIndex:10543},{level:3,title:"逻辑卷的扩充",slug:"逻辑卷的扩充",normalizedTitle:"逻辑卷的扩充",charIndex:10811}],headersStr:"1.1 常用目录结构 1.2 帮助命令 1.3 文件管理 1.3.1 文件查看 1.3.2 目录/文件的创建与删除 1.3.3 文件操作 1.3.4 文件的权限 1.3.5 文件内容查看 1.3.6 打包与压缩 1.3.7 查找文件 1.3.8 查找文件内容 1.3.9 文件内容批量处理 1.4 vi文本编辑器 1.5 用户与用户管理 1.5.1 用户 1.5.2 用户组 1.5.3 用户管理 1.5.4 用户配置文件 1.5.5 SELinux 1.6 网络管理 1.6.1 网络信息 1.6.2 网络状态 1.6.3 网络配置 1.7 软件安装 rpm 1.8 进程管理 1.9 内存与磁盘管理 1.9.1 内存 1.9.2 磁盘 1.9.3 文件系统 ext4 1.9.4 磁盘分区与挂载 1.9.5 磁盘配额 xfx系统 1.9.6 交换（swap）分区 增加交换分区(虚拟内存) 1.9.7 RAID磁盘阵列 RAID卡 软件模拟RAID 1.9.8 逻辑卷管理 逻辑卷的创建 逻辑卷的扩充",content:'linux版本：内核版本、发行版本。\n所有命令都区分大小写。\nroot用户 # 普通用户 $\nexit切换用户\ninit 0关机 reboot、init 6重启 init 2命令行模式\ninit 3图形模式\nsystemctl get-default查看默认启动模式\nsystemctl set-default multi-user.target设置默认启动命令行模式\nshutdown -h 3030分钟之后关机\nclear或者ctrl+l清空命令\ntab键命令不全\ny确认、ctrl+c终止\nctrl+r搜索之前的命令\n\n * ip addr查看ip地址\n   终端： 图形、命令行、远程终端（SSH、VNC）\n\n\n# 1.1 常用目录结构\n\n/根目录\n\n * 系统启动必须：\n   /boot存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。\n   /etc存放所有的系统需要的配置文件和子目录列表，更改目录下的文件可能会导致系统不能启动。\n   /lib存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。\n   /sys这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中\n * 指令集合：\n   /bin存放着最常用的程序和指令\n   /sbin只有系统管理员能使用的程序和指令。\n * 外部文件管理：\n   /devDevice(设备)的缩写, 存放的是Linux的外部设备。注意：在Linux中访问设备和访问文件的方式是相同的。\n   /media类windows的其他设备，例如U盘、光驱等等，识别后linux会把设备放到这个目录下。\n   /mnt临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。\n * 临时文件：\n   /run是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。\n   /lost+found一般情况下为空的，系统非法关机后，这里就存放一些文件。\n   /tmp这个目录是用来存放一些临时文件的。\n * 账户：\n   /root系统管理员的用户主目录。\n   /home用户的主目录，以用户的账号命名的。\n   /usr用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。\n   /usr/bin系统用户使用的应用程序与指令。\n   /usr/sbin超级用户使用的比较高级的管理程序和系统守护程序。\n   /usr/src内核源代码默认的放置目录。\n * 运行过程中要用：\n   /var存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。\n   /proc管理内存空间！虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。\n * 扩展用的：\n   /opt默认是空的，我们安装额外软件可以放在这个里面。\n   /srv存放服务启动后需要提取的数据（不用服务器就是空）\n\n\n# 1.2 帮助命令\n\n * man是manual的缩写,查看命令的帮助\n\nman ls\n\n\nhelp查看命令解释器\n\nhelp ls \x3c!-- 内部命令 --\x3e\nls -help \x3c!-- 外部命令 --\x3e \n\n\ninfo比help帮助更详细\n\ninfo ls \n\n\n\n# 1.3 文件管理\n\n\n# 1.3.1 文件查看\n\n# psw显示当前的目录名\n\n# pwd显示当前的完整路径\n\n# cd切换目录\n\n以/开头绝对路径\n以.开头当前路径\n以./、开头相对路径\n以../、..开头相对上一级路径\n-回到刚才的目录\n\n# ls显示当前目录下的文件\n\nls /root  \x3c!-- root目录下的文件 --\x3e\nls /nome /root  \x3c!-- root目录和根目录下的文件 --\x3e\n\n\n * -l长格式显示文件\n * -a 显示隐藏的文件,以.开头的是隐藏的文件\n * -r 逆序显示，需配合-l使用\n * -t 按时间排序显示\n * -R 递归显示（显示子文件夹里的所有文件）\n * -lrtR 按时间逆序长格式递归显示\n\n[root@localhost/]$ ls -l /  \x3c!-- 详细显示根目录下的文件 --\x3e\n-rw-------. 1 root 1555 dec 14 23：:50 anaconda-ks.cfg\n-dw-r--r--. 1 root 1555 dec 14 23：:50 boot\n\n\n文件的权限详见1.3.4\n\n\n# 1.3.2 目录/文件的创建与删除\n\n# mkdir创建一个空目录\n\n * 在根目录创建一个a目录\n\nmkdir /a\n\n\n * 在当前目录创建一个a目录\n\nmkdir a\n\n\n * 在当前目录创建一个a目录,在a中再创建b...\n\nmkdir a/b/c \n\n\n * 在当前目录同时创建a、b、c\n\nmkdir a b c\n\n\n * -p进行三级以上的创建\n\nmkdir -p  a/b/c/d/e/f/g \n\n\n# rmdir删除一个空目录\n\n# rm删除一个或多个目录\n\n * -r删除非空目录，y确认、ctrl+c终止\n\nrm -r\n\n\n * -f删除非空目录，不进行操作提示。\n\nrm -rf\n\n\n# touch创建一个文件\n\n    touch file\n\n\n\n# 1.3.3 文件操作\n\n# cp文件的复制\n\n * 复制a目录或a文件到root目录下\n\ncp a /root/ \n\n\n * -r同时复制整个目录\n\ncp -r  /root/a /tmp/ \n\n\n * -p复制的时候同时复制权限、属组和时间\n\ncp -p /root/a /tmp/ \n\n\n# mv文件的移动和重命名\n\n * fileA改名fileB\n\nmv /fileA /fileB \n\n\n * fileB移动到tmp目录\n\nmv /fileB /tmp \n\n\n * fileB移动到tmp目录，并改名fileC\n\nmv /fileB /tmp/fileC \n\n\n\n# 1.3.4 文件的权限\n\n# 查看文件权限\n\nls -l -rw-------. 1 root root 1721 1月 4 21:33 anaconda-ks.cfg\n\n 1. 首位表示文件类型-文件、d目录、l链接文档、b可随机存储装置、c一次性存储装置（鼠标、键盘）\n 2. 后面几位数字以三个为一组。第一组是属主权限，第一组是属组权限，第三组是其他用户权限\n\n> 文件权限表示方法\n> \n> > r=4=read\n> > w=2write\n> > x=1execute（可执行），-表示没有权限\n> > 6读写权限\n> > 7全部权限\n\n# 查看目录权限\n\nls -ld\n\n> 目录权限表示方法\n> \n> > x可进入目录\n> > rx显示目录内的文件名\n> > wx修改目录内的文件名\n\n 3. 第一个root表示谁创建的文件，第二个root表示是哪个用户组的。\n\n# chmod修改文件权限\n\n * +增加权限\n * -减少权限\n * =设置权限\n * u属主\n\nchmod u+x /tmp/testfile\n\n\n * g数组\n * o其他用户权限\n * a统一设置\n * 数组方法设置权限，第一位属主、第二位属组、第三位其他用户权限\n\nchmod 755 /tmp/testfile\n\n\n# chown修改文件属主和属组\n\n * 属主\n\nchown user1 /test\n\n\n * 属组\n\nchown :group1 /test\n\n\n# chgrp单独修改文件属组\n\n# 特殊权限\n\nSUID用于二进制可执行文件，执行命令时获取文件属主的权限\nSGID用于目录，在该目录下创建新的文件和目录，权限会自动更改为该目录的属组\nSBIT用于目录，该目录下新建的文件和目录，仅root和自己可以删除\n\n# facl(ext4,xfs)文件系统独有\n\ngetfacl查看文件的权限\nsetfacl -m u:user1设置user1的权限\nsetfacl -m g:group1设置组group1的权限\nsetfacl -x u:user1取消user1的权限\n\n\n# 1.3.5 文件内容查看\n\n# cat查看文本内容\n\ncat /tmp/demo\n\n\n# head查看文本开头\n\n * 查看文件前五行(默认显示前十行)\n\nhead -5 /tmp/demo \n\n\n# tail查看文本结尾\n\n * 查看文件后五行(默认显示前十行)\n\ntail -5 /tmp/demo \n\n\n * -f实时查看文件的后十行\n\ntail -f /tmp/demo \n\n\n * grep过滤某个字符并实时查看文件的后十行\n\ntail -ef| grep  string\n\n\n# wc统计文本内容信息\n\n查看文本行数\n\nwc -l /tmp/demo\n\n\n# more分行显示文本内容（空格下翻）\n\nmore  /tmp/demo\n\n\n# less分行显示文本内容（b上翻，d下翻），\n\nless  /tmp/demo\n\n\n\n# 1.3.6 打包与压缩\n\n# 打包\n\n * cf打包\n * 将etc打包命名成etc-backup.tar并放入tmp文件夹\n\ntar cf /tmp/etc-backup.tar /etc\n\n\n# 解包\n\n * xf解包 解包放入root目录下\n\ntar xf /tmp/etc-backup.tar -C /root\n\n\n# 压缩与解压缩\n\n不能压缩目录，需要对目录先打包再压缩\n\n * czf打包并压缩成gzip格式 将etc打包并压缩成gz格式，且命名成etc-backup.tar并放入tmp文件夹\n\ntar czf /tmp/etc-backup.tar.gz /etc\n\n\n * cjf打包并压缩成bzip格式（压缩率高） 将etc打包并压缩成bz2格式，且命名成etc-backup.tar并放入tmp文件夹\n\ntar cjf /tmp/etc-backup.tar.bz2 /etc\n\n\n# 解压缩\n\n * zxf解压缩gzip格式 解压缩包放入root目录下\n\ntar zxf /tmp/etc-backup.tar -C /root\n\n\n * jxf解压缩bzip格式 解压缩包放入root目录下\n\ntar jxf /tmp/etc-backup.tar -C /root\n\n\n参数说明\n\nc打包 x解包 f制定操作类型为文件\n\n\n# 1.3.7 查找文件\n\n# find查找文件\n\n * -name指定文件名\n * -type指定文件类型\n\n * > d(目录)、c(字型装置文件)、b(区块装置文件)、p(具名贮列)、f(一般文件)、l(符号连结)、s(socket)\n\n * -size指定文件大小查找\n * -cmin指定是过去n分钟内被修改过\n * -exec找到后的下一步操作\n\n查看etc下的jaqi文件\n\n    find /etc/ -name jaqi \n\n\n查找当前目录及其子目录下所有最近20天内更新过的文件\n\n# find . -ctime -20\n\n\n查找系统中所有文件长度为0的普通文件\n\n    find / -type f -size 0 -exec ls -l {} \\; \n\n\n\n# 1.3.8 查找文件内容\n\n# grep查找文件内容\n\n * -l显示行数\n   查找全部文件中有字符串"jaqi"的文件\n\n    grep -lr "jaqi" *\n\n\n\n# 1.3.9 文件内容批量处理\n\n# sed文件内容批量处理\n\n查找全部文件中有字符串"jaqi"的文件并替换成"jaqi.l"\n\n    sed -i "s/jaqi/jaqi.l/g" \n\n\n\n# 1.4 vi文本编辑器\n\nvi的四种模式\n\n> 正常模式\n> 插入模式\n> 命令模式\n> 可是模式\n\n# vim配置文件\n\n/etc/vimrc\n\n# 普通模式\n\n * 移动光标位置\n\n> h左\n> j下\n> k上\n> l右\n\n * 设置光标到位置\n\n> g设置到首行\n> shift+g设置到末行\n> n+shift+g设置到指定行\n> shift+6设置到行首\n> shift+4设置到行末\n\n * y复制\n\n> yy复制行 n+yy复制n行 y$复制从当前光标到末位内容\n\n * p粘贴\n\n * d剪切\n\n> dd复制行\n> n+dd复制n行\n> d$复制从当前光标到末位内容\n\n * u撤销\n\n * ctrl+r取消撤销\n\n * x删除当前位置内容\n\n * r替换当前位置内容\n\n# 命令模式\n\n * :set nu显示行号\n * :set nonu不显示行号\n * :set nohlsearch取消高亮显示\n * :w保存命令\n\n> :w /root/a.txt保存指定目录\n\n * /x查找x的位置，n找到下一个，shift+n找到下一个\n * :%s/old/newold替换new\n * :%s/old/new/gold全局替换new\n * :3,5s/old/new/g3到5行的old替换new\n\n# 插入模式\n\n> i在光标当前位置，进入插入模式\n> shift+i在光标当前行的首位，进入插入模式\n> a在光标当前位置的下一位，进入插入模式\n> shift+a在光标当前行的末位，进入插入模式\n> o在光标当前行的下一行，创建一个空行，进入插入模式\n> shift+o在光标当前行的上一行，创建一个空行，进入插入模式\n\n# 可视模式\n\n * 三种进入可是模式的方式\n\n> v字符可视模式 shift+v行可视模式 ctrl+v块可是模式\n\n * 插入\n\n> I在当前块前面插入\n\n * 删除\n\n> d删除选中部分\n\n\n# 1.5 用户与用户管理\n\n\n# 1.5.1 用户\n\n# id查询用户\n\nid root\n\n\n# useradd创建用户\n\n * 默认会创建一个和用户名同名的用户组\n\n> useradd jaqi\n\n * 创建用户并加入dev组\n\n> useradd -g dev jaqi\n\n# userdel删除用户\n\nuserdel jaqi\n\n\n * -r同时删除该用户的home目录\n\nuserdel -r jaqi\n\n\n# passwd修改用户密码\n\npasswd jaqi \n\n\n# usermod修改用户属性\n\n * -c修改用户帐号的备注文字。\n * -d修改用户登入时的home目录。\n * -e修改帐号的有效期限。\n * -f修改在密码过期后多少天即关闭该帐号。\n * -g修改用户所属的群组。\n\n> usermod -g dev  jaqi \n\n * -G修改用户所属的附加群组。\n * -l修改用户帐号名称。\n * -L锁定用户密码，使密码无效。\n * -s修改用户登入后所使用的shell。\n * -u修改用户ID。\n * -U解除密码锁定。\n\n# chage修改用户属性\n\nchage jaqi \n\n\n\n# 1.5.2 用户组\n\n# groupadd创建用户组\n\ngroupadd dev\n\n\n\n# 1.5.3 用户管理\n\n# su切换用户\n\n-完全切换\n\nsu - jaqi\n\n\n# visudo给其他用户授权\n\n# sudo以其他用户身份执行命令\n\nsudo - jaqi\n\n\n\n# 1.5.4 用户配置文件\n\n/etc/passwd\n\n\n# 1.5.5 SELinux\n\n强制访问控制（生产环境不建议开启） 修改后需要重启生效\n\n\n# 1.6 网络管理\n\n\n# 1.6.1 网络信息\n\neth0表示第一块网卡\neno1表示板载网卡\nens33表示PCI-E网卡\nenp0s3表示无法获取物流信息的PCI-E网卡\n\n# net-tools(老版本)\n\n * ipconfig 查看网卡\n\n> /sbin/ifconfig普通用户查看网卡\n\n * mii-tool 查看网卡连接状态\n\n> mii-tool enp4s0f2 接口名\n\n * route 查看网关\n\n> route -n 不解析域名\n> route add -host设置网关\n\n# iproute2（centos7以上）\n\n * ip a 查看网卡\n * ip addr show dev ens33查看某个网卡信息\n * ip route查看网关\n\n\n# 1.6.2 网络状态\n\n * service network status查看网络状态\n * service network restart重启网卡\n * ping检测当前主机与目标主机是否畅通\n * traceroute检测当前主机到目标主机的网络状态\n * mtr检测当前主机的网络状态\n * nslookup查看域名对应的ip\n * telent检查目标主机的端口连接状态\n * tcpdump分析数据包\n * netstat查看端口状态\n * ss\n\n\n# 1.6.3 网络配置\n\n# 管理工具\n\n 1. SysV(老版本)\n 2. systemd(centos7以上)\n    ifcfg-eth0网络配置文件\n    /etc/hosts网卡配置文件\n    /etc/sysconfig/network-script网卡配置文件\n\n * hostname主机名\n\n\n# 1.7 软件安装\n\n软件包管理器，方便软件的安装、卸载。\nCentos、RedHat使用yum，软件包格式为rpm\nDebian、Ubuntu使用apt,软件包格式为deb\n\n\n# rpm\n\n# rpm包格式\n\nvim-common-7.4.10-5.elx86_64.rpm\n软件名：vim-common\n软件版本：7.4.10-5\n系统版本：el7\n平台：x86_64\n\n# rpm常用参数\n\n-q查询\n-qa查询全部软件包\n-i安装\n-e卸载\n\n# yum仓库\n\n * 设置镜像源 阿里镜像源\n   install安装\n   remove卸载\n   list查询已安装软件包\n   grouplist\n   update升级，不填包名，更新全部\n   :::yum的优点\n   yum可以自动检测依赖关系，判断包是否被篡改，可以指定安装源\n   :::\n\n# 源代码编译安装流程\n\n 1. wget下载源代码\n 2. tar解压压缩包\n 3. cd进入安装包目录\n 4. ./configure --prefix=/usr/local/openrestyconfigure表示可执行，--prefix=指定安装目录\n 5. make -j2编译,（-j2用两个核心编译）\n 6. make install安装\n\n# 升级内核\n\n * rpm方式\n\n 1. uname -r 查看内核版本\n 2. yum install kernel-3.10.0 升级内核\n\n * 源代码编译方式（略）\n\n\n# 1.8 进程管理\n\n# 查看进程\n\nps查看当前终端正在进行的进程\npstree查看进程树\ntop实时显示正在进行的进程\n\n# 查看之间的通信\n\nkill -l查看所有支持的信号及信号编号\nkill 9 228179信号编号，22817进程标号\n\n# 守护进程\n\nnohup不受挂起影响，也一直运行。\nnohup+&不受挂起影响，即使关闭终端，也一直运行。\n\nnohup tail -f /var/log/messages &\n\n\nscreen进入screen环境，（与服务器断开后，恢复后仍能继续运行）\nctrl+a退出screen模式\n\n# 服务管理工具\n\n * service工具\n   启动脚本：/etc/init.d/\n * systemctl工具(新)\n   启动脚本：/usr/lib/systemd/system\n   systemctl start+服务名 启动\n   systemctl stop+服务名 停止\n   systemctl status+服务名 查看状态\n   systemctl restart+服务名 关闭后重新重启\n   systemctl reload+服务名 不关闭直接重新加载\n   systemctl enable+服务名设置随系统自动运行\n   systemctl disable+服务名设置不允许随系统自动运行\n\n\n# 1.9 内存与磁盘管理\n\n\n# 1.9.1 内存\n\nfree -m查看内存使用率,以M为单位（-g以G为单位）\ntop 实时显示正在进行的进程，及内存占用情况\n\n\n# 1.9.2 磁盘\n\n# fdisk查看磁盘情况，对磁盘进行分区\n\nfdisk -l查看全部磁盘\ndf -h查看linux分区下的文件信息\ndu查看文件所占磁盘大小（ls文件字节长度大小）\ndd磁盘分区\n\n\n# 1.9.3 文件系统\n\next4:CentOS6及以前\nxfs:CentOS7\nNTFS:外置设备(需要安装NTFS软件包)\n\n\n# ext4\n\n# 超级块\n\n根据全部文件生成的数据块\n\n# 超级块副本\n\n对超级快进行备份\n\n# i节点\n\n记录每一个文件的属性和权限等信息， ls -li查看i节点ID\n\n# 数据块\n\n记录文件的具体数据，每4.0KB(ext4,xfs)生成块（ls是根据查出当前i节点下全部数据块的大小总和，不满的块也会被计算）\n\nTIP\n\ntouch创建文件，创建一个i节点和一个4.0KB(ext4,xfs)的数据块。\nmv移动/改名文件，修改i节点的记录参数，如果是跨目录移动则i节点与数据块同时移动，如果跨分区移动（不是瞬间完成的）。\ncp复制文件，创建一个新的i节点及相应数据块。\nvim编辑文件，编辑的是文件生成的缓存文件，会改变i节点，好处可以被同时打开且意外终止，不会影响源文件。\necho >编辑文件，编辑的是文本本身不会改变i节点。\nrm删除文件，删除的是i节点与数据块的绑定关系。\nln链接文件，将数据块指向某个i节点，可以多个数据块指向同一个i节点，不能跨分区。\nln -s符号(软)链接文件，创建一个新的i节点指向另一个i节点，可以跨分区。不能设置单独的权限。需要使用facl设置权限\n\n\n# 1.9.4 磁盘分区与挂载\n\n# fdisk\n\nfdisk+要分区的设备名进入分区工具。\nm帮助\nn新建分区\np查看分区\nq不保存退出\nd删除分区\nw保存\n\n# mkfs格式化\n\n# parted对大于2TB的文件进行分区\n\n# mount挂载\n\n# 配置文件\n\n/etc/fstab\n\n\n# 1.9.5 磁盘配额\n\n\n# xfx系统\n\n 1. mkfs.xfs /dev/sdb1\n\n> 格式化sdb1分区\n\n 2. mkdir -p /mnt/disk1\n\n> 创建disk1分区目录\n\n 1. mount -o uquota,gquota /dev/sdb1 /mnt/disk1\n\n> 挂载sdb1分区到disk1目录\n> uquota：用户磁盘配额\n> gquota：组磁盘配额\n\n 4. chmod 17777 /mnt/disk1\n\n> 设置权限\n\n 5. xfs_quota+enter键进入xfs_quota模式\n 6. xfs_quota -x -c \'report -ugibh\' /mnt/disk1\n\n> 查看disk1磁盘配额\n> u：用户\n> g：组\n> i：节点\n> b：数据块\n> h：显示的格式\n\n 6. xfs_quota -x -c \'limit -u isoft=5 ihard=10 user1\' /mnt/disk1\n\n> 配置disk1磁盘配额\n> limit：限制磁盘配额(-u：用户,-g：组)\n> soft：软限制，hard：应限制。\n> \n> TIP\n> \n> 硬限制：可以在任何时候任何进程中设置 但硬限制只能由超级用户提起 软限制：内核实际执行的限制，任何进程都可以将软限制设置为任意小于等于对进程限制的硬限制的值。 isoft：单次可创建的最大i节点数 ihard：总的可创建文件i节点数 bsoft：单次可创建的最大数据块数 bhard：总的可创建数据块数\n> \n> user1：被操作的用户\n\n\n# 1.9.6 交换（swap）分区\n\n\n# 增加交换分区(虚拟内存)\n\n * mkswap\n   mkswap /dev/sdd1将sdd1分区格式化成交换分区\n   mkswapoff /dev/sdd1恢复sdd1分区\n * swapon\n\n\n# 1.9.7 RAID磁盘阵列\n\n\n# RAID卡\n\n\n# 软件模拟RAID\n\nmdadm：RADI软件包\n\n\n# 1.9.8 逻辑卷管理\n\n物理卷（pv）：一个物理设备即一个物理卷 逻辑卷（lv）：文件系统无法跨物理卷使用，因此在各物理卷的底层再叠加一个逻辑卷。 卷组（vg）：多个物理卷组成的组 lvm：逻辑卷管理器\n\n\n# 逻辑卷的创建\n\n 1.  fdisk添加硬盘或分区\n 2.  pvcreate+硬盘1+硬盘2:对多个硬盘同时创建物理卷\n 3.  pvs查看物理卷\n 4.  vgcreate+卷组名+物理卷1+物理卷2:设置卷组，一个卷不能加入两个不同的卷组\n 5.  vgs+卷组名查看卷组\n 6.  lvcreate -l+空间大小+-n+逻辑卷名+卷组名:创建逻辑卷\n 7.  lvs查看逻辑卷\n 8.  mkdir /mnt/+目录名:创建目录\n 9.  mfs.xfx /dev/+卷组名+逻辑卷名格式化\n 10. mount挂载\n\n\n# 逻辑卷的扩充\n\n 1. vgextend',normalizedContent:'linux版本：内核版本、发行版本。\n所有命令都区分大小写。\nroot用户 # 普通用户 $\nexit切换用户\ninit 0关机 reboot、init 6重启 init 2命令行模式\ninit 3图形模式\nsystemctl get-default查看默认启动模式\nsystemctl set-default multi-user.target设置默认启动命令行模式\nshutdown -h 3030分钟之后关机\nclear或者ctrl+l清空命令\ntab键命令不全\ny确认、ctrl+c终止\nctrl+r搜索之前的命令\n\n * ip addr查看ip地址\n   终端： 图形、命令行、远程终端（ssh、vnc）\n\n\n# 1.1 常用目录结构\n\n/根目录\n\n * 系统启动必须：\n   /boot存放的启动linux 时使用的内核文件，包括连接文件以及镜像文件。\n   /etc存放所有的系统需要的配置文件和子目录列表，更改目录下的文件可能会导致系统不能启动。\n   /lib存放基本代码库（比如c++库），其作用类似于windows里的dll文件。几乎所有的应用程序都需要用到这些共享库。\n   /sys这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中\n * 指令集合：\n   /bin存放着最常用的程序和指令\n   /sbin只有系统管理员能使用的程序和指令。\n * 外部文件管理：\n   /devdevice(设备)的缩写, 存放的是linux的外部设备。注意：在linux中访问设备和访问文件的方式是相同的。\n   /media类windows的其他设备，例如u盘、光驱等等，识别后linux会把设备放到这个目录下。\n   /mnt临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。\n * 临时文件：\n   /run是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。\n   /lost+found一般情况下为空的，系统非法关机后，这里就存放一些文件。\n   /tmp这个目录是用来存放一些临时文件的。\n * 账户：\n   /root系统管理员的用户主目录。\n   /home用户的主目录，以用户的账号命名的。\n   /usr用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。\n   /usr/bin系统用户使用的应用程序与指令。\n   /usr/sbin超级用户使用的比较高级的管理程序和系统守护程序。\n   /usr/src内核源代码默认的放置目录。\n * 运行过程中要用：\n   /var存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。\n   /proc管理内存空间！虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。\n * 扩展用的：\n   /opt默认是空的，我们安装额外软件可以放在这个里面。\n   /srv存放服务启动后需要提取的数据（不用服务器就是空）\n\n\n# 1.2 帮助命令\n\n * man是manual的缩写,查看命令的帮助\n\nman ls\n\n\nhelp查看命令解释器\n\nhelp ls \x3c!-- 内部命令 --\x3e\nls -help \x3c!-- 外部命令 --\x3e \n\n\ninfo比help帮助更详细\n\ninfo ls \n\n\n\n# 1.3 文件管理\n\n\n# 1.3.1 文件查看\n\n# psw显示当前的目录名\n\n# pwd显示当前的完整路径\n\n# cd切换目录\n\n以/开头绝对路径\n以.开头当前路径\n以./、开头相对路径\n以../、..开头相对上一级路径\n-回到刚才的目录\n\n# ls显示当前目录下的文件\n\nls /root  \x3c!-- root目录下的文件 --\x3e\nls /nome /root  \x3c!-- root目录和根目录下的文件 --\x3e\n\n\n * -l长格式显示文件\n * -a 显示隐藏的文件,以.开头的是隐藏的文件\n * -r 逆序显示，需配合-l使用\n * -t 按时间排序显示\n * -r 递归显示（显示子文件夹里的所有文件）\n * -lrtr 按时间逆序长格式递归显示\n\n[root@localhost/]$ ls -l /  \x3c!-- 详细显示根目录下的文件 --\x3e\n-rw-------. 1 root 1555 dec 14 23：:50 anaconda-ks.cfg\n-dw-r--r--. 1 root 1555 dec 14 23：:50 boot\n\n\n文件的权限详见1.3.4\n\n\n# 1.3.2 目录/文件的创建与删除\n\n# mkdir创建一个空目录\n\n * 在根目录创建一个a目录\n\nmkdir /a\n\n\n * 在当前目录创建一个a目录\n\nmkdir a\n\n\n * 在当前目录创建一个a目录,在a中再创建b...\n\nmkdir a/b/c \n\n\n * 在当前目录同时创建a、b、c\n\nmkdir a b c\n\n\n * -p进行三级以上的创建\n\nmkdir -p  a/b/c/d/e/f/g \n\n\n# rmdir删除一个空目录\n\n# rm删除一个或多个目录\n\n * -r删除非空目录，y确认、ctrl+c终止\n\nrm -r\n\n\n * -f删除非空目录，不进行操作提示。\n\nrm -rf\n\n\n# touch创建一个文件\n\n    touch file\n\n\n\n# 1.3.3 文件操作\n\n# cp文件的复制\n\n * 复制a目录或a文件到root目录下\n\ncp a /root/ \n\n\n * -r同时复制整个目录\n\ncp -r  /root/a /tmp/ \n\n\n * -p复制的时候同时复制权限、属组和时间\n\ncp -p /root/a /tmp/ \n\n\n# mv文件的移动和重命名\n\n * filea改名fileb\n\nmv /filea /fileb \n\n\n * fileb移动到tmp目录\n\nmv /fileb /tmp \n\n\n * fileb移动到tmp目录，并改名filec\n\nmv /fileb /tmp/filec \n\n\n\n# 1.3.4 文件的权限\n\n# 查看文件权限\n\nls -l -rw-------. 1 root root 1721 1月 4 21:33 anaconda-ks.cfg\n\n 1. 首位表示文件类型-文件、d目录、l链接文档、b可随机存储装置、c一次性存储装置（鼠标、键盘）\n 2. 后面几位数字以三个为一组。第一组是属主权限，第一组是属组权限，第三组是其他用户权限\n\n> 文件权限表示方法\n> \n> > r=4=read\n> > w=2write\n> > x=1execute（可执行），-表示没有权限\n> > 6读写权限\n> > 7全部权限\n\n# 查看目录权限\n\nls -ld\n\n> 目录权限表示方法\n> \n> > x可进入目录\n> > rx显示目录内的文件名\n> > wx修改目录内的文件名\n\n 3. 第一个root表示谁创建的文件，第二个root表示是哪个用户组的。\n\n# chmod修改文件权限\n\n * +增加权限\n * -减少权限\n * =设置权限\n * u属主\n\nchmod u+x /tmp/testfile\n\n\n * g数组\n * o其他用户权限\n * a统一设置\n * 数组方法设置权限，第一位属主、第二位属组、第三位其他用户权限\n\nchmod 755 /tmp/testfile\n\n\n# chown修改文件属主和属组\n\n * 属主\n\nchown user1 /test\n\n\n * 属组\n\nchown :group1 /test\n\n\n# chgrp单独修改文件属组\n\n# 特殊权限\n\nsuid用于二进制可执行文件，执行命令时获取文件属主的权限\nsgid用于目录，在该目录下创建新的文件和目录，权限会自动更改为该目录的属组\nsbit用于目录，该目录下新建的文件和目录，仅root和自己可以删除\n\n# facl(ext4,xfs)文件系统独有\n\ngetfacl查看文件的权限\nsetfacl -m u:user1设置user1的权限\nsetfacl -m g:group1设置组group1的权限\nsetfacl -x u:user1取消user1的权限\n\n\n# 1.3.5 文件内容查看\n\n# cat查看文本内容\n\ncat /tmp/demo\n\n\n# head查看文本开头\n\n * 查看文件前五行(默认显示前十行)\n\nhead -5 /tmp/demo \n\n\n# tail查看文本结尾\n\n * 查看文件后五行(默认显示前十行)\n\ntail -5 /tmp/demo \n\n\n * -f实时查看文件的后十行\n\ntail -f /tmp/demo \n\n\n * grep过滤某个字符并实时查看文件的后十行\n\ntail -ef| grep  string\n\n\n# wc统计文本内容信息\n\n查看文本行数\n\nwc -l /tmp/demo\n\n\n# more分行显示文本内容（空格下翻）\n\nmore  /tmp/demo\n\n\n# less分行显示文本内容（b上翻，d下翻），\n\nless  /tmp/demo\n\n\n\n# 1.3.6 打包与压缩\n\n# 打包\n\n * cf打包\n * 将etc打包命名成etc-backup.tar并放入tmp文件夹\n\ntar cf /tmp/etc-backup.tar /etc\n\n\n# 解包\n\n * xf解包 解包放入root目录下\n\ntar xf /tmp/etc-backup.tar -c /root\n\n\n# 压缩与解压缩\n\n不能压缩目录，需要对目录先打包再压缩\n\n * czf打包并压缩成gzip格式 将etc打包并压缩成gz格式，且命名成etc-backup.tar并放入tmp文件夹\n\ntar czf /tmp/etc-backup.tar.gz /etc\n\n\n * cjf打包并压缩成bzip格式（压缩率高） 将etc打包并压缩成bz2格式，且命名成etc-backup.tar并放入tmp文件夹\n\ntar cjf /tmp/etc-backup.tar.bz2 /etc\n\n\n# 解压缩\n\n * zxf解压缩gzip格式 解压缩包放入root目录下\n\ntar zxf /tmp/etc-backup.tar -c /root\n\n\n * jxf解压缩bzip格式 解压缩包放入root目录下\n\ntar jxf /tmp/etc-backup.tar -c /root\n\n\n参数说明\n\nc打包 x解包 f制定操作类型为文件\n\n\n# 1.3.7 查找文件\n\n# find查找文件\n\n * -name指定文件名\n * -type指定文件类型\n\n * > d(目录)、c(字型装置文件)、b(区块装置文件)、p(具名贮列)、f(一般文件)、l(符号连结)、s(socket)\n\n * -size指定文件大小查找\n * -cmin指定是过去n分钟内被修改过\n * -exec找到后的下一步操作\n\n查看etc下的jaqi文件\n\n    find /etc/ -name jaqi \n\n\n查找当前目录及其子目录下所有最近20天内更新过的文件\n\n# find . -ctime -20\n\n\n查找系统中所有文件长度为0的普通文件\n\n    find / -type f -size 0 -exec ls -l {} \\; \n\n\n\n# 1.3.8 查找文件内容\n\n# grep查找文件内容\n\n * -l显示行数\n   查找全部文件中有字符串"jaqi"的文件\n\n    grep -lr "jaqi" *\n\n\n\n# 1.3.9 文件内容批量处理\n\n# sed文件内容批量处理\n\n查找全部文件中有字符串"jaqi"的文件并替换成"jaqi.l"\n\n    sed -i "s/jaqi/jaqi.l/g" \n\n\n\n# 1.4 vi文本编辑器\n\nvi的四种模式\n\n> 正常模式\n> 插入模式\n> 命令模式\n> 可是模式\n\n# vim配置文件\n\n/etc/vimrc\n\n# 普通模式\n\n * 移动光标位置\n\n> h左\n> j下\n> k上\n> l右\n\n * 设置光标到位置\n\n> g设置到首行\n> shift+g设置到末行\n> n+shift+g设置到指定行\n> shift+6设置到行首\n> shift+4设置到行末\n\n * y复制\n\n> yy复制行 n+yy复制n行 y$复制从当前光标到末位内容\n\n * p粘贴\n\n * d剪切\n\n> dd复制行\n> n+dd复制n行\n> d$复制从当前光标到末位内容\n\n * u撤销\n\n * ctrl+r取消撤销\n\n * x删除当前位置内容\n\n * r替换当前位置内容\n\n# 命令模式\n\n * :set nu显示行号\n * :set nonu不显示行号\n * :set nohlsearch取消高亮显示\n * :w保存命令\n\n> :w /root/a.txt保存指定目录\n\n * /x查找x的位置，n找到下一个，shift+n找到下一个\n * :%s/old/newold替换new\n * :%s/old/new/gold全局替换new\n * :3,5s/old/new/g3到5行的old替换new\n\n# 插入模式\n\n> i在光标当前位置，进入插入模式\n> shift+i在光标当前行的首位，进入插入模式\n> a在光标当前位置的下一位，进入插入模式\n> shift+a在光标当前行的末位，进入插入模式\n> o在光标当前行的下一行，创建一个空行，进入插入模式\n> shift+o在光标当前行的上一行，创建一个空行，进入插入模式\n\n# 可视模式\n\n * 三种进入可是模式的方式\n\n> v字符可视模式 shift+v行可视模式 ctrl+v块可是模式\n\n * 插入\n\n> i在当前块前面插入\n\n * 删除\n\n> d删除选中部分\n\n\n# 1.5 用户与用户管理\n\n\n# 1.5.1 用户\n\n# id查询用户\n\nid root\n\n\n# useradd创建用户\n\n * 默认会创建一个和用户名同名的用户组\n\n> useradd jaqi\n\n * 创建用户并加入dev组\n\n> useradd -g dev jaqi\n\n# userdel删除用户\n\nuserdel jaqi\n\n\n * -r同时删除该用户的home目录\n\nuserdel -r jaqi\n\n\n# passwd修改用户密码\n\npasswd jaqi \n\n\n# usermod修改用户属性\n\n * -c修改用户帐号的备注文字。\n * -d修改用户登入时的home目录。\n * -e修改帐号的有效期限。\n * -f修改在密码过期后多少天即关闭该帐号。\n * -g修改用户所属的群组。\n\n> usermod -g dev  jaqi \n\n * -g修改用户所属的附加群组。\n * -l修改用户帐号名称。\n * -l锁定用户密码，使密码无效。\n * -s修改用户登入后所使用的shell。\n * -u修改用户id。\n * -u解除密码锁定。\n\n# chage修改用户属性\n\nchage jaqi \n\n\n\n# 1.5.2 用户组\n\n# groupadd创建用户组\n\ngroupadd dev\n\n\n\n# 1.5.3 用户管理\n\n# su切换用户\n\n-完全切换\n\nsu - jaqi\n\n\n# visudo给其他用户授权\n\n# sudo以其他用户身份执行命令\n\nsudo - jaqi\n\n\n\n# 1.5.4 用户配置文件\n\n/etc/passwd\n\n\n# 1.5.5 selinux\n\n强制访问控制（生产环境不建议开启） 修改后需要重启生效\n\n\n# 1.6 网络管理\n\n\n# 1.6.1 网络信息\n\neth0表示第一块网卡\neno1表示板载网卡\nens33表示pci-e网卡\nenp0s3表示无法获取物流信息的pci-e网卡\n\n# net-tools(老版本)\n\n * ipconfig 查看网卡\n\n> /sbin/ifconfig普通用户查看网卡\n\n * mii-tool 查看网卡连接状态\n\n> mii-tool enp4s0f2 接口名\n\n * route 查看网关\n\n> route -n 不解析域名\n> route add -host设置网关\n\n# iproute2（centos7以上）\n\n * ip a 查看网卡\n * ip addr show dev ens33查看某个网卡信息\n * ip route查看网关\n\n\n# 1.6.2 网络状态\n\n * service network status查看网络状态\n * service network restart重启网卡\n * ping检测当前主机与目标主机是否畅通\n * traceroute检测当前主机到目标主机的网络状态\n * mtr检测当前主机的网络状态\n * nslookup查看域名对应的ip\n * telent检查目标主机的端口连接状态\n * tcpdump分析数据包\n * netstat查看端口状态\n * ss\n\n\n# 1.6.3 网络配置\n\n# 管理工具\n\n 1. sysv(老版本)\n 2. systemd(centos7以上)\n    ifcfg-eth0网络配置文件\n    /etc/hosts网卡配置文件\n    /etc/sysconfig/network-script网卡配置文件\n\n * hostname主机名\n\n\n# 1.7 软件安装\n\n软件包管理器，方便软件的安装、卸载。\ncentos、redhat使用yum，软件包格式为rpm\ndebian、ubuntu使用apt,软件包格式为deb\n\n\n# rpm\n\n# rpm包格式\n\nvim-common-7.4.10-5.elx86_64.rpm\n软件名：vim-common\n软件版本：7.4.10-5\n系统版本：el7\n平台：x86_64\n\n# rpm常用参数\n\n-q查询\n-qa查询全部软件包\n-i安装\n-e卸载\n\n# yum仓库\n\n * 设置镜像源 阿里镜像源\n   install安装\n   remove卸载\n   list查询已安装软件包\n   grouplist\n   update升级，不填包名，更新全部\n   :::yum的优点\n   yum可以自动检测依赖关系，判断包是否被篡改，可以指定安装源\n   :::\n\n# 源代码编译安装流程\n\n 1. wget下载源代码\n 2. tar解压压缩包\n 3. cd进入安装包目录\n 4. ./configure --prefix=/usr/local/openrestyconfigure表示可执行，--prefix=指定安装目录\n 5. make -j2编译,（-j2用两个核心编译）\n 6. make install安装\n\n# 升级内核\n\n * rpm方式\n\n 1. uname -r 查看内核版本\n 2. yum install kernel-3.10.0 升级内核\n\n * 源代码编译方式（略）\n\n\n# 1.8 进程管理\n\n# 查看进程\n\nps查看当前终端正在进行的进程\npstree查看进程树\ntop实时显示正在进行的进程\n\n# 查看之间的通信\n\nkill -l查看所有支持的信号及信号编号\nkill 9 228179信号编号，22817进程标号\n\n# 守护进程\n\nnohup不受挂起影响，也一直运行。\nnohup+&不受挂起影响，即使关闭终端，也一直运行。\n\nnohup tail -f /var/log/messages &\n\n\nscreen进入screen环境，（与服务器断开后，恢复后仍能继续运行）\nctrl+a退出screen模式\n\n# 服务管理工具\n\n * service工具\n   启动脚本：/etc/init.d/\n * systemctl工具(新)\n   启动脚本：/usr/lib/systemd/system\n   systemctl start+服务名 启动\n   systemctl stop+服务名 停止\n   systemctl status+服务名 查看状态\n   systemctl restart+服务名 关闭后重新重启\n   systemctl reload+服务名 不关闭直接重新加载\n   systemctl enable+服务名设置随系统自动运行\n   systemctl disable+服务名设置不允许随系统自动运行\n\n\n# 1.9 内存与磁盘管理\n\n\n# 1.9.1 内存\n\nfree -m查看内存使用率,以m为单位（-g以g为单位）\ntop 实时显示正在进行的进程，及内存占用情况\n\n\n# 1.9.2 磁盘\n\n# fdisk查看磁盘情况，对磁盘进行分区\n\nfdisk -l查看全部磁盘\ndf -h查看linux分区下的文件信息\ndu查看文件所占磁盘大小（ls文件字节长度大小）\ndd磁盘分区\n\n\n# 1.9.3 文件系统\n\next4:centos6及以前\nxfs:centos7\nntfs:外置设备(需要安装ntfs软件包)\n\n\n# ext4\n\n# 超级块\n\n根据全部文件生成的数据块\n\n# 超级块副本\n\n对超级快进行备份\n\n# i节点\n\n记录每一个文件的属性和权限等信息， ls -li查看i节点id\n\n# 数据块\n\n记录文件的具体数据，每4.0kb(ext4,xfs)生成块（ls是根据查出当前i节点下全部数据块的大小总和，不满的块也会被计算）\n\ntip\n\ntouch创建文件，创建一个i节点和一个4.0kb(ext4,xfs)的数据块。\nmv移动/改名文件，修改i节点的记录参数，如果是跨目录移动则i节点与数据块同时移动，如果跨分区移动（不是瞬间完成的）。\ncp复制文件，创建一个新的i节点及相应数据块。\nvim编辑文件，编辑的是文件生成的缓存文件，会改变i节点，好处可以被同时打开且意外终止，不会影响源文件。\necho >编辑文件，编辑的是文本本身不会改变i节点。\nrm删除文件，删除的是i节点与数据块的绑定关系。\nln链接文件，将数据块指向某个i节点，可以多个数据块指向同一个i节点，不能跨分区。\nln -s符号(软)链接文件，创建一个新的i节点指向另一个i节点，可以跨分区。不能设置单独的权限。需要使用facl设置权限\n\n\n# 1.9.4 磁盘分区与挂载\n\n# fdisk\n\nfdisk+要分区的设备名进入分区工具。\nm帮助\nn新建分区\np查看分区\nq不保存退出\nd删除分区\nw保存\n\n# mkfs格式化\n\n# parted对大于2tb的文件进行分区\n\n# mount挂载\n\n# 配置文件\n\n/etc/fstab\n\n\n# 1.9.5 磁盘配额\n\n\n# xfx系统\n\n 1. mkfs.xfs /dev/sdb1\n\n> 格式化sdb1分区\n\n 2. mkdir -p /mnt/disk1\n\n> 创建disk1分区目录\n\n 1. mount -o uquota,gquota /dev/sdb1 /mnt/disk1\n\n> 挂载sdb1分区到disk1目录\n> uquota：用户磁盘配额\n> gquota：组磁盘配额\n\n 4. chmod 17777 /mnt/disk1\n\n> 设置权限\n\n 5. xfs_quota+enter键进入xfs_quota模式\n 6. xfs_quota -x -c \'report -ugibh\' /mnt/disk1\n\n> 查看disk1磁盘配额\n> u：用户\n> g：组\n> i：节点\n> b：数据块\n> h：显示的格式\n\n 6. xfs_quota -x -c \'limit -u isoft=5 ihard=10 user1\' /mnt/disk1\n\n> 配置disk1磁盘配额\n> limit：限制磁盘配额(-u：用户,-g：组)\n> soft：软限制，hard：应限制。\n> \n> tip\n> \n> 硬限制：可以在任何时候任何进程中设置 但硬限制只能由超级用户提起 软限制：内核实际执行的限制，任何进程都可以将软限制设置为任意小于等于对进程限制的硬限制的值。 isoft：单次可创建的最大i节点数 ihard：总的可创建文件i节点数 bsoft：单次可创建的最大数据块数 bhard：总的可创建数据块数\n> \n> user1：被操作的用户\n\n\n# 1.9.6 交换（swap）分区\n\n\n# 增加交换分区(虚拟内存)\n\n * mkswap\n   mkswap /dev/sdd1将sdd1分区格式化成交换分区\n   mkswapoff /dev/sdd1恢复sdd1分区\n * swapon\n\n\n# 1.9.7 raid磁盘阵列\n\n\n# raid卡\n\n\n# 软件模拟raid\n\nmdadm：radi软件包\n\n\n# 1.9.8 逻辑卷管理\n\n物理卷（pv）：一个物理设备即一个物理卷 逻辑卷（lv）：文件系统无法跨物理卷使用，因此在各物理卷的底层再叠加一个逻辑卷。 卷组（vg）：多个物理卷组成的组 lvm：逻辑卷管理器\n\n\n# 逻辑卷的创建\n\n 1.  fdisk添加硬盘或分区\n 2.  pvcreate+硬盘1+硬盘2:对多个硬盘同时创建物理卷\n 3.  pvs查看物理卷\n 4.  vgcreate+卷组名+物理卷1+物理卷2:设置卷组，一个卷不能加入两个不同的卷组\n 5.  vgs+卷组名查看卷组\n 6.  lvcreate -l+空间大小+-n+逻辑卷名+卷组名:创建逻辑卷\n 7.  lvs查看逻辑卷\n 8.  mkdir /mnt/+目录名:创建目录\n 9.  mfs.xfx /dev/+卷组名+逻辑卷名格式化\n 10. mount挂载\n\n\n# 逻辑卷的扩充\n\n 1. vgextend',charsets:{cjk:!0}},{title:"2.1 基本介绍",frontmatter:{},regularPath:"/other/nginx/",relativePath:"other/nginx/README.md",key:"v-4a2dd348",path:"/other/nginx/",headers:[{level:2,title:"2.1 基本介绍",slug:"_2-1-基本介绍",normalizedTitle:"2.1 基本介绍",charIndex:2},{level:3,title:"2.1.1 Nginx的优点：",slug:"_2-1-1-nginx的优点",normalizedTitle:"2.1.1 nginx的优点：",charIndex:45},{level:3,title:"2.1.2 Nginx的组成：",slug:"_2-1-2-nginx的组成",normalizedTitle:"2.1.2 nginx的组成：",charIndex:117},{level:3,title:"2.1.3 的主要发行版本",slug:"_2-1-3-的主要发行版本",normalizedTitle:"2.1.3 的主要发行版本",charIndex:207},{level:3,title:"2.1.4 Nginx配置语法",slug:"_2-1-4-nginx配置语法",normalizedTitle:"2.1.4 nginx配置语法",charIndex:309},{level:3,title:"2.1.5 Nginx命令行",slug:"_2-1-5-nginx命令行",normalizedTitle:"2.1.5 nginx命令行",charIndex:519},{level:3,title:"2.1.6 安全协议",slug:"_2-1-6-安全协议",normalizedTitle:"2.1.6 安全协议",charIndex:811},{level:3,title:"GoAccess工具：可视化实时查看access日志",slug:"goaccess工具-可视化实时查看access日志",normalizedTitle:"goaccess工具：可视化实时查看access日志",charIndex:1024},{level:2,title:"2.2 构架基础",slug:"_2-2-构架基础",normalizedTitle:"2.2 构架基础",charIndex:1055},{level:2,title:"2.3 HTTP模块",slug:"_2-3-http模块",normalizedTitle:"2.3 http模块",charIndex:1680},{level:2,title:"2.4 反向代理与负载均衡",slug:"_2-4-反向代理与负载均衡",normalizedTitle:"2.4 反向代理与负载均衡",charIndex:1695},{level:2,title:"2.5 配置文件详解",slug:"_2-5-配置文件详解",normalizedTitle:"2.5 配置文件详解",charIndex:1713},{level:3,title:"全局模块配置",slug:"全局模块配置",normalizedTitle:"全局模块配置",charIndex:1728},{level:3,title:"events模块的配置",slug:"events模块的配置",normalizedTitle:"events模块的配置",charIndex:2025},{level:3,title:"http模块的配置",slug:"http模块的配置",normalizedTitle:"http模块的配置",charIndex:2262},{level:3,title:"location模块的配置",slug:"location模块的配置",normalizedTitle:"location模块的配置",charIndex:3932}],headersStr:"2.1 基本介绍 2.1.1 Nginx的优点： 2.1.2 Nginx的组成： 2.1.3 的主要发行版本 2.1.4 Nginx配置语法 2.1.5 Nginx命令行 2.1.6 安全协议 GoAccess工具：可视化实时查看access日志 2.2 构架基础 2.3 HTTP模块 2.4 反向代理与负载均衡 2.5 配置文件详解 全局模块配置 events模块的配置 http模块的配置 location模块的配置",content:'# 2.1 基本介绍\n\nNginx是一个高性能的HTTP和反向代理web服务器。\n\n\n# 2.1.1 Nginx的优点：\n\n 1. 高并发、高性能\n 2. 可扩展性好\n 3. 高可靠性\n 4. 热部署\n 5. BSD许可证书\n\n\n# 2.1.2 Nginx的组成：\n\n 1. 二进制可执行文件\n 2. Nginx.conf配置文件\n 3. access.log访问日志\n 4. error.log错误日志\n\n\n# 2.1.3 的主要发行版本\n\n 1. Tengine是阿里巴巴基于Nginx开发的第三方模块，但与Nginx更新不同步。\n 2. OpenResty是基于Nginx与Lua的高性能 Web 平台\n\n\n# 2.1.4 Nginx配置语法\n\n 1. 配置文件由指令块、指令组成。\n 2. 指令块由大括号组成，里面的内容是指令。\n 3. 指令以分号结尾，指令与参数空格分隔。\n 4. include语句可以引入多个配置文件\n 5. #注释\n 6. $变量\n 7. 部分指令支持正则\n 8. 时间配置参数：ms毫秒、s秒、m分钟、h小时、d天、w周、M月、y年、\n 9. 空间配置参数：字节、k/Kkb、m/M兆、g/GG\n\n\n# 2.1.5 Nginx命令行\n\n * start nginx运行nginx\n * nginx+-?帮助\n * nginx+-c使用指定的配置文件\n * nginx+-g指定配置命令\n * nginx+-p指定运行目录\n * nginx+-t、-T测试配置文件是否有错误\n * nginx+-v、-V打印Nginx的版本信息、编译信息等\n * nginx+-s+stop/squti/reload/reopen 立即停止服务、优雅的停止服务、重载配置文件、重新开始记录日志文件\n * tasklist /fi "imagename eq nginx.exe"查看nginx进程\n\n\n# 2.1.6 安全协议\n\n# 使用Let\'s Encrypt配置证书\n\nyum install python2-certbot-nginx安装配置工具\ncertbot --nginx --nginx-server-root=/usr/local/openresty/nginx/conf/ -d+www.jaqi.com 给指定域名生成证书，并放置/usr/local/openresty/nginx/conf/目录下\n\n\n# GoAccess工具：可视化实时查看access日志\n\n\n# 2.2 构架基础\n\n# 2.2.1 Nginx的请求处理流程\n\n\n\n# 2.2.2 Nginx的进程结构\n\n * 多进程Nginx结构\n\n 1. Master进程= CM进程+CL进程+n个worker进程\n 2. 进程之间通过共享内存通讯\n 3. 每个worker进程独占一个CPU内核\n 4. 一个线程同时处理多个连接，尽量减少切换进程。\n\n# 2.2.3 Nginx进程管理-信号\n\n 1. 信号种类\n\n> term/int立刻停止\n> quit优雅的停止\n> ``hup重载配置文件usr1重新打开日志文件usr2、winch`通过命令行发送信号，针对热部署使用\n\n 2. Master信号\n\n> 监控worker进程\n> 管理worker进程\n> 接受信号term、int、quit、hup、usr1、usr2、 winch\n\n 3. Worker信号\n\n> 接受信号term、int、quit、usr1、winch\n\n 4. 命令行信号\n\n> hup、usr1、term、quit\n\nTIP\n\n 1. Nginx为什么是多进程结构：多线程共用一个地址空间，易出现缓存失效，Nginx使用多进程单线程，不仅能提高并发率,而且进程之间是相互独立，互不干扰。\n 2. 什么是http请求优雅的关闭：判断连接是否空闲，并关闭空闲的连接\n 3. 重载:先启动新的进程平稳运行后再关闭旧的进程，此时新进程可以向老进程发送hup信号进行回滚。\n\n\n# 2.3 HTTP模块\n\n\n# 2.4 反向代理与负载均衡\n\n\n# 2.5 配置文件详解\n\n\n# 全局模块配置\n\nuser administrator administrators;  # 配置用户或者组，默认为nobody nobody。\nworker_processes 2;  # 允许生成的worker进程数，默认为1 建议设置为cpu内核数\npid /nginx/pid/nginx.pid;   # pid进程运行文件存放地址\nrror_log log/error.log debug;  # 设置日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg\n\n\n\n# events模块的配置\n\naccept_mutex on;   # 设置网路连接序列化，防止惊群现象发生，默认为on\nmulti_accept on;  # 设置一个进程是否同时接受多个网络连接，默认为off\nuse epoll;      # 事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\nworker_connections  1024;    # 单个work的最大连接数，默认为512\n\n\n\n# http模块的配置\n\nhttp {\n    include       mime.types;   # 文件扩展名与文件类型映射表\n    default_type  application/octet-stream; # 默认文件类型，默认为text/plain\n    charset utf-8; # 默认编码\n    access_log on; # 开启access日志服务 \n    log_format myFormat \'$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for\'; # 自定义日志要记录的参数\n    \n    # $remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；\n    # $remote_user ：用来记录客户端用户名称；\n    # $time_local ： 用来记录访问时间与时区；\n    # $request ： 用来记录请求的url与http协议；\n    # $status ： 用来记录请求状态；成功是200；\n    # $body_bytes_s ent ：记录发送给客户端文件主体内容大小；\n    # $http_referer ：用来记录从那个页面链接访问过来的；\n    # $http_user_agent ：记录客户端浏览器的相关信息；\n    \n    access_log log/access.log myFormat;  # 设置日志存放位置并使用myFormat格式记录日志\n    sendfile on;   # 允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。\n    sendfile_max_chunk 100k;  # 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。\n    keepalive_timeout 65;  # 连接超时时间，默认为75s，可以在http，server，location块。\n    gzip on; # 开启文件压缩\n    gzip_min_length 1;  # 压缩小于一字节以上的 \n    gzip_comp_level 2;  # 压缩级别\n    gzip_type text/plain application/x-javascript; # 要压缩的格式\n    upstream mysvr {   #  #负载均衡配置 \n      server 127.0.0.1:7878; # 默认轮训模式\n      server 192.168.3.1:7878  weight=2;  max_fails=2 fail_timeout=2 # weight设置加权轮训 max_fails允许请求失败次数 fail_timeout允许请求失败的时间间隔\n      server 192.168.10.1:3333 down;  # down不参与负载均衡\n      server 192.168.10.121:3333 backup;  # backup热备(当上一个服务器宕机后运行)\n      ip_hash; # 让同一个客户端请求相同的服务\n    }\n    error_page 500 502 503 504 /50x.html # 错误页\n    server {\n        keepalive_requests 120; # 单连接请求上限次数。\n        listen       4545;   # 监听端口\n        server_name  127.0.0.1;   # 监听地址       \n    }\n}\n\n\n\n# location模块的配置\n\nlocation  ~*^.+$ {   # 请求的url过滤，正则匹配，= 严格匹配 ~区分大小写匹配 !~区分大小写不匹配 ~* 不区分大小写匹配 !~* 不区分大小写不匹配 ^~ 如果路由匹配，那么不进行正则匹配\n  root path;  # root从当前目录下查找，alias是从根目录查看赵 \n  index vv.txt;  # 设置默认页\n  proxy_pass  http://mysvr;  # 请求转向mysvr 定义的服务器列表\n  autoindex off; # 是否开启自动目录 开启后用户可以访问全部静态资源  \n  set $limit_rate 1k; # 限制访问速度1k/s\n  client_max_body_size 10m; # 允许客户端请求的最大单文件字节数\n  client_body_buffer_size 128k; # 缓冲区代理缓冲用户端请求的最大字节数\n  proxy_connect_timeout 90; # nginx跟后端服务器连接超时时间(代理连接超时)\n  proxy_send_timeout 90; # 后端服务器数据回传时间(代理发送超时)\n  proxy_read_timeout 90; # 连接成功后，后端服务器响应时间(代理接收超时)\n  proxy_buffer_size 4k; # 设置代理服务器（nginx）保存用户头信息的缓冲区大小\n  proxy_buffers 4 32k; # proxy_buffers缓冲区，网页平均在32k以下的设置\n  proxy_busy_buffers_size 64k; # 高负荷下缓冲大小（proxy_buffers*2）\n  proxy_temp_file_write_size 64k; # 设定缓存文件夹大小，大于这个值，将从upstream服务器传\n  deny 127.0.0.1;  # 拒绝的ip\n  allow 172.18.5.54; # 允许的ip       \n  rewrite /oldindex /index permanent;break; # 重定向 oldindex → index \n              \n} \n\n\n拦截或转发请求时有无"/"的区别\n\n * 拦截：\n\n> location /api {}  # 拦截所有api开头的\n> location /api/ {}  # 拦截所有api/开头的\n\n * 转发请求：\n\n> location /api {\n>    proxy_pass http://jaqi.api;  # 相对路径 相当于被代理到 http://jaqi.api/api\n>    proxy_pass http://jaqi.api/; # 绝对路径 相当于被代理到 http://jaqi.api\n> }\n\n案例:\n\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n    #                  \'$status $body_bytes_sent "$http_referer" \'\n    #                  \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html; \n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache\'s document root\n        # concurs with nginx\'s one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n\n',normalizedContent:'# 2.1 基本介绍\n\nnginx是一个高性能的http和反向代理web服务器。\n\n\n# 2.1.1 nginx的优点：\n\n 1. 高并发、高性能\n 2. 可扩展性好\n 3. 高可靠性\n 4. 热部署\n 5. bsd许可证书\n\n\n# 2.1.2 nginx的组成：\n\n 1. 二进制可执行文件\n 2. nginx.conf配置文件\n 3. access.log访问日志\n 4. error.log错误日志\n\n\n# 2.1.3 的主要发行版本\n\n 1. tengine是阿里巴巴基于nginx开发的第三方模块，但与nginx更新不同步。\n 2. openresty是基于nginx与lua的高性能 web 平台\n\n\n# 2.1.4 nginx配置语法\n\n 1. 配置文件由指令块、指令组成。\n 2. 指令块由大括号组成，里面的内容是指令。\n 3. 指令以分号结尾，指令与参数空格分隔。\n 4. include语句可以引入多个配置文件\n 5. #注释\n 6. $变量\n 7. 部分指令支持正则\n 8. 时间配置参数：ms毫秒、s秒、m分钟、h小时、d天、w周、m月、y年、\n 9. 空间配置参数：字节、k/kkb、m/m兆、g/gg\n\n\n# 2.1.5 nginx命令行\n\n * start nginx运行nginx\n * nginx+-?帮助\n * nginx+-c使用指定的配置文件\n * nginx+-g指定配置命令\n * nginx+-p指定运行目录\n * nginx+-t、-t测试配置文件是否有错误\n * nginx+-v、-v打印nginx的版本信息、编译信息等\n * nginx+-s+stop/squti/reload/reopen 立即停止服务、优雅的停止服务、重载配置文件、重新开始记录日志文件\n * tasklist /fi "imagename eq nginx.exe"查看nginx进程\n\n\n# 2.1.6 安全协议\n\n# 使用let\'s encrypt配置证书\n\nyum install python2-certbot-nginx安装配置工具\ncertbot --nginx --nginx-server-root=/usr/local/openresty/nginx/conf/ -d+www.jaqi.com 给指定域名生成证书，并放置/usr/local/openresty/nginx/conf/目录下\n\n\n# goaccess工具：可视化实时查看access日志\n\n\n# 2.2 构架基础\n\n# 2.2.1 nginx的请求处理流程\n\n\n\n# 2.2.2 nginx的进程结构\n\n * 多进程nginx结构\n\n 1. master进程= cm进程+cl进程+n个worker进程\n 2. 进程之间通过共享内存通讯\n 3. 每个worker进程独占一个cpu内核\n 4. 一个线程同时处理多个连接，尽量减少切换进程。\n\n# 2.2.3 nginx进程管理-信号\n\n 1. 信号种类\n\n> term/int立刻停止\n> quit优雅的停止\n> ``hup重载配置文件usr1重新打开日志文件usr2、winch`通过命令行发送信号，针对热部署使用\n\n 2. master信号\n\n> 监控worker进程\n> 管理worker进程\n> 接受信号term、int、quit、hup、usr1、usr2、 winch\n\n 3. worker信号\n\n> 接受信号term、int、quit、usr1、winch\n\n 4. 命令行信号\n\n> hup、usr1、term、quit\n\ntip\n\n 1. nginx为什么是多进程结构：多线程共用一个地址空间，易出现缓存失效，nginx使用多进程单线程，不仅能提高并发率,而且进程之间是相互独立，互不干扰。\n 2. 什么是http请求优雅的关闭：判断连接是否空闲，并关闭空闲的连接\n 3. 重载:先启动新的进程平稳运行后再关闭旧的进程，此时新进程可以向老进程发送hup信号进行回滚。\n\n\n# 2.3 http模块\n\n\n# 2.4 反向代理与负载均衡\n\n\n# 2.5 配置文件详解\n\n\n# 全局模块配置\n\nuser administrator administrators;  # 配置用户或者组，默认为nobody nobody。\nworker_processes 2;  # 允许生成的worker进程数，默认为1 建议设置为cpu内核数\npid /nginx/pid/nginx.pid;   # pid进程运行文件存放地址\nrror_log log/error.log debug;  # 设置日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg\n\n\n\n# events模块的配置\n\naccept_mutex on;   # 设置网路连接序列化，防止惊群现象发生，默认为on\nmulti_accept on;  # 设置一个进程是否同时接受多个网络连接，默认为off\nuse epoll;      # 事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport\nworker_connections  1024;    # 单个work的最大连接数，默认为512\n\n\n\n# http模块的配置\n\nhttp {\n    include       mime.types;   # 文件扩展名与文件类型映射表\n    default_type  application/octet-stream; # 默认文件类型，默认为text/plain\n    charset utf-8; # 默认编码\n    access_log on; # 开启access日志服务 \n    log_format myformat \'$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for\'; # 自定义日志要记录的参数\n    \n    # $remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；\n    # $remote_user ：用来记录客户端用户名称；\n    # $time_local ： 用来记录访问时间与时区；\n    # $request ： 用来记录请求的url与http协议；\n    # $status ： 用来记录请求状态；成功是200；\n    # $body_bytes_s ent ：记录发送给客户端文件主体内容大小；\n    # $http_referer ：用来记录从那个页面链接访问过来的；\n    # $http_user_agent ：记录客户端浏览器的相关信息；\n    \n    access_log log/access.log myformat;  # 设置日志存放位置并使用myformat格式记录日志\n    sendfile on;   # 允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。\n    sendfile_max_chunk 100k;  # 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。\n    keepalive_timeout 65;  # 连接超时时间，默认为75s，可以在http，server，location块。\n    gzip on; # 开启文件压缩\n    gzip_min_length 1;  # 压缩小于一字节以上的 \n    gzip_comp_level 2;  # 压缩级别\n    gzip_type text/plain application/x-javascript; # 要压缩的格式\n    upstream mysvr {   #  #负载均衡配置 \n      server 127.0.0.1:7878; # 默认轮训模式\n      server 192.168.3.1:7878  weight=2;  max_fails=2 fail_timeout=2 # weight设置加权轮训 max_fails允许请求失败次数 fail_timeout允许请求失败的时间间隔\n      server 192.168.10.1:3333 down;  # down不参与负载均衡\n      server 192.168.10.121:3333 backup;  # backup热备(当上一个服务器宕机后运行)\n      ip_hash; # 让同一个客户端请求相同的服务\n    }\n    error_page 500 502 503 504 /50x.html # 错误页\n    server {\n        keepalive_requests 120; # 单连接请求上限次数。\n        listen       4545;   # 监听端口\n        server_name  127.0.0.1;   # 监听地址       \n    }\n}\n\n\n\n# location模块的配置\n\nlocation  ~*^.+$ {   # 请求的url过滤，正则匹配，= 严格匹配 ~区分大小写匹配 !~区分大小写不匹配 ~* 不区分大小写匹配 !~* 不区分大小写不匹配 ^~ 如果路由匹配，那么不进行正则匹配\n  root path;  # root从当前目录下查找，alias是从根目录查看赵 \n  index vv.txt;  # 设置默认页\n  proxy_pass  http://mysvr;  # 请求转向mysvr 定义的服务器列表\n  autoindex off; # 是否开启自动目录 开启后用户可以访问全部静态资源  \n  set $limit_rate 1k; # 限制访问速度1k/s\n  client_max_body_size 10m; # 允许客户端请求的最大单文件字节数\n  client_body_buffer_size 128k; # 缓冲区代理缓冲用户端请求的最大字节数\n  proxy_connect_timeout 90; # nginx跟后端服务器连接超时时间(代理连接超时)\n  proxy_send_timeout 90; # 后端服务器数据回传时间(代理发送超时)\n  proxy_read_timeout 90; # 连接成功后，后端服务器响应时间(代理接收超时)\n  proxy_buffer_size 4k; # 设置代理服务器（nginx）保存用户头信息的缓冲区大小\n  proxy_buffers 4 32k; # proxy_buffers缓冲区，网页平均在32k以下的设置\n  proxy_busy_buffers_size 64k; # 高负荷下缓冲大小（proxy_buffers*2）\n  proxy_temp_file_write_size 64k; # 设定缓存文件夹大小，大于这个值，将从upstream服务器传\n  deny 127.0.0.1;  # 拒绝的ip\n  allow 172.18.5.54; # 允许的ip       \n  rewrite /oldindex /index permanent;break; # 重定向 oldindex → index \n              \n} \n\n\n拦截或转发请求时有无"/"的区别\n\n * 拦截：\n\n> location /api {}  # 拦截所有api开头的\n> location /api/ {}  # 拦截所有api/开头的\n\n * 转发请求：\n\n> location /api {\n>    proxy_pass http://jaqi.api;  # 相对路径 相当于被代理到 http://jaqi.api/api\n>    proxy_pass http://jaqi.api/; # 绝对路径 相当于被代理到 http://jaqi.api\n> }\n\n案例:\n\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n    #                  \'$status $body_bytes_sent "$http_referer" \'\n    #                  \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html; \n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the php scripts to apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the php scripts to fastcgi server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  script_filename  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if apache\'s document root\n        # concurs with nginx\'s one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of ip-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # https server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:ssl:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  high:!anull:!md5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n\n',charsets:{cjk:!0}},{title:"7.2.1 创建服务器；响应请求(http)",frontmatter:{},regularPath:"/other/node/modules/",relativePath:"other/node/modules/README.md",key:"v-2828c47d",path:"/other/node/modules/",headers:[{level:2,title:"7.2.1 创建服务器；响应请求(http)",slug:"_7-2-1-创建服务器-响应请求-http",normalizedTitle:"7.2.1 创建服务器；响应请求(http)",charIndex:2},{level:2,title:"7.2.2 文件系统模块(fs)",slug:"_7-2-2-文件系统模块-fs",normalizedTitle:"7.2.2 文件系统模块(fs)",charIndex:1315},{level:2,title:"7.2.4 文件压缩模块(zlib)",slug:"_7-2-4-文件压缩模块-zlib",normalizedTitle:"7.2.4 文件压缩模块(zlib)",charIndex:2443},{level:2,title:"7.2.4 查询字符串模块(querystring)",slug:"_7-2-4-查询字符串模块-querystring",normalizedTitle:"7.2.4 查询字符串模块(querystring)",charIndex:2759},{level:3,title:"7.2.5 缓冲器(Buffer)",slug:"_7-2-5-缓冲器-buffer",normalizedTitle:"7.2.5 缓冲器(buffer)",charIndex:3145},{level:2,title:"7.2.6 请求路径处理方法(url)",slug:"_7-2-6-请求路径处理方法-url",normalizedTitle:"7.2.6 请求路径处理方法(url)",charIndex:3971},{level:2,title:"7.2.7 文件路径处理方法(path)与魔术变量(__dirname)",slug:"_7-2-7-文件路径处理方法-path-与魔术变量-dirname",normalizedTitle:"7.2.7 文件路径处理方法(path)与魔术变量(__dirname)",charIndex:4311},{level:2,title:"7.2.8 断言(assert)",slug:"_7-2-8-断言-assert",normalizedTitle:"7.2.8 断言(assert)",charIndex:4858}],headersStr:"7.2.1 创建服务器；响应请求(http) 7.2.2 文件系统模块(fs) 7.2.4 文件压缩模块(zlib) 7.2.4 查询字符串模块(querystring) 7.2.5 缓冲器(Buffer) 7.2.6 请求路径处理方法(url) 7.2.7 文件路径处理方法(path)与魔术变量(__dirname) 7.2.8 断言(assert)",content:'# 7.2.1 创建服务器；响应请求(http)\n\n请求参数的属性\n\n> req.url:返回请求路径\n> req.method:返回请求方式\n> req.headers:返回请求头\n> req.on:添加请求的监听事件\n> \n> > req.on("data",callback)监听每次请求来的数据\n> > req.on("end",callback)监听数据接收结束事件\n> > req.on("error",callback)监听请求接收错误事件\n\n响应参数的属性\n\n> res.writeHead:设置响应头（响应的的参数）\n> res.setHeader:设置响应头（ 参数1：状态码，参数2：响应的的参数）\n> res.write:设置响应内容\n> res.end: 结束本次请求\n\nconst http = require("http");// 引用http模块\n\n//创建一个响应请求服务 一旦有请求过来 函数就执行\nlet server = http.createServer(function(req,res) { // req请求 res响应\n\n  // 处理请求\n  let url = req.url // 请求路径 可以获取get请求的参数\n\n  let arr = []\n  // 监听请求来data post请求是分段请求的，因此需要监听数据\n  req.on("data",function(buffer){arr.push(buffer)}) // 监听数据，把每次请求的数据存起来\n  req.on("end",function(){\n    let  buffer = Buffer.concat(arr)\n    console.log(buffer.toString())\n  }) // 监听数据接收结束事件   并把二进制数据转换成字符串\n\n  // 设置响应\n  res.writeHead(200, {\'Content-Type\': \'text/plain\'}); // 状态码\n\n  res.write(url); \n  res.write("<h1>hello</h1>");\n  \n  res.end(); // 结束本次请求  结束后不能再发响应\n});\n\nserver.listen(8000);//监听等待客户端的连接\n\n\nTIP\n\n * res.writeHead与res.setHeader区别\n\n>  1. res.writeHead必须在res.end之前调用\n>  2. 如果两者同时存在（没必要），要先写res.setHeader，后写res.writeHead，且res.writeHead优先\n\n * 处理跨域问题Access-Control-Allow-Origin,\n\n>  1. res.setHeader("access-control-allow-origin","*") 允许全部\n>  2. res.writeHead(200, {"access-control-allow-origin","www.jaqi.com"})\n\n\n# 7.2.2 文件系统模块(fs)\n\n文件的读取修改创建 fs的属性\n\n> fs.readFile:读取文件（浪费服务器资源）\n> fs.readFileSync:同步读取文件\n> fs.writeFile:读取文件\n> fs.writeFileSync:同步读取文件\n> fs.createReadStream:流式操作（创建一个读取流）\n> fs.createWriteStream:流式操作（创建一个写入流）\n> pipe()流式操作（执行流，通过管道对文件进行操作）\n\nconst http = require("http");\nconst fs = require("fs");// 引用fs模块\n// 修改文件并读取\nlet server = http.createServer(function(req,res) {\n    fs.writeFileSync("./1.txt","新的内容",function(err){ // 1.txt文件写入新的内容\n      if(err){\n        console.log(err)\n      }\n    })\n    // 根据req.url动态读取文件\n    fs.readFile(`./${req.url}`,function(err,data){ // 第二个参数 data返回字符串、buffer：返回二进制数据\n      if(err){\n         res.write(JSON.stringify({error:404,msg:err}))\n      }else{\n        res.write(data); \n        res.end();\n      }\n    })\n});\n\nserver.listen(8000);\n\n\nfs.readFile浪费服务器内存、资源使用不均匀，推荐使用流式操作（读一个发一个）\n\n * 流式操作\n\nconst fs = require("fs");// 引用fs模块\n\nlet readFile = fs.createReadStream("a.txt") // 创建一个读取流\nlet writeFile = fs.createWriteStream("a_copy.txt") // 创建一个写入流\n\nreadFile.on("error",(err)=>{\n  console.log()\n})\n\nwriteFile.on("finish",()=>{\n  console.log("finish")\n})\n\nreadFile.pipe(writeFile) // 通过管道对文件进行操作\n\n\n\n# 7.2.4 文件压缩模块(zlib)\n\nconst fs = require("fs");// 引用fs模块\nconst zlib = require("zlib");// 引用zlib模块\n\nlet readFile = fs.createReadStream("a.txt") // 创建一个读取流\nlet GzipFile = zlib.createGzip() // 创建压缩流\nlet writeFile = fs.createWriteStream("a.txt.gz") // 创建一个写入流\n\n\nreadFile.pipe(GzipFile).pipe(writeFile) // 执行流 压缩文件并写入\n\n\n\n# 7.2.4 查询字符串模块(querystring)\n\nquerystring的属性\n\n> querystring.parse:默认根据&、=将字符串转成对象\n> querystring.stringify:默认根据&、=将对象转成字符串\n\nconst querystring = require("querystring");// 引用querystring模块\nlet obj = querystring.parse(\'foo=bar&baz=qux&baz=quux&corge\')\n// obj = { foo: \'bar\', baz: [\'qux\', \'quux\'], corge: \'\' }\nlet str = querystring.stringify(obj)\n// str = \'foo=bar&baz=qux&baz=quux&corge\'\n\n\n\n# 7.2.5 缓冲器(Buffer)\n\nBuffer的属性\n\n> Buffer.alloc:返回一个指定大小的Buffer实例\n> Buffer.from:根据传入的参数创建一个Buffer实例\n> Buffer.toJSON: 将Buffer转换为JSON对象\n> Buffer.toString编码转换\n> \n> > Buffer.toString(\'ascii\'):ASCII编码，仅支持7位\n> > Buffer.toString(\'Buffer.utf8\'): 多字节编码的Unicode\n> > Buffer.toString(\'Buffer.utf16le\'): 2或4个字节的Unicode\n> > Buffer.toString(\'Buffer.ucs2\'): utf16le的别名\n> > Buffer.toString(\'Buffer.base64\'): Base64编码\n> > Buffer.toString(\'Buffer.latin1\'): 一种把Buffer编码成一字节编码的字符串的方式\n> > Buffer.toString(\'Buffer.binary\'): latin1的别名\n> > Buffer.toString(\'Buffer.hex\'): 将每个字节编码为两个十六进制字符\n\nconst querystring = require("querystring");// 引用querystring模块\nlet obj = querystring.parse(\'foo=bar&baz=qux&baz=quux&corge\')\n// obj = { foo: \'bar\', baz: [\'qux\', \'quux\'], corge: \'\' }\nlet str = querystring.stringify(obj)\n// str = \'foo=bar&baz=qux&baz=quux&corge\'\n\n\n\n# 7.2.6 请求路径处理方法(url)\n\nurl的属性\n\n> url.parse:将一个url的字符串解析成对像\n> url.format:将一个url的对像解析成字符串\n> url.resolve:将一个url解析成"from/to"格式的字符串\n\nconst http = require("http");\nconst fs = require("url");// 引用url模块\n// 修改文件并读取\nlet server = http.createServer(function(req,res) {\n  url.parse(req.url)\n  res.write(data); \n  res.end();\n});\n\nserver.listen(8000);\n\n\n\n# 7.2.7 文件路径处理方法(path)与魔术变量(__dirname)\n\npath的属性\n\n> path.dirname:返回文件的目录，不包括文件\n> path.extname:返回文件的扩展名\n> path.basename:返回文件的文件名（包括扩展名）\n> path.resolve:分析并拼接路径\n\nconst path = require("path")\n\nlet pathUrl = "/a/b/c/1.html";\n\npath.dirname(pathUrl);// /a/b/c\n\npath.extname(pathUrl);// .html\n\npath.basename(pathUrl);// 1.html\n\n/*\n/root/a/b ->  /root/a/b\n../c  ->  /root/a/c\nd  ->  /root/a/c/d\n..  ->  /root/a/c\ne  ->  /root/a/c/e\n（.当前目录 .. 上级 ...上上级）\n*/\npath.resolve("/root/a/b","../c","d","..","e");\n\npath.resolve(__dirname,"www"); // 魔术变量将绝对路径替换成www\n\n\n\n# 7.2.8 断言(assert)\n\nassert的属性\n\n> assert:判断表达式正确与否\n> assert.equal:比较两个值相不相等，相当于==（不支持数组、json）\n> assert.deepEqual:比较两个表达式相不相等，相当于==\n> assert.deepStrictEqual:比较两个表达式相不相等，相当于===\n\nconst assert = require("assert");\n\nassert(10>19,"达式3") // 如果表达式错误则返回达式3\n\nassert.equal(1,1)// 比较两个值相不相等（不支持数组、json） \n\nassert.deepEqual(1,"1","达式3"); // 如果两个表达式不相等则返回表达式3，相当于==\n\nassert.deepStrictEqual（1,"1","达式3"） // 如果两个表达式不相等则返回表达式3，相当于===\n',normalizedContent:'# 7.2.1 创建服务器；响应请求(http)\n\n请求参数的属性\n\n> req.url:返回请求路径\n> req.method:返回请求方式\n> req.headers:返回请求头\n> req.on:添加请求的监听事件\n> \n> > req.on("data",callback)监听每次请求来的数据\n> > req.on("end",callback)监听数据接收结束事件\n> > req.on("error",callback)监听请求接收错误事件\n\n响应参数的属性\n\n> res.writehead:设置响应头（响应的的参数）\n> res.setheader:设置响应头（ 参数1：状态码，参数2：响应的的参数）\n> res.write:设置响应内容\n> res.end: 结束本次请求\n\nconst http = require("http");// 引用http模块\n\n//创建一个响应请求服务 一旦有请求过来 函数就执行\nlet server = http.createserver(function(req,res) { // req请求 res响应\n\n  // 处理请求\n  let url = req.url // 请求路径 可以获取get请求的参数\n\n  let arr = []\n  // 监听请求来data post请求是分段请求的，因此需要监听数据\n  req.on("data",function(buffer){arr.push(buffer)}) // 监听数据，把每次请求的数据存起来\n  req.on("end",function(){\n    let  buffer = buffer.concat(arr)\n    console.log(buffer.tostring())\n  }) // 监听数据接收结束事件   并把二进制数据转换成字符串\n\n  // 设置响应\n  res.writehead(200, {\'content-type\': \'text/plain\'}); // 状态码\n\n  res.write(url); \n  res.write("<h1>hello</h1>");\n  \n  res.end(); // 结束本次请求  结束后不能再发响应\n});\n\nserver.listen(8000);//监听等待客户端的连接\n\n\ntip\n\n * res.writehead与res.setheader区别\n\n>  1. res.writehead必须在res.end之前调用\n>  2. 如果两者同时存在（没必要），要先写res.setheader，后写res.writehead，且res.writehead优先\n\n * 处理跨域问题access-control-allow-origin,\n\n>  1. res.setheader("access-control-allow-origin","*") 允许全部\n>  2. res.writehead(200, {"access-control-allow-origin","www.jaqi.com"})\n\n\n# 7.2.2 文件系统模块(fs)\n\n文件的读取修改创建 fs的属性\n\n> fs.readfile:读取文件（浪费服务器资源）\n> fs.readfilesync:同步读取文件\n> fs.writefile:读取文件\n> fs.writefilesync:同步读取文件\n> fs.createreadstream:流式操作（创建一个读取流）\n> fs.createwritestream:流式操作（创建一个写入流）\n> pipe()流式操作（执行流，通过管道对文件进行操作）\n\nconst http = require("http");\nconst fs = require("fs");// 引用fs模块\n// 修改文件并读取\nlet server = http.createserver(function(req,res) {\n    fs.writefilesync("./1.txt","新的内容",function(err){ // 1.txt文件写入新的内容\n      if(err){\n        console.log(err)\n      }\n    })\n    // 根据req.url动态读取文件\n    fs.readfile(`./${req.url}`,function(err,data){ // 第二个参数 data返回字符串、buffer：返回二进制数据\n      if(err){\n         res.write(json.stringify({error:404,msg:err}))\n      }else{\n        res.write(data); \n        res.end();\n      }\n    })\n});\n\nserver.listen(8000);\n\n\nfs.readfile浪费服务器内存、资源使用不均匀，推荐使用流式操作（读一个发一个）\n\n * 流式操作\n\nconst fs = require("fs");// 引用fs模块\n\nlet readfile = fs.createreadstream("a.txt") // 创建一个读取流\nlet writefile = fs.createwritestream("a_copy.txt") // 创建一个写入流\n\nreadfile.on("error",(err)=>{\n  console.log()\n})\n\nwritefile.on("finish",()=>{\n  console.log("finish")\n})\n\nreadfile.pipe(writefile) // 通过管道对文件进行操作\n\n\n\n# 7.2.4 文件压缩模块(zlib)\n\nconst fs = require("fs");// 引用fs模块\nconst zlib = require("zlib");// 引用zlib模块\n\nlet readfile = fs.createreadstream("a.txt") // 创建一个读取流\nlet gzipfile = zlib.creategzip() // 创建压缩流\nlet writefile = fs.createwritestream("a.txt.gz") // 创建一个写入流\n\n\nreadfile.pipe(gzipfile).pipe(writefile) // 执行流 压缩文件并写入\n\n\n\n# 7.2.4 查询字符串模块(querystring)\n\nquerystring的属性\n\n> querystring.parse:默认根据&、=将字符串转成对象\n> querystring.stringify:默认根据&、=将对象转成字符串\n\nconst querystring = require("querystring");// 引用querystring模块\nlet obj = querystring.parse(\'foo=bar&baz=qux&baz=quux&corge\')\n// obj = { foo: \'bar\', baz: [\'qux\', \'quux\'], corge: \'\' }\nlet str = querystring.stringify(obj)\n// str = \'foo=bar&baz=qux&baz=quux&corge\'\n\n\n\n# 7.2.5 缓冲器(buffer)\n\nbuffer的属性\n\n> buffer.alloc:返回一个指定大小的buffer实例\n> buffer.from:根据传入的参数创建一个buffer实例\n> buffer.tojson: 将buffer转换为json对象\n> buffer.tostring编码转换\n> \n> > buffer.tostring(\'ascii\'):ascii编码，仅支持7位\n> > buffer.tostring(\'buffer.utf8\'): 多字节编码的unicode\n> > buffer.tostring(\'buffer.utf16le\'): 2或4个字节的unicode\n> > buffer.tostring(\'buffer.ucs2\'): utf16le的别名\n> > buffer.tostring(\'buffer.base64\'): base64编码\n> > buffer.tostring(\'buffer.latin1\'): 一种把buffer编码成一字节编码的字符串的方式\n> > buffer.tostring(\'buffer.binary\'): latin1的别名\n> > buffer.tostring(\'buffer.hex\'): 将每个字节编码为两个十六进制字符\n\nconst querystring = require("querystring");// 引用querystring模块\nlet obj = querystring.parse(\'foo=bar&baz=qux&baz=quux&corge\')\n// obj = { foo: \'bar\', baz: [\'qux\', \'quux\'], corge: \'\' }\nlet str = querystring.stringify(obj)\n// str = \'foo=bar&baz=qux&baz=quux&corge\'\n\n\n\n# 7.2.6 请求路径处理方法(url)\n\nurl的属性\n\n> url.parse:将一个url的字符串解析成对像\n> url.format:将一个url的对像解析成字符串\n> url.resolve:将一个url解析成"from/to"格式的字符串\n\nconst http = require("http");\nconst fs = require("url");// 引用url模块\n// 修改文件并读取\nlet server = http.createserver(function(req,res) {\n  url.parse(req.url)\n  res.write(data); \n  res.end();\n});\n\nserver.listen(8000);\n\n\n\n# 7.2.7 文件路径处理方法(path)与魔术变量(__dirname)\n\npath的属性\n\n> path.dirname:返回文件的目录，不包括文件\n> path.extname:返回文件的扩展名\n> path.basename:返回文件的文件名（包括扩展名）\n> path.resolve:分析并拼接路径\n\nconst path = require("path")\n\nlet pathurl = "/a/b/c/1.html";\n\npath.dirname(pathurl);// /a/b/c\n\npath.extname(pathurl);// .html\n\npath.basename(pathurl);// 1.html\n\n/*\n/root/a/b ->  /root/a/b\n../c  ->  /root/a/c\nd  ->  /root/a/c/d\n..  ->  /root/a/c\ne  ->  /root/a/c/e\n（.当前目录 .. 上级 ...上上级）\n*/\npath.resolve("/root/a/b","../c","d","..","e");\n\npath.resolve(__dirname,"www"); // 魔术变量将绝对路径替换成www\n\n\n\n# 7.2.8 断言(assert)\n\nassert的属性\n\n> assert:判断表达式正确与否\n> assert.equal:比较两个值相不相等，相当于==（不支持数组、json）\n> assert.deepequal:比较两个表达式相不相等，相当于==\n> assert.deepstrictequal:比较两个表达式相不相等，相当于===\n\nconst assert = require("assert");\n\nassert(10>19,"达式3") // 如果表达式错误则返回达式3\n\nassert.equal(1,1)// 比较两个值相不相等（不支持数组、json） \n\nassert.deepequal(1,"1","达式3"); // 如果两个表达式不相等则返回表达式3，相当于==\n\nassert.deepstrictequal（1,"1","达式3"） // 如果两个表达式不相等则返回表达式3，相当于===\n',charsets:{cjk:!0}},{title:"7.4.1 Express",frontmatter:{},regularPath:"/other/node/frame/",relativePath:"other/node/frame/README.md",key:"v-06eb3a7d",path:"/other/node/frame/",headers:[{level:2,title:"7.4.1 Express",slug:"_7-4-1-express",normalizedTitle:"7.4.1 express",charIndex:2},{level:2,title:"7.4.2 Koa",slug:"_7-4-2-koa",normalizedTitle:"7.4.2 koa",charIndex:1038},{level:2,title:"7.4.3 egg",slug:"_7-4-3-egg",normalizedTitle:"7.4.3 egg",charIndex:4641},{level:2,title:"7.4.4 nest",slug:"_7-4-4-nest",normalizedTitle:"7.4.4 nest",charIndex:4655}],headersStr:"7.4.1 Express 7.4.2 Koa 7.4.3 egg 7.4.4 nest",content:'# 7.4.1 Express\n\n安装：npm install express\n\nconst express = require(\'express\') // 引用express框架\nconst bodyParser = require(\'body-parser\') // 引用body-parser模块\nconst app = express() // 挂在框架\n // 处理get请求\napp.get(\'/\', function (req, res，next) {\n  res.send(res.query) // 发送数据到客服端,相当于于`res.write`和`res.end`的集合。\n})\n\n// 处理post请求\napp.use(bodyParser.json());  // 解析 application/json\napp.post(\'/\', function (req, res，next) {\n  res.send(req.bodyParser) // 发送数据到客服端,相当于于`res.write`和`res.end`的集合。\n})\n \napp.listen(3000)\n\n\n# 路由\n\nget(url,fn):处理get请求\npost(url,fn):处理post请求\nuse(url,fn):无论什么请求都处理\n回调函数fn的参数:\n\n> 请求参数的属性\n> \n> > res.query:获取query类型的参数\n\n> 响应参数的属性\n\n> > res.send:发送数据到客服端,相当于于res.write和res.end的集合\n\n> 回调函数的属性(next)\n\n# 系统中间件\n\n 1. express.static静态文件托管\n\napp.use(\'/\',express.static("./static/"))\n\n\n# 第三方中间件\n\n 1. body-parser:解析JSON、Raw、文本、URL-encoded格式的请求体\n\n> bodyParser.json():解析JSON格式\n> bodyParser.raw():解析二进制格式\n> bodyParser.text():解析文本格式\n> bodyParser.urlencoded():解析文本格式\n\n 2. multer解析multipart/form-data格式的请求体(上传文件)\n 3. cookie-parser\n 4. cookie-session\n\n\n# 7.4.2 Koa\n\nv1:Generator v2:Generator和async v3:Generator和async\n\n安装：npm install koa -S\n\nconst Koa = require("koa");\n\nlet server = new Koa() // 创建koa对象\nserver.listen(80);\n\n\nserver属性：\n\n> listen:监听端口\n> context:设置全局上下文。可以通过ctx调用\n\n# 路由中间件koa-router\n\nkoa不自带路由，需要单独安装koa-router\n\nrouter属性：\n\n> get(url,fn):处理get请求\n> post(url,fn):处理post请求\n> all(url,fn):无论什么请求都处理\n> use(url,fn):挂载中间件\n\nctx的属性：\n\n> body:响应内容\n> cookies:cookies\n> \n> > cookies.set:设置cookies cookies.get:获取cookies\n\n安装：npm install koa-router\n\nconst Koa = require("koa");\nconst Router = require("koa-router");\n\nlet server = new Koa()\nserver.listen(80);\n\nlet router = new Router(); // 创建router对象\nserver.use(router.routes() ) // 挂在router\n\nserver.keys = []; //秘钥\n\nrouter.get("/aa",(ctx,next)=>{\n   ctx.cookies.set("user","jaqi.l",{signed:true}); // 设置cookies,signed启动秘钥验证\n    ctx.body = "aaa"; // 设置响应内容\n})\n\n\n * 嵌套路由\n\nconst Koa = require("koa");\nconst Router = require("koa-router");\n\nlet server = new Koa()\nserver.listen(80);\n\nlet router = new Router();\n\nlet company = new Router();\ncompany.get("/:name",(ctx,next)=>{\n    console.log(ctx.params);\n    ctx.body = "我是公司"+ctx.params.name\n})\n\nlet admin = new Router();\nadmin.get("/query",(ctx,next)=>{\n    ctx.body = "我是管理员"+ctx.query.name\n})\n\nlet userRouter = new Router();\n\nuserRouter.use("/company",company.routes())\nuserRouter.use("/admin",admin.routes())\n\nrouter.use("/user",userRouter.routes())\n/*\n    /user/company/:name\n    /user/admin/:name\n*/\nserver.use(router.routes())\n\n\n# 文件解析中间件koa-better-body\n\n安装：npm install koa-better-body\n\nconst Koa = require("koa");\nconst body = require("koa-better-body");\n\nlet server = new Koa()\nserver.listen(80);\n\nserver.use(body({\n  uploadDir:"./upload" // 文件上传目录\n}))\n\nserver.use(async ctx=>{\n  ctx.request.fields\n});\n\n\n# 静态文件服务中间件koa-static\n\n安装：npm install koa-static\n\nconst Koa = require("koa");\nconst Router = require("koa-router");\nconst static = require("koa-static");\n\nlet server = new Koa();\nserver.listen(80);\n\nlet router = new Router();\n\nrouter.all(/(\\.css)$)/i,static("./static", {\n    maxage: 24*60*60*1000 // css文件缓存的过期时间\n}))\n\nserver.use(router.routes());\n\nserver.use(static("./static", {\n    index: "index.html",//默认读取的文件\n    maxage: 24*60*60*1000 // 文件缓存的过期时间\n}));\n\n\n# session服务中间件koa-session\n\n安装：npm install koa-session -S\n\nconst Koa = require("koa");\nconst Router = require("koa-router");\nconst session = require("koa-session");\n\nlet server = new Koa();\nserver.listen(80);\n\nlet router = new Router();\n\nserver.keys = []; //秘钥\n\nserver.use(session({\n  maxAge:20*60*1000,// 过期时间\n  renew:true // 自动续签\n},server));\n\nserver.use(async ctx=>{\n  if(ctx.session.view){\n    ctx.session.view = 0;\n  }\n  ctx.session.view++;\n  ctx.body = `欢迎第${ctx.session.view}次访问`\n})\n\n\n# mysql服务中间件mysql、co-mysql\n\n安装：npm install mysql co-mysql -S\n\nconst Koa = require("koa");\nconst mysql = require("mysql");\nconst co = require("co-mysql");\n\n// 创建一个与数据库的链接\nlet con = mysql.createdPool({\n  host: "jaqi.myDataBase.com",// 数据库地址\n  ports:"3306",\n  user: "jaqi", // 用户名\n  password: "123456", // 密码\n  database: "myDataBase" // 库名\n})\n\nlet server = new Koa();\nserver.listen(80);\n\n\n\n# 服务端渲染(ssr)中间件koa-ejs\n\n安装：npm install koa-ejs -S\n\nconst Koa = require("koa");\nconst render = require("koa-ejs");\nconst path = require("path");\n\nlet server = new Koa();\n\nrender(server,{\n  root:path.resolve(__dirname,"./template"),//模板文件的所在文件夹\n  layout:false, // 目标文件，false 自动在文件夹下找\n  viewExt:"ejs",// 模板的扩展名\n  cache:false,// 缓存\n  debug:false,// debug\n});\n\nserver.use(async ctx=>{\n  // 使用template目录下的index模板，并传递数据给模板渲染\n  await ctx.render("index",{  \n    name:"jaqi",\n    sex:"men"\n  })\n});\n\nserver.listen(80);\n\n\n\n# 7.4.3 egg\n\n\n# 7.4.4 nest',normalizedContent:'# 7.4.1 express\n\n安装：npm install express\n\nconst express = require(\'express\') // 引用express框架\nconst bodyparser = require(\'body-parser\') // 引用body-parser模块\nconst app = express() // 挂在框架\n // 处理get请求\napp.get(\'/\', function (req, res，next) {\n  res.send(res.query) // 发送数据到客服端,相当于于`res.write`和`res.end`的集合。\n})\n\n// 处理post请求\napp.use(bodyparser.json());  // 解析 application/json\napp.post(\'/\', function (req, res，next) {\n  res.send(req.bodyparser) // 发送数据到客服端,相当于于`res.write`和`res.end`的集合。\n})\n \napp.listen(3000)\n\n\n# 路由\n\nget(url,fn):处理get请求\npost(url,fn):处理post请求\nuse(url,fn):无论什么请求都处理\n回调函数fn的参数:\n\n> 请求参数的属性\n> \n> > res.query:获取query类型的参数\n\n> 响应参数的属性\n\n> > res.send:发送数据到客服端,相当于于res.write和res.end的集合\n\n> 回调函数的属性(next)\n\n# 系统中间件\n\n 1. express.static静态文件托管\n\napp.use(\'/\',express.static("./static/"))\n\n\n# 第三方中间件\n\n 1. body-parser:解析json、raw、文本、url-encoded格式的请求体\n\n> bodyparser.json():解析json格式\n> bodyparser.raw():解析二进制格式\n> bodyparser.text():解析文本格式\n> bodyparser.urlencoded():解析文本格式\n\n 2. multer解析multipart/form-data格式的请求体(上传文件)\n 3. cookie-parser\n 4. cookie-session\n\n\n# 7.4.2 koa\n\nv1:generator v2:generator和async v3:generator和async\n\n安装：npm install koa -s\n\nconst koa = require("koa");\n\nlet server = new koa() // 创建koa对象\nserver.listen(80);\n\n\nserver属性：\n\n> listen:监听端口\n> context:设置全局上下文。可以通过ctx调用\n\n# 路由中间件koa-router\n\nkoa不自带路由，需要单独安装koa-router\n\nrouter属性：\n\n> get(url,fn):处理get请求\n> post(url,fn):处理post请求\n> all(url,fn):无论什么请求都处理\n> use(url,fn):挂载中间件\n\nctx的属性：\n\n> body:响应内容\n> cookies:cookies\n> \n> > cookies.set:设置cookies cookies.get:获取cookies\n\n安装：npm install koa-router\n\nconst koa = require("koa");\nconst router = require("koa-router");\n\nlet server = new koa()\nserver.listen(80);\n\nlet router = new router(); // 创建router对象\nserver.use(router.routes() ) // 挂在router\n\nserver.keys = []; //秘钥\n\nrouter.get("/aa",(ctx,next)=>{\n   ctx.cookies.set("user","jaqi.l",{signed:true}); // 设置cookies,signed启动秘钥验证\n    ctx.body = "aaa"; // 设置响应内容\n})\n\n\n * 嵌套路由\n\nconst koa = require("koa");\nconst router = require("koa-router");\n\nlet server = new koa()\nserver.listen(80);\n\nlet router = new router();\n\nlet company = new router();\ncompany.get("/:name",(ctx,next)=>{\n    console.log(ctx.params);\n    ctx.body = "我是公司"+ctx.params.name\n})\n\nlet admin = new router();\nadmin.get("/query",(ctx,next)=>{\n    ctx.body = "我是管理员"+ctx.query.name\n})\n\nlet userrouter = new router();\n\nuserrouter.use("/company",company.routes())\nuserrouter.use("/admin",admin.routes())\n\nrouter.use("/user",userrouter.routes())\n/*\n    /user/company/:name\n    /user/admin/:name\n*/\nserver.use(router.routes())\n\n\n# 文件解析中间件koa-better-body\n\n安装：npm install koa-better-body\n\nconst koa = require("koa");\nconst body = require("koa-better-body");\n\nlet server = new koa()\nserver.listen(80);\n\nserver.use(body({\n  uploaddir:"./upload" // 文件上传目录\n}))\n\nserver.use(async ctx=>{\n  ctx.request.fields\n});\n\n\n# 静态文件服务中间件koa-static\n\n安装：npm install koa-static\n\nconst koa = require("koa");\nconst router = require("koa-router");\nconst static = require("koa-static");\n\nlet server = new koa();\nserver.listen(80);\n\nlet router = new router();\n\nrouter.all(/(\\.css)$)/i,static("./static", {\n    maxage: 24*60*60*1000 // css文件缓存的过期时间\n}))\n\nserver.use(router.routes());\n\nserver.use(static("./static", {\n    index: "index.html",//默认读取的文件\n    maxage: 24*60*60*1000 // 文件缓存的过期时间\n}));\n\n\n# session服务中间件koa-session\n\n安装：npm install koa-session -s\n\nconst koa = require("koa");\nconst router = require("koa-router");\nconst session = require("koa-session");\n\nlet server = new koa();\nserver.listen(80);\n\nlet router = new router();\n\nserver.keys = []; //秘钥\n\nserver.use(session({\n  maxage:20*60*1000,// 过期时间\n  renew:true // 自动续签\n},server));\n\nserver.use(async ctx=>{\n  if(ctx.session.view){\n    ctx.session.view = 0;\n  }\n  ctx.session.view++;\n  ctx.body = `欢迎第${ctx.session.view}次访问`\n})\n\n\n# mysql服务中间件mysql、co-mysql\n\n安装：npm install mysql co-mysql -s\n\nconst koa = require("koa");\nconst mysql = require("mysql");\nconst co = require("co-mysql");\n\n// 创建一个与数据库的链接\nlet con = mysql.createdpool({\n  host: "jaqi.mydatabase.com",// 数据库地址\n  ports:"3306",\n  user: "jaqi", // 用户名\n  password: "123456", // 密码\n  database: "mydatabase" // 库名\n})\n\nlet server = new koa();\nserver.listen(80);\n\n\n\n# 服务端渲染(ssr)中间件koa-ejs\n\n安装：npm install koa-ejs -s\n\nconst koa = require("koa");\nconst render = require("koa-ejs");\nconst path = require("path");\n\nlet server = new koa();\n\nrender(server,{\n  root:path.resolve(__dirname,"./template"),//模板文件的所在文件夹\n  layout:false, // 目标文件，false 自动在文件夹下找\n  viewext:"ejs",// 模板的扩展名\n  cache:false,// 缓存\n  debug:false,// debug\n});\n\nserver.use(async ctx=>{\n  // 使用template目录下的index模板，并传递数据给模板渲染\n  await ctx.render("index",{  \n    name:"jaqi",\n    sex:"men"\n  })\n});\n\nserver.listen(80);\n\n\n\n# 7.4.3 egg\n\n\n# 7.4.4 nest',charsets:{cjk:!0}},{title:"7.3.1 调用MySQL数据库(mysql)",frontmatter:{},regularPath:"/other/node/otherModules/",relativePath:"other/node/otherModules/README.md",key:"v-b58ef68a",path:"/other/node/otherModules/",headers:[{level:2,title:"7.3.1 调用MySQL数据库(mysql)",slug:"_7-3-1-调用mysql数据库-mysql",normalizedTitle:"7.3.1 调用mysql数据库(mysql)",charIndex:2},{level:2,title:"7.3.2 服务端渲染(ssr)模块",slug:"_7-3-2-服务端渲染-ssr-模块",normalizedTitle:"7.3.2 服务端渲染(ssr)模块",charIndex:808}],headersStr:"7.3.1 调用MySQL数据库(mysql) 7.3.2 服务端渲染(ssr)模块",content:'# 7.3.1 调用MySQL数据库(mysql)\n\n安装：npm install mysql -S\n\n方法： createConnection:创建一个与数据库的链接\ncreatePool:创建一个与数据库的链接池(与createConnection相同，用于处理多个链接的情况)\nquery:创建一个SQL语句\n\nconst mysql = require("mysql"); // 引入mysql模块 \n// 创建一个与数据库的链接\nlet db = mysql.createPool({\n    host: "jaqi.myDataBase.com",// 数据库地址\n    ports:"3306",\n    user: "jaqi", // 用户名\n    password: "123456", // 密码\n    database: "myDataBase" // 库名\n})\n// 执行SQL结构化查询语句\n// 插入\ndb.query("INSERT INTO myDataBase.student (name, psw) VALUES (\'张三\', \'654321\')",(err,data)=>{\n    if(err){\n        console.error(err);\n    }else{\n        console.log(data);\n    }\n})\n//查询\ndb.query(\'SELECT * FROM `myDataBase`.`student` WHERE id<=200\',(err,data)=>{\n    if(err){\n        console.error(err);\n    }else{\n        console.log(JSON.stringify(data));\n    }\n})\n\n\nMySQL详见8.2 MySQL\n\n\n# 7.3.2 服务端渲染(ssr)模块',normalizedContent:'# 7.3.1 调用mysql数据库(mysql)\n\n安装：npm install mysql -s\n\n方法： createconnection:创建一个与数据库的链接\ncreatepool:创建一个与数据库的链接池(与createconnection相同，用于处理多个链接的情况)\nquery:创建一个sql语句\n\nconst mysql = require("mysql"); // 引入mysql模块 \n// 创建一个与数据库的链接\nlet db = mysql.createpool({\n    host: "jaqi.mydatabase.com",// 数据库地址\n    ports:"3306",\n    user: "jaqi", // 用户名\n    password: "123456", // 密码\n    database: "mydatabase" // 库名\n})\n// 执行sql结构化查询语句\n// 插入\ndb.query("insert into mydatabase.student (name, psw) values (\'张三\', \'654321\')",(err,data)=>{\n    if(err){\n        console.error(err);\n    }else{\n        console.log(data);\n    }\n})\n//查询\ndb.query(\'select * from `mydatabase`.`student` where id<=200\',(err,data)=>{\n    if(err){\n        console.error(err);\n    }else{\n        console.log(json.stringify(data));\n    }\n})\n\n\nmysql详见8.2 mysql\n\n\n# 7.3.2 服务端渲染(ssr)模块',charsets:{cjk:!0}},{title:"7.5.1 node.js连续运行工具",frontmatter:{},regularPath:"/other/node/tools/",relativePath:"other/node/tools/README.md",key:"v-63591186",path:"/other/node/tools/",headers:[{level:2,title:"7.5.1 node.js连续运行工具",slug:"_7-5-1-node-js连续运行工具",normalizedTitle:"7.5.1 node.js连续运行工具",charIndex:2},{level:3,title:"forever",slug:"forever",normalizedTitle:"forever",charIndex:26},{level:3,title:"PM2（推荐使用）",slug:"pm2-推荐使用",normalizedTitle:"pm2（推荐使用）",charIndex:197}],headersStr:"7.5.1 node.js连续运行工具 forever PM2（推荐使用）",content:'# 7.5.1 node.js连续运行工具\n\n\n# forever\n\n安装：npm install forever -g\n\n启动：forever start server.js\n\n重启：forever restart server.js\n\n停止：forever stop server.js\n\n停止服务：forever stop all\n\n查看正在运行的服务：forever list\n\n\n# PM2（推荐使用）\n\n安装：npm install pm2 -g\n\n启动服务：pm2 start server.js\n\n> 启动4个server.js服务并进行自动进行负载均衡：pm2 start server.js -i 4\n\n> 启动server.js服务并命名为 "jaqi\'server"：pm2 start server.js --name="jaqi\'server"\n\n> 启动server.js服务,当文件变化时自动重启应用：pm2 start server.js --watch\n\n> 启bash服务：pm2 start server.sh\n\n查看所有启动的服务：pm2 list\n\n查看每个服务的资源占用情况：pm2 monit\n\n查看服务详细信息：pm2 monit server\n\n查看服务日志：pm2 logs server\n\n清空服务日志：pm2 flush server\n\n停止服务：pm2 stop server\n\n> 停止全部服务：pm2 stop all\n\n重启服务：pm2 restart server\n\n> 重启全部服务：pm2 restart all',normalizedContent:'# 7.5.1 node.js连续运行工具\n\n\n# forever\n\n安装：npm install forever -g\n\n启动：forever start server.js\n\n重启：forever restart server.js\n\n停止：forever stop server.js\n\n停止服务：forever stop all\n\n查看正在运行的服务：forever list\n\n\n# pm2（推荐使用）\n\n安装：npm install pm2 -g\n\n启动服务：pm2 start server.js\n\n> 启动4个server.js服务并进行自动进行负载均衡：pm2 start server.js -i 4\n\n> 启动server.js服务并命名为 "jaqi\'server"：pm2 start server.js --name="jaqi\'server"\n\n> 启动server.js服务,当文件变化时自动重启应用：pm2 start server.js --watch\n\n> 启bash服务：pm2 start server.sh\n\n查看所有启动的服务：pm2 list\n\n查看每个服务的资源占用情况：pm2 monit\n\n查看服务详细信息：pm2 monit server\n\n查看服务日志：pm2 logs server\n\n清空服务日志：pm2 flush server\n\n停止服务：pm2 stop server\n\n> 停止全部服务：pm2 stop all\n\n重启服务：pm2 restart server\n\n> 重启全部服务：pm2 restart all',charsets:{cjk:!0}},{title:"3.1 HTTP/1.1协议",frontmatter:{},regularPath:"/other/tcp/",relativePath:"other/tcp/README.md",key:"v-f519bb64",path:"/other/tcp/",headers:[{level:2,title:"3.1 HTTP/1.1协议",slug:"_3-1-http-1-1协议",normalizedTitle:"3.1 http/1.1协议",charIndex:2},{level:3,title:"http协议",slug:"http协议",normalizedTitle:"http协议",charIndex:21},{level:3,title:"基于ABNF语义定义的HTTP消息格式",slug:"基于abnf语义定义的http消息格式",normalizedTitle:"基于abnf语义定义的http消息格式",charIndex:113},{level:3,title:"浏览器发起http请求的过程",slug:"浏览器发起http请求的过程",normalizedTitle:"浏览器发起http请求的过程",charIndex:137},{level:3,title:"OSI模型与TCP/IP模型",slug:"osi模型与tcp-ip模型",normalizedTitle:"osi模型与tcp/ip模型",charIndex:158},{level:3,title:"web构架的关键属性：",slug:"web构架的关键属性",normalizedTitle:"web构架的关键属性：",charIndex:179},{level:3,title:"使用Chrome的Network面板分析HTTP报文",slug:"使用chrome的network面板分析http报文",normalizedTitle:"使用chrome的network面板分析http报文",charIndex:227},{level:3,title:"URI基本格式",slug:"uri基本格式",normalizedTitle:"uri基本格式",charIndex:1662},{level:3,title:"HTTP请求行",slug:"http请求行",normalizedTitle:"http请求行",charIndex:1787},{level:3,title:"HTTP响应行",slug:"http响应行",normalizedTitle:"http响应行",charIndex:2133},{level:3,title:"会话跟踪技术Cookie与Session",slug:"会话跟踪技术cookie与session",normalizedTitle:"会话跟踪技术cookie与session",charIndex:3342},{level:2,title:"3.2 WebSocket协议",slug:"_3-2-websocket协议",normalizedTitle:"3.2 websocket协议",charIndex:3969},{level:2,title:"3.3 HTTP/2协议",slug:"_3-3-http-2协议",normalizedTitle:"3.3 http/2协议",charIndex:3989},{level:2,title:"3.4 TLS/SSL协议",slug:"_3-4-tls-ssl协议",normalizedTitle:"3.4 tls/ssl协议",charIndex:4006},{level:2,title:"3.5 TCP协议",slug:"_3-5-tcp协议",normalizedTitle:"3.5 tcp协议",charIndex:4024},{level:2,title:"3.5 IP协议",slug:"_3-5-ip协议",normalizedTitle:"3.5 ip协议",charIndex:4038}],headersStr:"3.1 HTTP/1.1协议 http协议 基于ABNF语义定义的HTTP消息格式 浏览器发起http请求的过程 OSI模型与TCP/IP模型 web构架的关键属性： 使用Chrome的Network面板分析HTTP报文 URI基本格式 HTTP请求行 HTTP响应行 会话跟踪技术Cookie与Session 3.2 WebSocket协议 3.3 HTTP/2协议 3.4 TLS/SSL协议 3.5 TCP协议 3.5 IP协议",content:"# 3.1 HTTP/1.1协议\n\n\n# http协议\n\n一种无状态的，应用层的，以请求/应答方式运行的协议。它可以使用可扩展的语义和自描述消息格式。与基于网络的超文本信息系统灵活互动。（RFC723 2014.6）\n\n\n# 基于ABNF语义定义的HTTP消息格式\n\n\n# 浏览器发起http请求的过程\n\n\n\n\n# OSI模型与TCP/IP模型\n\n\n\n\n# web构架的关键属性：\n\n性能、可伸缩性、简单性、可见性、可移植性、可靠性、可修改性。\n\n\n# 使用Chrome的Network面板分析HTTP报文\n\n# Network面板构成：控制器、过滤器、概览、请求列表、概要\n\n 1. 控制器：\n\n> 抓包/停止抓包、清楚请求、跨页面加载请求（Preserve log）、屏幕截图（Capture screenshots）、重新执行XHR请求、停用浏览器缓存(Diaable cache)、手动清理缓存（cache）、手动清理缓存（cookie）、离线模式、模型网速、\n\n 2. 过滤器：\n\n>  * 根据类型过滤：XHR、JS、Img、Media、Font、Doc、WS(WebSocket)、Mainifest、Other\n>  * 多类型过滤：Ctrl/Command+单击根据多个类型过滤\n>  * 按照时间过滤：\n>  * 过滤BASE64的请求：Data URLs\n>  * 根据属性过滤filter：domain（指定域）、has-response-header（指定响应头）、is:running（websocker）、is:from-cache(缓存)、larger-than（资源大小）、method（请求类型）、mime-type（MIME资源类型）、status-code（状态码）、set-cookoe-name/domain/value（具有set-cookoe标头的域/名称/值）、scheme(具有https保护的)、mixed-content（显示所有混合内容的资源）\n\n 3. 概览：\n 4. 请求列表：\n\n> 请求列表排序：\n> \n> >  * 按照活动时间排序Waterfall：Start Time（第一个请求开始的）、Response Time（第一个开始下载的）、End Time（完成的第一个请求）、Total Duration（连接设置时间和请求、相应最快的请求）、Latency（等待最短响应时间的）\n> >  * 请求发起方式Initiator:Parser（html解析器发起的）、Redirect（HTTP重定向发起的）、Script（JS脚步发起的）、Other（用户点击、地址栏输入地址等）\n\n> 预览请求详情:\n> \n> >  * 头部Headers:\n> >  * cookie\n> >  * 预览响应正文Preview\n> >  * 查看响应正文Response\n> >  * 时间详情分布timing:Queueing（请求正在排队）、Stalled（请求被终止）、DNS Lookup（解析地址）、Proxy Negotiation（正在与代理服务器协商请求）、Requst sent（正在发送请求）、ServiceWorker Preparation（浏览器正在启动Service Worker ）、Request to ServiceWorker（浏览器正将请求发送到Service Worker） Waiting（浏览器正在等待响应的第一个字节）、Content Download（浏览器正在接收响应） Receiving Push（浏览器正在通过HTTP/2服务器推送接收此响应的数据）、 Reading Push（浏览器正在读取之前收到的本地数据）\n> >  * 请求的上下游:shift键+鼠标悬停\n\n> 查看请求的上下游:shift+鼠标悬停，红色下游、绿色上游\n\n 5. 概要：请求总数，总数据量，DOM加载时间，总加载时间：\n\n\n# URI基本格式\n\nURL统一资源定位符，URI统一资源标识符，URN统一资源名称。 URI的组成：scheme-user-informantion-host-port+query-fragment 为什么要进行URI编码：避免数据编码歧义。\n\n\n# HTTP请求行\n\nHTTP版本：0.9（只支持get方法）、1.0 （常用代理服务器例如nginx默认配置）1.1（1999年发布）、2.0(2015年发布) HTTP常见方法：\n\n> GET：主要的获取信息方法，幂等方法、  HEAD：类似于GET，但服务器不发送body，用以获取HEAD元数据，幂等方法  POST：常用于表单，和新增资源。  PUT：常用于更新资源，带条件时是幂等方法。  DELETE：删除资源，幂等方法。  CONNECT：建立tunnel隧道  OPTIONS：显示服务器对访问资源支持的方法，幂等方法。  TRACE：回显服务器收到的请求，用于定位问题。有延期风险。（nginx不支持） :::tips 幂等方法：调用一次和调用多次结果一致。 :::\n\n\n# HTTP响应行\n\nHTTP响应码：\n\n> * 1xx：请求已收到，需要进一步处理\n> \n> > 100：上传大文件前使用  101：协议升级使用  102：用于WebDAV请求、服务器已收到，需要很长一段时间完成。\n\n> * 2xx：成功处理的请求\n> \n> > 200：成功返回响应  201：有新资源在服务器端被创建  202：服务器接收并开始处理请求，单请求未处理完成。  203：告诉客户端代理服务器修改了原服务器的数据。  204：成功的执行了请求，但不响应包体。暗示客户端无需更新视图。  205：成功的执行了请求，但不响应包体。提示客户端需要更新视图。  206：range协议时返回部分响应内容时的响应码。  207：WebDev协议中以XML返回多个资源的状态。  208：WebDev协议中父集合的响应码\n\n> * 3xx：重定向,次数不超过5次\n> \n> > 300：告诉客户端自行选择访问方式  301：永久重定向  302：临时重定向  303：重定向到其他资源  304：缓存过期  307：  308：\n\n> * 4xx：客户端出现错误\n> \n> > 400：服务端认为客户端出现了错误，且不属于以下错误类型。。  401：用户认证信息不正确或缺失。  407：对需要经由代理的请求，认证信息未通过代理服务器。  403：没有权限  404：没有找到对应资源  410：没有找到对应资源，且知道资源永久性的找不到。  405：服务器不支持改请求方法。  406：对客户端指定的资源表述不存在。  408：服务器接收请求超时。  409：资源冲突。  411：请求中有包体，未携带Content-length头部，且不属于chunk类请求。  412：条件类请求，不满足时  413：包体超出最大长度  414：请求的URI超长  415：上传的文件类型不被服务器支持  416：无法提供range请求中指定的那段包体  417：对Expect请求头部期待的情况无法满足时的相应码  421：服务器认为请求不应该发给它  426：服务器拒绝基于http协议提供服务  428：用户请求中缺失了条件类头部  429：发送请求速率过快  431：请求的header头部大小超过限制  451：由于法律渊源资源不可以访问\n\n> * 5xx：服务端出现错误\n> \n> > 500：服务器内部出现错误，且不属于以下错误类型。  501：不支持实现请求所需要的功能。  502：代理服务器无法获取到合法请求。  503：服务器资源尚未准备好处理当前请求。  504：代理服务器无法及时的从上游获取相应。  505：请求使用的http协议版本不支持。  507：服务器没有足够的空间处理请求。  508：访问资源时检测到循环  511：代理服务器发现客户端需要进行身份验证才能获得网络访问权限。\n\n\n# 会话跟踪技术Cookie与Session\n\n# 会话跟踪技术：\n\n会话：从打开页面到关闭页面。 跟踪：客户端与服务器多次请求数据，时进行数据共享。\n\n# Cookie\n\n通过检查客服端上的“通行证”来确认客户身份。\n\nCookie的签发流程：客户端首次请求服务器，服务端返回一个Cookie通行证，当客户端携带Cookie通行证并再一次发送请求时，服务端检查Cookie来确认客户身份。\n\n# Session\n\n通过检查服务端上的“客户表”来确认客户身份。 Session的签发流程：客户端首次请求服务器，服务端会生成一个客户记录，当客户端再一次发送请求时，服务端检查当前客户是否在客户表中，来确认客户身份。\n\nCookie和Session的区别\n\n 1. 存储位置：Cookie存在客户端，Session存在服务端。\n\n 2. 存储容量：Cookie最大4KB且一个域名最多20个，Session没有上限。\n\n 3. 存储方式：Cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。Session能存储任何类型的数据。\n\n 4. 隐私策略：Cookie对客户端是可见的，因此不安全。\n\n 5. 效期：Cookie可以长期有效，Session关闭窗口即失效。\n\n 6. 浏览器：Cookie依赖浏览器的支持。\n\n 7. 跨域：Cookie支持跨域名访问（但是不能跨域操作），session不支持跨域名\n\n\n# 3.2 WebSocket协议\n\n\n# 3.3 HTTP/2协议\n\n\n# 3.4 TLS/SSL协议\n\n\n# 3.5 TCP协议\n\n\n# 3.5 IP协议\n\n::: tips 抓包工具：wireshark :::",normalizedContent:"# 3.1 http/1.1协议\n\n\n# http协议\n\n一种无状态的，应用层的，以请求/应答方式运行的协议。它可以使用可扩展的语义和自描述消息格式。与基于网络的超文本信息系统灵活互动。（rfc723 2014.6）\n\n\n# 基于abnf语义定义的http消息格式\n\n\n# 浏览器发起http请求的过程\n\n\n\n\n# osi模型与tcp/ip模型\n\n\n\n\n# web构架的关键属性：\n\n性能、可伸缩性、简单性、可见性、可移植性、可靠性、可修改性。\n\n\n# 使用chrome的network面板分析http报文\n\n# network面板构成：控制器、过滤器、概览、请求列表、概要\n\n 1. 控制器：\n\n> 抓包/停止抓包、清楚请求、跨页面加载请求（preserve log）、屏幕截图（capture screenshots）、重新执行xhr请求、停用浏览器缓存(diaable cache)、手动清理缓存（cache）、手动清理缓存（cookie）、离线模式、模型网速、\n\n 2. 过滤器：\n\n>  * 根据类型过滤：xhr、js、img、media、font、doc、ws(websocket)、mainifest、other\n>  * 多类型过滤：ctrl/command+单击根据多个类型过滤\n>  * 按照时间过滤：\n>  * 过滤base64的请求：data urls\n>  * 根据属性过滤filter：domain（指定域）、has-response-header（指定响应头）、is:running（websocker）、is:from-cache(缓存)、larger-than（资源大小）、method（请求类型）、mime-type（mime资源类型）、status-code（状态码）、set-cookoe-name/domain/value（具有set-cookoe标头的域/名称/值）、scheme(具有https保护的)、mixed-content（显示所有混合内容的资源）\n\n 3. 概览：\n 4. 请求列表：\n\n> 请求列表排序：\n> \n> >  * 按照活动时间排序waterfall：start time（第一个请求开始的）、response time（第一个开始下载的）、end time（完成的第一个请求）、total duration（连接设置时间和请求、相应最快的请求）、latency（等待最短响应时间的）\n> >  * 请求发起方式initiator:parser（html解析器发起的）、redirect（http重定向发起的）、script（js脚步发起的）、other（用户点击、地址栏输入地址等）\n\n> 预览请求详情:\n> \n> >  * 头部headers:\n> >  * cookie\n> >  * 预览响应正文preview\n> >  * 查看响应正文response\n> >  * 时间详情分布timing:queueing（请求正在排队）、stalled（请求被终止）、dns lookup（解析地址）、proxy negotiation（正在与代理服务器协商请求）、requst sent（正在发送请求）、serviceworker preparation（浏览器正在启动service worker ）、request to serviceworker（浏览器正将请求发送到service worker） waiting（浏览器正在等待响应的第一个字节）、content download（浏览器正在接收响应） receiving push（浏览器正在通过http/2服务器推送接收此响应的数据）、 reading push（浏览器正在读取之前收到的本地数据）\n> >  * 请求的上下游:shift键+鼠标悬停\n\n> 查看请求的上下游:shift+鼠标悬停，红色下游、绿色上游\n\n 5. 概要：请求总数，总数据量，dom加载时间，总加载时间：\n\n\n# uri基本格式\n\nurl统一资源定位符，uri统一资源标识符，urn统一资源名称。 uri的组成：scheme-user-informantion-host-port+query-fragment 为什么要进行uri编码：避免数据编码歧义。\n\n\n# http请求行\n\nhttp版本：0.9（只支持get方法）、1.0 （常用代理服务器例如nginx默认配置）1.1（1999年发布）、2.0(2015年发布) http常见方法：\n\n> get：主要的获取信息方法，幂等方法、  head：类似于get，但服务器不发送body，用以获取head元数据，幂等方法  post：常用于表单，和新增资源。  put：常用于更新资源，带条件时是幂等方法。  delete：删除资源，幂等方法。  connect：建立tunnel隧道  options：显示服务器对访问资源支持的方法，幂等方法。  trace：回显服务器收到的请求，用于定位问题。有延期风险。（nginx不支持） :::tips 幂等方法：调用一次和调用多次结果一致。 :::\n\n\n# http响应行\n\nhttp响应码：\n\n> * 1xx：请求已收到，需要进一步处理\n> \n> > 100：上传大文件前使用  101：协议升级使用  102：用于webdav请求、服务器已收到，需要很长一段时间完成。\n\n> * 2xx：成功处理的请求\n> \n> > 200：成功返回响应  201：有新资源在服务器端被创建  202：服务器接收并开始处理请求，单请求未处理完成。  203：告诉客户端代理服务器修改了原服务器的数据。  204：成功的执行了请求，但不响应包体。暗示客户端无需更新视图。  205：成功的执行了请求，但不响应包体。提示客户端需要更新视图。  206：range协议时返回部分响应内容时的响应码。  207：webdev协议中以xml返回多个资源的状态。  208：webdev协议中父集合的响应码\n\n> * 3xx：重定向,次数不超过5次\n> \n> > 300：告诉客户端自行选择访问方式  301：永久重定向  302：临时重定向  303：重定向到其他资源  304：缓存过期  307：  308：\n\n> * 4xx：客户端出现错误\n> \n> > 400：服务端认为客户端出现了错误，且不属于以下错误类型。。  401：用户认证信息不正确或缺失。  407：对需要经由代理的请求，认证信息未通过代理服务器。  403：没有权限  404：没有找到对应资源  410：没有找到对应资源，且知道资源永久性的找不到。  405：服务器不支持改请求方法。  406：对客户端指定的资源表述不存在。  408：服务器接收请求超时。  409：资源冲突。  411：请求中有包体，未携带content-length头部，且不属于chunk类请求。  412：条件类请求，不满足时  413：包体超出最大长度  414：请求的uri超长  415：上传的文件类型不被服务器支持  416：无法提供range请求中指定的那段包体  417：对expect请求头部期待的情况无法满足时的相应码  421：服务器认为请求不应该发给它  426：服务器拒绝基于http协议提供服务  428：用户请求中缺失了条件类头部  429：发送请求速率过快  431：请求的header头部大小超过限制  451：由于法律渊源资源不可以访问\n\n> * 5xx：服务端出现错误\n> \n> > 500：服务器内部出现错误，且不属于以下错误类型。  501：不支持实现请求所需要的功能。  502：代理服务器无法获取到合法请求。  503：服务器资源尚未准备好处理当前请求。  504：代理服务器无法及时的从上游获取相应。  505：请求使用的http协议版本不支持。  507：服务器没有足够的空间处理请求。  508：访问资源时检测到循环  511：代理服务器发现客户端需要进行身份验证才能获得网络访问权限。\n\n\n# 会话跟踪技术cookie与session\n\n# 会话跟踪技术：\n\n会话：从打开页面到关闭页面。 跟踪：客户端与服务器多次请求数据，时进行数据共享。\n\n# cookie\n\n通过检查客服端上的“通行证”来确认客户身份。\n\ncookie的签发流程：客户端首次请求服务器，服务端返回一个cookie通行证，当客户端携带cookie通行证并再一次发送请求时，服务端检查cookie来确认客户身份。\n\n# session\n\n通过检查服务端上的“客户表”来确认客户身份。 session的签发流程：客户端首次请求服务器，服务端会生成一个客户记录，当客户端再一次发送请求时，服务端检查当前客户是否在客户表中，来确认客户身份。\n\ncookie和session的区别\n\n 1. 存储位置：cookie存在客户端，session存在服务端。\n\n 2. 存储容量：cookie最大4kb且一个域名最多20个，session没有上限。\n\n 3. 存储方式：cookie中只能保管ascii字符串，并需要通过编码方式存储为unicode字符或者二进制数据。session能存储任何类型的数据。\n\n 4. 隐私策略：cookie对客户端是可见的，因此不安全。\n\n 5. 效期：cookie可以长期有效，session关闭窗口即失效。\n\n 6. 浏览器：cookie依赖浏览器的支持。\n\n 7. 跨域：cookie支持跨域名访问（但是不能跨域操作），session不支持跨域名\n\n\n# 3.2 websocket协议\n\n\n# 3.3 http/2协议\n\n\n# 3.4 tls/ssl协议\n\n\n# 3.5 tcp协议\n\n\n# 3.5 ip协议\n\n::: tips 抓包工具：wireshark :::",charsets:{cjk:!0}},{frontmatter:{},regularPath:"/other/node/introduction/",relativePath:"other/node/introduction/README.md",key:"v-b8a28a96",path:"/other/node/introduction/",headers:[{level:2,title:"7.1.1 安装：",slug:"_7-1-1-安装",normalizedTitle:"7.1.1 安装：",charIndex:188},{level:2,title:"7.1.2 卸载：",slug:"_7-1-2-卸载",normalizedTitle:"7.1.2 卸载：",charIndex:225},{level:2,title:"7.1.3 运行与使用",slug:"_7-1-3-运行与使用",normalizedTitle:"7.1.3 运行与使用",charIndex:1046},{level:2,title:"7.1.4 包管理工具(npm)",slug:"_7-1-4-包管理工具-npm",normalizedTitle:"7.1.4 包管理工具(npm)",charIndex:1128},{level:2,title:"7.1.5 使用nvm、nvmw安装并管理node.js",slug:"_7-1-5-使用nvm、nvmw安装并管理node-js",normalizedTitle:"7.1.5 使用nvm、nvmw安装并管理node.js",charIndex:3508},{level:2,title:"7.1.6 模块系统",slug:"_7-1-6-模块系统",normalizedTitle:"7.1.6 模块系统",charIndex:4167}],headersStr:"7.1.1 安装： 7.1.2 卸载： 7.1.3 运行与使用 7.1.4 包管理工具(npm) 7.1.5 使用nvm、nvmw安装并管理node.js 7.1.6 模块系统",content:'node.js是服务器端运行环境，让我们js可以在服务端环境运行,node.js不依赖第三方应用（Apache）,可以基于Api自己实现。\n\n * 优势：前端入手、性能高、利于与前端代码整合。\n * 劣势：安全和稳定性没有传统语言高。\n\nnode.js一般做中间层(更安全)：\n\n> 客户端--------\x3e服务器端客户端------\x3enode.js-----服务器\n\n\n# 7.1.1 安装：\n\n下载安装包双击安装即可。node.js官网\n\n\n# 7.1.2 卸载：\n\n * window:\n\n 1. 从卸载程序卸载程序和功能\n 2. C:\\Program Files (x86)\\Nodejs\n 3. C:\\Program Files\\Nodejs\n 4. C:\\Users\\{User}\\AppData\\Roaming\\npm（或%appdata%\\npm）\n 5. C:\\Users\\{User}\\AppData\\Roaming\\npm-cache（或%appdata%\\npm-cache）\n 6. 重启，检查环节变量是否还有node、npm\n\n * MacOS:\n\n 1. 按shift+command+G，打开前往文件夹的窗口，分别输入下列目录\n\n> /usr/local/lib，删除node和node_modules相关的文件和文件夹\n> /usr/local/include，删除node和 node_modules 相关的文件和文件夹 /usr/local/bin，删除node可执行文件\n\n 2. 如果使用brew安装的还需要执行brew uninstall node\n 3. 个人文件夹下面的所有的local、lib以及include文件夹，删除node和node_modules相关的文件和文件夹\n 4. 可能还需要如下指令\n\n> sudo rm /usr/local/bin/npm\n> sudo rm /usr/local/share/man/man1/node.1\n> sudo rm /usr/local/lib/dtrace/node.d\n> sudo rm -rf ~/.npm\n> sudo rm -rf ~/.node-gyp\n> sudo rm /opt/local/bin/node\n> sudo rm /opt/local/include/node\n> sudo rm -rf /opt/local/lib/node_modules\n\n\n# 7.1.3 运行与使用\n\n * node -v查看node版本\n\n * npm -v查看npm版本\n\n * node server.js运行谁就node谁\n\n\n# 7.1.4 包管理工具(npm)\n\nNPM是随同NodeJS一起安装的包管理工具。\n\n * npm init项目初始化（生成package.json文件）\n\n * npm init-y快速初始化（生成package.json文件）\n\n * npm install、npm i、 npm ci安装\n\n安装命令的修饰符\n\n-g:全局安装\n-D:安装开发依赖（devDependencies）\n-S:安装生产依赖（dependencies）\n\nnpm install、npm i与npm ci的区别\n\nnpm install:\n根据package文件安装依赖，根据package-lock确定版本，如果没有package-lock则生成package-lock\nnpm i:\n根据package文件安装依赖，同时依据^或~升级相关依赖，并更新package-lock文件，不会生成npm-debug.log文件，卸载时需要使用npm uninstall i命令。\nnpm ci:\n根据package文件安装依赖，根据package-lock确定版本没有则报错，不会更新依赖，也不会更新package-lock文件。\n\n * npm unistall卸载\n\n * npm install包 -registry=https:// 指定安装源安装\n\n * npm congif set registry http:// 修改安装源\n\n> npm install -g cnpm --registry=https://registry.npm.taobao.org全局安装cnpm\n\n * npm list查看当前项目安装的依赖的模块\n\n * npm list --global查看全局安装的依赖模块\n\n * npm update 包名更新包\n\n * npm view(v/info/show) 包查看包详情\n\n * npm –help帮助\n\n依赖配置文件package.json：\n\n{\n  "name": "jaqi.note",//项目名\n  "version": "0.1.0",//项目版本\n  "author":"jaqi.l"//作者\n  "private": true, //项目是否私有\n  "scripts": { \n// serve 模式配置\n// --open    在服务器启动时打开浏览器\n// --copy    在服务器启动时将 URL 复制到剪切版\n// --mode    指定环境模式 (默认值：development)\n// --host    指定 host (默认值：0.0.0.0)\n// --port    指定 port (默认值：8080)\n// --https   使用 https (默认值：false)\n// build 模式配置\n// --mode        指定环境模式 (默认值：production)\n// --dest        指定输出目录 (默认值：dist)\n// --modern      面向现代浏览器带自动回退地构建应用\n// --target      app | lib | wc | wc-async (默认值：app)\n// --name        库或 Web Components 模式下的名字 (默认值：package.json 中的 "name" 字段或入口文件名)\n// --no-clean    在构建项目之前不清除目标目录\n// --report      生成 report.html 以帮助分析包内容\n// --report-json 生成 report.json 以帮助分析包内容\n// --watch       监听文件变化\n   "serve": "vue-cli-service serve",\n    "build": "vue-cli-service build",\n    "lint": "vue-cli-service lint"\n  },\n  "dependencies": { // 生产依赖\n    "vue": "2.6.11",//使用2.6.11版本\n    "vue-template-compiler": "~2.6.11",//使用2.6.x版本\n    "vuex": "^3.2.0", //使用3.x.x版本\n    "jquery": "latest" //使用latest版本\n  },\n  "devDependencies": { // 开发依赖\n  },\n  "eslintConfig": { // ESLint 规则配置\n    "root": true,\n    "env": {\n      "node": true\n    },\n    "extends": [\n      "plugin:vue/essential",\n      "eslint:recommended"\n    ],\n    "parserOptions": {\n      "parser": "babel-eslint"\n    },\n    "rules": {\n      "no-debugger": "off",//debugger 错误提示\n      "no-console": "off", //console 错误提示\n\n    }\n  },\n  "browserslist": [ // 项目的目标浏览器范围\n    "> 1%",   // 兼容使用率大于1%的版本\n    "last 2 versions", // 兼容最近的2个版本\n    "not dead"\n  ]\n}\n\n\n\n# 7.1.5 使用nvm、nvmw安装并管理node.js\n\n# 安装：\n\n * window: nvmw镜像仓库\n\n 1. 下载最新的安装包。\n 2. 安装：安装的目录不能有中文和空格。\n 3. 修改安装源：打开根目录的settings.txt文件，最后面添加上下面的源地址\n\n> node_mirror: https://npm.taobao.org/mirrors/node/\n> npm_mirror: https://npm.taobao.org/mirrors/npm/\n\n * MacOS: nvm镜像地址\n\n 1. 复制最新的下载指令\n 2. 在终端执行复制的镜像下载指令：curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n# 卸载：\n\n * window:同node.js卸载一样\n\n * MacOS:\n\n 1. cd ~\n 2. rm -rf .nvm\n\n# 使用：\n\n * nvm list 列出已经安装的node版本，可以简写为nvm ls命令。\n\n * nvm on 启用node版本管理。\n\n * nvm off 禁用node版本，并不会卸载任何东西。\n\n * nvm uninstall version 卸载指定版本的node。\n\n * nvm install version 安装指定版本的node。\n\n * nvm use version 使用指定版本的node。\n\n\n# 7.1.6 模块系统\n\n一个js文件就是一个模块，通常放在node_modules文件夹中。\n\nnode.js使用CommonJS模块规范，CommonJS加载的是一个对象该对象只有在脚本运行完才会生成。\n\n * 模块分类：\n\n 1. 系统核心模块（http、fs、url...）\n 2. 第三方模块\n 3. 自定义模块\n\n * 模块的引用\n\nconst http = require("http");// 系统模块或第三方模块（node_modules下的模块）\nconst mod = require("./mod");// 自定义模块（引用时需要写相对路径）\n\n\n * 自定义模块的导出\n\n 1. 每个模块都有module对象\n 2. module对象有一个exports对象\n 3. 需要导出的成员需要挂载到module.exports对象中，exports是它的别名\n 4. 导出单个成员module.exports == xxx，不能使用别名的方式\n\n// 单个导出  \nmodule.exports.fn = fn \nmodule.exports = funciton fn(){}\n\n// 多个导出 接收时是一个对象\nexports.fn = fn\nexports.a = 10\nexports.b = 20\n\nmodule.exports:{fn,a:10,b:20}\n\n\n其他模块系统详见3.16.20 Module',normalizedContent:'node.js是服务器端运行环境，让我们js可以在服务端环境运行,node.js不依赖第三方应用（apache）,可以基于api自己实现。\n\n * 优势：前端入手、性能高、利于与前端代码整合。\n * 劣势：安全和稳定性没有传统语言高。\n\nnode.js一般做中间层(更安全)：\n\n> 客户端--------\x3e服务器端客户端------\x3enode.js-----服务器\n\n\n# 7.1.1 安装：\n\n下载安装包双击安装即可。node.js官网\n\n\n# 7.1.2 卸载：\n\n * window:\n\n 1. 从卸载程序卸载程序和功能\n 2. c:\\program files (x86)\\nodejs\n 3. c:\\program files\\nodejs\n 4. c:\\users\\{user}\\appdata\\roaming\\npm（或%appdata%\\npm）\n 5. c:\\users\\{user}\\appdata\\roaming\\npm-cache（或%appdata%\\npm-cache）\n 6. 重启，检查环节变量是否还有node、npm\n\n * macos:\n\n 1. 按shift+command+g，打开前往文件夹的窗口，分别输入下列目录\n\n> /usr/local/lib，删除node和node_modules相关的文件和文件夹\n> /usr/local/include，删除node和 node_modules 相关的文件和文件夹 /usr/local/bin，删除node可执行文件\n\n 2. 如果使用brew安装的还需要执行brew uninstall node\n 3. 个人文件夹下面的所有的local、lib以及include文件夹，删除node和node_modules相关的文件和文件夹\n 4. 可能还需要如下指令\n\n> sudo rm /usr/local/bin/npm\n> sudo rm /usr/local/share/man/man1/node.1\n> sudo rm /usr/local/lib/dtrace/node.d\n> sudo rm -rf ~/.npm\n> sudo rm -rf ~/.node-gyp\n> sudo rm /opt/local/bin/node\n> sudo rm /opt/local/include/node\n> sudo rm -rf /opt/local/lib/node_modules\n\n\n# 7.1.3 运行与使用\n\n * node -v查看node版本\n\n * npm -v查看npm版本\n\n * node server.js运行谁就node谁\n\n\n# 7.1.4 包管理工具(npm)\n\nnpm是随同nodejs一起安装的包管理工具。\n\n * npm init项目初始化（生成package.json文件）\n\n * npm init-y快速初始化（生成package.json文件）\n\n * npm install、npm i、 npm ci安装\n\n安装命令的修饰符\n\n-g:全局安装\n-d:安装开发依赖（devdependencies）\n-s:安装生产依赖（dependencies）\n\nnpm install、npm i与npm ci的区别\n\nnpm install:\n根据package文件安装依赖，根据package-lock确定版本，如果没有package-lock则生成package-lock\nnpm i:\n根据package文件安装依赖，同时依据^或~升级相关依赖，并更新package-lock文件，不会生成npm-debug.log文件，卸载时需要使用npm uninstall i命令。\nnpm ci:\n根据package文件安装依赖，根据package-lock确定版本没有则报错，不会更新依赖，也不会更新package-lock文件。\n\n * npm unistall卸载\n\n * npm install包 -registry=https:// 指定安装源安装\n\n * npm congif set registry http:// 修改安装源\n\n> npm install -g cnpm --registry=https://registry.npm.taobao.org全局安装cnpm\n\n * npm list查看当前项目安装的依赖的模块\n\n * npm list --global查看全局安装的依赖模块\n\n * npm update 包名更新包\n\n * npm view(v/info/show) 包查看包详情\n\n * npm –help帮助\n\n依赖配置文件package.json：\n\n{\n  "name": "jaqi.note",//项目名\n  "version": "0.1.0",//项目版本\n  "author":"jaqi.l"//作者\n  "private": true, //项目是否私有\n  "scripts": { \n// serve 模式配置\n// --open    在服务器启动时打开浏览器\n// --copy    在服务器启动时将 url 复制到剪切版\n// --mode    指定环境模式 (默认值：development)\n// --host    指定 host (默认值：0.0.0.0)\n// --port    指定 port (默认值：8080)\n// --https   使用 https (默认值：false)\n// build 模式配置\n// --mode        指定环境模式 (默认值：production)\n// --dest        指定输出目录 (默认值：dist)\n// --modern      面向现代浏览器带自动回退地构建应用\n// --target      app | lib | wc | wc-async (默认值：app)\n// --name        库或 web components 模式下的名字 (默认值：package.json 中的 "name" 字段或入口文件名)\n// --no-clean    在构建项目之前不清除目标目录\n// --report      生成 report.html 以帮助分析包内容\n// --report-json 生成 report.json 以帮助分析包内容\n// --watch       监听文件变化\n   "serve": "vue-cli-service serve",\n    "build": "vue-cli-service build",\n    "lint": "vue-cli-service lint"\n  },\n  "dependencies": { // 生产依赖\n    "vue": "2.6.11",//使用2.6.11版本\n    "vue-template-compiler": "~2.6.11",//使用2.6.x版本\n    "vuex": "^3.2.0", //使用3.x.x版本\n    "jquery": "latest" //使用latest版本\n  },\n  "devdependencies": { // 开发依赖\n  },\n  "eslintconfig": { // eslint 规则配置\n    "root": true,\n    "env": {\n      "node": true\n    },\n    "extends": [\n      "plugin:vue/essential",\n      "eslint:recommended"\n    ],\n    "parseroptions": {\n      "parser": "babel-eslint"\n    },\n    "rules": {\n      "no-debugger": "off",//debugger 错误提示\n      "no-console": "off", //console 错误提示\n\n    }\n  },\n  "browserslist": [ // 项目的目标浏览器范围\n    "> 1%",   // 兼容使用率大于1%的版本\n    "last 2 versions", // 兼容最近的2个版本\n    "not dead"\n  ]\n}\n\n\n\n# 7.1.5 使用nvm、nvmw安装并管理node.js\n\n# 安装：\n\n * window: nvmw镜像仓库\n\n 1. 下载最新的安装包。\n 2. 安装：安装的目录不能有中文和空格。\n 3. 修改安装源：打开根目录的settings.txt文件，最后面添加上下面的源地址\n\n> node_mirror: https://npm.taobao.org/mirrors/node/\n> npm_mirror: https://npm.taobao.org/mirrors/npm/\n\n * macos: nvm镜像地址\n\n 1. 复制最新的下载指令\n 2. 在终端执行复制的镜像下载指令：curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n# 卸载：\n\n * window:同node.js卸载一样\n\n * macos:\n\n 1. cd ~\n 2. rm -rf .nvm\n\n# 使用：\n\n * nvm list 列出已经安装的node版本，可以简写为nvm ls命令。\n\n * nvm on 启用node版本管理。\n\n * nvm off 禁用node版本，并不会卸载任何东西。\n\n * nvm uninstall version 卸载指定版本的node。\n\n * nvm install version 安装指定版本的node。\n\n * nvm use version 使用指定版本的node。\n\n\n# 7.1.6 模块系统\n\n一个js文件就是一个模块，通常放在node_modules文件夹中。\n\nnode.js使用commonjs模块规范，commonjs加载的是一个对象该对象只有在脚本运行完才会生成。\n\n * 模块分类：\n\n 1. 系统核心模块（http、fs、url...）\n 2. 第三方模块\n 3. 自定义模块\n\n * 模块的引用\n\nconst http = require("http");// 系统模块或第三方模块（node_modules下的模块）\nconst mod = require("./mod");// 自定义模块（引用时需要写相对路径）\n\n\n * 自定义模块的导出\n\n 1. 每个模块都有module对象\n 2. module对象有一个exports对象\n 3. 需要导出的成员需要挂载到module.exports对象中，exports是它的别名\n 4. 导出单个成员module.exports == xxx，不能使用别名的方式\n\n// 单个导出  \nmodule.exports.fn = fn \nmodule.exports = funciton fn(){}\n\n// 多个导出 接收时是一个对象\nexports.fn = fn\nexports.a = 10\nexports.b = 20\n\nmodule.exports:{fn,a:10,b:20}\n\n\n其他模块系统详见3.16.20 module',charsets:{cjk:!0}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"开发文档",items:[{text:"前端",link:"/frontend/"},{text:"其他",link:"/other/"}]},{text:"jaqi.page",link:"https://jaqi.gitee.io"},{text:"jaqi.csnd",link:"https://blog.csdn.net/ljq547152849"}],sidebar:{"/frontend/":[{title:"前端",path:"/frontend/",collapsable:!0,sidebarDepth:2,children:[{title:"第一章：HTML5",path:"/frontend/html/introduction/",collapsable:!0,sidebarDepth:2,children:[{title:"1.1 HTML概述",path:"/frontend/html/introduction/",collapsable:!0,sidebarDepth:2},{title:"1.2 html元素",path:"/frontend/html/element/",collapsable:!0,sidebarDepth:0,children:["/frontend/html/element/text/","/frontend/html/element/link/","/frontend/html/element/img/","/frontend/html/element/list/","/frontend/html/element/table/","/frontend/html/element/form/","/frontend/html/element/media/","/frontend/html/element/layout/","/frontend/html/element/canvas/","/frontend/html/element/SVG/","/frontend/html/element/iframe/"]},{title:"1.3 html属性",path:"/frontend/html/attribute/",collapsable:!0,sidebarDepth:0},{title:"1.4 HTML5大纲算法",path:"/frontend/html/outliner/",collapsable:!0,sidebarDepth:0}]},{title:"第二章：CSS",path:"/frontend/css/introduction/",collapsable:!0,sidebarDepth:2,children:[{title:"2.1 CSS概述",path:"/frontend/css/introduction/",collapsable:!0,sidebarDepth:0},{title:"2.2 CSS选择器",path:"/frontend/css/selector/",collapsable:!0,sidebarDepth:0},{title:"2.3 CSS属性",path:"/frontend/css/attribute/",collapsable:!0,sidebarDepth:2},{title:"2.4 CSS盒模型",path:"/frontend/css/box/",collapsable:!0,sidebarDepth:2},{title:"2.5 CSS定位",path:"/frontend/css/location/",collapsable:!0,sidebarDepth:2},{title:"2.6 CSS布局",path:"/frontend/css/layout/",collapsable:!0,sidebarDepth:2},{title:"2.7 CSS动画",path:"/frontend/css/animation/",collapsable:!0,sidebarDepth:2},{title:"2.8 CSS雪碧图",path:"/frontend/css/sprite/",collapsable:!0,sidebarDepth:2},{title:"2.9 CSS函数与预编译器",path:"/frontend/css/function/",collapsable:!0,sidebarDepth:2}]},{title:"第三章：JavaScript",path:"/frontend/javascript/var/",collapsable:!0,sidebarDepth:2,children:[{title:"3.1 变量",path:"/frontend/javascript/var/",collapsable:!0,sidebarDepth:0},{title:"3.2 数据类型",path:"/frontend/javascript/datatype/",collapsable:!0,sidebarDepth:0},{title:"3.3 运算符",path:"/frontend/javascript/symbol/",collapsable:!0,sidebarDepth:2},{title:"3.4 控制语句",path:"/frontend/javascript/control/",collapsable:!0,sidebarDepth:2},{title:"3.5 函数",path:"/frontend/javascript/function/",collapsable:!0,sidebarDepth:2},{title:"3.6 对象",path:"/frontend/javascript/object/",collapsable:!0,sidebarDepth:2},{title:"3.7 日期和时间对象",path:"/frontend/javascript/date/",collapsable:!0,sidebarDepth:2},{title:"3.8 Math对象",path:"/frontend/javascript/math/",collapsable:!0,sidebarDepth:2},{title:"3.9 字符串对象",path:"/frontend/javascript/string/",collapsable:!0,sidebarDepth:2},{title:"3.10 BOM",path:"/frontend/javascript/BOM/",collapsable:!0,sidebarDepth:2},{title:"3.11 DOM",path:"/frontend/javascript/DOM/",collapsable:!0,sidebarDepth:2},{title:"3.12 事件",path:"/frontend/javascript/event/",collapsable:!0,sidebarDepth:2},{title:"3.13 正则",path:"/frontend/javascript/reg/",collapsable:!0,sidebarDepth:2},{title:"3.14 同步与异步",path:"/frontend/javascript/sync&asyn/",collapsable:!0,sidebarDepth:2},{title:"3.15 面向对象编程",path:"/frontend/javascript/oop/",collapsable:!0,sidebarDepth:2},{title:"3.16 ECMAScript",path:"/frontend/javascript/ECMAScript/",collapsable:!0,sidebarDepth:2},{title:"3.17 TypeScript",path:"/frontend/javascript/TypeScript/",collapsable:!0,sidebarDepth:2}]},{title:"第四章：jQuery",path:"/frontend/jquery/",collapsable:!0,sidebarDepth:2},{title:"第五章：ajax",path:"/frontend/ajax/",collapsable:!0,sidebarDepth:2},{title:"第六章：vue.js",path:"/frontend/vue/introduction/",collapsable:!0,sidebarDepth:2,children:[{title:"6.1 基本介绍",path:"/frontend/vue/introduction/",collapsable:!0,sidebarDepth:2},{title:"6.2 指令系统",path:"/frontend/vue/control/",collapsable:!0,sidebarDepth:2},{title:"6.3 组件系统",path:"/frontend/vue/component/",collapsable:!0,sidebarDepth:2},{title:"6.4 过滤器",path:"/frontend/vue/filter/",collapsable:!0,sidebarDepth:2},{title:"6.5 插槽",path:"/frontend/vue/slot/",collapsable:!0,sidebarDepth:2},{title:"6.6 methods/watch/computed",path:"/frontend/vue/methods/",collapsable:!0,sidebarDepth:2},{title:"6.7 生命周期",path:"/frontend/vue/lifecycle/",collapsable:!0,sidebarDepth:2},{title:"6.8 Vue Router",path:"/frontend/vue/router/",collapsable:!0,sidebarDepth:2},{title:"6.9 异步",path:"/frontend/vue/async/",collapsable:!0,sidebarDepth:2},{title:"6.10 过渡与动画",path:"/frontend/vue/transitions/",collapsable:!0,sidebarDepth:2},{title:"6.11 Api",path:"/frontend/vue/api/",collapsable:!0,sidebarDepth:2},{title:"6.12 axios",path:"/frontend/vue/axios/",collapsable:!0,sidebarDepth:2},{title:"6.13 Vue/Cli",path:"/frontend/vue/vuecli/",collapsable:!0,sidebarDepth:2},{title:"6.14 vuex",path:"/frontend/vue/vuex/",collapsable:!0,sidebarDepth:2},{title:"6.14 vue源码",path:"http://caibaojian.com/vue-design/"}]},{title:"第七章：webpack",path:"/frontend/webpack/",collapsable:!0,sidebarDepth:2},{title:"第八章：小程序",path:"/frontend/miniprogram/",collapsable:!0,sidebarDepth:2},{title:"第九章：TypeScript",path:"/frontend/TypeScript/",collapsable:!0,sidebarDepth:2}]}],"/other/":[{title:"其它",path:"/other/",collapsable:!0,sidebarDepth:2,children:[{title:"第一章：Linux",path:"/other/linux/",collapsable:!0,sidebarDepth:2},{title:"第二章：Nginx",path:"/other/nginx/",collapsable:!0,sidebarDepth:2},{title:"第三章：web协议",path:"/other/tcp/",collapsable:!0,sidebarDepth:2},{title:"第四章：SEO",path:"/other/SEO/",collapsable:!0,sidebarDepth:2},{title:"第五章：Git",path:"/other/git/",collapsable:!0,sidebarDepth:2},{title:"第六章：FreeMarker",path:"/other/FreeMarker/",collapsable:!0,sidebarDepth:2},{title:"第七章：node.js",path:"/other/node/introduction/",collapsable:!0,sidebarDepth:2,children:[{title:"7.1 node.js概述",path:"/other/node/introduction/",collapsable:!0,sidebarDepth:2},{title:"7.2 系统核心模块",path:"/other/node/modules/",collapsable:!0,sidebarDepth:2},{title:"7.3 第三方模块",path:"/other/node/otherModules/",collapsable:!0,sidebarDepth:2},{title:"7.4 node.js 框架",path:"/other/node/frame/",collapsable:!0,sidebarDepth:2},{title:"7.5 node.js 工具",path:"/other/node/tools/",collapsable:!0,sidebarDepth:2}]},{title:"第八章：数据库",path:"/other/database/",collapsable:!0,sidebarDepth:2},{title:"第九章：Docker",path:"/other/docker/",collapsable:!0,sidebarDepth:2}]}]}}};t(304);Ao.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,460))})),Ao.component("CodeGroup",(function(){return Promise.all([t.e(0),t.e(5)]).then(t.bind(null,381))})),Ao.component("CodeBlock",(function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,382))}));t(305);var dl=[{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{}],pl=[];function ml(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(177);function fl(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function hl(n,e,t){return e&&fl(n.prototype,e),t&&fl(n,t),n}t(168);t(159);function vl(n,e){return(vl=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}t(160);function gl(n){return(gl=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}var bl=t(165),xl=t.n(bl);function yl(n,e){return!e||"object"!==xl()(e)&&"function"!=typeof e?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):e}function wl(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=gl(n);if(e){var o=gl(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return yl(this,t)}}var kl=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&vl(n,e)}(t,n);var e=wl(t);function t(){return ml(this,t),e.apply(this,arguments)}return t}(function(){function n(){ml(this,n),this.store=new Ao({data:{state:{}}})}return hl(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){Ao.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(kl.prototype,{getPageAsyncComponent:Vi,getLayoutAsyncComponent:Hi,getAsyncComponent:Bi,getVueComponent:Ui});var jl={install:function(n){var e=new kl;n.$vuepress=e,n.prototype.$vuepress=e}};function _l(n){n.beforeEach((function(e,t,r){if(Tl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var o=e.path.replace(/\/$/,"")+".html";Tl(n,o)?r(o):r()}else r();else{var a=e.path+"/",i=e.path+".html";Tl(n,i)?r(i):Tl(n,a)?r(a):r()}}))}function Tl(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var Sl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Wi("pageKey",e),Ao.component(e)||Ao.component(e,Vi(e)),Ao.component(e)?n(e):n("")}},Il={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},zl={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},El=(t(307),t(308),Object(ll.a)(zl,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function Cl(){return(Cl=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,o,a;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:ul.routerBase||ul.base,_l(r=new _i({base:t,mode:"history",fallback:!1,routes:cl,scrollBehavior:function(n,e,t){return t||(n.hash?!Ao.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),o={},n.prev=4,n.next=7,Promise.all(dl.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Ao,options:o,router:r,siteData:ul,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return a=new Ao(Object.assign(o,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},pl.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:a,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Ao.config.productionTip=!1,Ao.use(_i),Ao.use(jl),Ao.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ao;Ti(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),o=new r,a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),i={};return Object.keys(a).reduce((function(n,e){return e.startsWith("$")&&(n[e]=a[e].get),n}),i),{computed:i}}((function(n){return function(){function e(){ml(this,e)}return hl(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var o in r)"/"===o?e=r[o]:0===this.$page.path.indexOf(o)&&(n=r[o]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),ul)),Ao.component("Content",Sl),Ao.component("ContentSlotsDistributor",Il),Ao.component("OutboundLink",El),Ao.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Ao.component("Layout",Hi("Layout")),Ao.component("NotFound",Hi("NotFound")),Ao.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.8.2",hash:"99c395d5"},function(n){return Cl.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);